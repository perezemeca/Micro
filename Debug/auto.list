
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800b184  0800b184  0001b184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b284  0800b284  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b284  0800b284  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b284  0800b284  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b28c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  2000017c  0800b408  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017ec  0800b408  000217ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e551  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d43  00000000  00000000  0003e6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00042440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00043b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc01  00000000  00000000  000450a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf19  00000000  00000000  00060ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000970bf  00000000  00000000  0007dbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114c79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006074  00000000  00000000  00114ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b16c 	.word	0x0800b16c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800b16c 	.word	0x0800b16c

0800014c <InitEsp>:
		error=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
	}
/***********************************************************************************/
}

void InitEsp(_Rx *RXUSART1){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(RXUSART1->state){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	7a1b      	ldrb	r3, [r3, #8]
 8000158:	2b05      	cmp	r3, #5
 800015a:	d83b      	bhi.n	80001d4 <InitEsp+0x88>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <InitEsp+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	08000195 	.word	0x08000195
 8000170:	080001a5 	.word	0x080001a5
 8000174:	080001b5 	.word	0x080001b5
 8000178:	080001c5 	.word	0x080001c5
		case 0:
//			PutStrOnTx(&TXUSART1,AT); //Envio comando AT para ver si responde el ESP
//			//PutStrOnTx(&TXUSB,AT);    // Depuracion por USB
			Count500ms = 5;
 800017c:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <InitEsp+0x9c>)
 800017e:	2205      	movs	r2, #5
 8000180:	801a      	strh	r2, [r3, #0]
		break;
 8000182:	e027      	b.n	80001d4 <InitEsp+0x88>

		case 1:
			PutStrOnTx(&TXUSART1,CWMODE); //Envio comando CWMODE
 8000184:	4919      	ldr	r1, [pc, #100]	; (80001ec <InitEsp+0xa0>)
 8000186:	481a      	ldr	r0, [pc, #104]	; (80001f0 <InitEsp+0xa4>)
 8000188:	f000 fd32 	bl	8000bf0 <PutStrOnTx>
			//PutStrOnTx(&TXUSB,CWMODE);    // Depuracion por USB
			Count500ms = 5;
 800018c:	4b16      	ldr	r3, [pc, #88]	; (80001e8 <InitEsp+0x9c>)
 800018e:	2205      	movs	r2, #5
 8000190:	801a      	strh	r2, [r3, #0]
		break;
 8000192:	e01f      	b.n	80001d4 <InitEsp+0x88>

		case 2:
			PutStrOnTx(&TXUSART1,CWJAP_); //Envio comando CWJAP con los datos de la red
 8000194:	4917      	ldr	r1, [pc, #92]	; (80001f4 <InitEsp+0xa8>)
 8000196:	4816      	ldr	r0, [pc, #88]	; (80001f0 <InitEsp+0xa4>)
 8000198:	f000 fd2a 	bl	8000bf0 <PutStrOnTx>
			//PutStrOnTx(&TXUSB,CWJAP_);    // Depuracion por USB
			Count3000ms = 30;
 800019c:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <InitEsp+0xac>)
 800019e:	221e      	movs	r2, #30
 80001a0:	801a      	strh	r2, [r3, #0]
		break;
 80001a2:	e017      	b.n	80001d4 <InitEsp+0x88>

		case 3:
			PutStrOnTx(&TXUSART1,CIFSR);
 80001a4:	4915      	ldr	r1, [pc, #84]	; (80001fc <InitEsp+0xb0>)
 80001a6:	4812      	ldr	r0, [pc, #72]	; (80001f0 <InitEsp+0xa4>)
 80001a8:	f000 fd22 	bl	8000bf0 <PutStrOnTx>
			//PutStrOnTx(&TXUSB,CIFSR);    // Depuracion por USB
			Count500ms = 5;
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <InitEsp+0x9c>)
 80001ae:	2205      	movs	r2, #5
 80001b0:	801a      	strh	r2, [r3, #0]
		break;
 80001b2:	e00f      	b.n	80001d4 <InitEsp+0x88>

		case 4:
			PutStrOnTx(&TXUSART1,CIPMUX);
 80001b4:	4912      	ldr	r1, [pc, #72]	; (8000200 <InitEsp+0xb4>)
 80001b6:	480e      	ldr	r0, [pc, #56]	; (80001f0 <InitEsp+0xa4>)
 80001b8:	f000 fd1a 	bl	8000bf0 <PutStrOnTx>
			//PutStrOnTx(&TXUSB,CIPMUX);    // Depuracion por USB
			Count500ms = 5;
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <InitEsp+0x9c>)
 80001be:	2205      	movs	r2, #5
 80001c0:	801a      	strh	r2, [r3, #0]
		break;
 80001c2:	e007      	b.n	80001d4 <InitEsp+0x88>

		case 5:
			PutStrOnTx(&TXUSART1,CIPSTART);
 80001c4:	490f      	ldr	r1, [pc, #60]	; (8000204 <InitEsp+0xb8>)
 80001c6:	480a      	ldr	r0, [pc, #40]	; (80001f0 <InitEsp+0xa4>)
 80001c8:	f000 fd12 	bl	8000bf0 <PutStrOnTx>
			//PutStrOnTx(&TXUSB,CIPSTART);    // Depuracion por USB
			Count3000ms = 30;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <InitEsp+0xac>)
 80001ce:	221e      	movs	r2, #30
 80001d0:	801a      	strh	r2, [r3, #0]
		break;
 80001d2:	bf00      	nop
	}
	ESPReadyToRecyb = 1;
 80001d4:	4a0c      	ldr	r2, [pc, #48]	; (8000208 <InitEsp+0xbc>)
 80001d6:	7813      	ldrb	r3, [r2, #0]
 80001d8:	f043 0320 	orr.w	r3, r3, #32
 80001dc:	7013      	strb	r3, [r2, #0]
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	200005a8 	.word	0x200005a8
 80001ec:	0800b25c 	.word	0x0800b25c
 80001f0:	20000c24 	.word	0x20000c24
 80001f4:	0800b1dc 	.word	0x0800b1dc
 80001f8:	200003c0 	.word	0x200003c0
 80001fc:	0800b204 	.word	0x0800b204
 8000200:	0800b210 	.word	0x0800b210
 8000204:	0800b220 	.word	0x0800b220
 8000208:	20000790 	.word	0x20000790

0800020c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
/***************** Contadores para control del flujo de tiempo ********************/
/*
 * Instancia cada 1ms
 *
 */
	if(htim->Instance == TIM4){
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d137      	bne.n	800028e <HAL_TIM_PeriodElapsedCallback+0x82>
		Count100ms--;
 800021e:	4b27      	ldr	r3, [pc, #156]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	b29b      	uxth	r3, r3
 8000224:	3b01      	subs	r3, #1
 8000226:	b29a      	uxth	r2, r3
 8000228:	4b24      	ldr	r3, [pc, #144]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800022a:	801a      	strh	r2, [r3, #0]

		if(!Count100ms){
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	b29b      	uxth	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d105      	bne.n	8000242 <HAL_TIM_PeriodElapsedCallback+0x36>
			Count100ms = 100;
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000238:	2264      	movs	r2, #100	; 0x64
 800023a:	801a      	strh	r2, [r3, #0]
			On100ms = 1;
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800023e:	2201      	movs	r2, #1
 8000240:	801a      	strh	r2, [r3, #0]
		}
		if(Count100ms % 10 == 0){
 8000242:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	b29a      	uxth	r2, r3
 8000248:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800024a:	fba3 1302 	umull	r1, r3, r3, r2
 800024e:	08d9      	lsrs	r1, r3, #3
 8000250:	460b      	mov	r3, r1
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	440b      	add	r3, r1
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	1ad3      	subs	r3, r2, r3
 800025a:	b29b      	uxth	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d102      	bne.n	8000266 <HAL_TIM_PeriodElapsedCallback+0x5a>
			On10ms = 1;
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000262:	2201      	movs	r2, #1
 8000264:	801a      	strh	r2, [r3, #0]
		}

		if(RXUSB.header) {
 8000266:	4b19      	ldr	r3, [pc, #100]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000268:	79db      	ldrb	r3, [r3, #7]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00e      	beq.n	800028e <HAL_TIM_PeriodElapsedCallback+0x82>
			RXUSB.timeout--;
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000272:	7bdb      	ldrb	r3, [r3, #15]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	3b01      	subs	r3, #1
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800027c:	73da      	strb	r2, [r3, #15]
			if(!RXUSB.timeout)
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000280:	7bdb      	ldrb	r3, [r3, #15]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <HAL_TIM_PeriodElapsedCallback+0x82>
				RXUSB.header = 0;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800028a:	2200      	movs	r2, #0
 800028c:	71da      	strb	r2, [r3, #7]
/************************* Incio lectura analogica por DMA *************************/
/*
 * Instancia cada 500us
 *
 */
	if(htim->Instance == TIM3){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d10a      	bne.n	80002ae <HAL_TIM_PeriodElapsedCallback+0xa2>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	011b      	lsls	r3, r3, #4
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80002a2:	4413      	add	r3, r2
 80002a4:	2208      	movs	r2, #8
 80002a6:	4619      	mov	r1, r3
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80002aa:	f001 fd8b 	bl	8001dc4 <HAL_ADC_Start_DMA>
	}
/***********************************************************************************/

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40000800 	.word	0x40000800
 80002bc:	20000af4 	.word	0x20000af4
 80002c0:	2000047a 	.word	0x2000047a
 80002c4:	cccccccd 	.word	0xcccccccd
 80002c8:	20000648 	.word	0x20000648
 80002cc:	20000c10 	.word	0x20000c10
 80002d0:	40000400 	.word	0x40000400
 80002d4:	20000605 	.word	0x20000605
 80002d8:	200007e0 	.word	0x200007e0
 80002dc:	20000618 	.word	0x20000618

080002e0 <HAL_UART_RxCpltCallback>:
	//ESPReadyToRecyb = 0;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <HAL_UART_RxCpltCallback+0x40>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d111      	bne.n	8000316 <HAL_UART_RxCpltCallback+0x36>
		RXUSART1.iw++;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <HAL_UART_RxCpltCallback+0x44>)
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	3301      	adds	r3, #1
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <HAL_UART_RxCpltCallback+0x44>)
 80002fe:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <HAL_UART_RxCpltCallback+0x44>)
 8000302:	791b      	ldrb	r3, [r3, #4]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <HAL_UART_RxCpltCallback+0x48>)
 800030a:	4413      	add	r3, r2
 800030c:	2201      	movs	r2, #1
 800030e:	4619      	mov	r1, r3
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <HAL_UART_RxCpltCallback+0x4c>)
 8000312:	f006 f83e 	bl	8006392 <HAL_UART_Receive_IT>
	}
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40013800 	.word	0x40013800
 8000324:	20000410 	.word	0x20000410
 8000328:	200009e4 	.word	0x200009e4
 800032c:	2000074c 	.word	0x2000074c

08000330 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	volatile uint8_t c;
/********************* Media movil de las 3 primeras lecturas **********************/
	if(FirtScan){
 8000338:	4b99      	ldr	r3, [pc, #612]	; (80005a0 <HAL_ADC_ConvCpltCallback+0x270>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d063      	beq.n	8000408 <HAL_ADC_ConvCpltCallback+0xd8>
		switch(iAdc){
 8000340:	4b98      	ldr	r3, [pc, #608]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b01      	cmp	r3, #1
 8000348:	d002      	beq.n	8000350 <HAL_ADC_ConvCpltCallback+0x20>
 800034a:	2b02      	cmp	r3, #2
 800034c:	d028      	beq.n	80003a0 <HAL_ADC_ConvCpltCallback+0x70>
				}
				FirtScan = 0;
			break;

			default:
			break;
 800034e:	e112      	b.n	8000576 <HAL_ADC_ConvCpltCallback+0x246>
				for(c=0;c<8;c++){
 8000350:	2300      	movs	r3, #0
 8000352:	73fb      	strb	r3, [r7, #15]
 8000354:	e01f      	b.n	8000396 <HAL_ADC_ConvCpltCallback+0x66>
					bufADC[1][c]=(bufADC[0][c]+bufADC[1][c]) / 2 ;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	461a      	mov	r2, r3
 800035c:	4b92      	ldr	r3, [pc, #584]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 800035e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000362:	b29b      	uxth	r3, r3
 8000364:	4619      	mov	r1, r3
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4a8f      	ldr	r2, [pc, #572]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 800036c:	3308      	adds	r3, #8
 800036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000372:	b29b      	uxth	r3, r3
 8000374:	440b      	add	r3, r1
 8000376:	0fda      	lsrs	r2, r3, #31
 8000378:	4413      	add	r3, r2
 800037a:	105b      	asrs	r3, r3, #1
 800037c:	461a      	mov	r2, r3
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	b291      	uxth	r1, r2
 8000384:	4a88      	ldr	r2, [pc, #544]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000386:	3308      	adds	r3, #8
 8000388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	3301      	adds	r3, #1
 8000392:	b2db      	uxtb	r3, r3
 8000394:	73fb      	strb	r3, [r7, #15]
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b07      	cmp	r3, #7
 800039c:	d9db      	bls.n	8000356 <HAL_ADC_ConvCpltCallback+0x26>
			break;
 800039e:	e0ea      	b.n	8000576 <HAL_ADC_ConvCpltCallback+0x246>
				for(c=0;c<8;c++){
 80003a0:	2300      	movs	r3, #0
 80003a2:	73fb      	strb	r3, [r7, #15]
 80003a4:	e028      	b.n	80003f8 <HAL_ADC_ConvCpltCallback+0xc8>
					bufADC[2][c]=(bufADC[0][c]+bufADC[1][c]+bufADC[2][c]) / 3;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b7e      	ldr	r3, [pc, #504]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80003ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	4619      	mov	r1, r3
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4a7b      	ldr	r2, [pc, #492]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80003bc:	3308      	adds	r3, #8
 80003be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	440b      	add	r3, r1
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	4977      	ldr	r1, [pc, #476]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80003cc:	3210      	adds	r2, #16
 80003ce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80003d2:	b292      	uxth	r2, r2
 80003d4:	4413      	add	r3, r2
 80003d6:	4a75      	ldr	r2, [pc, #468]	; (80005ac <HAL_ADC_ConvCpltCallback+0x27c>)
 80003d8:	fb82 1203 	smull	r1, r2, r2, r3
 80003dc:	17db      	asrs	r3, r3, #31
 80003de:	1ad2      	subs	r2, r2, r3
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	b291      	uxth	r1, r2
 80003e6:	4a70      	ldr	r2, [pc, #448]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80003e8:	3310      	adds	r3, #16
 80003ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	3301      	adds	r3, #1
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d9d2      	bls.n	80003a6 <HAL_ADC_ConvCpltCallback+0x76>
				FirtScan = 0;
 8000400:	4b67      	ldr	r3, [pc, #412]	; (80005a0 <HAL_ADC_ConvCpltCallback+0x270>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
			break;
 8000406:	e0b6      	b.n	8000576 <HAL_ADC_ConvCpltCallback+0x246>
	}

/***********************************************************************************/
/********************* Media movil de las siguientes lecturas **********************/
	else{
		if(iAdc >= 0 && iAdc <= 1){
 8000408:	4b66      	ldr	r3, [pc, #408]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4b65      	ldr	r3, [pc, #404]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b01      	cmp	r3, #1
 8000414:	d869      	bhi.n	80004ea <HAL_ADC_ConvCpltCallback+0x1ba>
			// Cruce por 0 y 1 donde se toman dos valores anteriores para hacer la media
			switch(iAdc){
 8000416:	4b63      	ldr	r3, [pc, #396]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <HAL_ADC_ConvCpltCallback+0xf6>
 8000420:	2b01      	cmp	r3, #1
 8000422:	d030      	beq.n	8000486 <HAL_ADC_ConvCpltCallback+0x156>
 8000424:	e0a7      	b.n	8000576 <HAL_ADC_ConvCpltCallback+0x246>
				case 0:
					for(c = 0; c<8; c++){
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
 800042a:	e027      	b.n	800047c <HAL_ADC_ConvCpltCallback+0x14c>
						bufADC[0][c]=( bufADC[0][c]+bufADC[31][c]+bufADC[30][c]) / 3 ;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000434:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000438:	b29b      	uxth	r3, r3
 800043a:	4619      	mov	r1, r3
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4a59      	ldr	r2, [pc, #356]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000442:	33f8      	adds	r3, #248	; 0xf8
 8000444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000448:	b29b      	uxth	r3, r3
 800044a:	440b      	add	r3, r1
 800044c:	7bfa      	ldrb	r2, [r7, #15]
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	4955      	ldr	r1, [pc, #340]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000452:	32f0      	adds	r2, #240	; 0xf0
 8000454:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000458:	b292      	uxth	r2, r2
 800045a:	4413      	add	r3, r2
 800045c:	4a53      	ldr	r2, [pc, #332]	; (80005ac <HAL_ADC_ConvCpltCallback+0x27c>)
 800045e:	fb82 1203 	smull	r1, r2, r2, r3
 8000462:	17db      	asrs	r3, r3, #31
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	7bfa      	ldrb	r2, [r7, #15]
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	b299      	uxth	r1, r3
 800046c:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 800046e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					for(c = 0; c<8; c++){
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	3301      	adds	r3, #1
 8000478:	b2db      	uxtb	r3, r3
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b07      	cmp	r3, #7
 8000482:	d9d3      	bls.n	800042c <HAL_ADC_ConvCpltCallback+0xfc>
					}
				break;
 8000484:	e030      	b.n	80004e8 <HAL_ADC_ConvCpltCallback+0x1b8>
				case 1:
					for(c = 0; c<8; c++){
 8000486:	2300      	movs	r3, #0
 8000488:	73fb      	strb	r3, [r7, #15]
 800048a:	e028      	b.n	80004de <HAL_ADC_ConvCpltCallback+0x1ae>
						bufADC[1][c]=(bufADC[0][c]+bufADC[1][c]+bufADC[31][c]) / 3;
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000494:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000498:	b29b      	uxth	r3, r3
 800049a:	4619      	mov	r1, r3
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4a41      	ldr	r2, [pc, #260]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80004a2:	3308      	adds	r3, #8
 80004a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	440b      	add	r3, r1
 80004ac:	7bfa      	ldrb	r2, [r7, #15]
 80004ae:	b2d2      	uxtb	r2, r2
 80004b0:	493d      	ldr	r1, [pc, #244]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80004b2:	32f8      	adds	r2, #248	; 0xf8
 80004b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80004b8:	b292      	uxth	r2, r2
 80004ba:	4413      	add	r3, r2
 80004bc:	4a3b      	ldr	r2, [pc, #236]	; (80005ac <HAL_ADC_ConvCpltCallback+0x27c>)
 80004be:	fb82 1203 	smull	r1, r2, r2, r3
 80004c2:	17db      	asrs	r3, r3, #31
 80004c4:	1ad2      	subs	r2, r2, r3
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	b291      	uxth	r1, r2
 80004cc:	4a36      	ldr	r2, [pc, #216]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80004ce:	3308      	adds	r3, #8
 80004d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(c = 0; c<8; c++){
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	3301      	adds	r3, #1
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	73fb      	strb	r3, [r7, #15]
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b07      	cmp	r3, #7
 80004e4:	d9d2      	bls.n	800048c <HAL_ADC_ConvCpltCallback+0x15c>
					}
				break;
 80004e6:	bf00      	nop
			switch(iAdc){
 80004e8:	e045      	b.n	8000576 <HAL_ADC_ConvCpltCallback+0x246>
			}
		}
		else{
			// Cálculo comprendido entre bufADC[2] y bufADC[31]
			for(c = 0; c<8; c++){
 80004ea:	2300      	movs	r3, #0
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	e03e      	b.n	800056e <HAL_ADC_ConvCpltCallback+0x23e>
				bufADC[iAdc][c] = (bufADC[iAdc-2][c] + bufADC[iAdc-1][c] + bufADC[iAdc][c])/3;
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	3b02      	subs	r3, #2
 80004f8:	7bfa      	ldrb	r2, [r7, #15]
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a2a      	ldr	r2, [pc, #168]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	440b      	add	r3, r1
 8000504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000508:	b29b      	uxth	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	3b01      	subs	r3, #1
 8000514:	7bfa      	ldrb	r2, [r7, #15]
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	4610      	mov	r0, r2
 800051a:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4403      	add	r3, r0
 8000520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000524:	b29b      	uxth	r3, r3
 8000526:	440b      	add	r3, r1
 8000528:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	7bf9      	ldrb	r1, [r7, #15]
 8000530:	b2c9      	uxtb	r1, r1
 8000532:	4608      	mov	r0, r1
 8000534:	491c      	ldr	r1, [pc, #112]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000536:	00d2      	lsls	r2, r2, #3
 8000538:	4402      	add	r2, r0
 800053a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800053e:	b292      	uxth	r2, r2
 8000540:	4413      	add	r3, r2
 8000542:	4a1a      	ldr	r2, [pc, #104]	; (80005ac <HAL_ADC_ConvCpltCallback+0x27c>)
 8000544:	fb82 1203 	smull	r1, r2, r2, r3
 8000548:	17db      	asrs	r3, r3, #31
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	7bf9      	ldrb	r1, [r7, #15]
 8000554:	b2c9      	uxtb	r1, r1
 8000556:	4608      	mov	r0, r1
 8000558:	b291      	uxth	r1, r2
 800055a:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x278>)
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4403      	add	r3, r0
 8000560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(c = 0; c<8; c++){
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	3301      	adds	r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b07      	cmp	r3, #7
 8000574:	d9bc      	bls.n	80004f0 <HAL_ADC_ConvCpltCallback+0x1c0>
			}
		}
	}
/***********************************************************************************/
	// Incrento indice del buffer
	iAdc++;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000582:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b20      	cmp	r3, #32
 800058c:	d102      	bne.n	8000594 <HAL_ADC_ConvCpltCallback+0x264>
		iAdc = 0;
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
	}
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000198 	.word	0x20000198
 80005a4:	20000605 	.word	0x20000605
 80005a8:	200007e0 	.word	0x200007e0
 80005ac:	55555556 	.word	0x55555556

080005b0 <MyCallBackOnUSBData>:

void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e010      	b.n	80005e2 <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	441a      	add	r2, r3
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MyCallBackOnUSBData+0x48>)
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	1c59      	adds	r1, r3, #1
 80005ce:	b2c8      	uxtb	r0, r1
 80005d0:	4909      	ldr	r1, [pc, #36]	; (80005f8 <MyCallBackOnUSBData+0x48>)
 80005d2:	7108      	strb	r0, [r1, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	7812      	ldrb	r2, [r2, #0]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MyCallBackOnUSBData+0x4c>)
 80005da:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d3ea      	bcc.n	80005c0 <MyCallBackOnUSBData+0x10>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000c10 	.word	0x20000c10
 80005fc:	200004a4 	.word	0x200004a4

08000600 <DecodeHeader>:

    return aux;
}

void DecodeHeader(_Rx *RX)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 800060e:	e0e3      	b.n	80007d8 <DecodeHeader+0x1d8>
        switch(RX->header) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	79db      	ldrb	r3, [r3, #7]
 8000614:	2b06      	cmp	r3, #6
 8000616:	f200 80c2 	bhi.w	800079e <DecodeHeader+0x19e>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <DecodeHeader+0x20>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	0800063d 	.word	0x0800063d
 8000624:	0800065d 	.word	0x0800065d
 8000628:	08000689 	.word	0x08000689
 800062c:	080006b5 	.word	0x080006b5
 8000630:	080006e1 	.word	0x080006e1
 8000634:	080006f9 	.word	0x080006f9
 8000638:	0800074f 	.word	0x0800074f
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7952      	ldrb	r2, [r2, #5]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b55      	cmp	r3, #85	; 0x55
 800064a:	f040 80ac 	bne.w	80007a6 <DecodeHeader+0x1a6>
                    RX->header = 1;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2205      	movs	r2, #5
 8000658:	73da      	strb	r2, [r3, #15]
                }
                break;
 800065a:	e0a4      	b.n	80007a6 <DecodeHeader+0x1a6>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7952      	ldrb	r2, [r2, #5]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b4e      	cmp	r3, #78	; 0x4e
 800066a:	d103      	bne.n	8000674 <DecodeHeader+0x74>
                    RX->header = 2;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2202      	movs	r2, #2
 8000670:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000672:	e09b      	b.n	80007ac <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	795b      	ldrb	r3, [r3, #5]
 800067e:	3b01      	subs	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	715a      	strb	r2, [r3, #5]
                break;
 8000686:	e091      	b.n	80007ac <DecodeHeader+0x1ac>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7952      	ldrb	r2, [r2, #5]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b45      	cmp	r3, #69	; 0x45
 8000696:	d103      	bne.n	80006a0 <DecodeHeader+0xa0>
                    RX->header = 3;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2203      	movs	r2, #3
 800069c:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 800069e:	e085      	b.n	80007ac <DecodeHeader+0x1ac>
                    RX->header = 0;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	795b      	ldrb	r3, [r3, #5]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	715a      	strb	r2, [r3, #5]
                break;
 80006b2:	e07b      	b.n	80007ac <DecodeHeader+0x1ac>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7952      	ldrb	r2, [r2, #5]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b52      	cmp	r3, #82	; 0x52
 80006c2:	d103      	bne.n	80006cc <DecodeHeader+0xcc>
                    RX->header = 4;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2204      	movs	r2, #4
 80006c8:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 80006ca:	e06f      	b.n	80007ac <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	795b      	ldrb	r3, [r3, #5]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	715a      	strb	r2, [r3, #5]
                break;
 80006de:	e065      	b.n	80007ac <DecodeHeader+0x1ac>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7952      	ldrb	r2, [r2, #5]
 80006e8:	4413      	add	r3, r2
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2205      	movs	r2, #5
 80006f4:	71da      	strb	r2, [r3, #7]
                break;
 80006f6:	e059      	b.n	80007ac <DecodeHeader+0x1ac>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	7952      	ldrb	r2, [r2, #5]
 8000700:	4413      	add	r3, r2
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b3a      	cmp	r3, #58	; 0x3a
 8000706:	d118      	bne.n	800073a <DecodeHeader+0x13a>
                    RX->header = 6;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2206      	movs	r2, #6
 800070c:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	795b      	ldrb	r3, [r3, #5]
 8000712:	3301      	adds	r3, #1
 8000714:	b2da      	uxtb	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	735a      	strb	r2, [r3, #13]
                    RX->iData &= RX->maskSize;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7b5a      	ldrb	r2, [r3, #13]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7b9b      	ldrb	r3, [r3, #14]
 8000722:	4013      	ands	r3, r2
 8000724:	b2da      	uxtb	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	735a      	strb	r2, [r3, #13]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7adb      	ldrb	r3, [r3, #11]
 800072e:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000738:	e038      	b.n	80007ac <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	3b01      	subs	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	715a      	strb	r2, [r3, #5]
                break;
 800074c:	e02e      	b.n	80007ac <DecodeHeader+0x1ac>
            case 6:
                RX->nbytes--;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7adb      	ldrb	r3, [r3, #11]
 8000752:	3b01      	subs	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7adb      	ldrb	r3, [r3, #11]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a5a      	ldrb	r2, [r3, #9]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	7949      	ldrb	r1, [r1, #5]
 800076e:	440b      	add	r3, r1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4053      	eors	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	725a      	strb	r2, [r3, #9]
                    RX->header = 0 ;
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                    }
                }
                break;
 800077a:	e016      	b.n	80007aa <DecodeHeader+0x1aa>
                    RX->header = 0 ;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7a5a      	ldrb	r2, [r3, #9]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	7949      	ldrb	r1, [r1, #5]
 800078e:	440b      	add	r3, r1
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d109      	bne.n	80007aa <DecodeHeader+0x1aa>
                        RX->ISCMD = 1;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2201      	movs	r2, #1
 800079a:	719a      	strb	r2, [r3, #6]
                break;
 800079c:	e005      	b.n	80007aa <DecodeHeader+0x1aa>

            default:
                RX->header = 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	71da      	strb	r2, [r3, #7]
                break;
 80007a4:	e002      	b.n	80007ac <DecodeHeader+0x1ac>
                break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <DecodeHeader+0x1ac>
                break;
 80007aa:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	795a      	ldrb	r2, [r3, #5]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7b9b      	ldrb	r3, [r3, #14]
 80007b4:	4013      	ands	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;                                                // Enmascaro el indice de lectura - Cuando llega a 63 se pone en 0
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795a      	ldrb	r2, [r3, #5]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7b9b      	ldrb	r3, [r3, #14]
 80007d0:	4013      	ands	r3, r2
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	429a      	cmp	r2, r3
 80007e0:	f47f af16 	bne.w	8000610 <DecodeHeader+0x10>
    }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <DecodeCmd>:

void DecodeCmd(_Rx *RX, _Tx *TX){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
    RX->ISCMD = 0;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	719a      	strb	r2, [r3, #6]

    switch(RX->Buff[RX->iData]){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	7b52      	ldrb	r2, [r2, #13]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2ba0      	cmp	r3, #160	; 0xa0
 800080e:	d002      	beq.n	8000816 <DecodeCmd+0x26>
 8000810:	2bf0      	cmp	r3, #240	; 0xf0
 8000812:	d01f      	beq.n	8000854 <DecodeCmd+0x64>
 8000814:	e035      	b.n	8000882 <DecodeCmd+0x92>

    	/*
		 * Comando para enviar datos IR
		 */
		case 0xA0:                                                              //Sensores analogicos
			if(espConnected)PutCIPSENDOnTx(24);
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <DecodeCmd+0xc0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <DecodeCmd+0x3a>
 8000824:	2018      	movs	r0, #24
 8000826:	f000 f8d9 	bl	80009dc <PutCIPSENDOnTx>
				PutHeaderOnTx(TX, 0xA0, 17);
 800082a:	2211      	movs	r2, #17
 800082c:	21a0      	movs	r1, #160	; 0xa0
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f000 f906 	bl	8000a40 <PutHeaderOnTx>
				PutBuffOnTx(TX, (uint8_t *)&bufADC[iAdc-2], 16);
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <DecodeCmd+0xc4>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	3b02      	subs	r3, #2
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <DecodeCmd+0xc8>)
 8000840:	4413      	add	r3, r2
 8000842:	2210      	movs	r2, #16
 8000844:	4619      	mov	r1, r3
 8000846:	6838      	ldr	r0, [r7, #0]
 8000848:	f000 f89a 	bl	8000980 <PutBuffOnTx>
				PutcksOnTx(TX);
 800084c:	6838      	ldr	r0, [r7, #0]
 800084e:	f000 f98e 	bl	8000b6e <PutcksOnTx>
		break;
 8000852:	e029      	b.n	80008a8 <DecodeCmd+0xb8>

    	/*
         * Comando para enviar alive
         */
        case 0xF0:                                                              //Alive
			if(espConnected)PutCIPSENDOnTx(10);
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <DecodeCmd+0xc0>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <DecodeCmd+0x78>
 8000862:	200a      	movs	r0, #10
 8000864:	f000 f8ba 	bl	80009dc <PutCIPSENDOnTx>
        	PutHeaderOnTx(TX, 0xF0, 2);
 8000868:	2202      	movs	r2, #2
 800086a:	21f0      	movs	r1, #240	; 0xf0
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f000 f8e7 	bl	8000a40 <PutHeaderOnTx>
            PutByteOnTx(TX, 0x0D);
 8000872:	210d      	movs	r1, #13
 8000874:	6838      	ldr	r0, [r7, #0]
 8000876:	f000 f865 	bl	8000944 <PutByteOnTx>
            PutcksOnTx(TX);
 800087a:	6838      	ldr	r0, [r7, #0]
 800087c:	f000 f977 	bl	8000b6e <PutcksOnTx>
            break;
 8000880:	e012      	b.n	80008a8 <DecodeCmd+0xb8>
        /*
         * Comando para enviar aviso de error
         */
        default:
			if(espConnected)PutCIPSENDOnTx(9);
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <DecodeCmd+0xc0>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <DecodeCmd+0xa6>
 8000890:	2009      	movs	r0, #9
 8000892:	f000 f8a3 	bl	80009dc <PutCIPSENDOnTx>
        	PutHeaderOnTx(TX, 0xFF, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	21ff      	movs	r1, #255	; 0xff
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f000 f8d0 	bl	8000a40 <PutHeaderOnTx>
            PutcksOnTx(TX);
 80008a0:	6838      	ldr	r0, [r7, #0]
 80008a2:	f000 f964 	bl	8000b6e <PutcksOnTx>
            break;
 80008a6:	bf00      	nop
    }
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000790 	.word	0x20000790
 80008b4:	20000605 	.word	0x20000605
 80008b8:	200007e0 	.word	0x200007e0

080008bc <SendUDPData>:

void SendUDPData(uint8_t cmd){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	switch(cmd){
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2bb0      	cmp	r3, #176	; 0xb0
 80008ca:	d018      	beq.n	80008fe <SendUDPData+0x42>
 80008cc:	2bf0      	cmp	r3, #240	; 0xf0
 80008ce:	d12e      	bne.n	800092e <SendUDPData+0x72>
		/*Alive ESP*/
		case 0xF0:
			if(espConnected)PutCIPSENDOnTx(10);
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <SendUDPData+0x7c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <SendUDPData+0x28>
 80008de:	200a      	movs	r0, #10
 80008e0:	f000 f87c 	bl	80009dc <PutCIPSENDOnTx>
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xF0, 2);
 80008e4:	2202      	movs	r2, #2
 80008e6:	21f0      	movs	r1, #240	; 0xf0
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <SendUDPData+0x80>)
 80008ea:	f000 f8a9 	bl	8000a40 <PutHeaderOnTx>
			PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 80008ee:	210d      	movs	r1, #13
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <SendUDPData+0x80>)
 80008f2:	f000 f827 	bl	8000944 <PutByteOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <SendUDPData+0x80>)
 80008f8:	f000 f939 	bl	8000b6e <PutcksOnTx>
		break;
 80008fc:	e017      	b.n	800092e <SendUDPData+0x72>
		/*ESP8266 IP*/
		case 0xB0:
			if(espConnected)PutCIPSENDOnTx(24);
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <SendUDPData+0x7c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <SendUDPData+0x56>
 800090c:	2018      	movs	r0, #24
 800090e:	f000 f865 	bl	80009dc <PutCIPSENDOnTx>
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xB0, 16);
 8000912:	2210      	movs	r2, #16
 8000914:	21b0      	movs	r1, #176	; 0xb0
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <SendUDPData+0x80>)
 8000918:	f000 f892 	bl	8000a40 <PutHeaderOnTx>
			PutBuffOnTx((_Tx *)&TXUSART1, (uint8_t *)&EspIp, 15);
 800091c:	220f      	movs	r2, #15
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <SendUDPData+0x84>)
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <SendUDPData+0x80>)
 8000922:	f000 f82d 	bl	8000980 <PutBuffOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <SendUDPData+0x80>)
 8000928:	f000 f921 	bl	8000b6e <PutcksOnTx>
		break;
 800092c:	bf00      	nop
	}
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000790 	.word	0x20000790
 800093c:	20000c24 	.word	0x20000c24
 8000940:	20000608 	.word	0x20000608

08000944 <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	1c59      	adds	r1, r3, #1
 800095a:	b2c8      	uxtb	r0, r1
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	7108      	strb	r0, [r1, #4]
 8000960:	4413      	add	r3, r2
 8000962:	78fa      	ldrb	r2, [r7, #3]
 8000964:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	791a      	ldrb	r2, [r3, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7a1b      	ldrb	r3, [r3, #8]
 800096e:	4013      	ands	r3, r2
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	711a      	strb	r2, [r3, #4]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <PutBuffOnTx>:

void PutBuffOnTx(_Tx *TX, uint8_t *buf, uint8_t length)
{
 8000980:	b490      	push	{r4, r7}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4613      	mov	r3, r2
 800098c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0; i<length; i++) {
 800098e:	2300      	movs	r3, #0
 8000990:	75fb      	strb	r3, [r7, #23]
 8000992:	e018      	b.n	80009c6 <PutBuffOnTx+0x46>

    	TX->Buff[TX->iw++] = buf[i];
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	441a      	add	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6819      	ldr	r1, [r3, #0]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	1c58      	adds	r0, r3, #1
 80009a4:	b2c4      	uxtb	r4, r0
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	7104      	strb	r4, [r0, #4]
 80009aa:	440b      	add	r3, r1
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	701a      	strb	r2, [r3, #0]
    	TX->iw &= TX->maskSize;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	791a      	ldrb	r2, [r3, #4]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	7a1b      	ldrb	r3, [r3, #8]
 80009b8:	4013      	ands	r3, r2
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	711a      	strb	r2, [r3, #4]
    for(i=0; i<length; i++) {
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	3301      	adds	r3, #1
 80009c4:	75fb      	strb	r3, [r7, #23]
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d3e2      	bcc.n	8000994 <PutBuffOnTx+0x14>
    }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc90      	pop	{r4, r7}
 80009d8:	4770      	bx	lr
	...

080009dc <PutCIPSENDOnTx>:

void PutCIPSENDOnTx(uint8_t length){
 80009dc:	b490      	push	{r4, r7}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<11; i++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e00f      	b.n	8000a0c <PutCIPSENDOnTx+0x30>
		TXUSART1.Buff[TXUSART1.iw++] = CIPSEND[i];
 80009ec:	7bfa      	ldrb	r2, [r7, #15]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	1c58      	adds	r0, r3, #1
 80009f8:	b2c4      	uxtb	r4, r0
 80009fa:	480f      	ldr	r0, [pc, #60]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 80009fc:	7104      	strb	r4, [r0, #4]
 80009fe:	440b      	add	r3, r1
 8000a00:	490e      	ldr	r1, [pc, #56]	; (8000a3c <PutCIPSENDOnTx+0x60>)
 8000a02:	5c8a      	ldrb	r2, [r1, r2]
 8000a04:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<11; i++){
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	2b0a      	cmp	r3, #10
 8000a10:	d9ec      	bls.n	80009ec <PutCIPSENDOnTx+0x10>
	}
	TXUSART1.Buff[TXUSART1.iw++] = length;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 8000a18:	791b      	ldrb	r3, [r3, #4]
 8000a1a:	1c59      	adds	r1, r3, #1
 8000a1c:	b2c8      	uxtb	r0, r1
 8000a1e:	4906      	ldr	r1, [pc, #24]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 8000a20:	7108      	strb	r0, [r1, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	701a      	strb	r2, [r3, #0]
	TXUSART1.OutPutBytes = length;
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <PutCIPSENDOnTx+0x5c>)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	71d3      	strb	r3, [r2, #7]
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc90      	pop	{r4, r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000c24 	.word	0x20000c24
 8000a3c:	0800b250 	.word	0x0800b250

08000a40 <PutHeaderOnTx>:

void PutHeaderOnTx(_Tx *TX, uint8_t cmd, uint8_t CantDatos)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	1c59      	adds	r1, r3, #1
 8000a5a:	b2c8      	uxtb	r0, r1
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	7108      	strb	r0, [r1, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	2255      	movs	r2, #85	; 0x55
 8000a64:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791a      	ldrb	r2, [r3, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7a1b      	ldrb	r3, [r3, #8]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	1c59      	adds	r1, r3, #1
 8000a80:	b2c8      	uxtb	r0, r1
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	7108      	strb	r0, [r1, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	224e      	movs	r2, #78	; 0x4e
 8000a8a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791a      	ldrb	r2, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7a1b      	ldrb	r3, [r3, #8]
 8000a94:	4013      	ands	r3, r2
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	1c59      	adds	r1, r3, #1
 8000aa6:	b2c8      	uxtb	r0, r1
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	7108      	strb	r0, [r1, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	2245      	movs	r2, #69	; 0x45
 8000ab0:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791a      	ldrb	r2, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7a1b      	ldrb	r3, [r3, #8]
 8000aba:	4013      	ands	r3, r2
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	1c59      	adds	r1, r3, #1
 8000acc:	b2c8      	uxtb	r0, r1
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	7108      	strb	r0, [r1, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	2252      	movs	r2, #82	; 0x52
 8000ad6:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791a      	ldrb	r2, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7a1b      	ldrb	r3, [r3, #8]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	711a      	strb	r2, [r3, #4]
    //lcmd cantidad de datos: id+payload+cks
    TX->length = CantDatos;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	78ba      	ldrb	r2, [r7, #2]
 8000aec:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = CantDatos + 1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	b2c8      	uxtb	r0, r1
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	7108      	strb	r0, [r1, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	78ba      	ldrb	r2, [r7, #2]
 8000b02:	3201      	adds	r2, #1
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	791a      	ldrb	r2, [r3, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7a1b      	ldrb	r3, [r3, #8]
 8000b10:	4013      	ands	r3, r2
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	1c59      	adds	r1, r3, #1
 8000b22:	b2c8      	uxtb	r0, r1
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	7108      	strb	r0, [r1, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	223a      	movs	r2, #58	; 0x3a
 8000b2c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	791a      	ldrb	r2, [r3, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7a1b      	ldrb	r3, [r3, #8]
 8000b36:	4013      	ands	r3, r2
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = cmd;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	791b      	ldrb	r3, [r3, #4]
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	b2c8      	uxtb	r0, r1
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	7108      	strb	r0, [r1, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	78fa      	ldrb	r2, [r7, #3]
 8000b52:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	791a      	ldrb	r2, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7a1b      	ldrb	r3, [r3, #8]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	711a      	strb	r2, [r3, #4]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <PutcksOnTx>:

void PutcksOnTx(_Tx *TX)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	799b      	ldrb	r3, [r3, #6]
 8000b7e:	3306      	adds	r3, #6
 8000b80:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	791a      	ldrb	r2, [r3, #4]
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7a1a      	ldrb	r2, [r3, #8]
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	4013      	ands	r3, r2
 8000b94:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 8000b96:	e00e      	b.n	8000bb6 <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	1c59      	adds	r1, r3, #1
 8000ba0:	73b9      	strb	r1, [r7, #14]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	4053      	eors	r3, r2
 8000baa:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7a1a      	ldrb	r2, [r3, #8]
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	7bba      	ldrb	r2, [r7, #14]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d1eb      	bne.n	8000b98 <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	b2c8      	uxtb	r0, r1
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	7108      	strb	r0, [r1, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	791a      	ldrb	r2, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7a1b      	ldrb	r3, [r3, #8]
 8000bde:	4013      	ands	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	711a      	strb	r2, [r3, #4]
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <PutStrOnTx>:

void PutStrOnTx(_Tx *TX, const char *str)
{
 8000bf0:	b490      	push	{r4, r7}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]

    while(str[i]) {
 8000bfe:	e018      	b.n	8000c32 <PutStrOnTx+0x42>
        TX->Buff[TX->iw++] = str[i++];
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	73fa      	strb	r2, [r7, #15]
 8000c06:	461a      	mov	r2, r3
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	441a      	add	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6819      	ldr	r1, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	1c58      	adds	r0, r3, #1
 8000c16:	b2c4      	uxtb	r4, r0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	7104      	strb	r4, [r0, #4]
 8000c1c:	440b      	add	r3, r1
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	791a      	ldrb	r2, [r3, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7a1b      	ldrb	r3, [r3, #8]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	711a      	strb	r2, [r3, #4]
    while(str[i]) {
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1e0      	bne.n	8000c00 <PutStrOnTx+0x10>
    }
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc90      	pop	{r4, r7}
 8000c48:	4770      	bx	lr
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 ff7e 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 fa78 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f000 fcd2 	bl	8001600 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000c5c:	f000 fbf0 	bl	8001440 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000c60:	f000 fb72 	bl	8001348 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000c64:	f000 fc84 	bl	8001570 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000c68:	f000 fcac 	bl	80015c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6c:	f000 faca 	bl	8001204 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c70:	f009 fd9a 	bl	800a7a8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000c74:	f000 fb96 	bl	80013a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 8000c78:	489f      	ldr	r0, [pc, #636]	; (8000ef8 <main+0x2ac>)
 8000c7a:	f009 fe85 	bl	800a988 <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 8000c7e:	489f      	ldr	r0, [pc, #636]	; (8000efc <main+0x2b0>)
 8000c80:	f004 fc2c 	bl	80054dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c84:	489e      	ldr	r0, [pc, #632]	; (8000f00 <main+0x2b4>)
 8000c86:	f004 fc29 	bl	80054dc <HAL_TIM_Base_Start_IT>
  //Enable ESP8266
  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	489d      	ldr	r0, [pc, #628]	; (8000f04 <main+0x2b8>)
 8000c90:	f002 f8c9 	bl	8002e26 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4899      	ldr	r0, [pc, #612]	; (8000efc <main+0x2b0>)
 8000c98:	f004 fcca 	bl	8005630 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4897      	ldr	r0, [pc, #604]	; (8000efc <main+0x2b0>)
 8000ca0:	f004 fcc6 	bl	8005630 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4895      	ldr	r0, [pc, #596]	; (8000efc <main+0x2b0>)
 8000ca8:	f004 fcc2 	bl	8005630 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000cac:	210c      	movs	r1, #12
 8000cae:	4893      	ldr	r0, [pc, #588]	; (8000efc <main+0x2b0>)
 8000cb0:	f004 fcbe 	bl	8005630 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000cb4:	4b91      	ldr	r3, [pc, #580]	; (8000efc <main+0x2b0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000cbc:	4b8f      	ldr	r3, [pc, #572]	; (8000efc <main+0x2b0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000cc4:	4b8d      	ldr	r3, [pc, #564]	; (8000efc <main+0x2b0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000ccc:	4b8b      	ldr	r3, [pc, #556]	; (8000efc <main+0x2b0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	641a      	str	r2, [r3, #64]	; 0x40
/***********************************************************************************/
/************************** Inicializacion de contadores ***************************/
/***********************************************************************************/
  Count100ms = 100;
 8000cd4:	4b8c      	ldr	r3, [pc, #560]	; (8000f08 <main+0x2bc>)
 8000cd6:	2264      	movs	r2, #100	; 0x64
 8000cd8:	801a      	strh	r2, [r3, #0]
  Count200ms = 0;
 8000cda:	4b8c      	ldr	r3, [pc, #560]	; (8000f0c <main+0x2c0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	801a      	strh	r2, [r3, #0]
  Count3000ms = 0;
 8000ce0:	4b8b      	ldr	r3, [pc, #556]	; (8000f10 <main+0x2c4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	801a      	strh	r2, [r3, #0]
  Count500ms = 0;
 8000ce6:	4b8b      	ldr	r3, [pc, #556]	; (8000f14 <main+0x2c8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	801a      	strh	r2, [r3, #0]
  TimeOut = 40;
 8000cec:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <main+0x2cc>)
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/*************************** Inicializacion de variables USB ***********************/
/***********************************************************************************/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 8000cf2:	4b8a      	ldr	r3, [pc, #552]	; (8000f1c <main+0x2d0>)
 8000cf4:	4a8a      	ldr	r2, [pc, #552]	; (8000f20 <main+0x2d4>)
 8000cf6:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 8000cf8:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <main+0x2d0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 8000cfe:	4b87      	ldr	r3, [pc, #540]	; (8000f1c <main+0x2d0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 8000d04:	4b85      	ldr	r3, [pc, #532]	; (8000f1c <main+0x2d0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 255;
 8000d0a:	4b84      	ldr	r3, [pc, #528]	; (8000f1c <main+0x2d0>)
 8000d0c:	22ff      	movs	r2, #255	; 0xff
 8000d0e:	739a      	strb	r2, [r3, #14]
  RXUSB.ISCMD = 0;
 8000d10:	4b82      	ldr	r3, [pc, #520]	; (8000f1c <main+0x2d0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 8000d16:	4b83      	ldr	r3, [pc, #524]	; (8000f24 <main+0x2d8>)
 8000d18:	4a83      	ldr	r2, [pc, #524]	; (8000f28 <main+0x2dc>)
 8000d1a:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 8000d1c:	4b81      	ldr	r3, [pc, #516]	; (8000f24 <main+0x2d8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 8000d22:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <main+0x2d8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 255;
 8000d28:	4b7e      	ldr	r3, [pc, #504]	; (8000f24 <main+0x2d8>)
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	721a      	strb	r2, [r3, #8]
  TXUSB.maskBuf = 255;
 8000d2e:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <main+0x2d8>)
 8000d30:	22ff      	movs	r2, #255	; 0xff
 8000d32:	725a      	strb	r2, [r3, #9]
/***********************************************************************************/

/***********************************************************************************/
/********************** Inicialización de  ESP8266 ************************/
/***********************************************************************************/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 8000d34:	4b7d      	ldr	r3, [pc, #500]	; (8000f2c <main+0x2e0>)
 8000d36:	4a7e      	ldr	r2, [pc, #504]	; (8000f30 <main+0x2e4>)
 8000d38:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 8000d3a:	4b7c      	ldr	r3, [pc, #496]	; (8000f2c <main+0x2e0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 8000d40:	4b7a      	ldr	r3, [pc, #488]	; (8000f2c <main+0x2e0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 8000d46:	4b79      	ldr	r3, [pc, #484]	; (8000f2c <main+0x2e0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 255;
 8000d4c:	4b77      	ldr	r3, [pc, #476]	; (8000f2c <main+0x2e0>)
 8000d4e:	22ff      	movs	r2, #255	; 0xff
 8000d50:	739a      	strb	r2, [r3, #14]
  RXUSART1.ISCMD = 0;
 8000d52:	4b76      	ldr	r3, [pc, #472]	; (8000f2c <main+0x2e0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	719a      	strb	r2, [r3, #6]
  //RXUSART1.state indica en que estado se encuentra la ESP8266
  RXUSART1.state = 0;
 8000d58:	4b74      	ldr	r3, [pc, #464]	; (8000f2c <main+0x2e0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	721a      	strb	r2, [r3, #8]

  TXUSART1.Buff = txUSART1Buff;
 8000d5e:	4b75      	ldr	r3, [pc, #468]	; (8000f34 <main+0x2e8>)
 8000d60:	4a75      	ldr	r2, [pc, #468]	; (8000f38 <main+0x2ec>)
 8000d62:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 8000d64:	4b73      	ldr	r3, [pc, #460]	; (8000f34 <main+0x2e8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 8000d6a:	4b72      	ldr	r3, [pc, #456]	; (8000f34 <main+0x2e8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 255;
 8000d70:	4b70      	ldr	r3, [pc, #448]	; (8000f34 <main+0x2e8>)
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	721a      	strb	r2, [r3, #8]
  TXUSART1.maskBuf = 255;
 8000d76:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <main+0x2e8>)
 8000d78:	22ff      	movs	r2, #255	; 0xff
 8000d7a:	725a      	strb	r2, [r3, #9]

  /*Bits de control*/
  DecodeIPD = 0;
 8000d7c:	4a6f      	ldr	r2, [pc, #444]	; (8000f3c <main+0x2f0>)
 8000d7e:	7813      	ldrb	r3, [r2, #0]
 8000d80:	f36f 1386 	bfc	r3, #6, #1
 8000d84:	7013      	strb	r3, [r2, #0]
  DecodeCIPSEND = 0;
 8000d86:	4b6e      	ldr	r3, [pc, #440]	; (8000f40 <main+0x2f4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
  DecodeHeaderESP = 0;
 8000d8c:	4a6b      	ldr	r2, [pc, #428]	; (8000f3c <main+0x2f0>)
 8000d8e:	7813      	ldrb	r3, [r2, #0]
 8000d90:	f36f 03c3 	bfc	r3, #3, #1
 8000d94:	7013      	strb	r3, [r2, #0]
  ESPReadyToRecyb = 0;
 8000d96:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <main+0x2f0>)
 8000d98:	7813      	ldrb	r3, [r2, #0]
 8000d9a:	f36f 1345 	bfc	r3, #5, #1
 8000d9e:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND = 0;
 8000da0:	4a66      	ldr	r2, [pc, #408]	; (8000f3c <main+0x2f0>)
 8000da2:	7813      	ldrb	r3, [r2, #0]
 8000da4:	f36f 13c7 	bfc	r3, #7, #1
 8000da8:	7013      	strb	r3, [r2, #0]
  ResetESP = 1;
 8000daa:	4a66      	ldr	r2, [pc, #408]	; (8000f44 <main+0x2f8>)
 8000dac:	7813      	ldrb	r3, [r2, #0]
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	7013      	strb	r3, [r2, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************ Inicializacion de variables ADC **************************/
/***********************************************************************************/
  iAdc = 0;
 8000db4:	4b64      	ldr	r3, [pc, #400]	; (8000f48 <main+0x2fc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
  FirtScan=1;
 8000dba:	4b64      	ldr	r3, [pc, #400]	; (8000f4c <main+0x300>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]


/***********************************************************************************/
/***************** Inicializacion de variables error cuadratico ********************/
/***********************************************************************************/
  posMINCenter = 0;
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <main+0x304>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
  posMINDerecha = 0;
 8000dc6:	4b63      	ldr	r3, [pc, #396]	; (8000f54 <main+0x308>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
  posMINIzquierda = 0;
 8000dcc:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <main+0x30c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
  sensorValue = 0;
 8000dd2:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <main+0x310>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
  error = 0;
 8000dd8:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <main+0x314>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************* Inicialización de variables PID *************************/
/***********************************************************************************/
  Kp = 0;
 8000dde:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <main+0x318>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  Ki = 0;
 8000de4:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <main+0x31c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
  Kd = 0;
 8000dea:	4b60      	ldr	r3, [pc, #384]	; (8000f6c <main+0x320>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
  Proporcional = 0;
 8000df0:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <main+0x324>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
  Integral = 0;
 8000df6:	4b5f      	ldr	r3, [pc, #380]	; (8000f74 <main+0x328>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
  Derivativo = 0;
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	; (8000f78 <main+0x32c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED de estado - Parpadea cada 100ms
	  if(On100ms){
 8000e02:	4b5e      	ldr	r3, [pc, #376]	; (8000f7c <main+0x330>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d03b      	beq.n	8000e84 <main+0x238>
		  On100ms = 0;
 8000e0c:	4b5b      	ldr	r3, [pc, #364]	; (8000f7c <main+0x330>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	485a      	ldr	r0, [pc, #360]	; (8000f80 <main+0x334>)
 8000e18:	f002 f81d 	bl	8002e56 <HAL_GPIO_TogglePin>

		  if(Count3000ms > 0) Count3000ms--;
 8000e1c:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <main+0x2c4>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <main+0x1e8>
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x2c4>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <main+0x2c4>)
 8000e32:	801a      	strh	r2, [r3, #0]
		  if(!Count3000ms){
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <main+0x2c4>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <main+0x1f8>
			  On3000ms = 1;
 8000e3e:	4b51      	ldr	r3, [pc, #324]	; (8000f84 <main+0x338>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	801a      	strh	r2, [r3, #0]
		  }
		  if(Count500ms > 0){
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <main+0x2c8>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <main+0x210>
			  Count500ms--;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <main+0x2c8>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3b01      	subs	r3, #1
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <main+0x2c8>)
 8000e5a:	801a      	strh	r2, [r3, #0]
		  }
		  if(!Count500ms){
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <main+0x2c8>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <main+0x220>
			  On500ms = 1;
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <main+0x33c>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	801a      	strh	r2, [r3, #0]
		  }
		  //Utilizado como delay para no capturar basura de la ESP8266 al iniciarla
		  if(TimeOut > 0){
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <main+0x2cc>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <main+0x238>
			  TimeOut--;
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <main+0x2cc>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <main+0x2cc>)
 8000e82:	801a      	strh	r2, [r3, #0]
		  }
		  //SendUDPData(0xF0);
	  }

	  //Recepcion por USB - Decodifica header
	  if(RXUSB.iw != RXUSB.ir) {
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <main+0x2d0>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <main+0x2d0>)
 8000e8c:	795b      	ldrb	r3, [r3, #5]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d002      	beq.n	8000e9a <main+0x24e>
		  DecodeHeader((_Rx *)&RXUSB);
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <main+0x2d0>)
 8000e96:	f7ff fbb3 	bl	8000600 <DecodeHeader>
	  }
	  //Recepcion por USB - Decodifica comando
	  if(RXUSB.ISCMD) {
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <main+0x2d0>)
 8000e9c:	799b      	ldrb	r3, [r3, #6]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <main+0x260>
		  DecodeCmd((_Rx *)&RXUSB, (_Tx *)&TXUSB);
 8000ea4:	491f      	ldr	r1, [pc, #124]	; (8000f24 <main+0x2d8>)
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <main+0x2d0>)
 8000ea8:	f7ff fca2 	bl	80007f0 <DecodeCmd>
	  }
	  //Transmision por USB
	  if(TXUSB.iw != TXUSB.ir) {
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <main+0x2d8>)
 8000eae:	791a      	ldrb	r2, [r3, #4]
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <main+0x2d8>)
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f000 808e 	beq.w	8000fd6 <main+0x38a>
		  if(TXUSB.iw > TXUSB.ir){
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <main+0x2d8>)
 8000ebc:	791a      	ldrb	r2, [r3, #4]
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <main+0x2d8>)
 8000ec0:	795b      	ldrb	r3, [r3, #5]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d962      	bls.n	8000f8c <main+0x340>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <main+0x2d8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <main+0x2d8>)
 8000ecc:	7952      	ldrb	r2, [r2, #5]
 8000ece:	1898      	adds	r0, r3, r2
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <main+0x2d8>)
 8000ed2:	791b      	ldrb	r3, [r3, #4]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <main+0x2d8>)
 8000ed8:	795b      	ldrb	r3, [r3, #5]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f009 fd2b 	bl	800a93c <CDC_Transmit_FS>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d16c      	bne.n	8000fc6 <main+0x37a>
				  TXUSB.ir=TXUSB.iw;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <main+0x2d8>)
 8000eee:	791a      	ldrb	r2, [r3, #4]
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <main+0x2d8>)
 8000ef2:	715a      	strb	r2, [r3, #5]
 8000ef4:	e067      	b.n	8000fc6 <main+0x37a>
 8000ef6:	bf00      	nop
 8000ef8:	080005b1 	.word	0x080005b1
 8000efc:	200003c4 	.word	0x200003c4
 8000f00:	200005bc 	.word	0x200005bc
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	20000af4 	.word	0x20000af4
 8000f0c:	20000ae6 	.word	0x20000ae6
 8000f10:	200003c0 	.word	0x200003c0
 8000f14:	200005a8 	.word	0x200005a8
 8000f18:	20000ae4 	.word	0x20000ae4
 8000f1c:	20000c10 	.word	0x20000c10
 8000f20:	200004a4 	.word	0x200004a4
 8000f24:	200005ac 	.word	0x200005ac
 8000f28:	2000064c 	.word	0x2000064c
 8000f2c:	20000410 	.word	0x20000410
 8000f30:	200009e4 	.word	0x200009e4
 8000f34:	20000c24 	.word	0x20000c24
 8000f38:	20000af8 	.word	0x20000af8
 8000f3c:	20000790 	.word	0x20000790
 8000f40:	20000478 	.word	0x20000478
 8000f44:	20000604 	.word	0x20000604
 8000f48:	20000605 	.word	0x20000605
 8000f4c:	20000198 	.word	0x20000198
 8000f50:	20000606 	.word	0x20000606
 8000f54:	200005b8 	.word	0x200005b8
 8000f58:	20000c30 	.word	0x20000c30
 8000f5c:	20000bfc 	.word	0x20000bfc
 8000f60:	20000af0 	.word	0x20000af0
 8000f64:	20000c06 	.word	0x20000c06
 8000f68:	2000040c 	.word	0x2000040c
 8000f6c:	20000ae8 	.word	0x20000ae8
 8000f70:	20000c08 	.word	0x20000c08
 8000f74:	20000c00 	.word	0x20000c00
 8000f78:	2000047c 	.word	0x2000047c
 8000f7c:	2000047a 	.word	0x2000047a
 8000f80:	40011000 	.word	0x40011000
 8000f84:	20000c0e 	.word	0x20000c0e
 8000f88:	20000c04 	.word	0x20000c04
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 8000f8c:	4b62      	ldr	r3, [pc, #392]	; (8001118 <main+0x4cc>)
 8000f8e:	7a5b      	ldrb	r3, [r3, #9]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b61      	ldr	r3, [pc, #388]	; (8001118 <main+0x4cc>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b5e      	ldr	r3, [pc, #376]	; (800111c <main+0x4d0>)
 8000fa2:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 8000fa4:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <main+0x4cc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a5b      	ldr	r2, [pc, #364]	; (8001118 <main+0x4cc>)
 8000faa:	7952      	ldrb	r2, [r2, #5]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a5b      	ldr	r2, [pc, #364]	; (800111c <main+0x4d0>)
 8000fb0:	8812      	ldrh	r2, [r2, #0]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f009 fcc1 	bl	800a93c <CDC_Transmit_FS>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <main+0x37a>
				  TXUSB.ir = 0;
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <main+0x4cc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <main+0x4cc>)
 8000fc8:	795a      	ldrb	r2, [r3, #5]
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <main+0x4cc>)
 8000fcc:	7a1b      	ldrb	r3, [r3, #8]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <main+0x4cc>)
 8000fd4:	715a      	strb	r2, [r3, #5]
	  }
	  //Primera inicializacion de ESP8266 y Restart
	  if((!TimeOut) && (ResetESP)){
 8000fd6:	4b52      	ldr	r3, [pc, #328]	; (8001120 <main+0x4d4>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d113      	bne.n	8001008 <main+0x3bc>
 8000fe0:	4b50      	ldr	r3, [pc, #320]	; (8001124 <main+0x4d8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <main+0x3bc>
		  InitEsp((_Rx *)&RXUSART1);
 8000fee:	484e      	ldr	r0, [pc, #312]	; (8001128 <main+0x4dc>)
 8000ff0:	f7ff f8ac 	bl	800014c <InitEsp>
		  //Interrupcion para recibir datos desde ESP8266
		  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	494d      	ldr	r1, [pc, #308]	; (800112c <main+0x4e0>)
 8000ff8:	484d      	ldr	r0, [pc, #308]	; (8001130 <main+0x4e4>)
 8000ffa:	f005 f9ca 	bl	8006392 <HAL_UART_Receive_IT>
		  ResetESP = 0;
 8000ffe:	4a49      	ldr	r2, [pc, #292]	; (8001124 <main+0x4d8>)
 8001000:	7813      	ldrb	r3, [r2, #0]
 8001002:	f36f 0300 	bfc	r3, #0, #1
 8001006:	7013      	strb	r3, [r2, #0]
	  }
	  //Continua con los casos para iniciar
	  if((!espConnected) && (!ESPReadyToRecyb) && (!ResetESP)){
 8001008:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <main+0x4e8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d110      	bne.n	8001038 <main+0x3ec>
 8001016:	4b47      	ldr	r3, [pc, #284]	; (8001134 <main+0x4e8>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <main+0x3ec>
 8001024:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <main+0x4d8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <main+0x3ec>
		  InitEsp((_Rx *)&RXUSART1);
 8001032:	483d      	ldr	r0, [pc, #244]	; (8001128 <main+0x4dc>)
 8001034:	f7ff f88a 	bl	800014c <InitEsp>
	  }

	  if(ESPGotIP){
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <main+0x4e8>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <main+0x40a>
		  ESPGotIP = 0;
 8001046:	4a3b      	ldr	r2, [pc, #236]	; (8001134 <main+0x4e8>)
 8001048:	7813      	ldrb	r3, [r2, #0]
 800104a:	f36f 1304 	bfc	r3, #4, #1
 800104e:	7013      	strb	r3, [r2, #0]
		  SendUDPData(0xB0);
 8001050:	20b0      	movs	r0, #176	; 0xb0
 8001052:	f7ff fc33 	bl	80008bc <SendUDPData>
	  }
	  //Recepcion por ESP8266 - Decodifica comandos provenientes de ESP8266
	  if(RXUSART1.iw != RXUSART1.ir) {
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <main+0x4dc>)
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <main+0x4dc>)
 800105c:	795b      	ldrb	r3, [r3, #5]
	//		  DecodeESP((_Rx *)&RXUSART1);
	  }
	  //Si la decodificacion resulta de un dato proveniente de PC, se decodifica header
	  if(DecodeHeaderESP){
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <main+0x4e8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <main+0x430>
		  DecodeHeader((_Rx *)&RXUSART1);
 800106c:	482e      	ldr	r0, [pc, #184]	; (8001128 <main+0x4dc>)
 800106e:	f7ff fac7 	bl	8000600 <DecodeHeader>
		  DecodeHeaderESP = 0;
 8001072:	4a30      	ldr	r2, [pc, #192]	; (8001134 <main+0x4e8>)
 8001074:	7813      	ldrb	r3, [r2, #0]
 8001076:	f36f 03c3 	bfc	r3, #3, #1
 800107a:	7013      	strb	r3, [r2, #0]
	  }
	  //Recepcion por ESP8266 - Decodifica comando
	  if(RXUSART1.ISCMD) {
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <main+0x4dc>)
 800107e:	799b      	ldrb	r3, [r3, #6]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <main+0x442>
		  DecodeCmd((_Rx *)&RXUSART1, (_Tx *)&TXUSART1);
 8001086:	492c      	ldr	r1, [pc, #176]	; (8001138 <main+0x4ec>)
 8001088:	4827      	ldr	r0, [pc, #156]	; (8001128 <main+0x4dc>)
 800108a:	f7ff fbb1 	bl	80007f0 <DecodeCmd>
	  }

	  //Transmision por ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <main+0x4ec>)
 8001090:	791a      	ldrb	r2, [r3, #4]
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <main+0x4ec>)
 8001094:	795b      	ldrb	r3, [r3, #5]
 8001096:	429a      	cmp	r2, r3
 8001098:	d021      	beq.n	80010de <main+0x492>
		  if(huart1.Instance->SR){
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <main+0x4e4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <main+0x47a>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <main+0x4ec>)
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	b2d1      	uxtb	r1, r2
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <main+0x4ec>)
 80010ae:	7151      	strb	r1, [r2, #5]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <main+0x4f0>)
 80010b4:	5c9a      	ldrb	r2, [r3, r2]
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <main+0x4e4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
			  TXUSART1.ir=TXUSART1.iw;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <main+0x4ec>)
 80010be:	791a      	ldrb	r2, [r3, #4]
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <main+0x4ec>)
 80010c2:	715a      	strb	r2, [r3, #5]
 80010c4:	e00b      	b.n	80010de <main+0x492>
		  }
		  else{
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <main+0x4ec>)
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	b2d1      	uxtb	r1, r2
 80010ce:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <main+0x4ec>)
 80010d0:	7151      	strb	r1, [r2, #5]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <main+0x4f0>)
 80010d6:	5c9a      	ldrb	r2, [r3, r2]
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <main+0x4e4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
		  }
	  }

	  //Reset ESPE8266
	  if((HAL_GPIO_ReadPin(GPIOB, ENABLE_ESP_Pin) == GPIO_PIN_RESET) && On3000ms){
 80010de:	2120      	movs	r1, #32
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <main+0x4f4>)
 80010e2:	f001 fe89 	bl	8002df8 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae8a 	bne.w	8000e02 <main+0x1b6>
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <main+0x4f8>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f43f ae84 	beq.w	8000e02 <main+0x1b6>
		  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2120      	movs	r1, #32
 80010fe:	4810      	ldr	r0, [pc, #64]	; (8001140 <main+0x4f4>)
 8001100:	f001 fe91 	bl	8002e26 <HAL_GPIO_WritePin>
		  On3000ms = 0;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <main+0x4f8>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 800110a:	2201      	movs	r2, #1
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <main+0x4e0>)
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <main+0x4e4>)
 8001110:	f005 f93f 	bl	8006392 <HAL_UART_Receive_IT>
	  if(On100ms){
 8001114:	e675      	b.n	8000e02 <main+0x1b6>
 8001116:	bf00      	nop
 8001118:	200005ac 	.word	0x200005ac
 800111c:	20000480 	.word	0x20000480
 8001120:	20000ae4 	.word	0x20000ae4
 8001124:	20000604 	.word	0x20000604
 8001128:	20000410 	.word	0x20000410
 800112c:	200009e4 	.word	0x200009e4
 8001130:	2000074c 	.word	0x2000074c
 8001134:	20000790 	.word	0x20000790
 8001138:	20000c24 	.word	0x20000c24
 800113c:	20000af8 	.word	0x20000af8
 8001140:	40010c00 	.word	0x40010c00
 8001144:	20000c0e 	.word	0x20000c0e

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2228      	movs	r2, #40	; 0x28
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f00a f800 	bl	800b15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001186:	2301      	movs	r3, #1
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001194:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001198:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fc7c 	bl	8004a9c <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011aa:	f000 faa1 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fee6 	bl	8004f9c <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d6:	f000 fa8b 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80011da:	2312      	movs	r3, #18
 80011dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 f870 	bl	80052d0 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011f6:	f000 fa7b 	bl	80016f0 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001214:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001216:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <MX_ADC1_Init+0x140>)
 8001218:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <MX_ADC1_Init+0x13c>)
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001224:	2200      	movs	r2, #0
 8001226:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001228:	4b45      	ldr	r3, [pc, #276]	; (8001340 <MX_ADC1_Init+0x13c>)
 800122a:	2200      	movs	r2, #0
 800122c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001230:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b42      	ldr	r3, [pc, #264]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <MX_ADC1_Init+0x13c>)
 800123e:	2208      	movs	r2, #8
 8001240:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001242:	483f      	ldr	r0, [pc, #252]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001244:	f000 fce6 	bl	8001c14 <HAL_ADC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800124e:	f000 fa4f 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001256:	2301      	movs	r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800125a:	2302      	movs	r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4837      	ldr	r0, [pc, #220]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001264:	f000 fe9e 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 fa3f 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001276:	2302      	movs	r3, #2
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001280:	f000 fe90 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800128a:	f000 fa31 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800128e:	2302      	movs	r3, #2
 8001290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001292:	2303      	movs	r3, #3
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4829      	ldr	r0, [pc, #164]	; (8001340 <MX_ADC1_Init+0x13c>)
 800129c:	f000 fe82 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012a6:	f000 fa23 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012aa:	2303      	movs	r3, #3
 80012ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012ae:	2304      	movs	r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_ADC1_Init+0x13c>)
 80012b8:	f000 fe74 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012c2:	f000 fa15 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012c6:	2304      	movs	r3, #4
 80012c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012ca:	2305      	movs	r3, #5
 80012cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	481b      	ldr	r0, [pc, #108]	; (8001340 <MX_ADC1_Init+0x13c>)
 80012d4:	f000 fe66 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012de:	f000 fa07 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012e2:	2305      	movs	r3, #5
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012e6:	2306      	movs	r3, #6
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_ADC1_Init+0x13c>)
 80012f0:	f000 fe58 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80012fa:	f000 f9f9 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012fe:	2306      	movs	r3, #6
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001302:	2307      	movs	r3, #7
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_ADC1_Init+0x13c>)
 800130c:	f000 fe4a 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001316:	f000 f9eb 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800131a:	2307      	movs	r3, #7
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800131e:	2308      	movs	r3, #8
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_ADC1_Init+0x13c>)
 8001328:	f000 fe3c 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001332:	f000 f9dd 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000618 	.word	0x20000618
 8001344:	40012400 	.word	0x40012400

08001348 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_I2C2_Init+0x50>)
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <MX_I2C2_Init+0x54>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_I2C2_Init+0x50>)
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_I2C2_Init+0x58>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_I2C2_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_I2C2_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_I2C2_Init+0x50>)
 8001366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_I2C2_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_I2C2_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_I2C2_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_I2C2_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_I2C2_Init+0x50>)
 8001386:	f001 fd7f 	bl	8002e88 <HAL_I2C_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001390:	f000 f9ae 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000424 	.word	0x20000424
 800139c:	40005800 	.word	0x40005800
 80013a0:	000186a0 	.word	0x000186a0

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM3_Init+0x94>)
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <MX_TIM3_Init+0x98>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_TIM3_Init+0x94>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_TIM3_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_TIM3_Init+0x94>)
 80013d4:	f244 6250 	movw	r2, #18000	; 0x4650
 80013d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_TIM3_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_TIM3_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e6:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_TIM3_Init+0x94>)
 80013e8:	f004 f828 	bl	800543c <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013f2:	f000 f97d 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_TIM3_Init+0x94>)
 8001404:	f004 fb7c 	bl	8005b00 <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 f96f 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_TIM3_Init+0x94>)
 8001420:	f004 fefa 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800142a:	f000 f961 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200005bc 	.word	0x200005bc
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <MX_TIM4_Init+0x128>)
 8001472:	4a3e      	ldr	r2, [pc, #248]	; (800156c <MX_TIM4_Init+0x12c>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <MX_TIM4_Init+0x128>)
 8001478:	2207      	movs	r2, #7
 800147a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <MX_TIM4_Init+0x128>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <MX_TIM4_Init+0x128>)
 8001484:	f242 3228 	movw	r2, #9000	; 0x2328
 8001488:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <MX_TIM4_Init+0x128>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <MX_TIM4_Init+0x128>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001496:	4834      	ldr	r0, [pc, #208]	; (8001568 <MX_TIM4_Init+0x128>)
 8001498:	f003 ffd0 	bl	800543c <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014a2:	f000 f925 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b0:	4619      	mov	r1, r3
 80014b2:	482d      	ldr	r0, [pc, #180]	; (8001568 <MX_TIM4_Init+0x128>)
 80014b4:	f004 fb24 	bl	8005b00 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014be:	f000 f917 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c2:	4829      	ldr	r0, [pc, #164]	; (8001568 <MX_TIM4_Init+0x128>)
 80014c4:	f004 f85c 	bl	8005580 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014ce:	f000 f90f 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4619      	mov	r1, r3
 80014e0:	4821      	ldr	r0, [pc, #132]	; (8001568 <MX_TIM4_Init+0x128>)
 80014e2:	f004 fe99 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014ec:	f000 f900 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <MX_TIM4_Init+0x128>)
 8001508:	f004 fa3c 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001512:	f000 f8ed 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <MX_TIM4_Init+0x128>)
 800151e:	f004 fa31 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001528:	f000 f8e2 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2208      	movs	r2, #8
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM4_Init+0x128>)
 8001534:	f004 fa26 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800153e:	f000 f8d7 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	220c      	movs	r2, #12
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM4_Init+0x128>)
 800154a:	f004 fa1b 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001554:	f000 f8cc 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM4_Init+0x128>)
 800155a:	f000 f9eb 	bl	8001934 <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3738      	adds	r7, #56	; 0x38
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003c4 	.word	0x200003c4
 800156c:	40000800 	.word	0x40000800

08001570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART1_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 80015a8:	f004 fea6 	bl	80062f8 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 f89d 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000074c 	.word	0x2000074c
 80015c0:	40013800 	.word	0x40013800

080015c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_DMA_Init+0x38>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <MX_DMA_Init+0x38>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_DMA_Init+0x38>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	200b      	movs	r0, #11
 80015e8:	f000 ffad 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015ec:	200b      	movs	r0, #11
 80015ee:	f000 ffc6 	bl	800257e <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <MX_GPIO_Init+0xe0>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_GPIO_Init+0xe0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_GPIO_Init+0xe0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <MX_GPIO_Init+0xe0>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <MX_GPIO_Init+0xe0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_GPIO_Init+0xe0>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167a:	481a      	ldr	r0, [pc, #104]	; (80016e4 <MX_GPIO_Init+0xe4>)
 800167c:	f001 fbd3 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_ESP_GPIO_Port, ENABLE_ESP_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2120      	movs	r1, #32
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <MX_GPIO_Init+0xe8>)
 8001686:	f001 fbce 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 800168a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <MX_GPIO_Init+0xe4>)
 80016a4:	f001 fa24 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016a8:	23ff      	movs	r3, #255	; 0xff
 80016aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_GPIO_Init+0xec>)
 80016b8:	f001 fa1a 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_ESP_Pin */
  GPIO_InitStruct.Pin = ENABLE_ESP_Pin;
 80016bc:	2320      	movs	r3, #32
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENABLE_ESP_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_GPIO_Init+0xe8>)
 80016d4:	f001 fa0c 	bl	8002af0 <HAL_GPIO_Init>

}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40010800 	.word	0x40010800

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_MspInit+0x5c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x5c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_MspInit+0x60>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_MspInit+0x60>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a28      	ldr	r2, [pc, #160]	; (800181c <HAL_ADC_MspInit+0xbc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d149      	bne.n	8001814 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_ADC_MspInit+0xc0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_ADC_MspInit+0xc0>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_ADC_MspInit+0xc0>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_ADC_MspInit+0xc0>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <HAL_ADC_MspInit+0xc0>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_ADC_MspInit+0xc0>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017b0:	23ff      	movs	r3, #255	; 0xff
 80017b2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	; (8001824 <HAL_ADC_MspInit+0xc4>)
 80017c0:	f001 f996 	bl	8002af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_ADC_MspInit+0xcc>)
 80017c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 80017fa:	f000 fedb 	bl	80025b4 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001804:	f7ff ff74 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_ADC_MspInit+0xc8>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40012400 	.word	0x40012400
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800
 8001828:	2000079c 	.word	0x2000079c
 800182c:	40020008 	.word	0x40020008

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <HAL_I2C_MspInit+0x74>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d124      	bne.n	800189a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_I2C_MspInit+0x78>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <HAL_I2C_MspInit+0x78>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_I2C_MspInit+0x78>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001868:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800186c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4619      	mov	r1, r3
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <HAL_I2C_MspInit+0x7c>)
 800187e:	f001 f937 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_I2C_MspInit+0x78>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_I2C_MspInit+0x78>)
 8001888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_I2C_MspInit+0x78>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40005800 	.word	0x40005800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010c00 	.word	0x40010c00

080018b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_TIM_Base_MspInit+0x78>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d114      	bne.n	80018ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_TIM_Base_MspInit+0x7c>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_TIM_Base_MspInit+0x7c>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_TIM_Base_MspInit+0x7c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	201d      	movs	r0, #29
 80018e0:	f000 fe31 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018e4:	201d      	movs	r0, #29
 80018e6:	f000 fe4a 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ea:	e018      	b.n	800191e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_TIM_Base_MspInit+0x80>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d113      	bne.n	800191e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_TIM_Base_MspInit+0x7c>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_TIM_Base_MspInit+0x7c>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	61d3      	str	r3, [r2, #28]
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_TIM_Base_MspInit+0x7c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	201e      	movs	r0, #30
 8001914:	f000 fe17 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001918:	201e      	movs	r0, #30
 800191a:	f000 fe30 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40000400 	.word	0x40000400
 800192c:	40021000 	.word	0x40021000
 8001930:	40000800 	.word	0x40000800

08001934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_TIM_MspPostInit+0x5c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d118      	bne.n	8001986 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_TIM_MspPostInit+0x60>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_TIM_MspPostInit+0x60>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_TIM_MspPostInit+0x60>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800196c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2302      	movs	r3, #2
 8001978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <HAL_TIM_MspPostInit+0x64>)
 8001982:	f001 f8b5 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000800 	.word	0x40000800
 8001994:	40021000 	.word	0x40021000
 8001998:	40010c00 	.word	0x40010c00

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_UART_MspInit+0x9c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d139      	bne.n	8001a30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_UART_MspInit+0xa0>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_UART_MspInit+0xa0>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_UART_MspInit+0xa0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_UART_MspInit+0xa0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0xa0>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_UART_MspInit+0xa0>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4619      	mov	r1, r3
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <HAL_UART_MspInit+0xa4>)
 8001a02:	f001 f875 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_UART_MspInit+0xa4>)
 8001a1c:	f001 f868 	bl	8002af0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2025      	movs	r0, #37	; 0x25
 8001a26:	f000 fd8e 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a2a:	2025      	movs	r0, #37	; 0x25
 8001a2c:	f000 fda7 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010800 	.word	0x40010800

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f8a7 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA1_Channel1_IRQHandler+0x10>)
 8001a9a:	f000 fef5 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000079c 	.word	0x2000079c

08001aa8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001aae:	f001 fc60 	bl	8003372 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001500 	.word	0x20001500

08001abc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM3_IRQHandler+0x10>)
 8001ac2:	f003 fe57 	bl	8005774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200005bc 	.word	0x200005bc

08001ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM4_IRQHandler+0x10>)
 8001ad6:	f003 fe4d 	bl	8005774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003c4 	.word	0x200003c4

08001ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <USART1_IRQHandler+0x10>)
 8001aea:	f004 fc83 	bl	80063f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000074c 	.word	0x2000074c

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b2a:	f7ff ffe5 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f009 faf1 	bl	800b114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff f88b 	bl	8000c4c <main>
  bx lr
 8001b36:	4770      	bx	lr
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001b40:	0800b28c 	.word	0x0800b28c
  ldr r2, =_sbss
 8001b44:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001b48:	200017ec 	.word	0x200017ec

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_Init+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_Init+0x28>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 fce5 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff fdc6 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fcfd 	bl	800259a <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 fcc5 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x20>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000c38 	.word	0x20000c38

08001c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000c38 	.word	0x20000c38

08001c14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0be      	b.n	8001db4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fd84 	bl	8001760 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 faf5 	bl	8002248 <ADC_ConversionStop_Disable>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 8099 	bne.w	8001da2 <HAL_ADC_Init+0x18e>
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8095 	bne.w	8001da2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c80:	f023 0302 	bic.w	r3, r3, #2
 8001c84:	f043 0202 	orr.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7b1b      	ldrb	r3, [r3, #12]
 8001c9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cac:	d003      	beq.n	8001cb6 <HAL_ADC_Init+0xa2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_ADC_Init+0xa8>
 8001cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_Init+0xaa>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7d1b      	ldrb	r3, [r3, #20]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d119      	bne.n	8001d00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7b1b      	ldrb	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	035a      	lsls	r2, r3, #13
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e00b      	b.n	8001d00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_ADC_Init+0x1a8>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d30:	d003      	beq.n	8001d3a <HAL_ADC_Init+0x126>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d104      	bne.n	8001d44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	051b      	lsls	r3, r3, #20
 8001d42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_ADC_Init+0x1ac>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d10b      	bne.n	8001d80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d7e:	e018      	b.n	8001db2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f023 0312 	bic.w	r3, r3, #18
 8001d88:	f043 0210 	orr.w	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001da0:	e007      	b.n	8001db2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	ffe1f7fd 	.word	0xffe1f7fd
 8001dc0:	ff1f0efe 	.word	0xff1f0efe

08001dc4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a64      	ldr	r2, [pc, #400]	; (8001f6c <HAL_ADC_Start_DMA+0x1a8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_Start_DMA+0x24>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_ADC_Start_DMA+0x1ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d106      	bne.n	8001df6 <HAL_ADC_Start_DMA+0x32>
 8001de8:	4b60      	ldr	r3, [pc, #384]	; (8001f6c <HAL_ADC_Start_DMA+0x1a8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 80b3 	bne.w	8001f5c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x40>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0ae      	b.n	8001f62 <HAL_ADC_Start_DMA+0x19e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9c1 	bl	8002194 <ADC_Enable>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 809a 	bne.w	8001f52 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4e      	ldr	r2, [pc, #312]	; (8001f70 <HAL_ADC_Start_DMA+0x1ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_Start_DMA+0x84>
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_ADC_Start_DMA+0x1a8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d115      	bne.n	8001e74 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d026      	beq.n	8001eb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e72:	e01d      	b.n	8001eb0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a39      	ldr	r2, [pc, #228]	; (8001f6c <HAL_ADC_Start_DMA+0x1a8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_Start_DMA+0xd0>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_ADC_Start_DMA+0x1ac>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d10d      	bne.n	8001eb0 <HAL_ADC_Start_DMA+0xec>
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <HAL_ADC_Start_DMA+0x1a8>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ea8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	f023 0206 	bic.w	r2, r3, #6
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <HAL_ADC_Start_DMA+0x1b0>)
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <HAL_ADC_Start_DMA+0x1b4>)
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <HAL_ADC_Start_DMA+0x1b8>)
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0202 	mvn.w	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f08:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a18      	ldr	r0, [r3, #32]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	334c      	adds	r3, #76	; 0x4c
 8001f14:	4619      	mov	r1, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f000 fba5 	bl	8002668 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f2c:	d108      	bne.n	8001f40 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f3c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f3e:	e00f      	b.n	8001f60 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f4e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f50:	e006      	b.n	8001f60 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f5a:	e001      	b.n	8001f60 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012400 	.word	0x40012400
 8001f70:	40012800 	.word	0x40012800
 8001f74:	080022cb 	.word	0x080022cb
 8001f78:	08002347 	.word	0x08002347
 8001f7c:	08002363 	.word	0x08002363

08001f80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x20>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0dc      	b.n	800217e <HAL_ADC_ConfigChannel+0x1da>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d81c      	bhi.n	800200e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b05      	subs	r3, #5
 8001fe6:	221f      	movs	r2, #31
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4019      	ands	r1, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b05      	subs	r3, #5
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
 800200c:	e03c      	b.n	8002088 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d81c      	bhi.n	8002050 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b23      	subs	r3, #35	; 0x23
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	4019      	ands	r1, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b23      	subs	r3, #35	; 0x23
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
 800204e:	e01b      	b.n	8002088 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	3b41      	subs	r3, #65	; 0x41
 8002062:	221f      	movs	r2, #31
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	4019      	ands	r1, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b41      	subs	r3, #65	; 0x41
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d91c      	bls.n	80020ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	2207      	movs	r2, #7
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6898      	ldr	r0, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	e019      	b.n	80020fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6919      	ldr	r1, [r3, #16]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b10      	cmp	r3, #16
 8002104:	d003      	beq.n	800210e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800210a:	2b11      	cmp	r3, #17
 800210c:	d132      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_ADC_ConfigChannel+0x1e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d125      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d126      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002134:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d11a      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_ADC_ConfigChannel+0x1e8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <HAL_ADC_ConfigChannel+0x1ec>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x1b2>
 8002162:	e007      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40012400 	.word	0x40012400
 800218c:	20000000 	.word	0x20000000
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d040      	beq.n	8002234 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <ADC_Enable+0xac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <ADC_Enable+0xb0>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9b      	lsrs	r3, r3, #18
 80021ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d0:	e002      	b.n	80021d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021de:	f7ff fd0f 	bl	8001c00 <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021e4:	e01f      	b.n	8002226 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021e6:	f7ff fd0b 	bl	8001c00 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d918      	bls.n	8002226 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d011      	beq.n	8002226 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e007      	b.n	8002236 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d1d8      	bne.n	80021e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d12e      	bne.n	80022c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002272:	f7ff fcc5 	bl	8001c00 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002278:	e01b      	b.n	80022b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227a:	f7ff fcc1 	bl	8001c00 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d914      	bls.n	80022b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e007      	b.n	80022c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d0dc      	beq.n	800227a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d127      	bne.n	8002334 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022fe:	d115      	bne.n	800232c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7fd ffff 	bl	8000330 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002332:	e004      	b.n	800233e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fe13 	bl	8001f80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff fe02 	bl	8001f92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <__NVIC_EnableIRQ+0x34>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff90 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff2d 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff42 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff90 	bl	8002488 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5f 	bl	8002434 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff35 	bl	80023fc <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e043      	b.n	8002652 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_DMA_Init+0xa8>)
 80025d2:	4413      	add	r3, r2
 80025d4:	4a22      	ldr	r2, [pc, #136]	; (8002660 <HAL_DMA_Init+0xac>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	009a      	lsls	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_DMA_Init+0xb0>)
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002602:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	bffdfff8 	.word	0xbffdfff8
 8002660:	cccccccd 	.word	0xcccccccd
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_DMA_Start_IT+0x20>
 8002684:	2302      	movs	r3, #2
 8002686:	e04a      	b.n	800271e <HAL_DMA_Start_IT+0xb6>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002696:	2b01      	cmp	r3, #1
 8002698:	d13a      	bne.n	8002710 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f9e8 	bl	8002a94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 020e 	orr.w	r2, r2, #14
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e00f      	b.n	80026fe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0204 	bic.w	r2, r2, #4
 80026ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 020a 	orr.w	r2, r2, #10
 80026fc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e005      	b.n	800271c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800271c:	7dfb      	ldrb	r3, [r7, #23]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002738:	2b02      	cmp	r3, #2
 800273a:	d008      	beq.n	800274e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2204      	movs	r2, #4
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e020      	b.n	8002790 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 020e 	bic.w	r2, r2, #14
 800275c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
	...

0800279c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d005      	beq.n	80027be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e051      	b.n	8002862 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 020e 	bic.w	r2, r2, #14
 80027cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_DMA_Abort_IT+0xd0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d029      	beq.n	800283c <HAL_DMA_Abort_IT+0xa0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_DMA_Abort_IT+0xd4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d022      	beq.n	8002838 <HAL_DMA_Abort_IT+0x9c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_DMA_Abort_IT+0xd8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01a      	beq.n	8002832 <HAL_DMA_Abort_IT+0x96>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_DMA_Abort_IT+0xdc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d012      	beq.n	800282c <HAL_DMA_Abort_IT+0x90>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_DMA_Abort_IT+0xe0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00a      	beq.n	8002826 <HAL_DMA_Abort_IT+0x8a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_DMA_Abort_IT+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d102      	bne.n	8002820 <HAL_DMA_Abort_IT+0x84>
 800281a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800281e:	e00e      	b.n	800283e <HAL_DMA_Abort_IT+0xa2>
 8002820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002824:	e00b      	b.n	800283e <HAL_DMA_Abort_IT+0xa2>
 8002826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800282a:	e008      	b.n	800283e <HAL_DMA_Abort_IT+0xa2>
 800282c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002830:	e005      	b.n	800283e <HAL_DMA_Abort_IT+0xa2>
 8002832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002836:	e002      	b.n	800283e <HAL_DMA_Abort_IT+0xa2>
 8002838:	2310      	movs	r3, #16
 800283a:	e000      	b.n	800283e <HAL_DMA_Abort_IT+0xa2>
 800283c:	2301      	movs	r3, #1
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_DMA_Abort_IT+0xe8>)
 8002840:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
    } 
  }
  return status;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40020008 	.word	0x40020008
 8002870:	4002001c 	.word	0x4002001c
 8002874:	40020030 	.word	0x40020030
 8002878:	40020044 	.word	0x40020044
 800287c:	40020058 	.word	0x40020058
 8002880:	4002006c 	.word	0x4002006c
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2204      	movs	r2, #4
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d04f      	beq.n	8002950 <HAL_DMA_IRQHandler+0xc8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d04a      	beq.n	8002950 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a66      	ldr	r2, [pc, #408]	; (8002a78 <HAL_DMA_IRQHandler+0x1f0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d029      	beq.n	8002936 <HAL_DMA_IRQHandler+0xae>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_DMA_IRQHandler+0x1f4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_IRQHandler+0xaa>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <HAL_DMA_IRQHandler+0x1f8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01a      	beq.n	800292c <HAL_DMA_IRQHandler+0xa4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a62      	ldr	r2, [pc, #392]	; (8002a84 <HAL_DMA_IRQHandler+0x1fc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d012      	beq.n	8002926 <HAL_DMA_IRQHandler+0x9e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a60      	ldr	r2, [pc, #384]	; (8002a88 <HAL_DMA_IRQHandler+0x200>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x98>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5f      	ldr	r2, [pc, #380]	; (8002a8c <HAL_DMA_IRQHandler+0x204>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d102      	bne.n	800291a <HAL_DMA_IRQHandler+0x92>
 8002914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002918:	e00e      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 800291a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800291e:	e00b      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002924:	e008      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800292a:	e005      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 800292c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002930:	e002      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002932:	2340      	movs	r3, #64	; 0x40
 8002934:	e000      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002936:	2304      	movs	r3, #4
 8002938:	4a55      	ldr	r2, [pc, #340]	; (8002a90 <HAL_DMA_IRQHandler+0x208>)
 800293a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8094 	beq.w	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800294e:	e08e      	b.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2202      	movs	r2, #2
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d056      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x186>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d051      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 020a 	bic.w	r2, r2, #10
 8002986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_DMA_IRQHandler+0x1f0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d029      	beq.n	80029ee <HAL_DMA_IRQHandler+0x166>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a37      	ldr	r2, [pc, #220]	; (8002a7c <HAL_DMA_IRQHandler+0x1f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x162>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a35      	ldr	r2, [pc, #212]	; (8002a80 <HAL_DMA_IRQHandler+0x1f8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01a      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x15c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a34      	ldr	r2, [pc, #208]	; (8002a84 <HAL_DMA_IRQHandler+0x1fc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0x156>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_DMA_IRQHandler+0x200>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x150>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <HAL_DMA_IRQHandler+0x204>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d102      	bne.n	80029d2 <HAL_DMA_IRQHandler+0x14a>
 80029cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029d0:	e00e      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	e00b      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029dc:	e008      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e2:	e005      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e8:	e002      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029ea:	2320      	movs	r3, #32
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029ee:	2302      	movs	r3, #2
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_DMA_IRQHandler+0x208>)
 80029f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d034      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a0c:	e02f      	b.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2208      	movs	r2, #8
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x1e8>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 020e 	bic.w	r2, r2, #14
 8002a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
    }
  }
  return;
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
}
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40020008 	.word	0x40020008
 8002a7c:	4002001c 	.word	0x4002001c
 8002a80:	40020030 	.word	0x40020030
 8002a84:	40020044 	.word	0x40020044
 8002a88:	40020058 	.word	0x40020058
 8002a8c:	4002006c 	.word	0x4002006c
 8002a90:	40020000 	.word	0x40020000

08002a94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d108      	bne.n	8002ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ad2:	e007      	b.n	8002ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b08b      	sub	sp, #44	; 0x2c
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	e169      	b.n	8002dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b04:	2201      	movs	r2, #1
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8158 	bne.w	8002dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a9a      	ldr	r2, [pc, #616]	; (8002d90 <HAL_GPIO_Init+0x2a0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d05e      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b2c:	4a98      	ldr	r2, [pc, #608]	; (8002d90 <HAL_GPIO_Init+0x2a0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d875      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b32:	4a98      	ldr	r2, [pc, #608]	; (8002d94 <HAL_GPIO_Init+0x2a4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d058      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b38:	4a96      	ldr	r2, [pc, #600]	; (8002d94 <HAL_GPIO_Init+0x2a4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d86f      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b3e:	4a96      	ldr	r2, [pc, #600]	; (8002d98 <HAL_GPIO_Init+0x2a8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d052      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b44:	4a94      	ldr	r2, [pc, #592]	; (8002d98 <HAL_GPIO_Init+0x2a8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d869      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b4a:	4a94      	ldr	r2, [pc, #592]	; (8002d9c <HAL_GPIO_Init+0x2ac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d04c      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b50:	4a92      	ldr	r2, [pc, #584]	; (8002d9c <HAL_GPIO_Init+0x2ac>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d863      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b56:	4a92      	ldr	r2, [pc, #584]	; (8002da0 <HAL_GPIO_Init+0x2b0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d046      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b5c:	4a90      	ldr	r2, [pc, #576]	; (8002da0 <HAL_GPIO_Init+0x2b0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d85d      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b62:	2b12      	cmp	r3, #18
 8002b64:	d82a      	bhi.n	8002bbc <HAL_GPIO_Init+0xcc>
 8002b66:	2b12      	cmp	r3, #18
 8002b68:	d859      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b6a:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <HAL_GPIO_Init+0x80>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002beb 	.word	0x08002beb
 8002b74:	08002bc5 	.word	0x08002bc5
 8002b78:	08002bd7 	.word	0x08002bd7
 8002b7c:	08002c19 	.word	0x08002c19
 8002b80:	08002c1f 	.word	0x08002c1f
 8002b84:	08002c1f 	.word	0x08002c1f
 8002b88:	08002c1f 	.word	0x08002c1f
 8002b8c:	08002c1f 	.word	0x08002c1f
 8002b90:	08002c1f 	.word	0x08002c1f
 8002b94:	08002c1f 	.word	0x08002c1f
 8002b98:	08002c1f 	.word	0x08002c1f
 8002b9c:	08002c1f 	.word	0x08002c1f
 8002ba0:	08002c1f 	.word	0x08002c1f
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002c1f 	.word	0x08002c1f
 8002bac:	08002c1f 	.word	0x08002c1f
 8002bb0:	08002c1f 	.word	0x08002c1f
 8002bb4:	08002bcd 	.word	0x08002bcd
 8002bb8:	08002be1 	.word	0x08002be1
 8002bbc:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <HAL_GPIO_Init+0x2b4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bc2:	e02c      	b.n	8002c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	623b      	str	r3, [r7, #32]
          break;
 8002bca:	e029      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	623b      	str	r3, [r7, #32]
          break;
 8002bd4:	e024      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	3308      	adds	r3, #8
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e01f      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	330c      	adds	r3, #12
 8002be6:	623b      	str	r3, [r7, #32]
          break;
 8002be8:	e01a      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e013      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	611a      	str	r2, [r3, #16]
          break;
 8002c0a:	e009      	b.n	8002c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	615a      	str	r2, [r3, #20]
          break;
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          break;
 8002c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2bff      	cmp	r3, #255	; 0xff
 8002c24:	d801      	bhi.n	8002c2a <HAL_GPIO_Init+0x13a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_Init+0x13e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2bff      	cmp	r3, #255	; 0xff
 8002c34:	d802      	bhi.n	8002c3c <HAL_GPIO_Init+0x14c>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	e002      	b.n	8002c42 <HAL_GPIO_Init+0x152>
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3b08      	subs	r3, #8
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	210f      	movs	r1, #15
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	6a39      	ldr	r1, [r7, #32]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80b1 	beq.w	8002dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c70:	4b4d      	ldr	r3, [pc, #308]	; (8002da8 <HAL_GPIO_Init+0x2b8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a4c      	ldr	r2, [pc, #304]	; (8002da8 <HAL_GPIO_Init+0x2b8>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x2bc>)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <HAL_GPIO_Init+0x2c0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_GPIO_Init+0x1ec>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_GPIO_Init+0x2c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00d      	beq.n	8002cd8 <HAL_GPIO_Init+0x1e8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <HAL_GPIO_Init+0x2c8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <HAL_GPIO_Init+0x1e4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3d      	ldr	r2, [pc, #244]	; (8002dbc <HAL_GPIO_Init+0x2cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_GPIO_Init+0x1e0>
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	e004      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	f002 0203 	and.w	r2, r2, #3
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cee:	492f      	ldr	r1, [pc, #188]	; (8002dac <HAL_GPIO_Init+0x2bc>)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	492c      	ldr	r1, [pc, #176]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4928      	ldr	r1, [pc, #160]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4922      	ldr	r1, [pc, #136]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	491e      	ldr	r1, [pc, #120]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4918      	ldr	r1, [pc, #96]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4914      	ldr	r1, [pc, #80]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d021      	beq.n	8002dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e021      	b.n	8002dd2 <HAL_GPIO_Init+0x2e2>
 8002d8e:	bf00      	nop
 8002d90:	10320000 	.word	0x10320000
 8002d94:	10310000 	.word	0x10310000
 8002d98:	10220000 	.word	0x10220000
 8002d9c:	10210000 	.word	0x10210000
 8002da0:	10120000 	.word	0x10120000
 8002da4:	10110000 	.word	0x10110000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40010800 	.word	0x40010800
 8002db4:	40010c00 	.word	0x40010c00
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40011400 	.word	0x40011400
 8002dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	4909      	ldr	r1, [pc, #36]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f47f ae8e 	bne.w	8002b04 <HAL_GPIO_Init+0x14>
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	372c      	adds	r7, #44	; 0x2c
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e001      	b.n	8002e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	807b      	strh	r3, [r7, #2]
 8002e32:	4613      	mov	r3, r2
 8002e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	041a      	lsls	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	611a      	str	r2, [r3, #16]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	041a      	lsls	r2, r3, #16
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	400b      	ands	r3, r1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e12b      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe fcbe 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eec:	f002 f9aa 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a81      	ldr	r2, [pc, #516]	; (80030fc <HAL_I2C_Init+0x274>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d807      	bhi.n	8002f0c <HAL_I2C_Init+0x84>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a80      	ldr	r2, [pc, #512]	; (8003100 <HAL_I2C_Init+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e006      	b.n	8002f1a <HAL_I2C_Init+0x92>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a7d      	ldr	r2, [pc, #500]	; (8003104 <HAL_I2C_Init+0x27c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e7      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a78      	ldr	r2, [pc, #480]	; (8003108 <HAL_I2C_Init+0x280>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <HAL_I2C_Init+0xd4>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	e009      	b.n	8002f70 <HAL_I2C_Init+0xe8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_I2C_Init+0x284>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	495c      	ldr	r1, [pc, #368]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d819      	bhi.n	8002fc4 <HAL_I2C_Init+0x13c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e59      	subs	r1, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_Init+0x138>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e59      	subs	r1, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbe:	e051      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e04f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_I2C_Init+0x168>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_I2C_Init+0x18e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x196>
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <HAL_I2C_Init+0x1bc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e58      	subs	r0, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	fbb0 f3f3 	udiv	r3, r0, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6809      	ldr	r1, [r1, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6911      	ldr	r1, [r2, #16]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	000186a0 	.word	0x000186a0
 8003100:	001e847f 	.word	0x001e847f
 8003104:	003d08ff 	.word	0x003d08ff
 8003108:	431bde83 	.word	0x431bde83
 800310c:	10624dd3 	.word	0x10624dd3

08003110 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003112:	b08b      	sub	sp, #44	; 0x2c
 8003114:	af06      	add	r7, sp, #24
 8003116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0fd      	b.n	800331e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f007 fd42 	bl	800abc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2203      	movs	r2, #3
 8003140:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fd57 	bl	8006bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	687e      	ldr	r6, [r7, #4]
 8003156:	466d      	mov	r5, sp
 8003158:	f106 0410 	add.w	r4, r6, #16
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	1d33      	adds	r3, r6, #4
 8003166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003168:	6838      	ldr	r0, [r7, #0]
 800316a:	f003 fd21 	bl	8006bb0 <USB_CoreInit>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0ce      	b.n	800331e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fd52 	bl	8006c30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e04c      	b.n	800322c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	3301      	adds	r3, #1
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	b298      	uxth	r0, r3
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	3336      	adds	r3, #54	; 0x36
 80031d0:	4602      	mov	r2, r0
 80031d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	3303      	adds	r3, #3
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	3338      	adds	r3, #56	; 0x38
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	333c      	adds	r3, #60	; 0x3c
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	3340      	adds	r3, #64	; 0x40
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	3301      	adds	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d3ad      	bcc.n	8003192 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e044      	b.n	80032c6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3b5      	bcc.n	800323c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	687e      	ldr	r6, [r7, #4]
 80032d8:	466d      	mov	r5, sp
 80032da:	f106 0410 	add.w	r4, r6, #16
 80032de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	602b      	str	r3, [r5, #0]
 80032e6:	1d33      	adds	r3, r6, #4
 80032e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f003 fcac 	bl	8006c48 <USB_DevInit>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00d      	b.n	800331e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f005 fe1d 	bl	8008f56 <USB_DevDisconnect>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003326 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_PCD_Start+0x16>
 8003338:	2302      	movs	r3, #2
 800333a:	e016      	b.n	800336a <HAL_PCD_Start+0x44>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fc41 	bl	8006bd0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800334e:	2101      	movs	r1, #1
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f007 fea8 	bl	800b0a6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f005 fdf1 	bl	8008f42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b088      	sub	sp, #32
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f005 fdf3 	bl	8008f6a <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338e:	d102      	bne.n	8003396 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb61 	bl	8003a58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f005 fde5 	bl	8008f6a <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	d112      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033be:	b292      	uxth	r2, r2
 80033c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f007 fc76 	bl	800acb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033ca:	2100      	movs	r1, #0
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f925 	bl	800361c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f005 fdc7 	bl	8008f6a <USB_ReadInterrupts>
 80033dc:	4603      	mov	r3, r0
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e6:	d10b      	bne.n	8003400 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033fa:	b292      	uxth	r2, r2
 80033fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 fdb0 	bl	8008f6a <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003414:	d10b      	bne.n	800342e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003428:	b292      	uxth	r2, r2
 800342a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f005 fd99 	bl	8008f6a <USB_ReadInterrupts>
 8003438:	4603      	mov	r3, r0
 800343a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003442:	d126      	bne.n	8003492 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0204 	bic.w	r2, r2, #4
 8003456:	b292      	uxth	r2, r2
 8003458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003464:	b29a      	uxth	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0208 	bic.w	r2, r2, #8
 800346e:	b292      	uxth	r2, r2
 8003470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f007 fc57 	bl	800ad28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800348c:	b292      	uxth	r2, r2
 800348e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f005 fd67 	bl	8008f6a <USB_ReadInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	f040 8084 	bne.w	80035b2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e011      	b.n	80034d4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	441a      	add	r2, r3
 80034bc:	7ffb      	ldrb	r3, [r7, #31]
 80034be:	8812      	ldrh	r2, [r2, #0]
 80034c0:	b292      	uxth	r2, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	f107 0120 	add.w	r1, r7, #32
 80034c8:	440b      	add	r3, r1
 80034ca:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	3301      	adds	r3, #1
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d9ea      	bls.n	80034b0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	b292      	uxth	r2, r2
 80034ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	b292      	uxth	r2, r2
 8003506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800350a:	bf00      	nop
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003514:	b29b      	uxth	r3, r3
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f6      	beq.n	800350c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003530:	b292      	uxth	r2, r2
 8003532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e010      	b.n	800355e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	4611      	mov	r1, r2
 8003544:	7ffa      	ldrb	r2, [r7, #31]
 8003546:	0092      	lsls	r2, r2, #2
 8003548:	440a      	add	r2, r1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	f107 0120 	add.w	r1, r7, #32
 8003550:	440b      	add	r3, r1
 8003552:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003556:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003558:	7ffb      	ldrb	r3, [r7, #31]
 800355a:	3301      	adds	r3, #1
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	7ffb      	ldrb	r3, [r7, #31]
 8003560:	2b07      	cmp	r3, #7
 8003562:	d9eb      	bls.n	800353c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0208 	orr.w	r2, r2, #8
 8003576:	b292      	uxth	r2, r2
 8003578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800358e:	b292      	uxth	r2, r2
 8003590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0204 	orr.w	r2, r2, #4
 80035a6:	b292      	uxth	r2, r2
 80035a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f007 fba1 	bl	800acf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 fcd7 	bl	8008f6a <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c6:	d10e      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035da:	b292      	uxth	r2, r2
 80035dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f007 fb5a 	bl	800ac9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 fcbd 	bl	8008f6a <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fa:	d10b      	bne.n	8003614 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800360e:	b292      	uxth	r2, r2
 8003610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003614:	bf00      	nop
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_PCD_SetAddress+0x1a>
 8003632:	2302      	movs	r3, #2
 8003634:	e013      	b.n	800365e <HAL_PCD_SetAddress+0x42>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f005 fc64 	bl	8008f1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	4608      	mov	r0, r1
 8003670:	4611      	mov	r1, r2
 8003672:	461a      	mov	r2, r3
 8003674:	4603      	mov	r3, r0
 8003676:	70fb      	strb	r3, [r7, #3]
 8003678:	460b      	mov	r3, r1
 800367a:	803b      	strh	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da0e      	bge.n	80036aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	705a      	strb	r2, [r3, #1]
 80036a8:	e00e      	b.n	80036c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 0207 	and.w	r2, r3, #7
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036d4:	883a      	ldrh	r2, [r7, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	78ba      	ldrb	r2, [r7, #2]
 80036de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036f2:	78bb      	ldrb	r3, [r7, #2]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d102      	bne.n	80036fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_PCD_EP_Open+0xa6>
 8003708:	2302      	movs	r3, #2
 800370a:	e00e      	b.n	800372a <HAL_PCD_EP_Open+0xc4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68f9      	ldr	r1, [r7, #12]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 fab4 	bl	8006c88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003728:	7afb      	ldrb	r3, [r7, #11]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800373e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003742:	2b00      	cmp	r3, #0
 8003744:	da0e      	bge.n	8003764 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	705a      	strb	r2, [r3, #1]
 8003762:	e00e      	b.n	8003782 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 0207 	and.w	r2, r3, #7
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_PCD_EP_Close+0x6a>
 8003798:	2302      	movs	r3, #2
 800379a:	e00e      	b.n	80037ba <HAL_PCD_EP_Close+0x88>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fdd6 	bl	800735c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	460b      	mov	r3, r1
 80037d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	f003 0207 	and.w	r2, r3, #7
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	b2da      	uxtb	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800380e:	7afb      	ldrb	r3, [r7, #11]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6979      	ldr	r1, [r7, #20]
 800381e:	4618      	mov	r0, r3
 8003820:	f003 ff88 	bl	8007734 <USB_EPStartXfer>
 8003824:	e005      	b.n	8003832 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	4618      	mov	r0, r3
 800382e:	f003 ff81 	bl	8007734 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 0207 	and.w	r2, r3, #7
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c2:	7afb      	ldrb	r3, [r7, #11]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 ff2e 	bl	8007734 <USB_EPStartXfer>
 80038d8:	e005      	b.n	80038e6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 ff27 	bl	8007734 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f003 0207 	and.w	r2, r3, #7
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d901      	bls.n	800390e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e04c      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800390e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da0e      	bge.n	8003934 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	705a      	strb	r2, [r3, #1]
 8003932:	e00c      	b.n	800394e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	b2da      	uxtb	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_PCD_EP_SetStall+0x7e>
 800396a:	2302      	movs	r3, #2
 800396c:	e01c      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xb8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68f9      	ldr	r1, [r7, #12]
 800397c:	4618      	mov	r0, r3
 800397e:	f005 f9d0 	bl	8008d22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f005 faf5 	bl	8008f88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d901      	bls.n	80039ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e040      	b.n	8003a50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0e      	bge.n	80039f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_PCD_EP_ClrStall+0x82>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e00e      	b.n	8003a50 <HAL_PCD_EP_ClrStall+0xa0>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f005 f9be 	bl	8008dc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08e      	sub	sp, #56	; 0x38
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a60:	e2ec      	b.n	800403c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f040 8161 	bne.w	8003d44 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d152      	bne.n	8003b32 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9c:	81fb      	strh	r3, [r7, #14]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	89fb      	ldrh	r3, [r7, #14]
 8003aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3302      	adds	r3, #2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	441a      	add	r2, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003af0:	2100      	movs	r1, #0
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f007 f8b7 	bl	800ac66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 829b 	beq.w	800403c <PCD_EP_ISR_Handler+0x5e4>
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 8296 	bne.w	800403c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b292      	uxth	r2, r2
 8003b24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b30:	e284      	b.n	800403c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d034      	beq.n	8003bb6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3306      	adds	r3, #6
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f005 fa4c 	bl	8009028 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	823b      	strh	r3, [r7, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	8a3a      	ldrh	r2, [r7, #16]
 8003ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003baa:	b292      	uxth	r2, r2
 8003bac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f007 f82c 	bl	800ac0c <HAL_PCD_SetupStageCallback>
 8003bb4:	e242      	b.n	800403c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bb6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f280 823e 	bge.w	800403c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bcc:	4013      	ands	r3, r2
 8003bce:	83bb      	strh	r3, [r7, #28]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	8bba      	ldrh	r2, [r7, #28]
 8003bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3306      	adds	r3, #6
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d019      	beq.n	8003c46 <PCD_EP_ISR_Handler+0x1ee>
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d015      	beq.n	8003c46 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	6959      	ldr	r1, [r3, #20]
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f005 f9fc 	bl	8009028 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	441a      	add	r2, r3
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f006 fff5 	bl	800ac30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 81f2 	bne.w	800403c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d112      	bne.n	8003ca6 <PCD_EP_ISR_Handler+0x24e>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	e02f      	b.n	8003d06 <PCD_EP_ISR_Handler+0x2ae>
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b3e      	cmp	r3, #62	; 0x3e
 8003cac:	d813      	bhi.n	8003cd6 <PCD_EP_ISR_Handler+0x27e>
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <PCD_EP_ISR_Handler+0x270>
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	029b      	lsls	r3, r3, #10
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	e017      	b.n	8003d06 <PCD_EP_ISR_Handler+0x2ae>
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <PCD_EP_ISR_Handler+0x298>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	3b01      	subs	r3, #1
 8003cee:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	827b      	strh	r3, [r7, #18]
 8003d18:	8a7b      	ldrh	r3, [r7, #18]
 8003d1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d1e:	827b      	strh	r3, [r7, #18]
 8003d20:	8a7b      	ldrh	r3, [r7, #18]
 8003d22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d26:	827b      	strh	r3, [r7, #18]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	8a7b      	ldrh	r3, [r7, #18]
 8003d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	8013      	strh	r3, [r2, #0]
 8003d42:	e17b      	b.n	800403c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d56:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f280 80ea 	bge.w	8003f34 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d76:	4013      	ands	r3, r2
 8003d78:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d8e:	b292      	uxth	r2, r2
 8003d90:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d92:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	7b1b      	ldrb	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d122      	bne.n	8003df6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3306      	adds	r3, #6
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003dda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8087 	beq.w	8003ef0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6959      	ldr	r1, [r3, #20]
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	88da      	ldrh	r2, [r3, #6]
 8003dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003df0:	f005 f91a 	bl	8009028 <USB_ReadPMA>
 8003df4:	e07c      	b.n	8003ef0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	78db      	ldrb	r3, [r3, #3]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d108      	bne.n	8003e10 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e00:	461a      	mov	r2, r3
 8003e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f927 	bl	8004058 <HAL_PCD_EP_DB_Receive>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e0e:	e06f      	b.n	8003ef0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d021      	beq.n	8003eae <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e92:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02a      	beq.n	8003ef0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	6959      	ldr	r1, [r3, #20]
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	891a      	ldrh	r2, [r3, #8]
 8003ea6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ea8:	f005 f8be 	bl	8009028 <USB_ReadPMA>
 8003eac:	e020      	b.n	8003ef0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3306      	adds	r3, #6
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	6959      	ldr	r1, [r3, #20]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	895a      	ldrh	r2, [r3, #10]
 8003eea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eec:	f005 f89c 	bl	8009028 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ef6:	441a      	add	r2, r3
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f02:	441a      	add	r2, r3
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <PCD_EP_ISR_Handler+0x4c2>
 8003f10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d206      	bcs.n	8003f28 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f006 fe85 	bl	800ac30 <HAL_PCD_DataOutStageCallback>
 8003f26:	e005      	b.n	8003f34 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fc00 	bl	8007734 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d07e      	beq.n	800403c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4413      	add	r3, r2
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6c:	843b      	strh	r3, [r7, #32]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	441a      	add	r2, r3
 8003f7c:	8c3b      	ldrh	r3, [r7, #32]
 8003f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	78db      	ldrb	r3, [r3, #3]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d00c      	beq.n	8003fac <PCD_EP_ISR_Handler+0x554>
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	78db      	ldrb	r3, [r3, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d146      	bne.n	8004030 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003fa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d141      	bne.n	8004030 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	8bfb      	ldrh	r3, [r7, #30]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d906      	bls.n	8003fee <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	8bfb      	ldrh	r3, [r7, #30]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	619a      	str	r2, [r3, #24]
 8003fec:	e002      	b.n	8003ff4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f006 fe2f 	bl	800ac66 <HAL_PCD_DataInStageCallback>
 8004008:	e018      	b.n	800403c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	8bfb      	ldrh	r3, [r7, #30]
 8004010:	441a      	add	r2, r3
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	8bfb      	ldrh	r3, [r7, #30]
 800401c:	441a      	add	r2, r3
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004028:	4618      	mov	r0, r3
 800402a:	f003 fb83 	bl	8007734 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800402e:	e005      	b.n	800403c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004030:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004032:	461a      	mov	r2, r3
 8004034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f91b 	bl	8004272 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004044:	b29b      	uxth	r3, r3
 8004046:	b21b      	sxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f6ff ad0a 	blt.w	8003a62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3738      	adds	r7, #56	; 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d07e      	beq.n	800416e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004078:	b29b      	uxth	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	3302      	adds	r3, #2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004098:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	8b7b      	ldrh	r3, [r7, #26]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d306      	bcc.n	80040b2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	8b7b      	ldrh	r3, [r7, #26]
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	619a      	str	r2, [r3, #24]
 80040b0:	e002      	b.n	80040b8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d123      	bne.n	8004108 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	833b      	strh	r3, [r7, #24]
 80040dc:	8b3b      	ldrh	r3, [r7, #24]
 80040de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040e2:	833b      	strh	r3, [r7, #24]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	8b3b      	ldrh	r3, [r7, #24]
 80040f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004104:	b29b      	uxth	r3, r3
 8004106:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01f      	beq.n	8004152 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	82fb      	strh	r3, [r7, #22]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	8afb      	ldrh	r3, [r7, #22]
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004152:	8b7b      	ldrh	r3, [r7, #26]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8087 	beq.w	8004268 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6959      	ldr	r1, [r3, #20]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	891a      	ldrh	r2, [r3, #8]
 8004166:	8b7b      	ldrh	r3, [r7, #26]
 8004168:	f004 ff5e 	bl	8009028 <USB_ReadPMA>
 800416c:	e07c      	b.n	8004268 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	3306      	adds	r3, #6
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004196:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	8b7b      	ldrh	r3, [r7, #26]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d306      	bcc.n	80041b0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	8b7b      	ldrh	r3, [r7, #26]
 80041a8:	1ad2      	subs	r2, r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	619a      	str	r2, [r3, #24]
 80041ae:	e002      	b.n	80041b6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d123      	bne.n	8004206 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d8:	83fb      	strh	r3, [r7, #30]
 80041da:	8bfb      	ldrh	r3, [r7, #30]
 80041dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041e0:	83fb      	strh	r3, [r7, #30]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	8bfb      	ldrh	r3, [r7, #30]
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11f      	bne.n	8004250 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	83bb      	strh	r3, [r7, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	8bbb      	ldrh	r3, [r7, #28]
 800423c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004250:	8b7b      	ldrh	r3, [r7, #26]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6959      	ldr	r1, [r3, #20]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	895a      	ldrh	r2, [r3, #10]
 8004262:	8b7b      	ldrh	r3, [r7, #26]
 8004264:	f004 fee0 	bl	8009028 <USB_ReadPMA>
    }
  }

  return count;
 8004268:	8b7b      	ldrh	r3, [r7, #26]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b0a2      	sub	sp, #136	; 0x88
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 81c7 	beq.w	800461a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	3302      	adds	r3, #2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d907      	bls.n	80042d4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	619a      	str	r2, [r3, #24]
 80042d2:	e002      	b.n	80042da <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 80b9 	bne.w	8004456 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d126      	bne.n	800433a <HAL_PCD_EP_DB_Transmit+0xc8>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	4413      	add	r3, r2
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	4413      	add	r3, r2
 800430e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800431e:	b29a      	uxth	r2, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004332:	b29a      	uxth	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	e01a      	b.n	8004370 <HAL_PCD_EP_DB_Transmit+0xfe>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d116      	bne.n	8004370 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	4413      	add	r3, r2
 8004358:	633b      	str	r3, [r7, #48]	; 0x30
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	011a      	lsls	r2, r3, #4
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	4413      	add	r3, r2
 8004364:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	2200      	movs	r2, #0
 800436e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d126      	bne.n	80043cc <HAL_PCD_EP_DB_Transmit+0x15a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4413      	add	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	011a      	lsls	r2, r3, #4
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	e017      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d113      	bne.n	80043fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	4413      	add	r3, r2
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	011a      	lsls	r2, r3, #4
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	4413      	add	r3, r2
 80043f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2200      	movs	r2, #0
 80043fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f006 fc2f 	bl	800ac66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 82d4 	beq.w	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	827b      	strh	r3, [r7, #18]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	8a7b      	ldrh	r3, [r7, #18]
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]
 8004454:	e2b2      	b.n	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d021      	beq.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f040 8286 	bne.w	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044b8:	441a      	add	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044c6:	441a      	add	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d309      	bcc.n	80044ec <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e4:	1ad2      	subs	r2, r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	621a      	str	r2, [r3, #32]
 80044ea:	e015      	b.n	8004518 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80044f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004502:	e009      	b.n	8004518 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d155      	bne.n	80045cc <HAL_PCD_EP_DB_Transmit+0x35a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	63bb      	str	r3, [r7, #56]	; 0x38
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	4413      	add	r3, r2
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011a      	lsls	r2, r3, #4
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	4413      	add	r3, r2
 8004542:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
 8004548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454a:	2b00      	cmp	r3, #0
 800454c:	d112      	bne.n	8004574 <HAL_PCD_EP_DB_Transmit+0x302>
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004558:	b29a      	uxth	r2, r3
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	801a      	strh	r2, [r3, #0]
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456c:	b29a      	uxth	r2, r3
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e047      	b.n	8004604 <HAL_PCD_EP_DB_Transmit+0x392>
 8004574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004576:	2b3e      	cmp	r3, #62	; 0x3e
 8004578:	d811      	bhi.n	800459e <HAL_PCD_EP_DB_Transmit+0x32c>
 800457a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_PCD_EP_DB_Transmit+0x31e>
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458c:	3301      	adds	r3, #1
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	b29b      	uxth	r3, r3
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	b29a      	uxth	r2, r3
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	e032      	b.n	8004604 <HAL_PCD_EP_DB_Transmit+0x392>
 800459e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x342>
 80045ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b0:	3b01      	subs	r3, #1
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	029b      	lsls	r3, r3, #10
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e01b      	b.n	8004604 <HAL_PCD_EP_DB_Transmit+0x392>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d117      	bne.n	8004604 <HAL_PCD_EP_DB_Transmit+0x392>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e8:	4413      	add	r3, r2
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	011a      	lsls	r2, r3, #4
 80045f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6959      	ldr	r1, [r3, #20]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	891a      	ldrh	r2, [r3, #8]
 8004610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	f004 fcc3 	bl	8008f9e <USB_WritePMA>
 8004618:	e1d0      	b.n	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	3306      	adds	r3, #6
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800464e:	429a      	cmp	r2, r3
 8004650:	d307      	bcc.n	8004662 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800465a:	1ad2      	subs	r2, r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	619a      	str	r2, [r3, #24]
 8004660:	e002      	b.n	8004668 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 80c4 	bne.w	80047fa <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d126      	bne.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x456>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468e:	4413      	add	r3, r2
 8004690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	011a      	lsls	r2, r3, #4
 8004698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469a:	4413      	add	r3, r2
 800469c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	e01a      	b.n	80046fe <HAL_PCD_EP_DB_Transmit+0x48c>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d116      	bne.n	80046fe <HAL_PCD_EP_DB_Transmit+0x48c>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	677b      	str	r3, [r7, #116]	; 0x74
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e4:	4413      	add	r3, r2
 80046e6:	677b      	str	r3, [r7, #116]	; 0x74
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	011a      	lsls	r2, r3, #4
 80046ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f0:	4413      	add	r3, r2
 80046f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046f6:	673b      	str	r3, [r7, #112]	; 0x70
 80046f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046fa:	2200      	movs	r2, #0
 80046fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	67bb      	str	r3, [r7, #120]	; 0x78
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d12f      	bne.n	800476c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004724:	4413      	add	r3, r2
 8004726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	011a      	lsls	r2, r3, #4
 8004730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004734:	4413      	add	r3, r2
 8004736:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800473a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800473e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800474a:	b29a      	uxth	r2, r3
 800474c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004762:	b29a      	uxth	r2, r3
 8004764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	e017      	b.n	800479c <HAL_PCD_EP_DB_Transmit+0x52a>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d113      	bne.n	800479c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004782:	4413      	add	r3, r2
 8004784:	67bb      	str	r3, [r7, #120]	; 0x78
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	011a      	lsls	r2, r3, #4
 800478c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478e:	4413      	add	r3, r2
 8004790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004794:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004798:	2200      	movs	r2, #0
 800479a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f006 fa5f 	bl	800ac66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 8104 	bne.w	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	441a      	add	r2, r3
 80047e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	8013      	strh	r3, [r2, #0]
 80047f8:	e0e0      	b.n	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d121      	bne.n	8004848 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004844:	b29b      	uxth	r3, r3
 8004846:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800484e:	2b01      	cmp	r3, #1
 8004850:	f040 80b4 	bne.w	80049bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800485c:	441a      	add	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800486a:	441a      	add	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d309      	bcc.n	8004890 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004888:	1ad2      	subs	r2, r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	621a      	str	r2, [r3, #32]
 800488e:	e015      	b.n	80048bc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800489c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80048a6:	e009      	b.n	80048bc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2200      	movs	r2, #0
 80048b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	667b      	str	r3, [r7, #100]	; 0x64
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d155      	bne.n	8004976 <HAL_PCD_EP_DB_Transmit+0x704>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048de:	4413      	add	r3, r2
 80048e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	011a      	lsls	r2, r3, #4
 80048e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ea:	4413      	add	r3, r2
 80048ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80048f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d112      	bne.n	800491e <HAL_PCD_EP_DB_Transmit+0x6ac>
 80048f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004902:	b29a      	uxth	r2, r3
 8004904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004916:	b29a      	uxth	r2, r3
 8004918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	e044      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x736>
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	2b3e      	cmp	r3, #62	; 0x3e
 8004922:	d811      	bhi.n	8004948 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	657b      	str	r3, [r7, #84]	; 0x54
 800492a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004936:	3301      	adds	r3, #1
 8004938:	657b      	str	r3, [r7, #84]	; 0x54
 800493a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493c:	b29b      	uxth	r3, r3
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	b29a      	uxth	r2, r3
 8004942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	e02f      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	657b      	str	r3, [r7, #84]	; 0x54
 800494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495a:	3b01      	subs	r3, #1
 800495c:	657b      	str	r3, [r7, #84]	; 0x54
 800495e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004960:	b29b      	uxth	r3, r3
 8004962:	029b      	lsls	r3, r3, #10
 8004964:	b29b      	uxth	r3, r3
 8004966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800496a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496e:	b29a      	uxth	r2, r3
 8004970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004972:	801a      	strh	r2, [r3, #0]
 8004974:	e018      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d114      	bne.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x736>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004986:	b29b      	uxth	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800498c:	4413      	add	r3, r2
 800498e:	667b      	str	r3, [r7, #100]	; 0x64
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	011a      	lsls	r2, r3, #4
 8004996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004998:	4413      	add	r3, r2
 800499a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800499e:	663b      	str	r3, [r7, #96]	; 0x60
 80049a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	895a      	ldrh	r2, [r3, #10]
 80049b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f004 faf1 	bl	8008f9e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	823b      	strh	r3, [r7, #16]
 80049d8:	8a3b      	ldrh	r3, [r7, #16]
 80049da:	f083 0310 	eor.w	r3, r3, #16
 80049de:	823b      	strh	r3, [r7, #16]
 80049e0:	8a3b      	ldrh	r3, [r7, #16]
 80049e2:	f083 0320 	eor.w	r3, r3, #32
 80049e6:	823b      	strh	r3, [r7, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	8a3b      	ldrh	r3, [r7, #16]
 80049f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3788      	adds	r7, #136	; 0x88
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	817b      	strh	r3, [r7, #10]
 8004a24:	4613      	mov	r3, r2
 8004a26:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a28:	897b      	ldrh	r3, [r7, #10]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a34:	897b      	ldrh	r3, [r7, #10]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e009      	b.n	8004a60 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a4c:	897a      	ldrh	r2, [r7, #10]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a60:	893b      	ldrh	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d107      	bne.n	8004a76 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	80da      	strh	r2, [r3, #6]
 8004a74:	e00b      	b.n	8004a8e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e26c      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8087 	beq.w	8004bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004abc:	4b92      	ldr	r3, [pc, #584]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ac8:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d112      	bne.n	8004afa <HAL_RCC_OscConfig+0x5e>
 8004ad4:	4b8c      	ldr	r3, [pc, #560]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae2:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d06c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x12c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d168      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e246      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x76>
 8004b04:	4b80      	ldr	r3, [pc, #512]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7f      	ldr	r2, [pc, #508]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	e02e      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a77      	ldr	r2, [pc, #476]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e01d      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCC_OscConfig+0xbc>
 8004b3e:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a71      	ldr	r2, [pc, #452]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6e      	ldr	r2, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e00b      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b58:	4b6b      	ldr	r3, [pc, #428]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a6a      	ldr	r2, [pc, #424]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b68      	ldr	r3, [pc, #416]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a67      	ldr	r2, [pc, #412]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fd f842 	bl	8001c00 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd f83e 	bl	8001c00 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1fa      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	4b5d      	ldr	r3, [pc, #372]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0xe4>
 8004b9e:	e014      	b.n	8004bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd f82e 	bl	8001c00 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd f82a 	bl	8001c00 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1e6      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bba:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x10c>
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d063      	beq.n	8004c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bd6:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00b      	beq.n	8004bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004be2:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d11c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x18c>
 8004bee:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d116      	bne.n	8004c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfa:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_RCC_OscConfig+0x176>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e1ba      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4939      	ldr	r1, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	e03a      	b.n	8004c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d020      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c30:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fc ffe3 	bl	8001c00 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3e:	f7fc ffdf 	bl	8001c00 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e19b      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4927      	ldr	r1, [pc, #156]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]
 8004c70:	e015      	b.n	8004c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc ffc2 	bl	8001c00 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c80:	f7fc ffbe 	bl	8001c00 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e17a      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d03a      	beq.n	8004d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d019      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb8:	f7fc ffa2 	bl	8001c00 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc0:	f7fc ff9e 	bl	8001c00 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e15a      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f000 fad8 	bl	8005294 <RCC_Delay>
 8004ce4:	e01c      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cec:	f7fc ff88 	bl	8001c00 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf2:	e00f      	b.n	8004d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf4:	f7fc ff84 	bl	8001c00 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d908      	bls.n	8004d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e140      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	42420000 	.word	0x42420000
 8004d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	4b9e      	ldr	r3, [pc, #632]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e9      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a6 	beq.w	8004e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d32:	4b97      	ldr	r3, [pc, #604]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10d      	bne.n	8004d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	4b94      	ldr	r3, [pc, #592]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4a93      	ldr	r2, [pc, #588]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	61d3      	str	r3, [r2, #28]
 8004d4a:	4b91      	ldr	r3, [pc, #580]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b8e      	ldr	r3, [pc, #568]	; (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d118      	bne.n	8004d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d66:	4b8b      	ldr	r3, [pc, #556]	; (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a8a      	ldr	r2, [pc, #552]	; (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d72:	f7fc ff45 	bl	8001c00 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7a:	f7fc ff41 	bl	8001c00 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b64      	cmp	r3, #100	; 0x64
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e0fd      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8c:	4b81      	ldr	r3, [pc, #516]	; (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <HAL_RCC_OscConfig+0x312>
 8004da0:	4b7b      	ldr	r3, [pc, #492]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4a7a      	ldr	r2, [pc, #488]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6213      	str	r3, [r2, #32]
 8004dac:	e02d      	b.n	8004e0a <HAL_RCC_OscConfig+0x36e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x334>
 8004db6:	4b76      	ldr	r3, [pc, #472]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a75      	ldr	r2, [pc, #468]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6213      	str	r3, [r2, #32]
 8004dc2:	4b73      	ldr	r3, [pc, #460]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4a72      	ldr	r2, [pc, #456]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6213      	str	r3, [r2, #32]
 8004dce:	e01c      	b.n	8004e0a <HAL_RCC_OscConfig+0x36e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d10c      	bne.n	8004df2 <HAL_RCC_OscConfig+0x356>
 8004dd8:	4b6d      	ldr	r3, [pc, #436]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4a6c      	ldr	r2, [pc, #432]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004dde:	f043 0304 	orr.w	r3, r3, #4
 8004de2:	6213      	str	r3, [r2, #32]
 8004de4:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4a69      	ldr	r2, [pc, #420]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6213      	str	r3, [r2, #32]
 8004df0:	e00b      	b.n	8004e0a <HAL_RCC_OscConfig+0x36e>
 8004df2:	4b67      	ldr	r3, [pc, #412]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	4a66      	ldr	r2, [pc, #408]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	6213      	str	r3, [r2, #32]
 8004dfe:	4b64      	ldr	r3, [pc, #400]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4a63      	ldr	r2, [pc, #396]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d015      	beq.n	8004e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e12:	f7fc fef5 	bl	8001c00 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fc fef1 	bl	8001c00 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e0ab      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e30:	4b57      	ldr	r3, [pc, #348]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ee      	beq.n	8004e1a <HAL_RCC_OscConfig+0x37e>
 8004e3c:	e014      	b.n	8004e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3e:	f7fc fedf 	bl	8001c00 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fc fedb 	bl	8001c00 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e095      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5c:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ee      	bne.n	8004e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6e:	4b48      	ldr	r3, [pc, #288]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4a47      	ldr	r2, [pc, #284]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8081 	beq.w	8004f86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d061      	beq.n	8004f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d146      	bne.n	8004f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e98:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <HAL_RCC_OscConfig+0x4fc>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9e:	f7fc feaf 	bl	8001c00 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea6:	f7fc feab 	bl	8001c00 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e067      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d108      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	492d      	ldr	r1, [pc, #180]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a19      	ldr	r1, [r3, #32]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	4927      	ldr	r1, [pc, #156]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef8:	4b27      	ldr	r3, [pc, #156]	; (8004f98 <HAL_RCC_OscConfig+0x4fc>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fc fe7f 	bl	8001c00 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fc fe7b 	bl	8001c00 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e037      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f18:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x46a>
 8004f24:	e02f      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <HAL_RCC_OscConfig+0x4fc>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fc fe68 	bl	8001c00 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fc fe64 	bl	8001c00 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e020      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x498>
 8004f52:	e018      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e013      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_OscConfig+0x4f4>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d106      	bne.n	8004f82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d001      	beq.n	8004f86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
 8004f98:	42420060 	.word	0x42420060

08004f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0d0      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d910      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b67      	ldr	r3, [pc, #412]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 0207 	bic.w	r2, r3, #7
 8004fc6:	4965      	ldr	r1, [pc, #404]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b8      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff8:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4a52      	ldr	r2, [pc, #328]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800501a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	494d      	ldr	r1, [pc, #308]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d040      	beq.n	80050bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e073      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506a:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06b      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b39      	ldr	r3, [pc, #228]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4936      	ldr	r1, [pc, #216]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800508c:	f7fc fdb8 	bl	8001c00 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fc fdb4 	bl	8001c00 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e053      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d210      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 0207 	bic.w	r2, r3, #7
 80050d2:	4922      	ldr	r1, [pc, #136]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e032      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4916      	ldr	r1, [pc, #88]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	490e      	ldr	r1, [pc, #56]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	490a      	ldr	r1, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1cc>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1d0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fc fd16 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40022000 	.word	0x40022000
 8005160:	40021000 	.word	0x40021000
 8005164:	0800b26c 	.word	0x0800b26c
 8005168:	20000000 	.word	0x20000000
 800516c:	20000004 	.word	0x20000004

08005170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b490      	push	{r4, r7}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005176:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005178:	1d3c      	adds	r4, r7, #4
 800517a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800517c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005180:	f240 2301 	movw	r3, #513	; 0x201
 8005184:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <HAL_RCC_GetSysClockFreq+0xb4>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d002      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x40>
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d003      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0x46>
 80051ae:	e02d      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b2:	623b      	str	r3, [r7, #32]
      break;
 80051b4:	e02d      	b.n	8005212 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	0c9b      	lsrs	r3, r3, #18
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051c2:	4413      	add	r3, r2
 80051c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	0c5b      	lsrs	r3, r3, #17
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051e2:	4413      	add	r3, r2
 80051e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4a0e      	ldr	r2, [pc, #56]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ee:	fb02 f203 	mul.w	r2, r2, r3
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	e004      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4a0b      	ldr	r2, [pc, #44]	; (800522c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	623b      	str	r3, [r7, #32]
      break;
 800520a:	e002      	b.n	8005212 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800520e:	623b      	str	r3, [r7, #32]
      break;
 8005210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005212:	6a3b      	ldr	r3, [r7, #32]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3728      	adds	r7, #40	; 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bc90      	pop	{r4, r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	0800b184 	.word	0x0800b184
 8005224:	40021000 	.word	0x40021000
 8005228:	007a1200 	.word	0x007a1200
 800522c:	003d0900 	.word	0x003d0900

08005230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005234:	4b02      	ldr	r3, [pc, #8]	; (8005240 <HAL_RCC_GetHCLKFreq+0x10>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	20000000 	.word	0x20000000

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005248:	f7ff fff2 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	0800b27c 	.word	0x0800b27c

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005270:	f7ff ffde 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	0adb      	lsrs	r3, r3, #11
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4903      	ldr	r1, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	0800b27c 	.word	0x0800b27c

08005294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <RCC_Delay+0x34>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <RCC_Delay+0x38>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052b0:	bf00      	nop
  }
  while (Delay --);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	60fa      	str	r2, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f9      	bne.n	80052b0 <RCC_Delay+0x1c>
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	20000000 	.word	0x20000000
 80052cc:	10624dd3 	.word	0x10624dd3

080052d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d07d      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f0:	4b4f      	ldr	r3, [pc, #316]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fc:	4b4c      	ldr	r3, [pc, #304]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	4a4b      	ldr	r2, [pc, #300]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	61d3      	str	r3, [r2, #28]
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005318:	4b46      	ldr	r3, [pc, #280]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d118      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005324:	4b43      	ldr	r3, [pc, #268]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a42      	ldr	r2, [pc, #264]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005330:	f7fc fc66 	bl	8001c00 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	e008      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fc fc62 	bl	8001c00 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e06d      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d02e      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	429a      	cmp	r2, r3
 8005372:	d027      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005374:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537e:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005384:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800538a:	4a29      	ldr	r2, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d014      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fc fc31 	bl	8001c00 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fc fc2d 	bl	8001c00 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e036      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ee      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4917      	ldr	r1, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	490b      	ldr	r1, [pc, #44]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4904      	ldr	r1, [pc, #16]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000
 8005434:	40007000 	.word	0x40007000
 8005438:	42420440 	.word	0x42420440

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e041      	b.n	80054d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc fa24 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 fc28 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e03a      	b.n	800556a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_TIM_Base_Start_IT+0x98>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x58>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d009      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x58>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <HAL_TIM_Base_Start_IT+0x9c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x58>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <HAL_TIM_Base_Start_IT+0xa0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d111      	bne.n	8005558 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b06      	cmp	r3, #6
 8005544:	d010      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	e007      	b.n	8005568 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800

08005580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e041      	b.n	8005616 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f839 	bl	800561e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 fb86 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <HAL_TIM_PWM_Start+0x24>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	e022      	b.n	800569a <HAL_TIM_PWM_Start+0x6a>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b04      	cmp	r3, #4
 8005658:	d109      	bne.n	800566e <HAL_TIM_PWM_Start+0x3e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	bf14      	ite	ne
 8005666:	2301      	movne	r3, #1
 8005668:	2300      	moveq	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	e015      	b.n	800569a <HAL_TIM_PWM_Start+0x6a>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d109      	bne.n	8005688 <HAL_TIM_PWM_Start+0x58>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e008      	b.n	800569a <HAL_TIM_PWM_Start+0x6a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e05e      	b.n	8005760 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_PWM_Start+0x82>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b0:	e013      	b.n	80056da <HAL_TIM_PWM_Start+0xaa>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x92>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c0:	e00b      	b.n	80056da <HAL_TIM_PWM_Start+0xaa>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_PWM_Start+0xa2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d0:	e003      	b.n	80056da <HAL_TIM_PWM_Start+0xaa>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2201      	movs	r2, #1
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fd74 	bl	80061d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <HAL_TIM_PWM_Start+0x138>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <HAL_TIM_PWM_Start+0x138>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIM_PWM_Start+0xfa>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d009      	beq.n	800572a <HAL_TIM_PWM_Start+0xfa>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a14      	ldr	r2, [pc, #80]	; (800576c <HAL_TIM_PWM_Start+0x13c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIM_PWM_Start+0xfa>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a12      	ldr	r2, [pc, #72]	; (8005770 <HAL_TIM_PWM_Start+0x140>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d010      	beq.n	800575e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	e007      	b.n	800575e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800

08005774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0202 	mvn.w	r2, #2
 80057a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa6f 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa62 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa71 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0204 	mvn.w	r2, #4
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa45 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa38 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa47 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b08      	cmp	r3, #8
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b08      	cmp	r3, #8
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0208 	mvn.w	r2, #8
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2204      	movs	r2, #4
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa1b 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa0e 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa1d 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b10      	cmp	r3, #16
 8005884:	d122      	bne.n	80058cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b10      	cmp	r3, #16
 8005892:	d11b      	bne.n	80058cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0210 	mvn.w	r2, #16
 800589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2208      	movs	r2, #8
 80058a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f9f1 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 80058b8:	e005      	b.n	80058c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9e4 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f9f3 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10e      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0201 	mvn.w	r2, #1
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fa fc8a 	bl	800020c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d10e      	bne.n	8005924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d107      	bne.n	8005924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fce1 	bl	80062e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d10e      	bne.n	8005950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d107      	bne.n	8005950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f9b7 	bl	8005cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d10e      	bne.n	800597c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b20      	cmp	r3, #32
 800596a:	d107      	bne.n	800597c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0220 	mvn.w	r2, #32
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fcac 	bl	80062d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800599a:	2302      	movs	r3, #2
 800599c:	e0ac      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b0c      	cmp	r3, #12
 80059aa:	f200 809f 	bhi.w	8005aec <HAL_TIM_PWM_ConfigChannel+0x168>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059e9 	.word	0x080059e9
 80059b8:	08005aed 	.word	0x08005aed
 80059bc:	08005aed 	.word	0x08005aed
 80059c0:	08005aed 	.word	0x08005aed
 80059c4:	08005a29 	.word	0x08005a29
 80059c8:	08005aed 	.word	0x08005aed
 80059cc:	08005aed 	.word	0x08005aed
 80059d0:	08005aed 	.word	0x08005aed
 80059d4:	08005a6b 	.word	0x08005a6b
 80059d8:	08005aed 	.word	0x08005aed
 80059dc:	08005aed 	.word	0x08005aed
 80059e0:	08005aed 	.word	0x08005aed
 80059e4:	08005aab 	.word	0x08005aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f9d0 	bl	8005d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0208 	orr.w	r2, r2, #8
 8005a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0204 	bic.w	r2, r2, #4
 8005a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	619a      	str	r2, [r3, #24]
      break;
 8005a26:	e062      	b.n	8005aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fa16 	bl	8005e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6999      	ldr	r1, [r3, #24]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	021a      	lsls	r2, r3, #8
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	619a      	str	r2, [r3, #24]
      break;
 8005a68:	e041      	b.n	8005aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fa5f 	bl	8005f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0208 	orr.w	r2, r2, #8
 8005a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0204 	bic.w	r2, r2, #4
 8005a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69d9      	ldr	r1, [r3, #28]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	61da      	str	r2, [r3, #28]
      break;
 8005aa8:	e021      	b.n	8005aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 faa9 	bl	8006008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69d9      	ldr	r1, [r3, #28]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	021a      	lsls	r2, r3, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	61da      	str	r2, [r3, #28]
      break;
 8005aea:	e000      	b.n	8005aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIM_ConfigClockSource+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e0b3      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x180>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b50:	d03e      	beq.n	8005bd0 <HAL_TIM_ConfigClockSource+0xd0>
 8005b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b56:	f200 8087 	bhi.w	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	f000 8085 	beq.w	8005c6c <HAL_TIM_ConfigClockSource+0x16c>
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d87f      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b68:	2b70      	cmp	r3, #112	; 0x70
 8005b6a:	d01a      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0xa2>
 8005b6c:	2b70      	cmp	r3, #112	; 0x70
 8005b6e:	d87b      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b70:	2b60      	cmp	r3, #96	; 0x60
 8005b72:	d050      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x116>
 8005b74:	2b60      	cmp	r3, #96	; 0x60
 8005b76:	d877      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b78:	2b50      	cmp	r3, #80	; 0x50
 8005b7a:	d03c      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8005b7c:	2b50      	cmp	r3, #80	; 0x50
 8005b7e:	d873      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d058      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0x136>
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d86f      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b88:	2b30      	cmp	r3, #48	; 0x30
 8005b8a:	d064      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x156>
 8005b8c:	2b30      	cmp	r3, #48	; 0x30
 8005b8e:	d86b      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d060      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x156>
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d867      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d05c      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x156>
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d05a      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ba0:	e062      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6899      	ldr	r1, [r3, #8]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f000 faee 	bl	8006192 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	609a      	str	r2, [r3, #8]
      break;
 8005bce:	e04e      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	6899      	ldr	r1, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f000 fad7 	bl	8006192 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf2:	609a      	str	r2, [r3, #8]
      break;
 8005bf4:	e03b      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f000 fa4e 	bl	80060a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2150      	movs	r1, #80	; 0x50
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 faa5 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 8005c14:	e02b      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6859      	ldr	r1, [r3, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f000 fa6c 	bl	8006100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2160      	movs	r1, #96	; 0x60
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fa95 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 8005c34:	e01b      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 fa2e 	bl	80060a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2140      	movs	r1, #64	; 0x40
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fa85 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 8005c54:	e00b      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f000 fa7c 	bl	800615e <TIM_ITRx_SetConfig>
        break;
 8005c66:	e002      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a29      	ldr	r2, [pc, #164]	; (8005d88 <TIM_Base_SetConfig+0xb8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_Base_SetConfig+0x30>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cee:	d007      	beq.n	8005d00 <TIM_Base_SetConfig+0x30>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0x30>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <TIM_Base_SetConfig+0xc0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <TIM_Base_SetConfig+0xb8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00b      	beq.n	8005d32 <TIM_Base_SetConfig+0x62>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d007      	beq.n	8005d32 <TIM_Base_SetConfig+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_Base_SetConfig+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a18      	ldr	r2, [pc, #96]	; (8005d90 <TIM_Base_SetConfig+0xc0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d108      	bne.n	8005d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <TIM_Base_SetConfig+0xb8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800

08005d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0302 	bic.w	r3, r3, #2
 8005ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <TIM_OC1_SetConfig+0xc8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10c      	bne.n	8005e0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0308 	bic.w	r3, r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <TIM_OC1_SetConfig+0xc8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00

08005e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0210 	bic.w	r2, r3, #16
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0320 	bic.w	r3, r3, #32
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <TIM_OC2_SetConfig+0xd0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10d      	bne.n	8005edc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <TIM_OC2_SetConfig+0xd0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d113      	bne.n	8005f0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00

08005f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_OC3_SetConfig+0xd0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10d      	bne.n	8005fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <TIM_OC3_SetConfig+0xd0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d113      	bne.n	8005fde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00

08006008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <TIM_OC4_SetConfig+0x98>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d109      	bne.n	800607c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00

080060a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 030a 	bic.w	r3, r3, #10
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f023 0210 	bic.w	r2, r3, #16
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	031b      	lsls	r3, r3, #12
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800613c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	f043 0307 	orr.w	r3, r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	021a      	lsls	r2, r3, #8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	609a      	str	r2, [r3, #8]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2201      	movs	r2, #1
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1a      	ldr	r2, [r3, #32]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	43db      	mvns	r3, r3
 80061f2:	401a      	ands	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	fa01 f303 	lsl.w	r3, r1, r3
 8006208:	431a      	orrs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800622c:	2302      	movs	r3, #2
 800622e:	e046      	b.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d009      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a12      	ldr	r2, [pc, #72]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a10      	ldr	r2, [pc, #64]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10c      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800

080062d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e03f      	b.n	800638a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fb fb3c 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2224      	movs	r2, #36	; 0x24
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800633a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fba9 	bl	8006a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	4613      	mov	r3, r2
 800639e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d11d      	bne.n	80063e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_UART_Receive_IT+0x26>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e016      	b.n	80063ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Receive_IT+0x38>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e00f      	b.n	80063ea <HAL_UART_Receive_IT+0x58>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	461a      	mov	r2, r3
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f9cf 	bl	8006782 <UART_Start_Receive_IT>
 80063e4:	4603      	mov	r3, r0
 80063e6:	e000      	b.n	80063ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006414:	2300      	movs	r3, #0
 8006416:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <HAL_UART_IRQHandler+0x52>
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa7f 	bl	8006942 <UART_Receive_IT>
      return;
 8006444:	e17b      	b.n	800673e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80b1 	beq.w	80065b0 <HAL_UART_IRQHandler+0x1bc>
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d105      	bne.n	8006464 <HAL_UART_IRQHandler+0x70>
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80a6 	beq.w	80065b0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_UART_IRQHandler+0x90>
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	f043 0201 	orr.w	r2, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_UART_IRQHandler+0xb0>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	f043 0202 	orr.w	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_UART_IRQHandler+0xd0>
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	f043 0204 	orr.w	r2, r3, #4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00f      	beq.n	80064ee <HAL_UART_IRQHandler+0xfa>
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <HAL_UART_IRQHandler+0xee>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f043 0208 	orr.w	r2, r3, #8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 811e 	beq.w	8006734 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <HAL_UART_IRQHandler+0x11e>
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa18 	bl	8006942 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <HAL_UART_IRQHandler+0x146>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d031      	beq.n	800659e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f95a 	bl	80067f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d023      	beq.n	8006596 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d013      	beq.n	800658e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	4a76      	ldr	r2, [pc, #472]	; (8006744 <HAL_UART_IRQHandler+0x350>)
 800656c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	4618      	mov	r0, r3
 8006574:	f7fc f912 	bl	800279c <HAL_DMA_Abort_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	e00e      	b.n	80065ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f8e3 	bl	800675a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	e00a      	b.n	80065ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8df 	bl	800675a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e006      	b.n	80065ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8db 	bl	800675a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065aa:	e0c3      	b.n	8006734 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	bf00      	nop
    return;
 80065ae:	e0c1      	b.n	8006734 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 80a1 	bne.w	80066fc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 809b 	beq.w	80066fc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8095 	beq.w	80066fc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d04e      	beq.n	8006694 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006600:	8a3b      	ldrh	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8098 	beq.w	8006738 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800660c:	8a3a      	ldrh	r2, [r7, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	f080 8092 	bcs.w	8006738 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8a3a      	ldrh	r2, [r7, #16]
 8006618:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	2b20      	cmp	r3, #32
 8006622:	d02b      	beq.n	800667c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006632:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006652:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0210 	bic.w	r2, r2, #16
 8006670:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	4618      	mov	r0, r3
 8006678:	f7fc f855 	bl	8002726 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006684:	b29b      	uxth	r3, r3
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	b29b      	uxth	r3, r3
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f86d 	bl	800676c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006692:	e051      	b.n	8006738 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800669c:	b29b      	uxth	r3, r3
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d047      	beq.n	800673c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80066ac:	8a7b      	ldrh	r3, [r7, #18]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d044      	beq.n	800673c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0210 	bic.w	r2, r2, #16
 80066ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066f0:	8a7b      	ldrh	r3, [r7, #18]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f839 	bl	800676c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066fa:	e01f      	b.n	800673c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_UART_IRQHandler+0x324>
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8af 	bl	8006874 <UART_Transmit_IT>
    return;
 8006716:	e012      	b.n	800673e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00d      	beq.n	800673e <HAL_UART_IRQHandler+0x34a>
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8f0 	bl	8006912 <UART_EndTransmit_IT>
    return;
 8006732:	e004      	b.n	800673e <HAL_UART_IRQHandler+0x34a>
    return;
 8006734:	bf00      	nop
 8006736:	e002      	b.n	800673e <HAL_UART_IRQHandler+0x34a>
      return;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <HAL_UART_IRQHandler+0x34a>
      return;
 800673c:	bf00      	nop
  }
}
 800673e:	3728      	adds	r7, #40	; 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	0800684d 	.word	0x0800684d

08006748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	4613      	mov	r3, r2
 800678e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2222      	movs	r2, #34	; 0x22
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0220 	orr.w	r2, r2, #32
 80067e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800680a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695a      	ldr	r2, [r3, #20]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	2b01      	cmp	r3, #1
 8006822:	d107      	bne.n	8006834 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0210 	bic.w	r2, r2, #16
 8006832:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff77 	bl	800675a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b21      	cmp	r3, #33	; 0x21
 8006886:	d13e      	bne.n	8006906 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006890:	d114      	bne.n	80068bc <UART_Transmit_IT+0x48>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d110      	bne.n	80068bc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	1c9a      	adds	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	621a      	str	r2, [r3, #32]
 80068ba:	e008      	b.n	80068ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6211      	str	r1, [r2, #32]
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4619      	mov	r1, r3
 80068dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006900:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e000      	b.n	8006908 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006906:	2302      	movs	r3, #2
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr

08006912 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006928:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff ff08 	bl	8006748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b22      	cmp	r3, #34	; 0x22
 8006954:	f040 8099 	bne.w	8006a8a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d117      	bne.n	8006992 <UART_Receive_IT+0x50>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d113      	bne.n	8006992 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006980:	b29a      	uxth	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	1c9a      	adds	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
 8006990:	e026      	b.n	80069e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a4:	d007      	beq.n	80069b6 <UART_Receive_IT+0x74>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <UART_Receive_IT+0x82>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e008      	b.n	80069d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4619      	mov	r1, r3
 80069ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d148      	bne.n	8006a86 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0220 	bic.w	r2, r2, #32
 8006a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d123      	bne.n	8006a7c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0210 	bic.w	r2, r2, #16
 8006a48:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d10a      	bne.n	8006a6e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fe79 	bl	800676c <HAL_UARTEx_RxEventCallback>
 8006a7a:	e002      	b.n	8006a82 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7f9 fc2f 	bl	80002e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e002      	b.n	8006a8c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ace:	f023 030c 	bic.w	r3, r3, #12
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2c      	ldr	r2, [pc, #176]	; (8006ba8 <UART_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d103      	bne.n	8006b04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006afc:	f7fe fbb6 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	e002      	b.n	8006b0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fe fb9e 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8006b08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009a      	lsls	r2, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <UART_SetConfig+0x118>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	0119      	lsls	r1, r3, #4
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009a      	lsls	r2, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <UART_SetConfig+0x118>)
 8006b42:	fba3 0302 	umull	r0, r3, r3, r2
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	2064      	movs	r0, #100	; 0x64
 8006b4a:	fb00 f303 	mul.w	r3, r0, r3
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	3332      	adds	r3, #50	; 0x32
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <UART_SetConfig+0x118>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b60:	4419      	add	r1, r3
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009a      	lsls	r2, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <UART_SetConfig+0x118>)
 8006b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	2064      	movs	r0, #100	; 0x64
 8006b82:	fb00 f303 	mul.w	r3, r0, r3
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	3332      	adds	r3, #50	; 0x32
 8006b8c:	4a07      	ldr	r2, [pc, #28]	; (8006bac <UART_SetConfig+0x118>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	f003 020f 	and.w	r2, r3, #15
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40013800 	.word	0x40013800
 8006bac:	51eb851f 	.word	0x51eb851f

08006bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	f107 0014 	add.w	r0, r7, #20
 8006bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	b004      	add	sp, #16
 8006bce:	4770      	bx	lr

08006bd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006be0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006be4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c04:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	43db      	mvns	r3, r3
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c48:	b084      	sub	sp, #16
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	f107 0014 	add.w	r0, r7, #20
 8006c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr

08006c88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b09b      	sub	sp, #108	; 0x6c
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	78db      	ldrb	r3, [r3, #3]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d81f      	bhi.n	8006cfa <USB_ActivateEndpoint+0x72>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <USB_ActivateEndpoint+0x38>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006d03 	.word	0x08006d03
 8006ccc:	08006cdf 	.word	0x08006cdf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cd0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006cdc:	e012      	b.n	8006d04 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006cde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ce2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ce6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006cea:	e00b      	b.n	8006d04 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cf4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006cf8:	e004      	b.n	8006d04 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006d00:	e000      	b.n	8006d04 <USB_ActivateEndpoint+0x7c>
      break;
 8006d02:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	441a      	add	r2, r3
 8006d0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	7b1b      	ldrb	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 8149 	bne.w	8007008 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8084 	beq.w	8006e88 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	81fb      	strh	r3, [r7, #14]
 8006dc2:	89fb      	ldrh	r3, [r7, #14]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <USB_ActivateEndpoint+0x17c>
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	81bb      	strh	r3, [r7, #12]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	89bb      	ldrh	r3, [r7, #12]
 8006df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	78db      	ldrb	r3, [r3, #3]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d020      	beq.n	8006e4e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e22:	813b      	strh	r3, [r7, #8]
 8006e24:	893b      	ldrh	r3, [r7, #8]
 8006e26:	f083 0320 	eor.w	r3, r3, #32
 8006e2a:	813b      	strh	r3, [r7, #8]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	893b      	ldrh	r3, [r7, #8]
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]
 8006e4c:	e27f      	b.n	800734e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e64:	817b      	strh	r3, [r7, #10]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	897b      	ldrh	r3, [r7, #10]
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
 8006e86:	e262      	b.n	800734e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	4413      	add	r3, r2
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	011a      	lsls	r2, r3, #4
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	88db      	ldrh	r3, [r3, #6]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	4413      	add	r3, r2
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	011a      	lsls	r2, r3, #4
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ede:	623b      	str	r3, [r7, #32]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d112      	bne.n	8006f0e <USB_ActivateEndpoint+0x286>
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e02f      	b.n	8006f6e <USB_ActivateEndpoint+0x2e6>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b3e      	cmp	r3, #62	; 0x3e
 8006f14:	d813      	bhi.n	8006f3e <USB_ActivateEndpoint+0x2b6>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <USB_ActivateEndpoint+0x2a8>
 8006f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e017      	b.n	8006f6e <USB_ActivateEndpoint+0x2e6>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	663b      	str	r3, [r7, #96]	; 0x60
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <USB_ActivateEndpoint+0x2d0>
 8006f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f54:	3b01      	subs	r3, #1
 8006f56:	663b      	str	r3, [r7, #96]	; 0x60
 8006f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	029b      	lsls	r3, r3, #10
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	83fb      	strh	r3, [r7, #30]
 8006f7c:	8bfb      	ldrh	r3, [r7, #30]
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01b      	beq.n	8006fbe <USB_ActivateEndpoint+0x336>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	83bb      	strh	r3, [r7, #28]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8bbb      	ldrh	r3, [r7, #28]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	837b      	strh	r3, [r7, #26]
 8006fd6:	8b7b      	ldrh	r3, [r7, #26]
 8006fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fdc:	837b      	strh	r3, [r7, #26]
 8006fde:	8b7b      	ldrh	r3, [r7, #26]
 8006fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fe4:	837b      	strh	r3, [r7, #26]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	8b7b      	ldrh	r3, [r7, #26]
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]
 8007006:	e1a2      	b.n	800734e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	65bb      	str	r3, [r7, #88]	; 0x58
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007054:	4413      	add	r3, r2
 8007056:	65bb      	str	r3, [r7, #88]	; 0x58
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	011a      	lsls	r2, r3, #4
 800705e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007060:	4413      	add	r3, r2
 8007062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007066:	657b      	str	r3, [r7, #84]	; 0x54
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	891b      	ldrh	r3, [r3, #8]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007076:	801a      	strh	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	653b      	str	r3, [r7, #80]	; 0x50
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007082:	b29b      	uxth	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007088:	4413      	add	r3, r2
 800708a:	653b      	str	r3, [r7, #80]	; 0x50
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007094:	4413      	add	r3, r2
 8007096:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	895b      	ldrh	r3, [r3, #10]
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f040 8091 	bne.w	80071d8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80070c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80070c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01b      	beq.n	8007106 <USB_ActivateEndpoint+0x47e>
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	441a      	add	r2, r3
 80070f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80070f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007102:	b29b      	uxth	r3, r3
 8007104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	873b      	strh	r3, [r7, #56]	; 0x38
 8007114:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01b      	beq.n	8007156 <USB_ActivateEndpoint+0x4ce>
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007134:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	441a      	add	r2, r3
 8007140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007152:	b29b      	uxth	r3, r3
 8007154:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800716e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007174:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007176:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800717c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	441a      	add	r2, r3
 8007188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800718a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	b29b      	uxth	r3, r3
 800719c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b4:	867b      	strh	r3, [r7, #50]	; 0x32
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	441a      	add	r2, r3
 80071c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]
 80071d6:	e0ba      	b.n	800734e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80071e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01d      	beq.n	8007230 <USB_ActivateEndpoint+0x5a8>
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	441a      	add	r2, r3
 8007218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01d      	beq.n	8007288 <USB_ActivateEndpoint+0x600>
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007262:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007284:	b29b      	uxth	r3, r3
 8007286:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	78db      	ldrb	r3, [r3, #3]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d024      	beq.n	80072da <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80072aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072ae:	f083 0320 	eor.w	r3, r3, #32
 80072b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	441a      	add	r2, r3
 80072c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
 80072d8:	e01d      	b.n	8007316 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	441a      	add	r2, r3
 8007338:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800733a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734a:	b29b      	uxth	r3, r3
 800734c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800734e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007352:	4618      	mov	r0, r3
 8007354:	376c      	adds	r7, #108	; 0x6c
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800735c:	b480      	push	{r7}
 800735e:	b08d      	sub	sp, #52	; 0x34
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	7b1b      	ldrb	r3, [r3, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 808e 	bne.w	800748c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d044      	beq.n	8007402 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	81bb      	strh	r3, [r7, #12]
 8007386:	89bb      	ldrh	r3, [r7, #12]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01b      	beq.n	80073c8 <USB_DeactivateEndpoint+0x6c>
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	817b      	strh	r3, [r7, #10]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	897b      	ldrh	r3, [r7, #10]
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	813b      	strh	r3, [r7, #8]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	893b      	ldrh	r3, [r7, #8]
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]
 8007400:	e192      	b.n	8007728 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	827b      	strh	r3, [r7, #18]
 8007410:	8a7b      	ldrh	r3, [r7, #18]
 8007412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01b      	beq.n	8007452 <USB_DeactivateEndpoint+0xf6>
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	823b      	strh	r3, [r7, #16]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	8a3b      	ldrh	r3, [r7, #16]
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	81fb      	strh	r3, [r7, #14]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
 800748a:	e14d      	b.n	8007728 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f040 80a5 	bne.w	80075e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	843b      	strh	r3, [r7, #32]
 80074a4:	8c3b      	ldrh	r3, [r7, #32]
 80074a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01b      	beq.n	80074e6 <USB_DeactivateEndpoint+0x18a>
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c4:	83fb      	strh	r3, [r7, #30]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	8bfb      	ldrh	r3, [r7, #30]
 80074d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	83bb      	strh	r3, [r7, #28]
 80074f4:	8bbb      	ldrh	r3, [r7, #28]
 80074f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01b      	beq.n	8007536 <USB_DeactivateEndpoint+0x1da>
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	837b      	strh	r3, [r7, #26]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	8b7b      	ldrh	r3, [r7, #26]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	833b      	strh	r3, [r7, #24]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	441a      	add	r2, r3
 8007558:	8b3b      	ldrh	r3, [r7, #24]
 800755a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800756a:	b29b      	uxth	r3, r3
 800756c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007584:	82fb      	strh	r3, [r7, #22]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	441a      	add	r2, r3
 8007590:	8afb      	ldrh	r3, [r7, #22]
 8007592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800759a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075bc:	82bb      	strh	r3, [r7, #20]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8abb      	ldrh	r3, [r7, #20]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
 80075de:	e0a3      	b.n	8007728 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01b      	beq.n	8007630 <USB_DeactivateEndpoint+0x2d4>
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800761c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762c:	b29b      	uxth	r3, r3
 800762e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800763e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <USB_DeactivateEndpoint+0x324>
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	441a      	add	r2, r3
 80076a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	847b      	strh	r3, [r7, #34]	; 0x22
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3734      	adds	r7, #52	; 0x34
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b0cc      	sub	sp, #304	; 0x130
 8007738:	af00      	add	r7, sp, #0
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	6018      	str	r0, [r3, #0]
 800773e:	463b      	mov	r3, r7
 8007740:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007742:	463b      	mov	r3, r7
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	2b01      	cmp	r3, #1
 800774a:	f040 872e 	bne.w	80085aa <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800774e:	463b      	mov	r3, r7
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	463b      	mov	r3, r7
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d905      	bls.n	800776a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800775e:	463b      	mov	r3, r7
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007768:	e004      	b.n	8007774 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800776a:	463b      	mov	r3, r7
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007774:	463b      	mov	r3, r7
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	7b1b      	ldrb	r3, [r3, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d134      	bne.n	80077e8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800777e:	463b      	mov	r3, r7
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6959      	ldr	r1, [r3, #20]
 8007784:	463b      	mov	r3, r7
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	88da      	ldrh	r2, [r3, #6]
 800778a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778e:	b29b      	uxth	r3, r3
 8007790:	1d38      	adds	r0, r7, #4
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	f001 fc03 	bl	8008f9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007798:	f107 0310 	add.w	r3, r7, #16
 800779c:	1d3a      	adds	r2, r7, #4
 800779e:	6812      	ldr	r2, [r2, #0]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	1d3b      	adds	r3, r7, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4619      	mov	r1, r3
 80077ae:	f107 0310 	add.w	r3, r7, #16
 80077b2:	f107 0210 	add.w	r2, r7, #16
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	440a      	add	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	463b      	mov	r3, r7
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	011a      	lsls	r2, r3, #4
 80077c4:	f107 0310 	add.w	r3, r7, #16
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4413      	add	r3, r2
 80077cc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077da:	b29a      	uxth	r2, r3
 80077dc:	f107 030c 	add.w	r3, r7, #12
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	f000 beac 	b.w	8008540 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077e8:	463b      	mov	r3, r7
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	78db      	ldrb	r3, [r3, #3]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	f040 838c 	bne.w	8007f0c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077f4:	463b      	mov	r3, r7
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	429a      	cmp	r2, r3
 8007802:	f240 8330 	bls.w	8007e66 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007806:	1d3b      	adds	r3, r7, #4
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	463b      	mov	r3, r7
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007820:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007824:	1d3b      	adds	r3, r7, #4
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	463b      	mov	r3, r7
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	441a      	add	r2, r3
 8007832:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800783a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800783e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007846:	b29b      	uxth	r3, r3
 8007848:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800784a:	463b      	mov	r3, r7
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007854:	1ad2      	subs	r2, r2, r3
 8007856:	463b      	mov	r3, r7
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800785c:	1d3b      	adds	r3, r7, #4
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	463b      	mov	r3, r7
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 819e 	beq.w	8007bb4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800787c:	1d3a      	adds	r2, r7, #4
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	463b      	mov	r3, r7
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d17a      	bne.n	8007982 <USB_EPStartXfer+0x24e>
 800788c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007890:	1d3a      	adds	r2, r7, #4
 8007892:	6812      	ldr	r2, [r2, #0]
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	1d3b      	adds	r3, r7, #4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4619      	mov	r1, r3
 80078a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	440a      	add	r2, r1
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	011a      	lsls	r2, r3, #4
 80078b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4413      	add	r3, r2
 80078c0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80078c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d11a      	bne.n	8007908 <USB_EPStartXfer+0x1d4>
 80078d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	801a      	strh	r2, [r3, #0]
 80078ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	e062      	b.n	80079ce <USB_EPStartXfer+0x29a>
 8007908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790c:	2b3e      	cmp	r3, #62	; 0x3e
 800790e:	d819      	bhi.n	8007944 <USB_EPStartXfer+0x210>
 8007910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <USB_EPStartXfer+0x1fc>
 8007926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800792a:	3301      	adds	r3, #1
 800792c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007934:	b29b      	uxth	r3, r3
 8007936:	029b      	lsls	r3, r3, #10
 8007938:	b29a      	uxth	r2, r3
 800793a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	801a      	strh	r2, [r3, #0]
 8007942:	e044      	b.n	80079ce <USB_EPStartXfer+0x29a>
 8007944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <USB_EPStartXfer+0x230>
 800795a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800795e:	3b01      	subs	r3, #1
 8007960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007968:	b29b      	uxth	r3, r3
 800796a:	029b      	lsls	r3, r3, #10
 800796c:	b29b      	uxth	r3, r3
 800796e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007976:	b29a      	uxth	r2, r3
 8007978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e025      	b.n	80079ce <USB_EPStartXfer+0x29a>
 8007982:	463b      	mov	r3, r7
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d120      	bne.n	80079ce <USB_EPStartXfer+0x29a>
 800798c:	1d3b      	adds	r3, r7, #4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007994:	b29b      	uxth	r3, r3
 8007996:	4619      	mov	r1, r3
 8007998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800799c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	440a      	add	r2, r1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	463b      	mov	r3, r7
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	011a      	lsls	r2, r3, #4
 80079ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80079ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079ce:	463b      	mov	r3, r7
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	895b      	ldrh	r3, [r3, #10]
 80079d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079d8:	463b      	mov	r3, r7
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6959      	ldr	r1, [r3, #20]
 80079de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079e8:	1d38      	adds	r0, r7, #4
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	f001 fad7 	bl	8008f9e <USB_WritePMA>
            ep->xfer_buff += len;
 80079f0:	463b      	mov	r3, r7
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	695a      	ldr	r2, [r3, #20]
 80079f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079fa:	441a      	add	r2, r3
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a02:	463b      	mov	r3, r7
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6a1a      	ldr	r2, [r3, #32]
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d909      	bls.n	8007a26 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6a1a      	ldr	r2, [r3, #32]
 8007a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a1c:	1ad2      	subs	r2, r2, r3
 8007a1e:	463b      	mov	r3, r7
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	621a      	str	r2, [r3, #32]
 8007a24:	e008      	b.n	8007a38 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a26:	463b      	mov	r3, r7
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007a30:	463b      	mov	r3, r7
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a38:	463b      	mov	r3, r7
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d17a      	bne.n	8007b38 <USB_EPStartXfer+0x404>
 8007a42:	f107 0318 	add.w	r3, r7, #24
 8007a46:	1d3a      	adds	r2, r7, #4
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	1d3b      	adds	r3, r7, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	f107 0318 	add.w	r3, r7, #24
 8007a5c:	f107 0218 	add.w	r2, r7, #24
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	440a      	add	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	463b      	mov	r3, r7
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	011a      	lsls	r2, r3, #4
 8007a6e:	f107 0318 	add.w	r3, r7, #24
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007a7a:	f107 0314 	add.w	r3, r7, #20
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <USB_EPStartXfer+0x38a>
 8007a88:	f107 0314 	add.w	r3, r7, #20
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	f107 0314 	add.w	r3, r7, #20
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	e067      	b.n	8007b8e <USB_EPStartXfer+0x45a>
 8007abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac4:	d819      	bhi.n	8007afa <USB_EPStartXfer+0x3c6>
 8007ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d004      	beq.n	8007ae6 <USB_EPStartXfer+0x3b2>
 8007adc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ae6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	029b      	lsls	r3, r3, #10
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f107 0314 	add.w	r3, r7, #20
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	e049      	b.n	8007b8e <USB_EPStartXfer+0x45a>
 8007afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <USB_EPStartXfer+0x3e6>
 8007b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007b14:	3b01      	subs	r3, #1
 8007b16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007b1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f107 0314 	add.w	r3, r7, #20
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e02a      	b.n	8007b8e <USB_EPStartXfer+0x45a>
 8007b38:	463b      	mov	r3, r7
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d125      	bne.n	8007b8e <USB_EPStartXfer+0x45a>
 8007b42:	f107 0320 	add.w	r3, r7, #32
 8007b46:	1d3a      	adds	r2, r7, #4
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	1d3b      	adds	r3, r7, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	4619      	mov	r1, r3
 8007b58:	f107 0320 	add.w	r3, r7, #32
 8007b5c:	f107 0220 	add.w	r2, r7, #32
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	440a      	add	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	011a      	lsls	r2, r3, #4
 8007b6e:	f107 0320 	add.w	r3, r7, #32
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4413      	add	r3, r2
 8007b76:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007b7a:	f107 031c 	add.w	r3, r7, #28
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	f107 031c 	add.w	r3, r7, #28
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b8e:	463b      	mov	r3, r7
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	891b      	ldrh	r3, [r3, #8]
 8007b94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b98:	463b      	mov	r3, r7
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6959      	ldr	r1, [r3, #20]
 8007b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ba8:	1d38      	adds	r0, r7, #4
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	f001 f9f7 	bl	8008f9e <USB_WritePMA>
 8007bb0:	f000 bcc6 	b.w	8008540 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d164      	bne.n	8007c88 <USB_EPStartXfer+0x554>
 8007bbe:	1d3b      	adds	r3, r7, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bc4:	1d3b      	adds	r3, r7, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd2:	4413      	add	r3, r2
 8007bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	011a      	lsls	r2, r3, #4
 8007bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be0:	4413      	add	r3, r2
 8007be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007be6:	647b      	str	r3, [r7, #68]	; 0x44
 8007be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d112      	bne.n	8007c16 <USB_EPStartXfer+0x4e2>
 8007bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfe:	801a      	strh	r2, [r3, #0]
 8007c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e057      	b.n	8007cc6 <USB_EPStartXfer+0x592>
 8007c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c1c:	d817      	bhi.n	8007c4e <USB_EPStartXfer+0x51a>
 8007c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <USB_EPStartXfer+0x50a>
 8007c34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007c38:	3301      	adds	r3, #1
 8007c3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007c3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	029b      	lsls	r3, r3, #10
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e03b      	b.n	8007cc6 <USB_EPStartXfer+0x592>
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <USB_EPStartXfer+0x53a>
 8007c64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007c6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	029b      	lsls	r3, r3, #10
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c84:	801a      	strh	r2, [r3, #0]
 8007c86:	e01e      	b.n	8007cc6 <USB_EPStartXfer+0x592>
 8007c88:	463b      	mov	r3, r7
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d119      	bne.n	8007cc6 <USB_EPStartXfer+0x592>
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	653b      	str	r3, [r7, #80]	; 0x50
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca6:	4413      	add	r3, r2
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8007caa:	463b      	mov	r3, r7
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	011a      	lsls	r2, r3, #4
 8007cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	891b      	ldrh	r3, [r3, #8]
 8007ccc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6959      	ldr	r1, [r3, #20]
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ce0:	1d38      	adds	r0, r7, #4
 8007ce2:	6800      	ldr	r0, [r0, #0]
 8007ce4:	f001 f95b 	bl	8008f9e <USB_WritePMA>
            ep->xfer_buff += len;
 8007ce8:	463b      	mov	r3, r7
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf2:	441a      	add	r2, r3
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	463b      	mov	r3, r7
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d909      	bls.n	8007d1e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a1a      	ldr	r2, [r3, #32]
 8007d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	463b      	mov	r3, r7
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	621a      	str	r2, [r3, #32]
 8007d1c:	e008      	b.n	8007d30 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d1e:	463b      	mov	r3, r7
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007d28:	463b      	mov	r3, r7
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d30:	1d3b      	adds	r3, r7, #4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	643b      	str	r3, [r7, #64]	; 0x40
 8007d36:	463b      	mov	r3, r7
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d164      	bne.n	8007e0a <USB_EPStartXfer+0x6d6>
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d46:	1d3b      	adds	r3, r7, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	4413      	add	r3, r2
 8007d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d58:	463b      	mov	r3, r7
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	011a      	lsls	r2, r3, #4
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	4413      	add	r3, r2
 8007d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d112      	bne.n	8007d98 <USB_EPStartXfer+0x664>
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	e054      	b.n	8007e42 <USB_EPStartXfer+0x70e>
 8007d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d9e:	d817      	bhi.n	8007dd0 <USB_EPStartXfer+0x69c>
 8007da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <USB_EPStartXfer+0x68c>
 8007db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	801a      	strh	r2, [r3, #0]
 8007dce:	e038      	b.n	8007e42 <USB_EPStartXfer+0x70e>
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <USB_EPStartXfer+0x6bc>
 8007de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	e01b      	b.n	8007e42 <USB_EPStartXfer+0x70e>
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d116      	bne.n	8007e42 <USB_EPStartXfer+0x70e>
 8007e14:	1d3b      	adds	r3, r7, #4
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e22:	4413      	add	r3, r2
 8007e24:	643b      	str	r3, [r7, #64]	; 0x40
 8007e26:	463b      	mov	r3, r7
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	011a      	lsls	r2, r3, #4
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	895b      	ldrh	r3, [r3, #10]
 8007e48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6959      	ldr	r1, [r3, #20]
 8007e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e5c:	1d38      	adds	r0, r7, #4
 8007e5e:	6800      	ldr	r0, [r0, #0]
 8007e60:	f001 f89d 	bl	8008f9e <USB_WritePMA>
 8007e64:	e36c      	b.n	8008540 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e66:	463b      	mov	r3, r7
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007e70:	1d3b      	adds	r3, r7, #4
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	463b      	mov	r3, r7
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e8e:	1d3b      	adds	r3, r7, #4
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	463b      	mov	r3, r7
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec8:	4413      	add	r3, r2
 8007eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ecc:	463b      	mov	r3, r7
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	011a      	lsls	r2, r3, #4
 8007ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007edc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ee8:	463b      	mov	r3, r7
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	891b      	ldrh	r3, [r3, #8]
 8007eee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6959      	ldr	r1, [r3, #20]
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f02:	1d38      	adds	r0, r7, #4
 8007f04:	6800      	ldr	r0, [r0, #0]
 8007f06:	f001 f84a 	bl	8008f9e <USB_WritePMA>
 8007f0a:	e319      	b.n	8008540 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007f0c:	1d3b      	adds	r3, r7, #4
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	463b      	mov	r3, r7
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007f2a:	1d3b      	adds	r3, r7, #4
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	463b      	mov	r3, r7
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f50:	463b      	mov	r3, r7
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f62:	1d3b      	adds	r3, r7, #4
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	463b      	mov	r3, r7
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8162 	beq.w	8008242 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f86:	463b      	mov	r3, r7
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d164      	bne.n	800805a <USB_EPStartXfer+0x926>
 8007f90:	1d3b      	adds	r3, r7, #4
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f96:	1d3b      	adds	r3, r7, #4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fa4:	4413      	add	r3, r2
 8007fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fa8:	463b      	mov	r3, r7
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	011a      	lsls	r2, r3, #4
 8007fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fb8:	677b      	str	r3, [r7, #116]	; 0x74
 8007fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d112      	bne.n	8007fe8 <USB_EPStartXfer+0x8b4>
 8007fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e057      	b.n	8008098 <USB_EPStartXfer+0x964>
 8007fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fec:	2b3e      	cmp	r3, #62	; 0x3e
 8007fee:	d817      	bhi.n	8008020 <USB_EPStartXfer+0x8ec>
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <USB_EPStartXfer+0x8dc>
 8008006:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800800a:	3301      	adds	r3, #1
 800800c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008010:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008014:	b29b      	uxth	r3, r3
 8008016:	029b      	lsls	r3, r3, #10
 8008018:	b29a      	uxth	r2, r3
 800801a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	e03b      	b.n	8008098 <USB_EPStartXfer+0x964>
 8008020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800802a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802e:	f003 031f 	and.w	r3, r3, #31
 8008032:	2b00      	cmp	r3, #0
 8008034:	d104      	bne.n	8008040 <USB_EPStartXfer+0x90c>
 8008036:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800803a:	3b01      	subs	r3, #1
 800803c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008040:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008044:	b29b      	uxth	r3, r3
 8008046:	029b      	lsls	r3, r3, #10
 8008048:	b29b      	uxth	r3, r3
 800804a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008052:	b29a      	uxth	r2, r3
 8008054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	e01e      	b.n	8008098 <USB_EPStartXfer+0x964>
 800805a:	463b      	mov	r3, r7
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	785b      	ldrb	r3, [r3, #1]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d119      	bne.n	8008098 <USB_EPStartXfer+0x964>
 8008064:	1d3b      	adds	r3, r7, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800806c:	b29b      	uxth	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008074:	4413      	add	r3, r2
 8008076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800807a:	463b      	mov	r3, r7
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	011a      	lsls	r2, r3, #4
 8008082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008086:	4413      	add	r3, r2
 8008088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800808c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	b29a      	uxth	r2, r3
 8008094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008096:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	895b      	ldrh	r3, [r3, #10]
 800809e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6959      	ldr	r1, [r3, #20]
 80080a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080b2:	1d38      	adds	r0, r7, #4
 80080b4:	6800      	ldr	r0, [r0, #0]
 80080b6:	f000 ff72 	bl	8008f9e <USB_WritePMA>
          ep->xfer_buff += len;
 80080ba:	463b      	mov	r3, r7
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c4:	441a      	add	r2, r3
 80080c6:	463b      	mov	r3, r7
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80080cc:	463b      	mov	r3, r7
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6a1a      	ldr	r2, [r3, #32]
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d909      	bls.n	80080f0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80080dc:	463b      	mov	r3, r7
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	621a      	str	r2, [r3, #32]
 80080ee:	e008      	b.n	8008102 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80080fa:	463b      	mov	r3, r7
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 821a 	beq.w	8008540 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800810c:	463b      	mov	r3, r7
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d164      	bne.n	80081e0 <USB_EPStartXfer+0xaac>
 8008116:	1d3b      	adds	r3, r7, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	66bb      	str	r3, [r7, #104]	; 0x68
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008124:	b29b      	uxth	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800812a:	4413      	add	r3, r2
 800812c:	66bb      	str	r3, [r7, #104]	; 0x68
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	011a      	lsls	r2, r3, #4
 8008136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008138:	4413      	add	r3, r2
 800813a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800813e:	667b      	str	r3, [r7, #100]	; 0x64
 8008140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d112      	bne.n	800816e <USB_EPStartXfer+0xa3a>
 8008148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008152:	b29a      	uxth	r2, r3
 8008154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008166:	b29a      	uxth	r2, r3
 8008168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e057      	b.n	800821e <USB_EPStartXfer+0xaea>
 800816e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008172:	2b3e      	cmp	r3, #62	; 0x3e
 8008174:	d817      	bhi.n	80081a6 <USB_EPStartXfer+0xa72>
 8008176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <USB_EPStartXfer+0xa62>
 800818c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008190:	3301      	adds	r3, #1
 8008192:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819a:	b29b      	uxth	r3, r3
 800819c:	029b      	lsls	r3, r3, #10
 800819e:	b29a      	uxth	r2, r3
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	e03b      	b.n	800821e <USB_EPStartXfer+0xaea>
 80081a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <USB_EPStartXfer+0xa92>
 80081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	029b      	lsls	r3, r3, #10
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d8:	b29a      	uxth	r2, r3
 80081da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e01e      	b.n	800821e <USB_EPStartXfer+0xaea>
 80081e0:	463b      	mov	r3, r7
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d119      	bne.n	800821e <USB_EPStartXfer+0xaea>
 80081ea:	1d3b      	adds	r3, r7, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	673b      	str	r3, [r7, #112]	; 0x70
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081fe:	4413      	add	r3, r2
 8008200:	673b      	str	r3, [r7, #112]	; 0x70
 8008202:	463b      	mov	r3, r7
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	011a      	lsls	r2, r3, #4
 800820a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800820c:	4413      	add	r3, r2
 800820e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	b29a      	uxth	r2, r3
 800821a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800821e:	463b      	mov	r3, r7
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	891b      	ldrh	r3, [r3, #8]
 8008224:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008228:	463b      	mov	r3, r7
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6959      	ldr	r1, [r3, #20]
 800822e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008232:	b29b      	uxth	r3, r3
 8008234:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008238:	1d38      	adds	r0, r7, #4
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	f000 feaf 	bl	8008f9e <USB_WritePMA>
 8008240:	e17e      	b.n	8008540 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008242:	463b      	mov	r3, r7
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d16f      	bne.n	800832c <USB_EPStartXfer+0xbf8>
 800824c:	1d3b      	adds	r3, r7, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008254:	1d3b      	adds	r3, r7, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825c:	b29b      	uxth	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008264:	4413      	add	r3, r2
 8008266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800826a:	463b      	mov	r3, r7
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	011a      	lsls	r2, r3, #4
 8008272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008276:	4413      	add	r3, r2
 8008278:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800827c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d116      	bne.n	80082b6 <USB_EPStartXfer+0xb82>
 8008288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	e05f      	b.n	8008376 <USB_EPStartXfer+0xc42>
 80082b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ba:	2b3e      	cmp	r3, #62	; 0x3e
 80082bc:	d818      	bhi.n	80082f0 <USB_EPStartXfer+0xbbc>
 80082be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <USB_EPStartXfer+0xbaa>
 80082d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80082d8:	3301      	adds	r3, #1
 80082da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80082de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082ec:	801a      	strh	r2, [r3, #0]
 80082ee:	e042      	b.n	8008376 <USB_EPStartXfer+0xc42>
 80082f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <USB_EPStartXfer+0xbdc>
 8008306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800830a:	3b01      	subs	r3, #1
 800830c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008310:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008314:	b29b      	uxth	r3, r3
 8008316:	029b      	lsls	r3, r3, #10
 8008318:	b29b      	uxth	r3, r3
 800831a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008322:	b29a      	uxth	r2, r3
 8008324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	e024      	b.n	8008376 <USB_EPStartXfer+0xc42>
 800832c:	463b      	mov	r3, r7
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d11f      	bne.n	8008376 <USB_EPStartXfer+0xc42>
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800833e:	1d3b      	adds	r3, r7, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008346:	b29b      	uxth	r3, r3
 8008348:	461a      	mov	r2, r3
 800834a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800834e:	4413      	add	r3, r2
 8008350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008354:	463b      	mov	r3, r7
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	011a      	lsls	r2, r3, #4
 800835c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008360:	4413      	add	r3, r2
 8008362:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800836a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836e:	b29a      	uxth	r2, r3
 8008370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008374:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008376:	463b      	mov	r3, r7
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	891b      	ldrh	r3, [r3, #8]
 800837c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008380:	463b      	mov	r3, r7
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6959      	ldr	r1, [r3, #20]
 8008386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838a:	b29b      	uxth	r3, r3
 800838c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008390:	1d38      	adds	r0, r7, #4
 8008392:	6800      	ldr	r0, [r0, #0]
 8008394:	f000 fe03 	bl	8008f9e <USB_WritePMA>
          ep->xfer_buff += len;
 8008398:	463b      	mov	r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695a      	ldr	r2, [r3, #20]
 800839e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a2:	441a      	add	r2, r3
 80083a4:	463b      	mov	r3, r7
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6a1a      	ldr	r2, [r3, #32]
 80083b0:	463b      	mov	r3, r7
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d909      	bls.n	80083ce <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80083ba:	463b      	mov	r3, r7
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6a1a      	ldr	r2, [r3, #32]
 80083c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	463b      	mov	r3, r7
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	621a      	str	r2, [r3, #32]
 80083cc:	e008      	b.n	80083e0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80083ce:	463b      	mov	r3, r7
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80083d8:	463b      	mov	r3, r7
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80083e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80ab 	beq.w	8008540 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083ea:	1d3b      	adds	r3, r7, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083f2:	463b      	mov	r3, r7
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d16f      	bne.n	80084dc <USB_EPStartXfer+0xda8>
 80083fc:	1d3b      	adds	r3, r7, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008404:	1d3b      	adds	r3, r7, #4
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840c:	b29b      	uxth	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008414:	4413      	add	r3, r2
 8008416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800841a:	463b      	mov	r3, r7
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	011a      	lsls	r2, r3, #4
 8008422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008426:	4413      	add	r3, r2
 8008428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800842c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d116      	bne.n	8008466 <USB_EPStartXfer+0xd32>
 8008438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845c:	b29a      	uxth	r2, r3
 800845e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	e05b      	b.n	800851e <USB_EPStartXfer+0xdea>
 8008466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846a:	2b3e      	cmp	r3, #62	; 0x3e
 800846c:	d818      	bhi.n	80084a0 <USB_EPStartXfer+0xd6c>
 800846e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <USB_EPStartXfer+0xd5a>
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008488:	3301      	adds	r3, #1
 800848a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800848e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008492:	b29b      	uxth	r3, r3
 8008494:	029b      	lsls	r3, r3, #10
 8008496:	b29a      	uxth	r2, r3
 8008498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	e03e      	b.n	800851e <USB_EPStartXfer+0xdea>
 80084a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80084aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d104      	bne.n	80084c0 <USB_EPStartXfer+0xd8c>
 80084b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ba:	3b01      	subs	r3, #1
 80084bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80084c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	029b      	lsls	r3, r3, #10
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e020      	b.n	800851e <USB_EPStartXfer+0xdea>
 80084dc:	463b      	mov	r3, r7
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d11b      	bne.n	800851e <USB_EPStartXfer+0xdea>
 80084e6:	1d3b      	adds	r3, r7, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084f6:	4413      	add	r3, r2
 80084f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084fc:	463b      	mov	r3, r7
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	011a      	lsls	r2, r3, #4
 8008504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008508:	4413      	add	r3, r2
 800850a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800850e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008516:	b29a      	uxth	r2, r3
 8008518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800851c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800851e:	463b      	mov	r3, r7
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	895b      	ldrh	r3, [r3, #10]
 8008524:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6959      	ldr	r1, [r3, #20]
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	b29b      	uxth	r3, r3
 8008534:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008538:	1d38      	adds	r0, r7, #4
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	f000 fd2f 	bl	8008f9e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008540:	1d3b      	adds	r3, r7, #4
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	463b      	mov	r3, r7
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f107 020a 	add.w	r2, r7, #10
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855e:	8013      	strh	r3, [r2, #0]
 8008560:	f107 030a 	add.w	r3, r7, #10
 8008564:	f107 020a 	add.w	r2, r7, #10
 8008568:	8812      	ldrh	r2, [r2, #0]
 800856a:	f082 0210 	eor.w	r2, r2, #16
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	f107 030a 	add.w	r3, r7, #10
 8008574:	f107 020a 	add.w	r2, r7, #10
 8008578:	8812      	ldrh	r2, [r2, #0]
 800857a:	f082 0220 	eor.w	r2, r2, #32
 800857e:	801a      	strh	r2, [r3, #0]
 8008580:	1d3b      	adds	r3, r7, #4
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	463b      	mov	r3, r7
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	f107 030a 	add.w	r3, r7, #10
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	8013      	strh	r3, [r2, #0]
 80085a8:	e3b5      	b.n	8008d16 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80085aa:	463b      	mov	r3, r7
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	7b1b      	ldrb	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 8090 	bne.w	80086d6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d90e      	bls.n	80085e4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80085c6:	463b      	mov	r3, r7
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80085d0:	463b      	mov	r3, r7
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	463b      	mov	r3, r7
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	619a      	str	r2, [r3, #24]
 80085e2:	e008      	b.n	80085f6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80085e4:	463b      	mov	r3, r7
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80085f6:	1d3b      	adds	r3, r7, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085fe:	1d3b      	adds	r3, r7, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800860e:	4413      	add	r3, r2
 8008610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008614:	463b      	mov	r3, r7
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	011a      	lsls	r2, r3, #4
 800861c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008620:	4413      	add	r3, r2
 8008622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800862a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d116      	bne.n	8008660 <USB_EPStartXfer+0xf2c>
 8008632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29b      	uxth	r3, r3
 800864e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008656:	b29a      	uxth	r2, r3
 8008658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	e32c      	b.n	8008cba <USB_EPStartXfer+0x1586>
 8008660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008664:	2b3e      	cmp	r3, #62	; 0x3e
 8008666:	d818      	bhi.n	800869a <USB_EPStartXfer+0xf66>
 8008668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <USB_EPStartXfer+0xf54>
 800867e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008682:	3301      	adds	r3, #1
 8008684:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800868c:	b29b      	uxth	r3, r3
 800868e:	029b      	lsls	r3, r3, #10
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	e30f      	b.n	8008cba <USB_EPStartXfer+0x1586>
 800869a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80086a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <USB_EPStartXfer+0xf86>
 80086b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086b4:	3b01      	subs	r3, #1
 80086b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80086ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086be:	b29b      	uxth	r3, r3
 80086c0:	029b      	lsls	r3, r3, #10
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e2f1      	b.n	8008cba <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80086d6:	463b      	mov	r3, r7
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	78db      	ldrb	r3, [r3, #3]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	f040 818f 	bne.w	8008a00 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80086e2:	463b      	mov	r3, r7
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d175      	bne.n	80087d8 <USB_EPStartXfer+0x10a4>
 80086ec:	1d3b      	adds	r3, r7, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	461a      	mov	r2, r3
 8008700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008704:	4413      	add	r3, r2
 8008706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800870a:	463b      	mov	r3, r7
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	011a      	lsls	r2, r3, #4
 8008712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008716:	4413      	add	r3, r2
 8008718:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800871c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008720:	463b      	mov	r3, r7
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d116      	bne.n	8008758 <USB_EPStartXfer+0x1024>
 800872a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	e065      	b.n	8008824 <USB_EPStartXfer+0x10f0>
 8008758:	463b      	mov	r3, r7
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	2b3e      	cmp	r3, #62	; 0x3e
 8008760:	d81a      	bhi.n	8008798 <USB_EPStartXfer+0x1064>
 8008762:	463b      	mov	r3, r7
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800876e:	463b      	mov	r3, r7
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <USB_EPStartXfer+0x1052>
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008780:	3301      	adds	r3, #1
 8008782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800878a:	b29b      	uxth	r3, r3
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	b29a      	uxth	r2, r3
 8008790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	e045      	b.n	8008824 <USB_EPStartXfer+0x10f0>
 8008798:	463b      	mov	r3, r7
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f003 031f 	and.w	r3, r3, #31
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <USB_EPStartXfer+0x1088>
 80087b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b6:	3b01      	subs	r3, #1
 80087b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	029b      	lsls	r3, r3, #10
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	e025      	b.n	8008824 <USB_EPStartXfer+0x10f0>
 80087d8:	463b      	mov	r3, r7
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d120      	bne.n	8008824 <USB_EPStartXfer+0x10f0>
 80087e2:	1d3b      	adds	r3, r7, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087ea:	1d3b      	adds	r3, r7, #4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087fa:	4413      	add	r3, r2
 80087fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008800:	463b      	mov	r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	011a      	lsls	r2, r3, #4
 8008808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800880c:	4413      	add	r3, r2
 800880e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008812:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008816:	463b      	mov	r3, r7
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	b29a      	uxth	r2, r3
 800881e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800882c:	463b      	mov	r3, r7
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d175      	bne.n	8008922 <USB_EPStartXfer+0x11ee>
 8008836:	1d3b      	adds	r3, r7, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008846:	b29b      	uxth	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800884e:	4413      	add	r3, r2
 8008850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008854:	463b      	mov	r3, r7
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	011a      	lsls	r2, r3, #4
 800885c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008860:	4413      	add	r3, r2
 8008862:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008866:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800886a:	463b      	mov	r3, r7
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d116      	bne.n	80088a2 <USB_EPStartXfer+0x116e>
 8008874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008880:	b29a      	uxth	r2, r3
 8008882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008898:	b29a      	uxth	r2, r3
 800889a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	e061      	b.n	8008966 <USB_EPStartXfer+0x1232>
 80088a2:	463b      	mov	r3, r7
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b3e      	cmp	r3, #62	; 0x3e
 80088aa:	d81a      	bhi.n	80088e2 <USB_EPStartXfer+0x11ae>
 80088ac:	463b      	mov	r3, r7
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	085b      	lsrs	r3, r3, #1
 80088b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088b8:	463b      	mov	r3, r7
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d004      	beq.n	80088d0 <USB_EPStartXfer+0x119c>
 80088c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088ca:	3301      	adds	r3, #1
 80088cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	029b      	lsls	r3, r3, #10
 80088d8:	b29a      	uxth	r2, r3
 80088da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e041      	b.n	8008966 <USB_EPStartXfer+0x1232>
 80088e2:	463b      	mov	r3, r7
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088ee:	463b      	mov	r3, r7
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	f003 031f 	and.w	r3, r3, #31
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d104      	bne.n	8008906 <USB_EPStartXfer+0x11d2>
 80088fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008900:	3b01      	subs	r3, #1
 8008902:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008906:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800890a:	b29b      	uxth	r3, r3
 800890c:	029b      	lsls	r3, r3, #10
 800890e:	b29b      	uxth	r3, r3
 8008910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008918:	b29a      	uxth	r2, r3
 800891a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800891e:	801a      	strh	r2, [r3, #0]
 8008920:	e021      	b.n	8008966 <USB_EPStartXfer+0x1232>
 8008922:	463b      	mov	r3, r7
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d11c      	bne.n	8008966 <USB_EPStartXfer+0x1232>
 800892c:	1d3b      	adds	r3, r7, #4
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008934:	b29b      	uxth	r3, r3
 8008936:	461a      	mov	r2, r3
 8008938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800893c:	4413      	add	r3, r2
 800893e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008942:	463b      	mov	r3, r7
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	011a      	lsls	r2, r3, #4
 800894a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800894e:	4413      	add	r3, r2
 8008950:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008958:	463b      	mov	r3, r7
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	b29a      	uxth	r2, r3
 8008960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008964:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008966:	463b      	mov	r3, r7
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 81a4 	beq.w	8008cba <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008972:	1d3b      	adds	r3, r7, #4
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	463b      	mov	r3, r7
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008986:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800898a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <USB_EPStartXfer+0x126a>
 8008992:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10d      	bne.n	80089ba <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800899e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80089a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 8187 	bne.w	8008cba <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80089b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 8180 	bne.w	8008cba <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	463b      	mov	r3, r7
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80089d8:	1d3b      	adds	r3, r7, #4
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	441a      	add	r2, r3
 80089e6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80089ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	8013      	strh	r3, [r2, #0]
 80089fe:	e15c      	b.n	8008cba <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a00:	463b      	mov	r3, r7
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	78db      	ldrb	r3, [r3, #3]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	f040 8155 	bne.w	8008cb6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a0c:	463b      	mov	r3, r7
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	463b      	mov	r3, r7
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d90e      	bls.n	8008a3a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008a26:	463b      	mov	r3, r7
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699a      	ldr	r2, [r3, #24]
 8008a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a30:	1ad2      	subs	r2, r2, r3
 8008a32:	463b      	mov	r3, r7
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	619a      	str	r2, [r3, #24]
 8008a38:	e008      	b.n	8008a4c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008a44:	463b      	mov	r3, r7
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d16f      	bne.n	8008b36 <USB_EPStartXfer+0x1402>
 8008a56:	1d3b      	adds	r3, r7, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a5e:	1d3b      	adds	r3, r7, #4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a6e:	4413      	add	r3, r2
 8008a70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a74:	463b      	mov	r3, r7
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	011a      	lsls	r2, r3, #4
 8008a7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a80:	4413      	add	r3, r2
 8008a82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d116      	bne.n	8008ac0 <USB_EPStartXfer+0x138c>
 8008a92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aa4:	801a      	strh	r2, [r3, #0]
 8008aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008abc:	801a      	strh	r2, [r3, #0]
 8008abe:	e05f      	b.n	8008b80 <USB_EPStartXfer+0x144c>
 8008ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ac6:	d818      	bhi.n	8008afa <USB_EPStartXfer+0x13c6>
 8008ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008acc:	085b      	lsrs	r3, r3, #1
 8008ace:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d004      	beq.n	8008ae8 <USB_EPStartXfer+0x13b4>
 8008ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	029b      	lsls	r3, r3, #10
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008af6:	801a      	strh	r2, [r3, #0]
 8008af8:	e042      	b.n	8008b80 <USB_EPStartXfer+0x144c>
 8008afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b08:	f003 031f 	and.w	r3, r3, #31
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <USB_EPStartXfer+0x13e6>
 8008b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b14:	3b01      	subs	r3, #1
 8008b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	029b      	lsls	r3, r3, #10
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	e024      	b.n	8008b80 <USB_EPStartXfer+0x144c>
 8008b36:	463b      	mov	r3, r7
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d11f      	bne.n	8008b80 <USB_EPStartXfer+0x144c>
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b58:	4413      	add	r3, r2
 8008b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b5e:	463b      	mov	r3, r7
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	011a      	lsls	r2, r3, #4
 8008b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	1d3b      	adds	r3, r7, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b88:	463b      	mov	r3, r7
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d16f      	bne.n	8008c72 <USB_EPStartXfer+0x153e>
 8008b92:	1d3b      	adds	r3, r7, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b9a:	1d3b      	adds	r3, r7, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008baa:	4413      	add	r3, r2
 8008bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	011a      	lsls	r2, r3, #4
 8008bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d116      	bne.n	8008bfc <USB_EPStartXfer+0x14c8>
 8008bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	e05e      	b.n	8008cba <USB_EPStartXfer+0x1586>
 8008bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c00:	2b3e      	cmp	r3, #62	; 0x3e
 8008c02:	d818      	bhi.n	8008c36 <USB_EPStartXfer+0x1502>
 8008c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c08:	085b      	lsrs	r3, r3, #1
 8008c0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <USB_EPStartXfer+0x14f0>
 8008c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c1e:	3301      	adds	r3, #1
 8008c20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	029b      	lsls	r3, r3, #10
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	e041      	b.n	8008cba <USB_EPStartXfer+0x1586>
 8008c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <USB_EPStartXfer+0x1522>
 8008c4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c50:	3b01      	subs	r3, #1
 8008c52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	029b      	lsls	r3, r3, #10
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	e023      	b.n	8008cba <USB_EPStartXfer+0x1586>
 8008c72:	463b      	mov	r3, r7
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d11e      	bne.n	8008cba <USB_EPStartXfer+0x1586>
 8008c7c:	1d3b      	adds	r3, r7, #4
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c92:	463b      	mov	r3, r7
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	011a      	lsls	r2, r3, #4
 8008c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	e001      	b.n	8008cba <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e02e      	b.n	8008d18 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008cd8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008cdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ce0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ce4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ce8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cec:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008cf0:	1d3b      	adds	r3, r7, #4
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	463b      	mov	r3, r7
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d020      	beq.n	8008d76 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4a:	81bb      	strh	r3, [r7, #12]
 8008d4c:	89bb      	ldrh	r3, [r7, #12]
 8008d4e:	f083 0310 	eor.w	r3, r3, #16
 8008d52:	81bb      	strh	r3, [r7, #12]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	441a      	add	r2, r3
 8008d5e:	89bb      	ldrh	r3, [r7, #12]
 8008d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	8013      	strh	r3, [r2, #0]
 8008d74:	e01f      	b.n	8008db6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8c:	81fb      	strh	r3, [r7, #14]
 8008d8e:	89fb      	ldrh	r3, [r7, #14]
 8008d90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d94:	81fb      	strh	r3, [r7, #14]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	441a      	add	r2, r3
 8008da0:	89fb      	ldrh	r3, [r7, #14]
 8008da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr

08008dc2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b087      	sub	sp, #28
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	7b1b      	ldrb	r3, [r3, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 809d 	bne.w	8008f10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d04c      	beq.n	8008e78 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	823b      	strh	r3, [r7, #16]
 8008dec:	8a3b      	ldrh	r3, [r7, #16]
 8008dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01b      	beq.n	8008e2e <USB_EPClearStall+0x6c>
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0c:	81fb      	strh	r3, [r7, #14]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	441a      	add	r2, r3
 8008e18:	89fb      	ldrh	r3, [r7, #14]
 8008e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	78db      	ldrb	r3, [r3, #3]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d06c      	beq.n	8008f10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e4c:	81bb      	strh	r3, [r7, #12]
 8008e4e:	89bb      	ldrh	r3, [r7, #12]
 8008e50:	f083 0320 	eor.w	r3, r3, #32
 8008e54:	81bb      	strh	r3, [r7, #12]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	441a      	add	r2, r3
 8008e60:	89bb      	ldrh	r3, [r7, #12]
 8008e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]
 8008e76:	e04b      	b.n	8008f10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	82fb      	strh	r3, [r7, #22]
 8008e86:	8afb      	ldrh	r3, [r7, #22]
 8008e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <USB_EPClearStall+0x106>
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	82bb      	strh	r3, [r7, #20]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	441a      	add	r2, r3
 8008eb2:	8abb      	ldrh	r3, [r7, #20]
 8008eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ede:	827b      	strh	r3, [r7, #18]
 8008ee0:	8a7b      	ldrh	r3, [r7, #18]
 8008ee2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ee6:	827b      	strh	r3, [r7, #18]
 8008ee8:	8a7b      	ldrh	r3, [r7, #18]
 8008eea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008eee:	827b      	strh	r3, [r7, #18]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	441a      	add	r2, r3
 8008efa:	8a7b      	ldrh	r3, [r7, #18]
 8008efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2280      	movs	r2, #128	; 0x80
 8008f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr

08008f42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bc80      	pop	{r7}
 8008f54:	4770      	bx	lr

08008f56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr

08008f6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr

08008f88 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr

08008f9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b08d      	sub	sp, #52	; 0x34
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	461a      	mov	r2, r3
 8008fac:	460b      	mov	r3, r1
 8008fae:	80fb      	strh	r3, [r7, #6]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fb4:	88bb      	ldrh	r3, [r7, #4]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	005a      	lsls	r2, r3, #1
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fd6:	e01e      	b.n	8009016 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	3302      	adds	r3, #2
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	3302      	adds	r3, #2
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	3301      	adds	r3, #1
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	3b01      	subs	r3, #1
 8009014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1dd      	bne.n	8008fd8 <USB_WritePMA+0x3a>
  }
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	3734      	adds	r7, #52	; 0x34
 8009022:	46bd      	mov	sp, r7
 8009024:	bc80      	pop	{r7}
 8009026:	4770      	bx	lr

08009028 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009028:	b480      	push	{r7}
 800902a:	b08b      	sub	sp, #44	; 0x2c
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4611      	mov	r1, r2
 8009034:	461a      	mov	r2, r3
 8009036:	460b      	mov	r3, r1
 8009038:	80fb      	strh	r3, [r7, #6]
 800903a:	4613      	mov	r3, r2
 800903c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800903e:	88bb      	ldrh	r3, [r7, #4]
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	b29b      	uxth	r3, r3
 8009044:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	005a      	lsls	r2, r3, #1
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800905a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
 8009060:	e01b      	b.n	800909a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	3302      	adds	r3, #2
 800906e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	3301      	adds	r3, #1
 800907c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	0a1b      	lsrs	r3, r3, #8
 8009082:	b2da      	uxtb	r2, r3
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	3301      	adds	r3, #1
 800908c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	3302      	adds	r3, #2
 8009092:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	3b01      	subs	r3, #1
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e0      	bne.n	8009062 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80090a0:	88bb      	ldrh	r3, [r7, #4]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d007      	beq.n	80090bc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	701a      	strb	r2, [r3, #0]
  }
}
 80090bc:	bf00      	nop
 80090be:	372c      	adds	r7, #44	; 0x2c
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7c1b      	ldrb	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d115      	bne.n	800910a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090e2:	2202      	movs	r2, #2
 80090e4:	2181      	movs	r1, #129	; 0x81
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fea1 	bl	800ae2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f6:	2202      	movs	r2, #2
 80090f8:	2101      	movs	r1, #1
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 fe97 	bl	800ae2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009108:	e012      	b.n	8009130 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800910a:	2340      	movs	r3, #64	; 0x40
 800910c:	2202      	movs	r2, #2
 800910e:	2181      	movs	r1, #129	; 0x81
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fe8c 	bl	800ae2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	2202      	movs	r2, #2
 8009120:	2101      	movs	r1, #1
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fe83 	bl	800ae2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009130:	2308      	movs	r3, #8
 8009132:	2203      	movs	r2, #3
 8009134:	2182      	movs	r1, #130	; 0x82
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fe79 	bl	800ae2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009142:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009146:	f001 ff99 	bl	800b07c <USBD_static_malloc>
 800914a:	4602      	mov	r2, r0
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	e026      	b.n	80091b0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009168:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7c1b      	ldrb	r3, [r3, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009196:	2101      	movs	r1, #1
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 ff39 	bl	800b010 <USBD_LL_PrepareReceive>
 800919e:	e007      	b.n	80091b0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091a6:	2340      	movs	r3, #64	; 0x40
 80091a8:	2101      	movs	r1, #1
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 ff30 	bl	800b010 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091ca:	2181      	movs	r1, #129	; 0x81
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 fe54 	bl	800ae7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091d8:	2101      	movs	r1, #1
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fe4d 	bl	800ae7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091e8:	2182      	movs	r1, #130	; 0x82
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fe45 	bl	800ae7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00e      	beq.n	800921e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	4618      	mov	r0, r3
 8009212:	f001 ff3f 	bl	800b094 <USBD_static_free>
    pdev->pClassData = NULL;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009238:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800924e:	2b00      	cmp	r3, #0
 8009250:	d039      	beq.n	80092c6 <USBD_CDC_Setup+0x9e>
 8009252:	2b20      	cmp	r3, #32
 8009254:	d17f      	bne.n	8009356 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	88db      	ldrh	r3, [r3, #6]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d029      	beq.n	80092b2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	b25b      	sxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	da11      	bge.n	800928c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009274:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	88d2      	ldrh	r2, [r2, #6]
 800927a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800927c:	6939      	ldr	r1, [r7, #16]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	461a      	mov	r2, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 fa0a 	bl	800a69e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800928a:	e06b      	b.n	8009364 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	785a      	ldrb	r2, [r3, #1]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	b2da      	uxtb	r2, r3
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092a2:	6939      	ldr	r1, [r7, #16]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	88db      	ldrh	r3, [r3, #6]
 80092a8:	461a      	mov	r2, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fa25 	bl	800a6fa <USBD_CtlPrepareRx>
      break;
 80092b0:	e058      	b.n	8009364 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	7850      	ldrb	r0, [r2, #1]
 80092be:	2200      	movs	r2, #0
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	4798      	blx	r3
      break;
 80092c4:	e04e      	b.n	8009364 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	2b0b      	cmp	r3, #11
 80092cc:	d02e      	beq.n	800932c <USBD_CDC_Setup+0x104>
 80092ce:	2b0b      	cmp	r3, #11
 80092d0:	dc38      	bgt.n	8009344 <USBD_CDC_Setup+0x11c>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <USBD_CDC_Setup+0xb4>
 80092d6:	2b0a      	cmp	r3, #10
 80092d8:	d014      	beq.n	8009304 <USBD_CDC_Setup+0xdc>
 80092da:	e033      	b.n	8009344 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d107      	bne.n	80092f6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80092e6:	f107 030c 	add.w	r3, r7, #12
 80092ea:	2202      	movs	r2, #2
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 f9d5 	bl	800a69e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092f4:	e02e      	b.n	8009354 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 f966 	bl	800a5ca <USBD_CtlError>
            ret = USBD_FAIL;
 80092fe:	2302      	movs	r3, #2
 8009300:	75fb      	strb	r3, [r7, #23]
          break;
 8009302:	e027      	b.n	8009354 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930a:	2b03      	cmp	r3, #3
 800930c:	d107      	bne.n	800931e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800930e:	f107 030f 	add.w	r3, r7, #15
 8009312:	2201      	movs	r2, #1
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f9c1 	bl	800a69e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800931c:	e01a      	b.n	8009354 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 f952 	bl	800a5ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	75fb      	strb	r3, [r7, #23]
          break;
 800932a:	e013      	b.n	8009354 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009332:	2b03      	cmp	r3, #3
 8009334:	d00d      	beq.n	8009352 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 f946 	bl	800a5ca <USBD_CtlError>
            ret = USBD_FAIL;
 800933e:	2302      	movs	r3, #2
 8009340:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009342:	e006      	b.n	8009352 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 f93f 	bl	800a5ca <USBD_CtlError>
          ret = USBD_FAIL;
 800934c:	2302      	movs	r3, #2
 800934e:	75fb      	strb	r3, [r7, #23]
          break;
 8009350:	e000      	b.n	8009354 <USBD_CDC_Setup+0x12c>
          break;
 8009352:	bf00      	nop
      }
      break;
 8009354:	e006      	b.n	8009364 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 f936 	bl	800a5ca <USBD_CtlError>
      ret = USBD_FAIL;
 800935e:	2302      	movs	r3, #2
 8009360:	75fb      	strb	r3, [r7, #23]
      break;
 8009362:	bf00      	nop
  }

  return ret;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009380:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009388:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009390:	2b00      	cmp	r3, #0
 8009392:	d03a      	beq.n	800940a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	331c      	adds	r3, #28
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d029      	beq.n	80093fe <USBD_CDC_DataIn+0x90>
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	331c      	adds	r3, #28
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	78f9      	ldrb	r1, [r7, #3]
 80093be:	68b8      	ldr	r0, [r7, #8]
 80093c0:	460b      	mov	r3, r1
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	4403      	add	r3, r0
 80093ca:	3338      	adds	r3, #56	; 0x38
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80093d2:	fb03 f301 	mul.w	r3, r3, r1
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d110      	bne.n	80093fe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	331c      	adds	r3, #28
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093f0:	78f9      	ldrb	r1, [r7, #3]
 80093f2:	2300      	movs	r3, #0
 80093f4:	2200      	movs	r2, #0
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fde7 	bl	800afca <USBD_LL_Transmit>
 80093fc:	e003      	b.n	8009406 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	e000      	b.n	800940c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800940a:	2302      	movs	r3, #2
  }
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009426:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fe12 	bl	800b056 <USBD_LL_GetRxDataSize>
 8009432:	4602      	mov	r2, r0
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00d      	beq.n	8009460 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009458:	4611      	mov	r1, r2
 800945a:	4798      	blx	r3

    return USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	e000      	b.n	8009462 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009460:	2302      	movs	r3, #2
  }
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009478:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009480:	2b00      	cmp	r3, #0
 8009482:	d015      	beq.n	80094b0 <USBD_CDC_EP0_RxReady+0x46>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800948a:	2bff      	cmp	r3, #255	; 0xff
 800948c:	d010      	beq.n	80094b0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800949c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094a4:	b292      	uxth	r2, r2
 80094a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	22ff      	movs	r2, #255	; 0xff
 80094ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2243      	movs	r2, #67	; 0x43
 80094c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bc80      	pop	{r7}
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	20000094 	.word	0x20000094

080094dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2243      	movs	r2, #67	; 0x43
 80094e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80094ea:	4b03      	ldr	r3, [pc, #12]	; (80094f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000050 	.word	0x20000050

080094fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2243      	movs	r2, #67	; 0x43
 8009508:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	200000d8 	.word	0x200000d8

0800951c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	220a      	movs	r2, #10
 8009528:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800952a:	4b03      	ldr	r3, [pc, #12]	; (8009538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	2000000c 	.word	0x2000000c

0800953c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009546:	2302      	movs	r3, #2
 8009548:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	bc80      	pop	{r7}
 8009566:	4770      	bx	lr

08009568 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	bc80      	pop	{r7}
 8009598:	4770      	bx	lr

0800959a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800959a:	b480      	push	{r7}
 800959c:	b085      	sub	sp, #20
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bc80      	pop	{r7}
 80095be:	4770      	bx	lr

080095c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01c      	beq.n	8009614 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d115      	bne.n	8009610 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009602:	b29b      	uxth	r3, r3
 8009604:	2181      	movs	r1, #129	; 0x81
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fcdf 	bl	800afca <USBD_LL_Transmit>

      return USBD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e002      	b.n	8009616 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009614:	2302      	movs	r3, #2
  }
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d017      	beq.n	8009668 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7c1b      	ldrb	r3, [r3, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d109      	bne.n	8009654 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800964a:	2101      	movs	r1, #1
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 fcdf 	bl	800b010 <USBD_LL_PrepareReceive>
 8009652:	e007      	b.n	8009664 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	2101      	movs	r1, #1
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fcd6 	bl	800b010 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	e000      	b.n	800966a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009668:	2302      	movs	r3, #2
  }
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	4613      	mov	r3, r2
 800967e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	e01a      	b.n	80096c0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	79fa      	ldrb	r2, [r7, #7]
 80096b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f001 fb43 	bl	800ad44 <USBD_LL_Init>

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d006      	beq.n	80096ea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
 80096e8:	e001      	b.n	80096ee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80096ea:	2302      	movs	r3, #2
 80096ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc80      	pop	{r7}
 80096f8:	4770      	bx	lr

080096fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 fb78 	bl	800adf8 <USBD_LL_Start>

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr

08009726 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009732:	2302      	movs	r3, #2
 8009734:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00c      	beq.n	800975a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800975a:	7bfb      	ldrb	r3, [r7, #15]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	4611      	mov	r1, r2
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fed8 	bl	800a552 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80097be:	f003 031f 	and.w	r3, r3, #31
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d016      	beq.n	80097f4 <USBD_LL_SetupStage+0x6a>
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d81c      	bhi.n	8009804 <USBD_LL_SetupStage+0x7a>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <USBD_LL_SetupStage+0x4a>
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d008      	beq.n	80097e4 <USBD_LL_SetupStage+0x5a>
 80097d2:	e017      	b.n	8009804 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f9cb 	bl	8009b78 <USBD_StdDevReq>
      break;
 80097e2:	e01a      	b.n	800981a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fa2d 	bl	8009c4c <USBD_StdItfReq>
      break;
 80097f2:	e012      	b.n	800981a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fa6d 	bl	8009cdc <USBD_StdEPReq>
      break;
 8009802:	e00a      	b.n	800981a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800980a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800980e:	b2db      	uxtb	r3, r3
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 fb50 	bl	800aeb8 <USBD_LL_StallEP>
      break;
 8009818:	bf00      	nop
  }

  return USBD_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	460b      	mov	r3, r1
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d14b      	bne.n	80098d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800983e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009846:	2b03      	cmp	r3, #3
 8009848:	d134      	bne.n	80098b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	429a      	cmp	r2, r3
 8009854:	d919      	bls.n	800988a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800986c:	429a      	cmp	r2, r3
 800986e:	d203      	bcs.n	8009878 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009874:	b29b      	uxth	r3, r3
 8009876:	e002      	b.n	800987e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800987c:	b29b      	uxth	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 ff57 	bl	800a736 <USBD_CtlContinueRx>
 8009888:	e038      	b.n	80098fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800989c:	2b03      	cmp	r3, #3
 800989e:	d105      	bne.n	80098ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 ff54 	bl	800a75a <USBD_CtlSendStatus>
 80098b2:	e023      	b.n	80098fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d11e      	bne.n	80098fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80098c6:	2100      	movs	r1, #0
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f001 faf5 	bl	800aeb8 <USBD_LL_StallEP>
 80098ce:	e015      	b.n	80098fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d108      	bne.n	80098f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	7afa      	ldrb	r2, [r7, #11]
 80098f0:	4611      	mov	r1, r2
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	4798      	blx	r3
 80098f6:	e001      	b.n	80098fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	e000      	b.n	80098fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	460b      	mov	r3, r1
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d17f      	bne.n	8009a1a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3314      	adds	r3, #20
 800991e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009926:	2b02      	cmp	r3, #2
 8009928:	d15c      	bne.n	80099e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	429a      	cmp	r2, r3
 8009934:	d915      	bls.n	8009962 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	b29b      	uxth	r3, r3
 800994a:	461a      	mov	r2, r3
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fec1 	bl	800a6d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009954:	2300      	movs	r3, #0
 8009956:	2200      	movs	r2, #0
 8009958:	2100      	movs	r1, #0
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f001 fb58 	bl	800b010 <USBD_LL_PrepareReceive>
 8009960:	e04e      	b.n	8009a00 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	6912      	ldr	r2, [r2, #16]
 800996a:	fbb3 f1f2 	udiv	r1, r3, r2
 800996e:	fb02 f201 	mul.w	r2, r2, r1
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	2b00      	cmp	r3, #0
 8009976:	d11c      	bne.n	80099b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009980:	429a      	cmp	r2, r3
 8009982:	d316      	bcc.n	80099b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800998e:	429a      	cmp	r2, r3
 8009990:	d20f      	bcs.n	80099b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009992:	2200      	movs	r2, #0
 8009994:	2100      	movs	r1, #0
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fe9d 	bl	800a6d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099a4:	2300      	movs	r3, #0
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f001 fb30 	bl	800b010 <USBD_LL_PrepareReceive>
 80099b0:	e026      	b.n	8009a00 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d105      	bne.n	80099d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80099d4:	2180      	movs	r1, #128	; 0x80
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f001 fa6e 	bl	800aeb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 fecf 	bl	800a780 <USBD_CtlReceiveStatus>
 80099e2:	e00d      	b.n	8009a00 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d004      	beq.n	80099f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d103      	bne.n	8009a00 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099f8:	2180      	movs	r1, #128	; 0x80
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f001 fa5c 	bl	800aeb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d11d      	bne.n	8009a46 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7ff fe81 	bl	8009712 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a18:	e015      	b.n	8009a46 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d108      	bne.n	8009a42 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	7afa      	ldrb	r2, [r7, #11]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	4798      	blx	r3
 8009a40:	e001      	b.n	8009a46 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a42:	2302      	movs	r3, #2
 8009a44:	e000      	b.n	8009a48 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 f9e5 	bl	800ae2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2240      	movs	r2, #64	; 0x40
 8009a70:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	2200      	movs	r2, #0
 8009a78:	2180      	movs	r1, #128	; 0x80
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 f9d7 	bl	800ae2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2240      	movs	r2, #64	; 0x40
 8009a8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6852      	ldr	r2, [r2, #4]
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
  }

  return USBD_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bc80      	pop	{r7}
 8009aee:	4770      	bx	lr

08009af0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2204      	movs	r2, #4
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d105      	bne.n	8009b36 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr

08009b42 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d10b      	bne.n	8009b6c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b8e:	2b40      	cmp	r3, #64	; 0x40
 8009b90:	d005      	beq.n	8009b9e <USBD_StdDevReq+0x26>
 8009b92:	2b40      	cmp	r3, #64	; 0x40
 8009b94:	d84f      	bhi.n	8009c36 <USBD_StdDevReq+0xbe>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <USBD_StdDevReq+0x36>
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d14b      	bne.n	8009c36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
      break;
 8009bac:	e048      	b.n	8009c40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	785b      	ldrb	r3, [r3, #1]
 8009bb2:	2b09      	cmp	r3, #9
 8009bb4:	d839      	bhi.n	8009c2a <USBD_StdDevReq+0xb2>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <USBD_StdDevReq+0x44>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009c0d 	.word	0x08009c0d
 8009bc0:	08009c21 	.word	0x08009c21
 8009bc4:	08009c2b 	.word	0x08009c2b
 8009bc8:	08009c17 	.word	0x08009c17
 8009bcc:	08009c2b 	.word	0x08009c2b
 8009bd0:	08009bef 	.word	0x08009bef
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009c2b 	.word	0x08009c2b
 8009bdc:	08009c03 	.word	0x08009c03
 8009be0:	08009bf9 	.word	0x08009bf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f9dc 	bl	8009fa4 <USBD_GetDescriptor>
          break;
 8009bec:	e022      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fb3f 	bl	800a274 <USBD_SetAddress>
          break;
 8009bf6:	e01d      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fb7e 	bl	800a2fc <USBD_SetConfig>
          break;
 8009c00:	e018      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fc07 	bl	800a418 <USBD_GetConfig>
          break;
 8009c0a:	e013      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fc37 	bl	800a482 <USBD_GetStatus>
          break;
 8009c14:	e00e      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fc65 	bl	800a4e8 <USBD_SetFeature>
          break;
 8009c1e:	e009      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fc74 	bl	800a510 <USBD_ClrFeature>
          break;
 8009c28:	e004      	b.n	8009c34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fccc 	bl	800a5ca <USBD_CtlError>
          break;
 8009c32:	bf00      	nop
      }
      break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fcc6 	bl	800a5ca <USBD_CtlError>
      break;
 8009c3e:	bf00      	nop
  }

  return ret;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop

08009c4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d005      	beq.n	8009c72 <USBD_StdItfReq+0x26>
 8009c66:	2b40      	cmp	r3, #64	; 0x40
 8009c68:	d82e      	bhi.n	8009cc8 <USBD_StdItfReq+0x7c>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <USBD_StdItfReq+0x26>
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d12a      	bne.n	8009cc8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d81d      	bhi.n	8009cba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	889b      	ldrh	r3, [r3, #4]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d813      	bhi.n	8009cb0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	88db      	ldrh	r3, [r3, #6]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d110      	bne.n	8009cc4 <USBD_StdItfReq+0x78>
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10d      	bne.n	8009cc4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fd56 	bl	800a75a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cae:	e009      	b.n	8009cc4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fc89 	bl	800a5ca <USBD_CtlError>
          break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc84 	bl	800a5ca <USBD_CtlError>
          break;
 8009cc2:	e000      	b.n	8009cc6 <USBD_StdItfReq+0x7a>
          break;
 8009cc4:	bf00      	nop
      }
      break;
 8009cc6:	e004      	b.n	8009cd2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fc7d 	bl	800a5ca <USBD_CtlError>
      break;
 8009cd0:	bf00      	nop
  }

  return USBD_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	889b      	ldrh	r3, [r3, #4]
 8009cee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	d007      	beq.n	8009d0c <USBD_StdEPReq+0x30>
 8009cfc:	2b40      	cmp	r3, #64	; 0x40
 8009cfe:	f200 8146 	bhi.w	8009f8e <USBD_StdEPReq+0x2b2>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <USBD_StdEPReq+0x40>
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	f040 8141 	bne.w	8009f8e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	4798      	blx	r3
      break;
 8009d1a:	e13d      	b.n	8009f98 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	d10a      	bne.n	8009d3e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	e12d      	b.n	8009f9a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d007      	beq.n	8009d56 <USBD_StdEPReq+0x7a>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	f300 811b 	bgt.w	8009f82 <USBD_StdEPReq+0x2a6>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d072      	beq.n	8009e36 <USBD_StdEPReq+0x15a>
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d03a      	beq.n	8009dca <USBD_StdEPReq+0xee>
 8009d54:	e115      	b.n	8009f82 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d002      	beq.n	8009d66 <USBD_StdEPReq+0x8a>
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d015      	beq.n	8009d90 <USBD_StdEPReq+0xb4>
 8009d64:	e02b      	b.n	8009dbe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00c      	beq.n	8009d86 <USBD_StdEPReq+0xaa>
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b80      	cmp	r3, #128	; 0x80
 8009d70:	d009      	beq.n	8009d86 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 f89e 	bl	800aeb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d7c:	2180      	movs	r1, #128	; 0x80
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 f89a 	bl	800aeb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d84:	e020      	b.n	8009dc8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc1e 	bl	800a5ca <USBD_CtlError>
              break;
 8009d8e:	e01b      	b.n	8009dc8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	885b      	ldrh	r3, [r3, #2]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10e      	bne.n	8009db6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <USBD_StdEPReq+0xda>
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	2b80      	cmp	r3, #128	; 0x80
 8009da2:	d008      	beq.n	8009db6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	88db      	ldrh	r3, [r3, #6]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 f881 	bl	800aeb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fccf 	bl	800a75a <USBD_CtlSendStatus>

              break;
 8009dbc:	e004      	b.n	8009dc8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fc02 	bl	800a5ca <USBD_CtlError>
              break;
 8009dc6:	bf00      	nop
          }
          break;
 8009dc8:	e0e0      	b.n	8009f8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d002      	beq.n	8009dda <USBD_StdEPReq+0xfe>
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d015      	beq.n	8009e04 <USBD_StdEPReq+0x128>
 8009dd8:	e026      	b.n	8009e28 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00c      	beq.n	8009dfa <USBD_StdEPReq+0x11e>
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	2b80      	cmp	r3, #128	; 0x80
 8009de4:	d009      	beq.n	8009dfa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f001 f864 	bl	800aeb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009df0:	2180      	movs	r1, #128	; 0x80
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 f860 	bl	800aeb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009df8:	e01c      	b.n	8009e34 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fbe4 	bl	800a5ca <USBD_CtlError>
              break;
 8009e02:	e017      	b.n	8009e34 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	885b      	ldrh	r3, [r3, #2]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d112      	bne.n	8009e32 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 f86b 	bl	800aef6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fc9a 	bl	800a75a <USBD_CtlSendStatus>
              }
              break;
 8009e26:	e004      	b.n	8009e32 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fbcd 	bl	800a5ca <USBD_CtlError>
              break;
 8009e30:	e000      	b.n	8009e34 <USBD_StdEPReq+0x158>
              break;
 8009e32:	bf00      	nop
          }
          break;
 8009e34:	e0aa      	b.n	8009f8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d002      	beq.n	8009e46 <USBD_StdEPReq+0x16a>
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d032      	beq.n	8009eaa <USBD_StdEPReq+0x1ce>
 8009e44:	e097      	b.n	8009f76 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d007      	beq.n	8009e5c <USBD_StdEPReq+0x180>
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	2b80      	cmp	r3, #128	; 0x80
 8009e50:	d004      	beq.n	8009e5c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fbb8 	bl	800a5ca <USBD_CtlError>
                break;
 8009e5a:	e091      	b.n	8009f80 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	da0b      	bge.n	8009e7c <USBD_StdEPReq+0x1a0>
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	3310      	adds	r3, #16
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4413      	add	r3, r2
 8009e78:	3304      	adds	r3, #4
 8009e7a:	e00b      	b.n	8009e94 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4413      	add	r3, r2
 8009e92:	3304      	adds	r3, #4
 8009e94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fbfb 	bl	800a69e <USBD_CtlSendData>
              break;
 8009ea8:	e06a      	b.n	8009f80 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da11      	bge.n	8009ed6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
 8009eb4:	f003 020f 	and.w	r2, r3, #15
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3318      	adds	r3, #24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d117      	bne.n	8009efc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fb7b 	bl	800a5ca <USBD_CtlError>
                  break;
 8009ed4:	e054      	b.n	8009f80 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	f003 020f 	and.w	r2, r3, #15
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	440b      	add	r3, r1
 8009ee8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fb68 	bl	800a5ca <USBD_CtlError>
                  break;
 8009efa:	e041      	b.n	8009f80 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0b      	bge.n	8009f1c <USBD_StdEPReq+0x240>
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	3310      	adds	r3, #16
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4413      	add	r3, r2
 8009f18:	3304      	adds	r3, #4
 8009f1a:	e00b      	b.n	8009f34 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	3304      	adds	r3, #4
 8009f34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <USBD_StdEPReq+0x266>
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	2b80      	cmp	r3, #128	; 0x80
 8009f40:	d103      	bne.n	8009f4a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	e00e      	b.n	8009f68 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fff0 	bl	800af34 <USBD_LL_IsStallEP>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e002      	b.n	8009f68 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fb95 	bl	800a69e <USBD_CtlSendData>
              break;
 8009f74:	e004      	b.n	8009f80 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fb26 	bl	800a5ca <USBD_CtlError>
              break;
 8009f7e:	bf00      	nop
          }
          break;
 8009f80:	e004      	b.n	8009f8c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb20 	bl	800a5ca <USBD_CtlError>
          break;
 8009f8a:	bf00      	nop
      }
      break;
 8009f8c:	e004      	b.n	8009f98 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fb1a 	bl	800a5ca <USBD_CtlError>
      break;
 8009f96:	bf00      	nop
  }

  return ret;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	2b06      	cmp	r3, #6
 8009fc6:	f200 8128 	bhi.w	800a21a <USBD_GetDescriptor+0x276>
 8009fca:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <USBD_GetDescriptor+0x2c>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	08009fed 	.word	0x08009fed
 8009fd4:	0800a005 	.word	0x0800a005
 8009fd8:	0800a045 	.word	0x0800a045
 8009fdc:	0800a21b 	.word	0x0800a21b
 8009fe0:	0800a21b 	.word	0x0800a21b
 8009fe4:	0800a1bb 	.word	0x0800a1bb
 8009fe8:	0800a1e7 	.word	0x0800a1e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	7c12      	ldrb	r2, [r2, #16]
 8009ff8:	f107 0108 	add.w	r1, r7, #8
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	4798      	blx	r3
 800a000:	60f8      	str	r0, [r7, #12]
      break;
 800a002:	e112      	b.n	800a22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7c1b      	ldrb	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10d      	bne.n	800a028 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a014:	f107 0208 	add.w	r2, r7, #8
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
 800a01c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3301      	adds	r3, #1
 800a022:	2202      	movs	r2, #2
 800a024:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a026:	e100      	b.n	800a22a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	f107 0208 	add.w	r2, r7, #8
 800a034:	4610      	mov	r0, r2
 800a036:	4798      	blx	r3
 800a038:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	2202      	movs	r2, #2
 800a040:	701a      	strb	r2, [r3, #0]
      break;
 800a042:	e0f2      	b.n	800a22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	885b      	ldrh	r3, [r3, #2]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b05      	cmp	r3, #5
 800a04c:	f200 80ac 	bhi.w	800a1a8 <USBD_GetDescriptor+0x204>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <USBD_GetDescriptor+0xb4>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a071 	.word	0x0800a071
 800a05c:	0800a0a5 	.word	0x0800a0a5
 800a060:	0800a0d9 	.word	0x0800a0d9
 800a064:	0800a10d 	.word	0x0800a10d
 800a068:	0800a141 	.word	0x0800a141
 800a06c:	0800a175 	.word	0x0800a175
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	7c12      	ldrb	r2, [r2, #16]
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a092:	e091      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa97 	bl	800a5ca <USBD_CtlError>
            err++;
 800a09c:	7afb      	ldrb	r3, [r7, #11]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0a2:	e089      	b.n	800a1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7c12      	ldrb	r2, [r2, #16]
 800a0bc:	f107 0108 	add.w	r1, r7, #8
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0c6:	e077      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa7d 	bl	800a5ca <USBD_CtlError>
            err++;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0d6:	e06f      	b.n	800a1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00b      	beq.n	800a0fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	7c12      	ldrb	r2, [r2, #16]
 800a0f0:	f107 0108 	add.w	r1, r7, #8
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
 800a0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0fa:	e05d      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa63 	bl	800a5ca <USBD_CtlError>
            err++;
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	3301      	adds	r3, #1
 800a108:	72fb      	strb	r3, [r7, #11]
          break;
 800a10a:	e055      	b.n	800a1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	7c12      	ldrb	r2, [r2, #16]
 800a124:	f107 0108 	add.w	r1, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12e:	e043      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa49 	bl	800a5ca <USBD_CtlError>
            err++;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	3301      	adds	r3, #1
 800a13c:	72fb      	strb	r3, [r7, #11]
          break;
 800a13e:	e03b      	b.n	800a1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7c12      	ldrb	r2, [r2, #16]
 800a158:	f107 0108 	add.w	r1, r7, #8
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
 800a160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a162:	e029      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa2f 	bl	800a5ca <USBD_CtlError>
            err++;
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	3301      	adds	r3, #1
 800a170:	72fb      	strb	r3, [r7, #11]
          break;
 800a172:	e021      	b.n	800a1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7c12      	ldrb	r2, [r2, #16]
 800a18c:	f107 0108 	add.w	r1, r7, #8
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a196:	e00f      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fa15 	bl	800a5ca <USBD_CtlError>
            err++;
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1a6:	e007      	b.n	800a1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa0d 	bl	800a5ca <USBD_CtlError>
          err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a1b6:	e038      	b.n	800a22a <USBD_GetDescriptor+0x286>
 800a1b8:	e037      	b.n	800a22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	7c1b      	ldrb	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ca:	f107 0208 	add.w	r2, r7, #8
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	4798      	blx	r3
 800a1d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1d4:	e029      	b.n	800a22a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f9f6 	bl	800a5ca <USBD_CtlError>
        err++;
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e4:	e021      	b.n	800a22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	7c1b      	ldrb	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10d      	bne.n	800a20a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f6:	f107 0208 	add.w	r2, r7, #8
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	4798      	blx	r3
 800a1fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	3301      	adds	r3, #1
 800a204:	2207      	movs	r2, #7
 800a206:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a208:	e00f      	b.n	800a22a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f9dc 	bl	800a5ca <USBD_CtlError>
        err++;
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	3301      	adds	r3, #1
 800a216:	72fb      	strb	r3, [r7, #11]
      break;
 800a218:	e007      	b.n	800a22a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f9d4 	bl	800a5ca <USBD_CtlError>
      err++;
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	3301      	adds	r3, #1
 800a226:	72fb      	strb	r3, [r7, #11]
      break;
 800a228:	bf00      	nop
  }

  if (err != 0U)
 800a22a:	7afb      	ldrb	r3, [r7, #11]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d11c      	bne.n	800a26a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a230:	893b      	ldrh	r3, [r7, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d011      	beq.n	800a25a <USBD_GetDescriptor+0x2b6>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	88db      	ldrh	r3, [r3, #6]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00d      	beq.n	800a25a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	88da      	ldrh	r2, [r3, #6]
 800a242:	893b      	ldrh	r3, [r7, #8]
 800a244:	4293      	cmp	r3, r2
 800a246:	bf28      	it	cs
 800a248:	4613      	movcs	r3, r2
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a24e:	893b      	ldrh	r3, [r7, #8]
 800a250:	461a      	mov	r2, r3
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fa22 	bl	800a69e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	88db      	ldrh	r3, [r3, #6]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d104      	bne.n	800a26c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa79 	bl	800a75a <USBD_CtlSendStatus>
 800a268:	e000      	b.n	800a26c <USBD_GetDescriptor+0x2c8>
    return;
 800a26a:	bf00      	nop
    }
  }
}
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop

0800a274 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	889b      	ldrh	r3, [r3, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d130      	bne.n	800a2e8 <USBD_SetAddress+0x74>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	88db      	ldrh	r3, [r3, #6]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d12c      	bne.n	800a2e8 <USBD_SetAddress+0x74>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	885b      	ldrh	r3, [r3, #2]
 800a292:	2b7f      	cmp	r3, #127	; 0x7f
 800a294:	d828      	bhi.n	800a2e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d104      	bne.n	800a2b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f98b 	bl	800a5ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b4:	e01d      	b.n	800a2f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fe62 	bl	800af8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa46 	bl	800a75a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d004      	beq.n	800a2de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2dc:	e009      	b.n	800a2f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e6:	e004      	b.n	800a2f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f96d 	bl	800a5ca <USBD_CtlError>
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	4b41      	ldr	r3, [pc, #260]	; (800a414 <USBD_SetConfig+0x118>)
 800a30e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a310:	4b40      	ldr	r3, [pc, #256]	; (800a414 <USBD_SetConfig+0x118>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d904      	bls.n	800a322 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f955 	bl	800a5ca <USBD_CtlError>
 800a320:	e075      	b.n	800a40e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d002      	beq.n	800a332 <USBD_SetConfig+0x36>
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d023      	beq.n	800a378 <USBD_SetConfig+0x7c>
 800a330:	e062      	b.n	800a3f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a332:	4b38      	ldr	r3, [pc, #224]	; (800a414 <USBD_SetConfig+0x118>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01a      	beq.n	800a370 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a33a:	4b36      	ldr	r3, [pc, #216]	; (800a414 <USBD_SetConfig+0x118>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2203      	movs	r2, #3
 800a348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a34c:	4b31      	ldr	r3, [pc, #196]	; (800a414 <USBD_SetConfig+0x118>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff f9e7 	bl	8009726 <USBD_SetClassConfig>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d104      	bne.n	800a368 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f932 	bl	800a5ca <USBD_CtlError>
            return;
 800a366:	e052      	b.n	800a40e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f9f6 	bl	800a75a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a36e:	e04e      	b.n	800a40e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f9f2 	bl	800a75a <USBD_CtlSendStatus>
        break;
 800a376:	e04a      	b.n	800a40e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a378:	4b26      	ldr	r3, [pc, #152]	; (800a414 <USBD_SetConfig+0x118>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d112      	bne.n	800a3a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a388:	4b22      	ldr	r3, [pc, #136]	; (800a414 <USBD_SetConfig+0x118>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	461a      	mov	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a392:	4b20      	ldr	r3, [pc, #128]	; (800a414 <USBD_SetConfig+0x118>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff f9e3 	bl	8009764 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f9db 	bl	800a75a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3a4:	e033      	b.n	800a40e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a3a6:	4b1b      	ldr	r3, [pc, #108]	; (800a414 <USBD_SetConfig+0x118>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d01d      	beq.n	800a3f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff f9d1 	bl	8009764 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a3c2:	4b14      	ldr	r3, [pc, #80]	; (800a414 <USBD_SetConfig+0x118>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3cc:	4b11      	ldr	r3, [pc, #68]	; (800a414 <USBD_SetConfig+0x118>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff f9a7 	bl	8009726 <USBD_SetClassConfig>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d104      	bne.n	800a3e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f8f2 	bl	800a5ca <USBD_CtlError>
            return;
 800a3e6:	e012      	b.n	800a40e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9b6 	bl	800a75a <USBD_CtlSendStatus>
        break;
 800a3ee:	e00e      	b.n	800a40e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f9b2 	bl	800a75a <USBD_CtlSendStatus>
        break;
 800a3f6:	e00a      	b.n	800a40e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f8e5 	bl	800a5ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a400:	4b04      	ldr	r3, [pc, #16]	; (800a414 <USBD_SetConfig+0x118>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff f9ac 	bl	8009764 <USBD_ClrClassConfig>
        break;
 800a40c:	bf00      	nop
    }
  }
}
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	20000199 	.word	0x20000199

0800a418 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d004      	beq.n	800a434 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f8cc 	bl	800a5ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a432:	e022      	b.n	800a47a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	dc02      	bgt.n	800a444 <USBD_GetConfig+0x2c>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dc03      	bgt.n	800a44a <USBD_GetConfig+0x32>
 800a442:	e015      	b.n	800a470 <USBD_GetConfig+0x58>
 800a444:	2b03      	cmp	r3, #3
 800a446:	d00b      	beq.n	800a460 <USBD_GetConfig+0x48>
 800a448:	e012      	b.n	800a470 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3308      	adds	r3, #8
 800a454:	2201      	movs	r2, #1
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f920 	bl	800a69e <USBD_CtlSendData>
        break;
 800a45e:	e00c      	b.n	800a47a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	2201      	movs	r2, #1
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f918 	bl	800a69e <USBD_CtlSendData>
        break;
 800a46e:	e004      	b.n	800a47a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f8a9 	bl	800a5ca <USBD_CtlError>
        break;
 800a478:	bf00      	nop
}
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a492:	3b01      	subs	r3, #1
 800a494:	2b02      	cmp	r3, #2
 800a496:	d81e      	bhi.n	800a4d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	88db      	ldrh	r3, [r3, #6]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d004      	beq.n	800a4aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f891 	bl	800a5ca <USBD_CtlError>
        break;
 800a4a8:	e01a      	b.n	800a4e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f043 0202 	orr.w	r2, r3, #2
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	330c      	adds	r3, #12
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8e5 	bl	800a69e <USBD_CtlSendData>
      break;
 800a4d4:	e004      	b.n	800a4e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f876 	bl	800a5ca <USBD_CtlError>
      break;
 800a4de:	bf00      	nop
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	885b      	ldrh	r3, [r3, #2]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d106      	bne.n	800a508 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f929 	bl	800a75a <USBD_CtlSendStatus>
  }
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a520:	3b01      	subs	r3, #1
 800a522:	2b02      	cmp	r3, #2
 800a524:	d80b      	bhi.n	800a53e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	885b      	ldrh	r3, [r3, #2]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d10c      	bne.n	800a548 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f90f 	bl	800a75a <USBD_CtlSendStatus>
      }
      break;
 800a53c:	e004      	b.n	800a548 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f842 	bl	800a5ca <USBD_CtlError>
      break;
 800a546:	e000      	b.n	800a54a <USBD_ClrFeature+0x3a>
      break;
 800a548:	bf00      	nop
  }
}
 800a54a:	bf00      	nop
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	781a      	ldrb	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	785a      	ldrb	r2, [r3, #1]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	3302      	adds	r3, #2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b29a      	uxth	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	3303      	adds	r3, #3
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	021b      	lsls	r3, r3, #8
 800a57e:	b29b      	uxth	r3, r3
 800a580:	4413      	add	r3, r2
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	3304      	adds	r3, #4
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	3305      	adds	r3, #5
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	021b      	lsls	r3, r3, #8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	3306      	adds	r3, #6
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	3307      	adds	r3, #7
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	021b      	lsls	r3, r3, #8
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	80da      	strh	r2, [r3, #6]

}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a5d4:	2180      	movs	r1, #128	; 0x80
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fc6e 	bl	800aeb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a5dc:	2100      	movs	r1, #0
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fc6a 	bl	800aeb8 <USBD_LL_StallEP>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d032      	beq.n	800a668 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f834 	bl	800a670 <USBD_GetLen>
 800a608:	4603      	mov	r3, r0
 800a60a:	3301      	adds	r3, #1
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	75fa      	strb	r2, [r7, #23]
 800a61c:	461a      	mov	r2, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4413      	add	r3, r2
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	75fa      	strb	r2, [r7, #23]
 800a62e:	461a      	mov	r2, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4413      	add	r3, r2
 800a634:	2203      	movs	r2, #3
 800a636:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a638:	e012      	b.n	800a660 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	60fa      	str	r2, [r7, #12]
 800a640:	7dfa      	ldrb	r2, [r7, #23]
 800a642:	1c51      	adds	r1, r2, #1
 800a644:	75f9      	strb	r1, [r7, #23]
 800a646:	4611      	mov	r1, r2
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	440a      	add	r2, r1
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	75fa      	strb	r2, [r7, #23]
 800a656:	461a      	mov	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4413      	add	r3, r2
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e8      	bne.n	800a63a <USBD_GetString+0x4e>
    }
  }
}
 800a668:	bf00      	nop
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a67c:	e005      	b.n	800a68a <USBD_GetLen+0x1a>
  {
    len++;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	3301      	adds	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	3301      	adds	r3, #1
 800a688:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f5      	bne.n	800a67e <USBD_GetLen+0xe>
  }

  return len;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr

0800a69e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6b4:	88fa      	ldrh	r2, [r7, #6]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a6ba:	88fa      	ldrh	r2, [r7, #6]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6c0:	88fb      	ldrh	r3, [r7, #6]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 fc7f 	bl	800afca <USBD_LL_Transmit>

  return USBD_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6e4:	88fb      	ldrh	r3, [r7, #6]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fc6d 	bl	800afca <USBD_LL_Transmit>

  return USBD_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	4613      	mov	r3, r2
 800a706:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2203      	movs	r2, #3
 800a70c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a710:	88fa      	ldrh	r2, [r7, #6]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a718:	88fa      	ldrh	r2, [r7, #6]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a720:	88fb      	ldrh	r3, [r7, #6]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	2100      	movs	r1, #0
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fc72 	bl	800b010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	4613      	mov	r3, r2
 800a742:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	2100      	movs	r1, #0
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fc60 	bl	800b010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b082      	sub	sp, #8
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2204      	movs	r2, #4
 800a766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a76a:	2300      	movs	r3, #0
 800a76c:	2200      	movs	r2, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fc2a 	bl	800afca <USBD_LL_Transmit>

  return USBD_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2205      	movs	r2, #5
 800a78c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a790:	2300      	movs	r3, #0
 800a792:	2200      	movs	r2, #0
 800a794:	2100      	movs	r1, #0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fc3a 	bl	800b010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4912      	ldr	r1, [pc, #72]	; (800a7f8 <MX_USB_DEVICE_Init+0x50>)
 800a7b0:	4812      	ldr	r0, [pc, #72]	; (800a7fc <MX_USB_DEVICE_Init+0x54>)
 800a7b2:	f7fe ff5e 	bl	8009672 <USBD_Init>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7bc:	f7f6 ff98 	bl	80016f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7c0:	490f      	ldr	r1, [pc, #60]	; (800a800 <MX_USB_DEVICE_Init+0x58>)
 800a7c2:	480e      	ldr	r0, [pc, #56]	; (800a7fc <MX_USB_DEVICE_Init+0x54>)
 800a7c4:	f7fe ff80 	bl	80096c8 <USBD_RegisterClass>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7ce:	f7f6 ff8f 	bl	80016f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7d2:	490c      	ldr	r1, [pc, #48]	; (800a804 <MX_USB_DEVICE_Init+0x5c>)
 800a7d4:	4809      	ldr	r0, [pc, #36]	; (800a7fc <MX_USB_DEVICE_Init+0x54>)
 800a7d6:	f7fe feb1 	bl	800953c <USBD_CDC_RegisterInterface>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7e0:	f7f6 ff86 	bl	80016f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7e4:	4805      	ldr	r0, [pc, #20]	; (800a7fc <MX_USB_DEVICE_Init+0x54>)
 800a7e6:	f7fe ff88 	bl	80096fa <USBD_Start>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7f0:	f7f6 ff7e 	bl	80016f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7f4:	bf00      	nop
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	2000012c 	.word	0x2000012c
 800a7fc:	20000c3c 	.word	0x20000c3c
 800a800:	20000018 	.word	0x20000018
 800a804:	2000011c 	.word	0x2000011c

0800a808 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a80c:	2200      	movs	r2, #0
 800a80e:	4905      	ldr	r1, [pc, #20]	; (800a824 <CDC_Init_FS+0x1c>)
 800a810:	4805      	ldr	r0, [pc, #20]	; (800a828 <CDC_Init_FS+0x20>)
 800a812:	f7fe fea9 	bl	8009568 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a816:	4905      	ldr	r1, [pc, #20]	; (800a82c <CDC_Init_FS+0x24>)
 800a818:	4803      	ldr	r0, [pc, #12]	; (800a828 <CDC_Init_FS+0x20>)
 800a81a:	f7fe febe 	bl	800959a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a81e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a820:	4618      	mov	r0, r3
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20001100 	.word	0x20001100
 800a828:	20000c3c 	.word	0x20000c3c
 800a82c:	20000f00 	.word	0x20000f00

0800a830 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a830:	b480      	push	{r7}
 800a832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a834:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a836:	4618      	mov	r0, r3
 800a838:	46bd      	mov	sp, r7
 800a83a:	bc80      	pop	{r7}
 800a83c:	4770      	bx	lr
	...

0800a840 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
 800a84c:	4613      	mov	r3, r2
 800a84e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	2b23      	cmp	r3, #35	; 0x23
 800a854:	d84a      	bhi.n	800a8ec <CDC_Control_FS+0xac>
 800a856:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <CDC_Control_FS+0x1c>)
 800a858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85c:	0800a8ed 	.word	0x0800a8ed
 800a860:	0800a8ed 	.word	0x0800a8ed
 800a864:	0800a8ed 	.word	0x0800a8ed
 800a868:	0800a8ed 	.word	0x0800a8ed
 800a86c:	0800a8ed 	.word	0x0800a8ed
 800a870:	0800a8ed 	.word	0x0800a8ed
 800a874:	0800a8ed 	.word	0x0800a8ed
 800a878:	0800a8ed 	.word	0x0800a8ed
 800a87c:	0800a8ed 	.word	0x0800a8ed
 800a880:	0800a8ed 	.word	0x0800a8ed
 800a884:	0800a8ed 	.word	0x0800a8ed
 800a888:	0800a8ed 	.word	0x0800a8ed
 800a88c:	0800a8ed 	.word	0x0800a8ed
 800a890:	0800a8ed 	.word	0x0800a8ed
 800a894:	0800a8ed 	.word	0x0800a8ed
 800a898:	0800a8ed 	.word	0x0800a8ed
 800a89c:	0800a8ed 	.word	0x0800a8ed
 800a8a0:	0800a8ed 	.word	0x0800a8ed
 800a8a4:	0800a8ed 	.word	0x0800a8ed
 800a8a8:	0800a8ed 	.word	0x0800a8ed
 800a8ac:	0800a8ed 	.word	0x0800a8ed
 800a8b0:	0800a8ed 	.word	0x0800a8ed
 800a8b4:	0800a8ed 	.word	0x0800a8ed
 800a8b8:	0800a8ed 	.word	0x0800a8ed
 800a8bc:	0800a8ed 	.word	0x0800a8ed
 800a8c0:	0800a8ed 	.word	0x0800a8ed
 800a8c4:	0800a8ed 	.word	0x0800a8ed
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8ed 	.word	0x0800a8ed
 800a8d0:	0800a8ed 	.word	0x0800a8ed
 800a8d4:	0800a8ed 	.word	0x0800a8ed
 800a8d8:	0800a8ed 	.word	0x0800a8ed
 800a8dc:	0800a8ed 	.word	0x0800a8ed
 800a8e0:	0800a8ed 	.word	0x0800a8ed
 800a8e4:	0800a8ed 	.word	0x0800a8ed
 800a8e8:	0800a8ed 	.word	0x0800a8ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8ec:	bf00      	nop
  }

  return (USBD_OK);
 800a8ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bc80      	pop	{r7}
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop

0800a8fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <CDC_Receive_FS+0x38>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d006      	beq.n	800a91c <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <CDC_Receive_FS+0x38>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	6812      	ldr	r2, [r2, #0]
 800a916:	4611      	mov	r1, r2
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	4806      	ldr	r0, [pc, #24]	; (800a938 <CDC_Receive_FS+0x3c>)
 800a920:	f7fe fe3b 	bl	800959a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a924:	4804      	ldr	r0, [pc, #16]	; (800a938 <CDC_Receive_FS+0x3c>)
 800a926:	f7fe fe7a 	bl	800961e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a92a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2000019c 	.word	0x2000019c
 800a938:	20000c3c 	.word	0x20000c3c

0800a93c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a94c:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <CDC_Transmit_FS+0x48>)
 800a94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a952:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a95e:	2301      	movs	r3, #1
 800a960:	e00b      	b.n	800a97a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a962:	887b      	ldrh	r3, [r7, #2]
 800a964:	461a      	mov	r2, r3
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	4806      	ldr	r0, [pc, #24]	; (800a984 <CDC_Transmit_FS+0x48>)
 800a96a:	f7fe fdfd 	bl	8009568 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a96e:	4805      	ldr	r0, [pc, #20]	; (800a984 <CDC_Transmit_FS+0x48>)
 800a970:	f7fe fe26 	bl	80095c0 <USBD_CDC_TransmitPacket>
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000c3c 	.word	0x20000c3c

0800a988 <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800a990:	4a03      	ldr	r2, [pc, #12]	; (800a9a0 <CDC_AttachOnUSBData+0x18>)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6013      	str	r3, [r2, #0]
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bc80      	pop	{r7}
 800a99e:	4770      	bx	lr
 800a9a0:	2000019c 	.word	0x2000019c

0800a9a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2212      	movs	r2, #18
 800a9b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9b6:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000148 	.word	0x20000148

0800a9c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9da:	4b03      	ldr	r3, [pc, #12]	; (800a9e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bc80      	pop	{r7}
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	2000015c 	.word	0x2000015c

0800a9ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	6039      	str	r1, [r7, #0]
 800a9f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9f8:	79fb      	ldrb	r3, [r7, #7]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d105      	bne.n	800aa0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	4907      	ldr	r1, [pc, #28]	; (800aa20 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa02:	4808      	ldr	r0, [pc, #32]	; (800aa24 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa04:	f7ff fdf2 	bl	800a5ec <USBD_GetString>
 800aa08:	e004      	b.n	800aa14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	4904      	ldr	r1, [pc, #16]	; (800aa20 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa0e:	4805      	ldr	r0, [pc, #20]	; (800aa24 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa10:	f7ff fdec 	bl	800a5ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20001300 	.word	0x20001300
 800aa24:	0800b194 	.word	0x0800b194

0800aa28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	4904      	ldr	r1, [pc, #16]	; (800aa48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa38:	4804      	ldr	r0, [pc, #16]	; (800aa4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa3a:	f7ff fdd7 	bl	800a5ec <USBD_GetString>
  return USBD_StrDesc;
 800aa3e:	4b02      	ldr	r3, [pc, #8]	; (800aa48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20001300 	.word	0x20001300
 800aa4c:	0800b1ac 	.word	0x0800b1ac

0800aa50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	221a      	movs	r2, #26
 800aa60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa62:	f000 f843 	bl	800aaec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa66:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20000160 	.word	0x20000160

0800aa74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d105      	bne.n	800aa92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	4907      	ldr	r1, [pc, #28]	; (800aaa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa8a:	4808      	ldr	r0, [pc, #32]	; (800aaac <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa8c:	f7ff fdae 	bl	800a5ec <USBD_GetString>
 800aa90:	e004      	b.n	800aa9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	4904      	ldr	r1, [pc, #16]	; (800aaa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa96:	4805      	ldr	r0, [pc, #20]	; (800aaac <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa98:	f7ff fda8 	bl	800a5ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20001300 	.word	0x20001300
 800aaac:	0800b1c0 	.word	0x0800b1c0

0800aab0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	6039      	str	r1, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4907      	ldr	r1, [pc, #28]	; (800aae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aac6:	4808      	ldr	r0, [pc, #32]	; (800aae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aac8:	f7ff fd90 	bl	800a5ec <USBD_GetString>
 800aacc:	e004      	b.n	800aad8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	4904      	ldr	r1, [pc, #16]	; (800aae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aad2:	4805      	ldr	r0, [pc, #20]	; (800aae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aad4:	f7ff fd8a 	bl	800a5ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001300 	.word	0x20001300
 800aae8:	0800b1cc 	.word	0x0800b1cc

0800aaec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aaf2:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <Get_SerialNum+0x44>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aaf8:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <Get_SerialNum+0x48>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <Get_SerialNum+0x4c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d009      	beq.n	800ab26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab12:	2208      	movs	r2, #8
 800ab14:	4909      	ldr	r1, [pc, #36]	; (800ab3c <Get_SerialNum+0x50>)
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 f814 	bl	800ab44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	4908      	ldr	r1, [pc, #32]	; (800ab40 <Get_SerialNum+0x54>)
 800ab20:	68b8      	ldr	r0, [r7, #8]
 800ab22:	f000 f80f 	bl	800ab44 <IntToUnicode>
  }
}
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	1ffff7e8 	.word	0x1ffff7e8
 800ab34:	1ffff7ec 	.word	0x1ffff7ec
 800ab38:	1ffff7f0 	.word	0x1ffff7f0
 800ab3c:	20000162 	.word	0x20000162
 800ab40:	20000172 	.word	0x20000172

0800ab44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab56:	2300      	movs	r3, #0
 800ab58:	75fb      	strb	r3, [r7, #23]
 800ab5a:	e027      	b.n	800abac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	0f1b      	lsrs	r3, r3, #28
 800ab60:	2b09      	cmp	r3, #9
 800ab62:	d80b      	bhi.n	800ab7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	0f1b      	lsrs	r3, r3, #28
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	440b      	add	r3, r1
 800ab74:	3230      	adds	r2, #48	; 0x30
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	e00a      	b.n	800ab92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	0f1b      	lsrs	r3, r3, #28
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	4619      	mov	r1, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3237      	adds	r2, #55	; 0x37
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	2200      	movs	r2, #0
 800aba4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	3301      	adds	r3, #1
 800abaa:	75fb      	strb	r3, [r7, #23]
 800abac:	7dfa      	ldrb	r2, [r7, #23]
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d3d3      	bcc.n	800ab5c <IntToUnicode+0x18>
  }
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a0d      	ldr	r2, [pc, #52]	; (800ac04 <HAL_PCD_MspInit+0x44>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d113      	bne.n	800abfa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800abd2:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <HAL_PCD_MspInit+0x48>)
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	4a0c      	ldr	r2, [pc, #48]	; (800ac08 <HAL_PCD_MspInit+0x48>)
 800abd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abdc:	61d3      	str	r3, [r2, #28]
 800abde:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <HAL_PCD_MspInit+0x48>)
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	2014      	movs	r0, #20
 800abf0:	f7f7 fca9 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800abf4:	2014      	movs	r0, #20
 800abf6:	f7f7 fcc2 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	40005c00 	.word	0x40005c00
 800ac08:	40021000 	.word	0x40021000

0800ac0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7fe fdb1 	bl	800978a <USBD_LL_SetupStage>
}
 800ac28:	bf00      	nop
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac42:	78fa      	ldrb	r2, [r7, #3]
 800ac44:	6879      	ldr	r1, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	440b      	add	r3, r1
 800ac50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f7fe fde3 	bl	8009824 <USBD_LL_DataOutStage>
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac78:	78fa      	ldrb	r2, [r7, #3]
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	00db      	lsls	r3, r3, #3
 800ac84:	440b      	add	r3, r1
 800ac86:	333c      	adds	r3, #60	; 0x3c
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f7fe fe3a 	bl	8009906 <USBD_LL_DataInStage>
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe ff4a 	bl	8009b42 <USBD_LL_SOF>
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acbe:	2301      	movs	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d001      	beq.n	800acce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800acca:	f7f6 fd11 	bl	80016f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acd4:	7bfa      	ldrb	r2, [r7, #15]
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe fefa 	bl	8009ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe feb3 	bl	8009a50 <USBD_LL_Reset>
}
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fef4 	bl	8009af0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad10:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <HAL_PCD_SuspendCallback+0x30>)
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	4a03      	ldr	r2, [pc, #12]	; (800ad24 <HAL_PCD_SuspendCallback+0x30>)
 800ad16:	f043 0306 	orr.w	r3, r3, #6
 800ad1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	e000ed00 	.word	0xe000ed00

0800ad28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe feee 	bl	8009b18 <USBD_LL_Resume>
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad4c:	4a28      	ldr	r2, [pc, #160]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a26      	ldr	r2, [pc, #152]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad5c:	4b24      	ldr	r3, [pc, #144]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad5e:	4a25      	ldr	r2, [pc, #148]	; (800adf4 <USBD_LL_Init+0xb0>)
 800ad60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad62:	4b23      	ldr	r3, [pc, #140]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad64:	2208      	movs	r2, #8
 800ad66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad68:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad6e:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ad74:	4b1e      	ldr	r3, [pc, #120]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad7a:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad80:	481b      	ldr	r0, [pc, #108]	; (800adf0 <USBD_LL_Init+0xac>)
 800ad82:	f7f8 f9c5 	bl	8003110 <HAL_PCD_Init>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ad8c:	f7f6 fcb0 	bl	80016f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad96:	2318      	movs	r3, #24
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	f7f9 fe3b 	bl	8004a16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ada6:	2358      	movs	r3, #88	; 0x58
 800ada8:	2200      	movs	r2, #0
 800adaa:	2180      	movs	r1, #128	; 0x80
 800adac:	f7f9 fe33 	bl	8004a16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adb6:	23c0      	movs	r3, #192	; 0xc0
 800adb8:	2200      	movs	r2, #0
 800adba:	2181      	movs	r1, #129	; 0x81
 800adbc:	f7f9 fe2b 	bl	8004a16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800adca:	2200      	movs	r2, #0
 800adcc:	2101      	movs	r1, #1
 800adce:	f7f9 fe22 	bl	8004a16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800add8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800addc:	2200      	movs	r2, #0
 800adde:	2182      	movs	r1, #130	; 0x82
 800ade0:	f7f9 fe19 	bl	8004a16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20001500 	.word	0x20001500
 800adf4:	40005c00 	.word	0x40005c00

0800adf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f8 fa89 	bl	8003326 <HAL_PCD_Start>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 f94e 	bl	800b0bc <USBD_Get_USB_Status>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	4608      	mov	r0, r1
 800ae38:	4611      	mov	r1, r2
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	70fb      	strb	r3, [r7, #3]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70bb      	strb	r3, [r7, #2]
 800ae44:	4613      	mov	r3, r2
 800ae46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae56:	78bb      	ldrb	r3, [r7, #2]
 800ae58:	883a      	ldrh	r2, [r7, #0]
 800ae5a:	78f9      	ldrb	r1, [r7, #3]
 800ae5c:	f7f8 fc03 	bl	8003666 <HAL_PCD_EP_Open>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f928 	bl	800b0bc <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae94:	78fa      	ldrb	r2, [r7, #3]
 800ae96:	4611      	mov	r1, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7f8 fc4a 	bl	8003732 <HAL_PCD_EP_Close>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f909 	bl	800b0bc <USBD_Get_USB_Status>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f8 fd0a 	bl	80038f0 <HAL_PCD_EP_SetStall>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 f8ea 	bl	800b0bc <USBD_Get_USB_Status>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	460b      	mov	r3, r1
 800af00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af10:	78fa      	ldrb	r2, [r7, #3]
 800af12:	4611      	mov	r1, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f7f8 fd4b 	bl	80039b0 <HAL_PCD_EP_ClrStall>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 f8cb 	bl	800b0bc <USBD_Get_USB_Status>
 800af26:	4603      	mov	r3, r0
 800af28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	da0c      	bge.n	800af6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af50:	78fb      	ldrb	r3, [r7, #3]
 800af52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af56:	68f9      	ldr	r1, [r7, #12]
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	4613      	mov	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	440b      	add	r3, r1
 800af64:	3302      	adds	r3, #2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	e00b      	b.n	800af82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	4613      	mov	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	440b      	add	r3, r1
 800af7c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800af80:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr

0800af8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afa6:	78fa      	ldrb	r2, [r7, #3]
 800afa8:	4611      	mov	r1, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7f8 fb36 	bl	800361c <HAL_PCD_SetAddress>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 f880 	bl	800b0bc <USBD_Get_USB_Status>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b086      	sub	sp, #24
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	461a      	mov	r2, r3
 800afd6:	460b      	mov	r3, r1
 800afd8:	72fb      	strb	r3, [r7, #11]
 800afda:	4613      	mov	r3, r2
 800afdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afec:	893b      	ldrh	r3, [r7, #8]
 800afee:	7af9      	ldrb	r1, [r7, #11]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	f7f8 fc3a 	bl	800386a <HAL_PCD_EP_Transmit>
 800aff6:	4603      	mov	r3, r0
 800aff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f85d 	bl	800b0bc <USBD_Get_USB_Status>
 800b002:	4603      	mov	r3, r0
 800b004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b006:	7dbb      	ldrb	r3, [r7, #22]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	461a      	mov	r2, r3
 800b01c:	460b      	mov	r3, r1
 800b01e:	72fb      	strb	r3, [r7, #11]
 800b020:	4613      	mov	r3, r2
 800b022:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b032:	893b      	ldrh	r3, [r7, #8]
 800b034:	7af9      	ldrb	r1, [r7, #11]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	f7f8 fbc3 	bl	80037c2 <HAL_PCD_EP_Receive>
 800b03c:	4603      	mov	r3, r0
 800b03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f83a 	bl	800b0bc <USBD_Get_USB_Status>
 800b048:	4603      	mov	r3, r0
 800b04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b068:	78fa      	ldrb	r2, [r7, #3]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7f8 fbe5 	bl	800383c <HAL_PCD_EP_GetRxCount>
 800b072:	4603      	mov	r3, r0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b084:	4b02      	ldr	r3, [pc, #8]	; (800b090 <USBD_static_malloc+0x14>)
}
 800b086:	4618      	mov	r0, r3
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr
 800b090:	200001a0 	.word	0x200001a0

0800b094 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]

}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bc80      	pop	{r7}
 800b0a4:	4770      	bx	lr

0800b0a6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b0b2:	bf00      	nop
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bc80      	pop	{r7}
 800b0ba:	4770      	bx	lr

0800b0bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	d817      	bhi.n	800b100 <USBD_Get_USB_Status+0x44>
 800b0d0:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <USBD_Get_USB_Status+0x1c>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b0e9 	.word	0x0800b0e9
 800b0dc:	0800b0ef 	.word	0x0800b0ef
 800b0e0:	0800b0f5 	.word	0x0800b0f5
 800b0e4:	0800b0fb 	.word	0x0800b0fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ec:	e00b      	b.n	800b106 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f2:	e008      	b.n	800b106 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f8:	e005      	b.n	800b106 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0fe:	e002      	b.n	800b106 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b100:	2302      	movs	r3, #2
 800b102:	73fb      	strb	r3, [r7, #15]
    break;
 800b104:	bf00      	nop
  }
  return usb_status;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop

0800b114 <__libc_init_array>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	2600      	movs	r6, #0
 800b118:	4d0c      	ldr	r5, [pc, #48]	; (800b14c <__libc_init_array+0x38>)
 800b11a:	4c0d      	ldr	r4, [pc, #52]	; (800b150 <__libc_init_array+0x3c>)
 800b11c:	1b64      	subs	r4, r4, r5
 800b11e:	10a4      	asrs	r4, r4, #2
 800b120:	42a6      	cmp	r6, r4
 800b122:	d109      	bne.n	800b138 <__libc_init_array+0x24>
 800b124:	f000 f822 	bl	800b16c <_init>
 800b128:	2600      	movs	r6, #0
 800b12a:	4d0a      	ldr	r5, [pc, #40]	; (800b154 <__libc_init_array+0x40>)
 800b12c:	4c0a      	ldr	r4, [pc, #40]	; (800b158 <__libc_init_array+0x44>)
 800b12e:	1b64      	subs	r4, r4, r5
 800b130:	10a4      	asrs	r4, r4, #2
 800b132:	42a6      	cmp	r6, r4
 800b134:	d105      	bne.n	800b142 <__libc_init_array+0x2e>
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13c:	4798      	blx	r3
 800b13e:	3601      	adds	r6, #1
 800b140:	e7ee      	b.n	800b120 <__libc_init_array+0xc>
 800b142:	f855 3b04 	ldr.w	r3, [r5], #4
 800b146:	4798      	blx	r3
 800b148:	3601      	adds	r6, #1
 800b14a:	e7f2      	b.n	800b132 <__libc_init_array+0x1e>
 800b14c:	0800b284 	.word	0x0800b284
 800b150:	0800b284 	.word	0x0800b284
 800b154:	0800b284 	.word	0x0800b284
 800b158:	0800b288 	.word	0x0800b288

0800b15c <memset>:
 800b15c:	4603      	mov	r3, r0
 800b15e:	4402      	add	r2, r0
 800b160:	4293      	cmp	r3, r2
 800b162:	d100      	bne.n	800b166 <memset+0xa>
 800b164:	4770      	bx	lr
 800b166:	f803 1b01 	strb.w	r1, [r3], #1
 800b16a:	e7f9      	b.n	800b160 <memset+0x4>

0800b16c <_init>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr

0800b178 <_fini>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	bf00      	nop
 800b17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17e:	bc08      	pop	{r3}
 800b180:	469e      	mov	lr, r3
 800b182:	4770      	bx	lr
