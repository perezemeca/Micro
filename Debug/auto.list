
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800ab24  0800ab24  0001ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab94  0800ab94  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab94  0800ab94  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab94  0800ab94  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800ab9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000162c  2000017c  0800ad18  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a8  0800ad18  000217a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2f6  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d43  00000000  00000000  0003e49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  000421e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00043898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbd7  00000000  00000000  00044e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c876  00000000  00000000  000609d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ef6  00000000  00000000  0007d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  00114198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ab0c 	.word	0x0800ab0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800ab0c 	.word	0x0800ab0c

0800014c <HAL_UART_RxCpltCallback>:
        TX->iw &= TX->maskSize;
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	RXUSART1.iw++;
 8000154:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000156:	791b      	ldrb	r3, [r3, #4]
 8000158:	b2db      	uxtb	r3, r3
 800015a:	3301      	adds	r3, #1
 800015c:	b2da      	uxtb	r2, r3
 800015e:	4b08      	ldr	r3, [pc, #32]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000160:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000162:	4b07      	ldr	r3, [pc, #28]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000164:	791b      	ldrb	r3, [r3, #4]
 8000166:	b2db      	uxtb	r3, r3
 8000168:	461a      	mov	r2, r3
 800016a:	4b06      	ldr	r3, [pc, #24]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 800016c:	4413      	add	r3, r2
 800016e:	2201      	movs	r2, #1
 8000170:	4619      	mov	r1, r3
 8000172:	4805      	ldr	r0, [pc, #20]	; (8000188 <HAL_UART_RxCpltCallback+0x3c>)
 8000174:	f005 fddd 	bl	8005d32 <HAL_UART_Receive_IT>
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	2000040c 	.word	0x2000040c
 8000184:	200009bc 	.word	0x200009bc
 8000188:	2000072c 	.word	0x2000072c

0800018c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	iAdc++;
 8000194:	4b2d      	ldr	r3, [pc, #180]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	b2db      	uxtb	r3, r3
 800019a:	3301      	adds	r3, #1
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4b2b      	ldr	r3, [pc, #172]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001a0:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 80001a2:	4b2a      	ldr	r3, [pc, #168]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	2b20      	cmp	r3, #32
 80001aa:	d102      	bne.n	80001b2 <HAL_ADC_ConvCpltCallback+0x26>
		iAdc = 0;
 80001ac:	4b27      	ldr	r3, [pc, #156]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
	}
	if(iAdc >= 2 && iAdc <= 31){
 80001b2:	4b26      	ldr	r3, [pc, #152]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d942      	bls.n	8000242 <HAL_ADC_ConvCpltCallback+0xb6>
 80001bc:	4b23      	ldr	r3, [pc, #140]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	2b1f      	cmp	r3, #31
 80001c4:	d83d      	bhi.n	8000242 <HAL_ADC_ConvCpltCallback+0xb6>
		for(uint8_t i = 0; i<8; i++){
 80001c6:	2300      	movs	r3, #0
 80001c8:	73fb      	strb	r3, [r7, #15]
 80001ca:	e037      	b.n	800023c <HAL_ADC_ConvCpltCallback+0xb0>
			bufADC[iAdc-2][i] = (bufADC[iAdc-2][i] + bufADC[iAdc-1][i] + bufADC[iAdc][i])/3;
 80001cc:	4b1f      	ldr	r3, [pc, #124]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	1e9a      	subs	r2, r3, #2
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	491e      	ldr	r1, [pc, #120]	; (8000250 <HAL_ADC_ConvCpltCallback+0xc4>)
 80001d8:	00d2      	lsls	r2, r2, #3
 80001da:	4413      	add	r3, r2
 80001dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001e0:	b29b      	uxth	r3, r3
 80001e2:	4618      	mov	r0, r3
 80001e4:	4b19      	ldr	r3, [pc, #100]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	1e5a      	subs	r2, r3, #1
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	4918      	ldr	r1, [pc, #96]	; (8000250 <HAL_ADC_ConvCpltCallback+0xc4>)
 80001f0:	00d2      	lsls	r2, r2, #3
 80001f2:	4413      	add	r3, r2
 80001f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	4403      	add	r3, r0
 80001fc:	4a13      	ldr	r2, [pc, #76]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 80001fe:	7812      	ldrb	r2, [r2, #0]
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	4611      	mov	r1, r2
 8000204:	7bfa      	ldrb	r2, [r7, #15]
 8000206:	4812      	ldr	r0, [pc, #72]	; (8000250 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000208:	00c9      	lsls	r1, r1, #3
 800020a:	440a      	add	r2, r1
 800020c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000210:	b292      	uxth	r2, r2
 8000212:	4413      	add	r3, r2
 8000214:	4a0f      	ldr	r2, [pc, #60]	; (8000254 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000216:	fb82 1203 	smull	r1, r2, r2, r3
 800021a:	17db      	asrs	r3, r3, #31
 800021c:	1ad1      	subs	r1, r2, r3
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <HAL_ADC_ConvCpltCallback+0xc0>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	1e9a      	subs	r2, r3, #2
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	b288      	uxth	r0, r1
 800022a:	4909      	ldr	r1, [pc, #36]	; (8000250 <HAL_ADC_ConvCpltCallback+0xc4>)
 800022c:	00d2      	lsls	r2, r2, #3
 800022e:	4413      	add	r3, r2
 8000230:	4602      	mov	r2, r0
 8000232:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i<8; i++){
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	3301      	adds	r3, #1
 800023a:	73fb      	strb	r3, [r7, #15]
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	2b07      	cmp	r3, #7
 8000240:	d9c4      	bls.n	80001cc <HAL_ADC_ConvCpltCallback+0x40>
		}
	}
}
 8000242:	bf00      	nop
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	200005f8 	.word	0x200005f8
 8000250:	200007bc 	.word	0x200007bc
 8000254:	55555556 	.word	0x55555556

08000258 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a2d      	ldr	r2, [pc, #180]	; (800031c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d143      	bne.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0x9a>
		Count100ms--;
 800026a:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3b01      	subs	r3, #1
 8000270:	4a2b      	ldr	r2, [pc, #172]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000272:	6013      	str	r3, [r2, #0]
		Count200ms--;
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800027c:	6013      	str	r3, [r2, #0]
		if(!Count100ms){
 800027e:	4b28      	ldr	r3, [pc, #160]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d105      	bne.n	8000292 <HAL_TIM_PeriodElapsedCallback+0x3a>
			Count100ms = 100;
 8000286:	4b26      	ldr	r3, [pc, #152]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000288:	2264      	movs	r2, #100	; 0x64
 800028a:	601a      	str	r2, [r3, #0]
			On100ms = 1;
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800028e:	2201      	movs	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
		}
		if(On200ms){
 8000292:	4b26      	ldr	r3, [pc, #152]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d005      	beq.n	80002a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			Count200ms = 200;
 800029a:	4b22      	ldr	r3, [pc, #136]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800029c:	22c8      	movs	r2, #200	; 0xc8
 800029e:	601a      	str	r2, [r3, #0]
			On200ms = 0;
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
		}
		if(Count500ms){
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d004      	beq.n	80002b8 <HAL_TIM_PeriodElapsedCallback+0x60>
			Count500ms--;
 80002ae:	4b20      	ldr	r3, [pc, #128]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80002b6:	6013      	str	r3, [r2, #0]
		}
		if(Count4000ms){
 80002b8:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d004      	beq.n	80002ca <HAL_TIM_PeriodElapsedCallback+0x72>
			Count4000ms--;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002c8:	6013      	str	r3, [r2, #0]
		}
		if(RXUSB.header) {                                                       //Si tengo algo distinto de cero, significa que estoy decodificando
 80002ca:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80002cc:	79db      	ldrb	r3, [r3, #7]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d00e      	beq.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0x9a>
			RXUSB.timeout--;                                                     //entonces decremento
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80002d6:	7b9b      	ldrb	r3, [r3, #14]
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	3b01      	subs	r3, #1
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80002e0:	739a      	strb	r2, [r3, #14]
			if(!RXUSB.timeout)                                                       //si timeout == 0
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80002e4:	7b9b      	ldrb	r3, [r3, #14]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0x9a>
				RXUSB.header = 0;                                                    //reinicio la decodificacion porque se demoro mucho
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	71da      	strb	r2, [r3, #7]
		}
	}
	if(htim->Instance == TIM3){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a11      	ldr	r2, [pc, #68]	; (800033c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d10a      	bne.n	8000312 <HAL_TIM_PeriodElapsedCallback+0xba>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000306:	4413      	add	r3, r2
 8000308:	2208      	movs	r2, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480e      	ldr	r0, [pc, #56]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800030e:	f001 fa3f 	bl	8001790 <HAL_ADC_Start_DMA>
	}
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40000800 	.word	0x40000800
 8000320:	20000ac4 	.word	0x20000ac4
 8000324:	20000abc 	.word	0x20000abc
 8000328:	20000474 	.word	0x20000474
 800032c:	20000774 	.word	0x20000774
 8000330:	200005a0 	.word	0x200005a0
 8000334:	2000041c 	.word	0x2000041c
 8000338:	20000bd0 	.word	0x20000bd0
 800033c:	40000400 	.word	0x40000400
 8000340:	200005f8 	.word	0x200005f8
 8000344:	200007bc 	.word	0x200007bc
 8000348:	200005fc 	.word	0x200005fc

0800034c <MyCallBackOnUSBData>:

void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e010      	b.n	800037e <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	441a      	add	r2, r3
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MyCallBackOnUSBData+0x48>)
 8000364:	791b      	ldrb	r3, [r3, #4]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	1c59      	adds	r1, r3, #1
 800036a:	b2c8      	uxtb	r0, r1
 800036c:	4909      	ldr	r1, [pc, #36]	; (8000394 <MyCallBackOnUSBData+0x48>)
 800036e:	7108      	strb	r0, [r1, #4]
 8000370:	4619      	mov	r1, r3
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MyCallBackOnUSBData+0x4c>)
 8000376:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	3301      	adds	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d3ea      	bcc.n	800035c <MyCallBackOnUSBData+0x10>
	}
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000bd0 	.word	0x20000bd0
 8000398:	200004a0 	.word	0x200004a0

0800039c <PutBuffOnTx>:


void PutBuffOnTx(_Tx *TX, uint8_t *buf, uint8_t length)
{
 800039c:	b490      	push	{r4, r7}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	4613      	mov	r3, r2
 80003a8:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0; i<length; i++) {
 80003aa:	2300      	movs	r3, #0
 80003ac:	75fb      	strb	r3, [r7, #23]
 80003ae:	e018      	b.n	80003e2 <PutBuffOnTx+0x46>

    	TX->Buff[TX->iw++] = buf[i];
 80003b0:	7dfb      	ldrb	r3, [r7, #23]
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	441a      	add	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6819      	ldr	r1, [r3, #0]
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	1c58      	adds	r0, r3, #1
 80003c0:	b2c4      	uxtb	r4, r0
 80003c2:	68f8      	ldr	r0, [r7, #12]
 80003c4:	7104      	strb	r4, [r0, #4]
 80003c6:	440b      	add	r3, r1
 80003c8:	7812      	ldrb	r2, [r2, #0]
 80003ca:	701a      	strb	r2, [r3, #0]
    	TX->iw &= TX->maskSize;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	791a      	ldrb	r2, [r3, #4]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	79db      	ldrb	r3, [r3, #7]
 80003d4:	4013      	ands	r3, r2
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	711a      	strb	r2, [r3, #4]
    for(i=0; i<length; i++) {
 80003dc:	7dfb      	ldrb	r3, [r7, #23]
 80003de:	3301      	adds	r3, #1
 80003e0:	75fb      	strb	r3, [r7, #23]
 80003e2:	7dfa      	ldrb	r2, [r7, #23]
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d3e2      	bcc.n	80003b0 <PutBuffOnTx+0x14>
    }
}
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc90      	pop	{r4, r7}
 80003f4:	4770      	bx	lr
	...

080003f8 <DecodeHeader>:

    return aux;
}

void DecodeHeader(_Rx *RX)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 8000406:	e0e3      	b.n	80005d0 <DecodeHeader+0x1d8>
        switch(RX->header) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	79db      	ldrb	r3, [r3, #7]
 800040c:	2b06      	cmp	r3, #6
 800040e:	f200 80c2 	bhi.w	8000596 <DecodeHeader+0x19e>
 8000412:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <DecodeHeader+0x20>)
 8000414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000418:	08000435 	.word	0x08000435
 800041c:	08000455 	.word	0x08000455
 8000420:	08000481 	.word	0x08000481
 8000424:	080004ad 	.word	0x080004ad
 8000428:	080004d9 	.word	0x080004d9
 800042c:	080004f1 	.word	0x080004f1
 8000430:	08000547 	.word	0x08000547
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7952      	ldrb	r2, [r2, #5]
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b55      	cmp	r3, #85	; 0x55
 8000442:	f040 80ac 	bne.w	800059e <DecodeHeader+0x1a6>
                    RX->header = 1;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2201      	movs	r2, #1
 800044a:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2205      	movs	r2, #5
 8000450:	739a      	strb	r2, [r3, #14]
                }
                break;
 8000452:	e0a4      	b.n	800059e <DecodeHeader+0x1a6>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7952      	ldrb	r2, [r2, #5]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b4e      	cmp	r3, #78	; 0x4e
 8000462:	d103      	bne.n	800046c <DecodeHeader+0x74>
                    RX->header = 2;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2202      	movs	r2, #2
 8000468:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 800046a:	e09b      	b.n	80005a4 <DecodeHeader+0x1ac>
                    RX->header = 0;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	795b      	ldrb	r3, [r3, #5]
 8000476:	3b01      	subs	r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	715a      	strb	r2, [r3, #5]
                break;
 800047e:	e091      	b.n	80005a4 <DecodeHeader+0x1ac>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7952      	ldrb	r2, [r2, #5]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b45      	cmp	r3, #69	; 0x45
 800048e:	d103      	bne.n	8000498 <DecodeHeader+0xa0>
                    RX->header = 3;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2203      	movs	r2, #3
 8000494:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000496:	e085      	b.n	80005a4 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	795b      	ldrb	r3, [r3, #5]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	715a      	strb	r2, [r3, #5]
                break;
 80004aa:	e07b      	b.n	80005a4 <DecodeHeader+0x1ac>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	7952      	ldrb	r2, [r2, #5]
 80004b4:	4413      	add	r3, r2
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b52      	cmp	r3, #82	; 0x52
 80004ba:	d103      	bne.n	80004c4 <DecodeHeader+0xcc>
                    RX->header = 4;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2204      	movs	r2, #4
 80004c0:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 80004c2:	e06f      	b.n	80005a4 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	795b      	ldrb	r3, [r3, #5]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	715a      	strb	r2, [r3, #5]
                break;
 80004d6:	e065      	b.n	80005a4 <DecodeHeader+0x1ac>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	7952      	ldrb	r2, [r2, #5]
 80004e0:	4413      	add	r3, r2
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2205      	movs	r2, #5
 80004ec:	71da      	strb	r2, [r3, #7]
                break;
 80004ee:	e059      	b.n	80005a4 <DecodeHeader+0x1ac>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7952      	ldrb	r2, [r2, #5]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b3a      	cmp	r3, #58	; 0x3a
 80004fe:	d118      	bne.n	8000532 <DecodeHeader+0x13a>
                    RX->header = 6;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2206      	movs	r2, #6
 8000504:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	3301      	adds	r3, #1
 800050c:	b2da      	uxtb	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	731a      	strb	r2, [r3, #12]
                    RX->iData &= RX->maskSize;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7b1a      	ldrb	r2, [r3, #12]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	7b5b      	ldrb	r3, [r3, #13]
 800051a:	4013      	ands	r3, r2
 800051c:	b2da      	uxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	731a      	strb	r2, [r3, #12]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7adb      	ldrb	r3, [r3, #11]
 8000526:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000530:	e038      	b.n	80005a4 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	795b      	ldrb	r3, [r3, #5]
 800053c:	3b01      	subs	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	715a      	strb	r2, [r3, #5]
                break;
 8000544:	e02e      	b.n	80005a4 <DecodeHeader+0x1ac>
            case 6:
                RX->nbytes--;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7adb      	ldrb	r3, [r3, #11]
 800054a:	3b01      	subs	r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7adb      	ldrb	r3, [r3, #11]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00c      	beq.n	8000574 <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	7a5a      	ldrb	r2, [r3, #9]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	7949      	ldrb	r1, [r1, #5]
 8000566:	440b      	add	r3, r1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4053      	eors	r3, r2
 800056c:	b2da      	uxtb	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	725a      	strb	r2, [r3, #9]
                    RX->header = 0 ;
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                    }
                }
                break;
 8000572:	e016      	b.n	80005a2 <DecodeHeader+0x1aa>
                    RX->header = 0 ;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7a5a      	ldrb	r2, [r3, #9]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	7949      	ldrb	r1, [r1, #5]
 8000586:	440b      	add	r3, r1
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	d109      	bne.n	80005a2 <DecodeHeader+0x1aa>
                        RX->ISCMD = 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	719a      	strb	r2, [r3, #6]
                break;
 8000594:	e005      	b.n	80005a2 <DecodeHeader+0x1aa>

            default:
                RX->header = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	71da      	strb	r2, [r3, #7]
                break;
 800059c:	e002      	b.n	80005a4 <DecodeHeader+0x1ac>
                break;
 800059e:	bf00      	nop
 80005a0:	e000      	b.n	80005a4 <DecodeHeader+0x1ac>
                break;
 80005a2:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795a      	ldrb	r2, [r3, #5]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7b5b      	ldrb	r3, [r3, #13]
 80005ac:	4013      	ands	r3, r2
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;                                                // Enmascaro el indice de lectura - Cuando llega a 63 se pone en 0
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795a      	ldrb	r2, [r3, #5]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7b5b      	ldrb	r3, [r3, #13]
 80005c8:	4013      	ands	r3, r2
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	7bfa      	ldrb	r2, [r7, #15]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	f47f af16 	bne.w	8000408 <DecodeHeader+0x10>
    }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <DecodeCmd>:

void DecodeCmd(_Rx *RX)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    RX->ISCMD = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	719a      	strb	r2, [r3, #6]

    switch(RX->Buff[RX->iData]){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7b12      	ldrb	r2, [r2, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2ba0      	cmp	r3, #160	; 0xa0
 8000604:	d002      	beq.n	800060c <DecodeCmd+0x24>
 8000606:	2bf0      	cmp	r3, #240	; 0xf0
 8000608:	d01f      	beq.n	800064a <DecodeCmd+0x62>
 800060a:	e02b      	b.n	8000664 <DecodeCmd+0x7c>

    	/*
		 * Comando para enviar datos IR
		 */
		case 0xA0:                                                              //Sensores analogicos
			PutHeaderOnTx(&TXUSB, 0xA0, 17);
 800060c:	2211      	movs	r2, #17
 800060e:	21a0      	movs	r1, #160	; 0xa0
 8000610:	481b      	ldr	r0, [pc, #108]	; (8000680 <DecodeCmd+0x98>)
 8000612:	f000 f859 	bl	80006c8 <PutHeaderOnTx>
			if(iAdc >= 2 && iAdc <= 31){
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <DecodeCmd+0x9c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b01      	cmp	r3, #1
 800061e:	d910      	bls.n	8000642 <DecodeCmd+0x5a>
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <DecodeCmd+0x9c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b1f      	cmp	r3, #31
 8000628:	d80b      	bhi.n	8000642 <DecodeCmd+0x5a>
				PutBuffOnTx(&TXUSB, (uint8_t *)&bufADC[iAdc-2], 16);
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <DecodeCmd+0x9c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	3b02      	subs	r3, #2
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <DecodeCmd+0xa0>)
 8000636:	4413      	add	r3, r2
 8000638:	2210      	movs	r2, #16
 800063a:	4619      	mov	r1, r3
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <DecodeCmd+0x98>)
 800063e:	f7ff fead 	bl	800039c <PutBuffOnTx>
			}
			PutcksOnTx(&TXUSB);
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <DecodeCmd+0x98>)
 8000644:	f000 f8d7 	bl	80007f6 <PutcksOnTx>
		break;
 8000648:	e015      	b.n	8000676 <DecodeCmd+0x8e>

    	/*
         * Comando para enviar alive
         */
        case 0xF0:                                                              //Alive
            PutHeaderOnTx(&TXUSB, 0xF0, 2);
 800064a:	2202      	movs	r2, #2
 800064c:	21f0      	movs	r1, #240	; 0xf0
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <DecodeCmd+0x98>)
 8000650:	f000 f83a 	bl	80006c8 <PutHeaderOnTx>
            PutByteOnTx(&TXUSB, 0x0D);
 8000654:	210d      	movs	r1, #13
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <DecodeCmd+0x98>)
 8000658:	f000 f818 	bl	800068c <PutByteOnTx>
            PutcksOnTx(&TXUSB);
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <DecodeCmd+0x98>)
 800065e:	f000 f8ca 	bl	80007f6 <PutcksOnTx>
            break;
 8000662:	e008      	b.n	8000676 <DecodeCmd+0x8e>
        /*
         * Comando para enviar aviso de error
         */
        default:
            PutHeaderOnTx(&TXUSB, 0xFF, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	21ff      	movs	r1, #255	; 0xff
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <DecodeCmd+0x98>)
 800066a:	f000 f82d 	bl	80006c8 <PutHeaderOnTx>
            PutcksOnTx(&TXUSB);
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <DecodeCmd+0x98>)
 8000670:	f000 f8c1 	bl	80007f6 <PutcksOnTx>
            break;
 8000674:	bf00      	nop
    }
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200005a4 	.word	0x200005a4
 8000684:	200005f8 	.word	0x200005f8
 8000688:	200007bc 	.word	0x200007bc

0800068c <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	1c59      	adds	r1, r3, #1
 80006a2:	b2c8      	uxtb	r0, r1
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	7108      	strb	r0, [r1, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	78fa      	ldrb	r2, [r7, #3]
 80006ac:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791a      	ldrb	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	79db      	ldrb	r3, [r3, #7]
 80006b6:	4013      	ands	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	711a      	strb	r2, [r3, #4]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <PutHeaderOnTx>:

void PutHeaderOnTx(_Tx *TX, uint8_t id, uint8_t lcmd)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
 80006d4:	4613      	mov	r3, r2
 80006d6:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	b2c8      	uxtb	r0, r1
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	7108      	strb	r0, [r1, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	2255      	movs	r2, #85	; 0x55
 80006ec:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791a      	ldrb	r2, [r3, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	79db      	ldrb	r3, [r3, #7]
 80006f6:	4013      	ands	r3, r2
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	1c59      	adds	r1, r3, #1
 8000708:	b2c8      	uxtb	r0, r1
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	7108      	strb	r0, [r1, #4]
 800070e:	4413      	add	r3, r2
 8000710:	224e      	movs	r2, #78	; 0x4e
 8000712:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791a      	ldrb	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	79db      	ldrb	r3, [r3, #7]
 800071c:	4013      	ands	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	1c59      	adds	r1, r3, #1
 800072e:	b2c8      	uxtb	r0, r1
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	7108      	strb	r0, [r1, #4]
 8000734:	4413      	add	r3, r2
 8000736:	2245      	movs	r2, #69	; 0x45
 8000738:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	79db      	ldrb	r3, [r3, #7]
 8000742:	4013      	ands	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	1c59      	adds	r1, r3, #1
 8000754:	b2c8      	uxtb	r0, r1
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	7108      	strb	r0, [r1, #4]
 800075a:	4413      	add	r3, r2
 800075c:	2252      	movs	r2, #82	; 0x52
 800075e:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791a      	ldrb	r2, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	79db      	ldrb	r3, [r3, #7]
 8000768:	4013      	ands	r3, r2
 800076a:	b2da      	uxtb	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	711a      	strb	r2, [r3, #4]
    TX->length = lcmd;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	78ba      	ldrb	r2, [r7, #2]
 8000774:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = lcmd + 1;                                             //lcmd cantidad de datos: id+payload+cks
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	1c59      	adds	r1, r3, #1
 8000780:	b2c8      	uxtb	r0, r1
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	7108      	strb	r0, [r1, #4]
 8000786:	4413      	add	r3, r2
 8000788:	78ba      	ldrb	r2, [r7, #2]
 800078a:	3201      	adds	r2, #1
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791a      	ldrb	r2, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	79db      	ldrb	r3, [r3, #7]
 8000798:	4013      	ands	r3, r2
 800079a:	b2da      	uxtb	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	1c59      	adds	r1, r3, #1
 80007aa:	b2c8      	uxtb	r0, r1
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	7108      	strb	r0, [r1, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	223a      	movs	r2, #58	; 0x3a
 80007b4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791a      	ldrb	r2, [r3, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	79db      	ldrb	r3, [r3, #7]
 80007be:	4013      	ands	r3, r2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = id;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	1c59      	adds	r1, r3, #1
 80007d0:	b2c8      	uxtb	r0, r1
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	7108      	strb	r0, [r1, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	78fa      	ldrb	r2, [r7, #3]
 80007da:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791a      	ldrb	r2, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	79db      	ldrb	r3, [r3, #7]
 80007e4:	4013      	ands	r3, r2
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	711a      	strb	r2, [r3, #4]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <PutcksOnTx>:
void PutcksOnTx(_Tx *TX)                                                        //Esta funcion se llama despues de haber cargado el payload
{
 80007f6:	b480      	push	{r7}
 80007f8:	b085      	sub	sp, #20
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	799b      	ldrb	r3, [r3, #6]
 8000806:	3306      	adds	r3, #6
 8000808:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791a      	ldrb	r2, [r3, #4]
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	79da      	ldrb	r2, [r3, #7]
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	4013      	ands	r3, r2
 800081c:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 800081e:	e00e      	b.n	800083e <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	1c59      	adds	r1, r3, #1
 8000828:	73b9      	strb	r1, [r7, #14]
 800082a:	4413      	add	r3, r2
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4053      	eors	r3, r2
 8000832:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	79da      	ldrb	r2, [r3, #7]
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	4013      	ands	r3, r2
 800083c:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	7bba      	ldrb	r2, [r7, #14]
 8000844:	429a      	cmp	r2, r3
 8000846:	d1eb      	bne.n	8000820 <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	1c59      	adds	r1, r3, #1
 8000852:	b2c8      	uxtb	r0, r1
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	7108      	strb	r0, [r1, #4]
 8000858:	4413      	add	r3, r2
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791a      	ldrb	r2, [r3, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	79db      	ldrb	r3, [r3, #7]
 8000866:	4013      	ands	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	711a      	strb	r2, [r3, #4]
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f000 fe4e 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f948 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 fba2 	bl	8000fcc <MX_GPIO_Init>
  MX_TIM4_Init();
 8000888:	f000 fac0 	bl	8000e0c <MX_TIM4_Init>
  MX_I2C2_Init();
 800088c:	f000 fa42 	bl	8000d14 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000890:	f000 fb54 	bl	8000f3c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000894:	f000 fb7c 	bl	8000f90 <MX_DMA_Init>
  MX_ADC1_Init();
 8000898:	f000 f99a 	bl	8000bd0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800089c:	f009 fc54 	bl	800a148 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80008a0:	f000 fa66 	bl	8000d70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 80008a4:	4887      	ldr	r0, [pc, #540]	; (8000ac4 <main+0x24c>)
 80008a6:	f009 fd3f 	bl	800a328 <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 80008aa:	4887      	ldr	r0, [pc, #540]	; (8000ac8 <main+0x250>)
 80008ac:	f004 fae6 	bl	8004e7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80008b0:	4886      	ldr	r0, [pc, #536]	; (8000acc <main+0x254>)
 80008b2:	f004 fae3 	bl	8004e7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	4883      	ldr	r0, [pc, #524]	; (8000ac8 <main+0x250>)
 80008ba:	f004 fb89 	bl	8004fd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80008be:	2104      	movs	r1, #4
 80008c0:	4881      	ldr	r0, [pc, #516]	; (8000ac8 <main+0x250>)
 80008c2:	f004 fb85 	bl	8004fd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80008c6:	2108      	movs	r1, #8
 80008c8:	487f      	ldr	r0, [pc, #508]	; (8000ac8 <main+0x250>)
 80008ca:	f004 fb81 	bl	8004fd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008ce:	210c      	movs	r1, #12
 80008d0:	487d      	ldr	r0, [pc, #500]	; (8000ac8 <main+0x250>)
 80008d2:	f004 fb7d 	bl	8004fd0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80008d6:	4b7c      	ldr	r3, [pc, #496]	; (8000ac8 <main+0x250>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2200      	movs	r2, #0
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80008de:	4b7a      	ldr	r3, [pc, #488]	; (8000ac8 <main+0x250>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2200      	movs	r2, #0
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80008e6:	4b78      	ldr	r3, [pc, #480]	; (8000ac8 <main+0x250>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80008ee:	4b76      	ldr	r3, [pc, #472]	; (8000ac8 <main+0x250>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40

  //Interrupcion para recibir datos desde ESP8266
  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 80008f6:	2201      	movs	r2, #1
 80008f8:	4975      	ldr	r1, [pc, #468]	; (8000ad0 <main+0x258>)
 80008fa:	4876      	ldr	r0, [pc, #472]	; (8000ad4 <main+0x25c>)
 80008fc:	f005 fa19 	bl	8005d32 <HAL_UART_Receive_IT>


  Count100ms = 100;
 8000900:	4b75      	ldr	r3, [pc, #468]	; (8000ad8 <main+0x260>)
 8000902:	2264      	movs	r2, #100	; 0x64
 8000904:	601a      	str	r2, [r3, #0]
  Count200ms = 200;
 8000906:	4b75      	ldr	r3, [pc, #468]	; (8000adc <main+0x264>)
 8000908:	22c8      	movs	r2, #200	; 0xc8
 800090a:	601a      	str	r2, [r3, #0]
  Count500ms = 0;
 800090c:	4b74      	ldr	r3, [pc, #464]	; (8000ae0 <main+0x268>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
  Count4000ms = 0;
 8000912:	4b74      	ldr	r3, [pc, #464]	; (8000ae4 <main+0x26c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
/**
* Comunicacion USB.
*/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 8000918:	4b73      	ldr	r3, [pc, #460]	; (8000ae8 <main+0x270>)
 800091a:	4a74      	ldr	r2, [pc, #464]	; (8000aec <main+0x274>)
 800091c:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 800091e:	4b72      	ldr	r3, [pc, #456]	; (8000ae8 <main+0x270>)
 8000920:	2200      	movs	r2, #0
 8000922:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 8000924:	4b70      	ldr	r3, [pc, #448]	; (8000ae8 <main+0x270>)
 8000926:	2200      	movs	r2, #0
 8000928:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 800092a:	4b6f      	ldr	r3, [pc, #444]	; (8000ae8 <main+0x270>)
 800092c:	2200      	movs	r2, #0
 800092e:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 256-1;
 8000930:	4b6d      	ldr	r3, [pc, #436]	; (8000ae8 <main+0x270>)
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	735a      	strb	r2, [r3, #13]
  RXUSB.ISCMD = 0;
 8000936:	4b6c      	ldr	r3, [pc, #432]	; (8000ae8 <main+0x270>)
 8000938:	2200      	movs	r2, #0
 800093a:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 800093c:	4b6c      	ldr	r3, [pc, #432]	; (8000af0 <main+0x278>)
 800093e:	4a6d      	ldr	r2, [pc, #436]	; (8000af4 <main+0x27c>)
 8000940:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 8000942:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <main+0x278>)
 8000944:	2200      	movs	r2, #0
 8000946:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 8000948:	4b69      	ldr	r3, [pc, #420]	; (8000af0 <main+0x278>)
 800094a:	2200      	movs	r2, #0
 800094c:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 256-1;
 800094e:	4b68      	ldr	r3, [pc, #416]	; (8000af0 <main+0x278>)
 8000950:	22ff      	movs	r2, #255	; 0xff
 8000952:	71da      	strb	r2, [r3, #7]
  TXUSB.maskBuf = 255;
 8000954:	4b66      	ldr	r3, [pc, #408]	; (8000af0 <main+0x278>)
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	721a      	strb	r2, [r3, #8]
/**
* Comunicacion ESP8266.
*/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <main+0x280>)
 800095c:	4a5c      	ldr	r2, [pc, #368]	; (8000ad0 <main+0x258>)
 800095e:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 8000960:	4b65      	ldr	r3, [pc, #404]	; (8000af8 <main+0x280>)
 8000962:	2200      	movs	r2, #0
 8000964:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <main+0x280>)
 8000968:	2200      	movs	r2, #0
 800096a:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 800096c:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <main+0x280>)
 800096e:	2200      	movs	r2, #0
 8000970:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 256-1;
 8000972:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <main+0x280>)
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	735a      	strb	r2, [r3, #13]
  RXUSART1.ISCMD = 0;
 8000978:	4b5f      	ldr	r3, [pc, #380]	; (8000af8 <main+0x280>)
 800097a:	2200      	movs	r2, #0
 800097c:	719a      	strb	r2, [r3, #6]

  TXUSART1.Buff = txUSART1Buff;
 800097e:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <main+0x284>)
 8000980:	4a5f      	ldr	r2, [pc, #380]	; (8000b00 <main+0x288>)
 8000982:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <main+0x284>)
 8000986:	2200      	movs	r2, #0
 8000988:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 800098a:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <main+0x284>)
 800098c:	2200      	movs	r2, #0
 800098e:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 256-1;
 8000990:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <main+0x284>)
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	71da      	strb	r2, [r3, #7]
  TXUSART1.maskBuf = 255;
 8000996:	4b59      	ldr	r3, [pc, #356]	; (8000afc <main+0x284>)
 8000998:	22ff      	movs	r2, #255	; 0xff
 800099a:	721a      	strb	r2, [r3, #8]
  iAdc = 0;
 800099c:	4b59      	ldr	r3, [pc, #356]	; (8000b04 <main+0x28c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(On100ms){
 80009a2:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <main+0x290>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d007      	beq.n	80009ba <main+0x142>
		  On100ms = 0;
 80009aa:	4b57      	ldr	r3, [pc, #348]	; (8000b08 <main+0x290>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 80009b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b4:	4855      	ldr	r0, [pc, #340]	; (8000b0c <main+0x294>)
 80009b6:	f001 ff1d 	bl	80027f4 <HAL_GPIO_TogglePin>
	  }
	  if(RXUSB.iw != RXUSB.ir) {                                                  //Si tengo datos en el buffer --> Entonces decodifico lo que tengo
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <main+0x270>)
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <main+0x270>)
 80009c2:	795b      	ldrb	r3, [r3, #5]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d002      	beq.n	80009d0 <main+0x158>
		  DecodeHeader((_Rx *)&RXUSB);
 80009ca:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <main+0x270>)
 80009cc:	f7ff fd14 	bl	80003f8 <DecodeHeader>
	  }

	  if(RXUSB.ISCMD) {
 80009d0:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <main+0x270>)
 80009d2:	799b      	ldrb	r3, [r3, #6]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <main+0x168>
		  DecodeCmd((_Rx *)&RXUSB);
 80009da:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <main+0x270>)
 80009dc:	f7ff fe04 	bl	80005e8 <DecodeCmd>
	  }
//Transmision a USB
	  if(TXUSB.iw != TXUSB.ir) {
 80009e0:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <main+0x278>)
 80009e2:	791a      	ldrb	r2, [r3, #4]
 80009e4:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <main+0x278>)
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d042      	beq.n	8000a72 <main+0x1fa>
		  if(TXUSB.iw > TXUSB.ir){
 80009ec:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <main+0x278>)
 80009ee:	791a      	ldrb	r2, [r3, #4]
 80009f0:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <main+0x278>)
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d917      	bls.n	8000a28 <main+0x1b0>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 80009f8:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <main+0x278>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a3c      	ldr	r2, [pc, #240]	; (8000af0 <main+0x278>)
 80009fe:	7952      	ldrb	r2, [r2, #5]
 8000a00:	1898      	adds	r0, r3, r2
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <main+0x278>)
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <main+0x278>)
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	f009 fc62 	bl	800a2dc <CDC_Transmit_FS>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d121      	bne.n	8000a62 <main+0x1ea>
				  TXUSB.ir=TXUSB.iw;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <main+0x278>)
 8000a20:	791a      	ldrb	r2, [r3, #4]
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <main+0x278>)
 8000a24:	715a      	strb	r2, [r3, #5]
 8000a26:	e01c      	b.n	8000a62 <main+0x1ea>
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 8000a28:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <main+0x278>)
 8000a2a:	7a1b      	ldrb	r3, [r3, #8]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <main+0x278>)
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <main+0x298>)
 8000a3e:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <main+0x278>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <main+0x278>)
 8000a46:	7952      	ldrb	r2, [r2, #5]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a31      	ldr	r2, [pc, #196]	; (8000b10 <main+0x298>)
 8000a4c:	8812      	ldrh	r2, [r2, #0]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f009 fc43 	bl	800a2dc <CDC_Transmit_FS>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <main+0x1ea>
				  TXUSB.ir = 0;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <main+0x278>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <main+0x278>)
 8000a64:	795a      	ldrb	r2, [r3, #5]
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <main+0x278>)
 8000a68:	79db      	ldrb	r3, [r3, #7]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <main+0x278>)
 8000a70:	715a      	strb	r2, [r3, #5]
	  }
//Transmision a ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <main+0x284>)
 8000a74:	791a      	ldrb	r2, [r3, #4]
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <main+0x284>)
 8000a78:	795b      	ldrb	r3, [r3, #5]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d091      	beq.n	80009a2 <main+0x12a>
		  if(huart1.Instance->SR){
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <main+0x25c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d010      	beq.n	8000aaa <main+0x232>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <main+0x284>)
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	b2d1      	uxtb	r1, r2
 8000a90:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <main+0x284>)
 8000a92:	7151      	strb	r1, [r2, #5]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <main+0x288>)
 8000a98:	5c9a      	ldrb	r2, [r3, r2]
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <main+0x25c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
			  TXUSART1.ir=TXUSART1.iw;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <main+0x284>)
 8000aa2:	791a      	ldrb	r2, [r3, #4]
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <main+0x284>)
 8000aa6:	715a      	strb	r2, [r3, #5]
 8000aa8:	e77b      	b.n	80009a2 <main+0x12a>
		  }
		  else{
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <main+0x284>)
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	b2d1      	uxtb	r1, r2
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <main+0x284>)
 8000ab4:	7151      	strb	r1, [r2, #5]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <main+0x288>)
 8000aba:	5c9a      	ldrb	r2, [r3, r2]
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <main+0x25c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
	  if(On100ms){
 8000ac2:	e76e      	b.n	80009a2 <main+0x12a>
 8000ac4:	0800034d 	.word	0x0800034d
 8000ac8:	200003c0 	.word	0x200003c0
 8000acc:	200005b0 	.word	0x200005b0
 8000ad0:	200009bc 	.word	0x200009bc
 8000ad4:	2000072c 	.word	0x2000072c
 8000ad8:	20000ac4 	.word	0x20000ac4
 8000adc:	20000abc 	.word	0x20000abc
 8000ae0:	200005a0 	.word	0x200005a0
 8000ae4:	2000041c 	.word	0x2000041c
 8000ae8:	20000bd0 	.word	0x20000bd0
 8000aec:	200004a0 	.word	0x200004a0
 8000af0:	200005a4 	.word	0x200005a4
 8000af4:	2000062c 	.word	0x2000062c
 8000af8:	2000040c 	.word	0x2000040c
 8000afc:	20000be4 	.word	0x20000be4
 8000b00:	20000ac8 	.word	0x20000ac8
 8000b04:	200005f8 	.word	0x200005f8
 8000b08:	20000474 	.word	0x20000474
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	2000047c 	.word	0x2000047c

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	2228      	movs	r2, #40	; 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f009 ffea 	bl	800aafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fc66 	bl	800443c <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b76:	f000 faa1 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fed0 	bl	800493c <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ba2:	f000 fa8b 	bl	80010bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 f85a 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bc2:	f000 fa7b 	bl	80010bc <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3750      	adds	r7, #80	; 0x50
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be0:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000be2:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <MX_ADC1_Init+0x140>)
 8000be4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be6:	4b49      	ldr	r3, [pc, #292]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfa:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000bfc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c02:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000c08:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	483f      	ldr	r0, [pc, #252]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c10:	f000 fce6 	bl	80015e0 <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c1a:	f000 fa4f 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000c26:	2302      	movs	r3, #2
 8000c28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4837      	ldr	r0, [pc, #220]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c30:	f000 fe9e 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fa3f 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4830      	ldr	r0, [pc, #192]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c4c:	f000 fe90 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c56:	f000 fa31 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4829      	ldr	r0, [pc, #164]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c68:	f000 fe82 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c72:	f000 fa23 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c76:	2303      	movs	r3, #3
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4822      	ldr	r0, [pc, #136]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000c84:	f000 fe74 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c8e:	f000 fa15 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c96:	2305      	movs	r3, #5
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481b      	ldr	r0, [pc, #108]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000ca0:	f000 fe66 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000caa:	f000 fa07 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000cbc:	f000 fe58 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000cc6:	f000 f9f9 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000cd8:	f000 fe4a 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000ce2:	f000 f9eb 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000cea:	2308      	movs	r3, #8
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_ADC1_Init+0x13c>)
 8000cf4:	f000 fe3c 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000cfe:	f000 f9dd 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200005fc 	.word	0x200005fc
 8000d10:	40012400 	.word	0x40012400

08000d14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_I2C2_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_I2C2_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d52:	f001 fd69 	bl	8002828 <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f9ae 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000420 	.word	0x20000420
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000da0:	f244 6250 	movw	r2, #18000	; 0x4650
 8000da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000db4:	f004 f812 	bl	8004ddc <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 f97d 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000dd0:	f004 fb66 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 f96f 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_TIM3_Init+0x94>)
 8000dec:	f004 fee4 	bl	8005bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000df6:	f000 f961 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200005b0 	.word	0x200005b0
 8000e08:	40000400 	.word	0x40000400

08000e0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <MX_TIM4_Init+0x12c>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000e42:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e50:	f242 3228 	movw	r2, #9000	; 0x2328
 8000e54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e62:	4834      	ldr	r0, [pc, #208]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e64:	f003 ffba 	bl	8004ddc <HAL_TIM_Base_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e6e:	f000 f925 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	482d      	ldr	r0, [pc, #180]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e80:	f004 fb0e 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e8a:	f000 f917 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e8e:	4829      	ldr	r0, [pc, #164]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000e90:	f004 f846 	bl	8004f20 <HAL_TIM_PWM_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e9a:	f000 f90f 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000eae:	f004 fe83 	bl	8005bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000eb8:	f000 f900 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebc:	2360      	movs	r3, #96	; 0x60
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000ed4:	f004 fa26 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000ede:	f000 f8ed 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000eea:	f004 fa1b 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ef4:	f000 f8e2 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2208      	movs	r2, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000f00:	f004 fa10 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000f0a:	f000 f8d7 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	220c      	movs	r2, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000f16:	f004 fa05 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000f20:	f000 f8cc 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MX_TIM4_Init+0x128>)
 8000f26:	f000 f9eb 	bl	8001300 <HAL_TIM_MspPostInit>

}
 8000f2a:	bf00      	nop
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003c0 	.word	0x200003c0
 8000f38:	40000800 	.word	0x40000800

08000f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f004 fe90 	bl	8005c98 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f89d 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000072c 	.word	0x2000072c
 8000f8c:	40013800 	.word	0x40013800

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200b      	movs	r0, #11
 8000fb4:	f000 ffad 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fb8:	200b      	movs	r0, #11
 8000fba:	f000 ffc6 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_GPIO_Init+0xe0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a31      	ldr	r2, [pc, #196]	; (80010ac <MX_GPIO_Init+0xe0>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <MX_GPIO_Init+0xe0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <MX_GPIO_Init+0xe0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <MX_GPIO_Init+0xe0>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <MX_GPIO_Init+0xe0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_GPIO_Init+0xe0>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <MX_GPIO_Init+0xe0>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_GPIO_Init+0xe0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_GPIO_Init+0xe0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <MX_GPIO_Init+0xe0>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_GPIO_Init+0xe0>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	481a      	ldr	r0, [pc, #104]	; (80010b0 <MX_GPIO_Init+0xe4>)
 8001048:	f001 fbbc 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_ESP_GPIO_Port, RESET_ESP_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	4818      	ldr	r0, [pc, #96]	; (80010b4 <MX_GPIO_Init+0xe8>)
 8001052:	f001 fbb7 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_GPIO_Init+0xe4>)
 8001070:	f001 fa24 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001074:	23ff      	movs	r3, #255	; 0xff
 8001076:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001078:	2303      	movs	r3, #3
 800107a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_GPIO_Init+0xec>)
 8001084:	f001 fa1a 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_ESP_Pin */
  GPIO_InitStruct.Pin = RESET_ESP_Pin;
 8001088:	2320      	movs	r3, #32
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_ESP_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_GPIO_Init+0xe8>)
 80010a0:	f001 fa0c 	bl	80024bc <HAL_GPIO_Init>

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40010800 	.word	0x40010800

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>
	...

080010c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_MspInit+0x5c>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_MspInit+0x5c>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_MspInit+0x5c>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_MspInit+0x5c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_MspInit+0x5c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_MspInit+0x60>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_MspInit+0x60>)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000

0800112c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_ADC_MspInit+0xbc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d149      	bne.n	80011e0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_ADC_MspInit+0xc0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_ADC_MspInit+0xc0>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_ADC_MspInit+0xc0>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_ADC_MspInit+0xc0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_ADC_MspInit+0xc0>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_ADC_MspInit+0xc0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800117c:	23ff      	movs	r3, #255	; 0xff
 800117e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4819      	ldr	r0, [pc, #100]	; (80011f0 <HAL_ADC_MspInit+0xc4>)
 800118c:	f001 f996 	bl	80024bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_ADC_MspInit+0xcc>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011c6:	f000 fedb 	bl	8001f80 <HAL_DMA_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80011d0:	f7ff ff74 	bl	80010bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011d8:	621a      	str	r2, [r3, #32]
 80011da:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012400 	.word	0x40012400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	20000778 	.word	0x20000778
 80011f8:	40020008 	.word	0x40020008

080011fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_I2C_MspInit+0x74>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d124      	bne.n	8001266 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_I2C_MspInit+0x78>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_I2C_MspInit+0x78>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_I2C_MspInit+0x78>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001234:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123a:	2312      	movs	r3, #18
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <HAL_I2C_MspInit+0x7c>)
 800124a:	f001 f937 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_I2C_MspInit+0x78>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_I2C_MspInit+0x78>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_I2C_MspInit+0x78>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40005800 	.word	0x40005800
 8001274:	40021000 	.word	0x40021000
 8001278:	40010c00 	.word	0x40010c00

0800127c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_TIM_Base_MspInit+0x78>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d114      	bne.n	80012b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_TIM_Base_MspInit+0x7c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_TIM_Base_MspInit+0x7c>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_TIM_Base_MspInit+0x7c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	201d      	movs	r0, #29
 80012ac:	f000 fe31 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012b0:	201d      	movs	r0, #29
 80012b2:	f000 fe4a 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012b6:	e018      	b.n	80012ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_TIM_Base_MspInit+0x80>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d113      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_TIM_Base_MspInit+0x7c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_TIM_Base_MspInit+0x7c>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_TIM_Base_MspInit+0x7c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	201e      	movs	r0, #30
 80012e0:	f000 fe17 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012e4:	201e      	movs	r0, #30
 80012e6:	f000 fe30 	bl	8001f4a <HAL_NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40000400 	.word	0x40000400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40000800 	.word	0x40000800

08001300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_TIM_MspPostInit+0x5c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d118      	bne.n	8001352 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_TIM_MspPostInit+0x60>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_TIM_MspPostInit+0x60>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_TIM_MspPostInit+0x60>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001338:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800133c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_TIM_MspPostInit+0x64>)
 800134e:	f001 f8b5 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40000800 	.word	0x40000800
 8001360:	40021000 	.word	0x40021000
 8001364:	40010c00 	.word	0x40010c00

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_UART_MspInit+0x9c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d139      	bne.n	80013fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_UART_MspInit+0xa0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_UART_MspInit+0xa0>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_UART_MspInit+0xa0>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0xa0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_UART_MspInit+0xa0>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_UART_MspInit+0xa0>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <HAL_UART_MspInit+0xa4>)
 80013ce:	f001 f875 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_UART_MspInit+0xa4>)
 80013e8:	f001 f868 	bl	80024bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2025      	movs	r0, #37	; 0x25
 80013f2:	f000 fd8e 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f6:	2025      	movs	r0, #37	; 0x25
 80013f8:	f000 fda7 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013800 	.word	0x40013800
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f8a7 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel1_IRQHandler+0x10>)
 8001466:	f000 fef5 	bl	8002254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000778 	.word	0x20000778

08001474 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800147a:	f001 fc4a 	bl	8002d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200014bc 	.word	0x200014bc

08001488 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM3_IRQHandler+0x10>)
 800148e:	f003 fe41 	bl	8005114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200005b0 	.word	0x200005b0

0800149c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM4_IRQHandler+0x10>)
 80014a2:	f003 fe37 	bl	8005114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200003c0 	.word	0x200003c0

080014b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART1_IRQHandler+0x10>)
 80014b6:	f004 fc6d 	bl	8005d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000072c 	.word	0x2000072c

080014c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014f6:	f7ff ffe5 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f009 fadb 	bl	800aab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fe:	f7ff f9bb 	bl	8000878 <main>
  bx lr
 8001502:	4770      	bx	lr
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800150c:	0800ab9c 	.word	0x0800ab9c
  ldr r2, =_sbss
 8001510:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001514:	200017a8 	.word	0x200017a8

08001518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x28>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x28>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 fce5 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	200f      	movs	r0, #15
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fdc6 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fcfd 	bl	8001f66 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 fcc5 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x1c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x20>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <HAL_IncTick+0x20>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000bf4 	.word	0x20000bf4

080015cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_GetTick+0x10>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000bf4 	.word	0x20000bf4

080015e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0be      	b.n	8001780 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fd84 	bl	800112c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 faf5 	bl	8001c14 <ADC_ConversionStop_Disable>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8099 	bne.w	800176e <HAL_ADC_Init+0x18e>
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8095 	bne.w	800176e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001660:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7b1b      	ldrb	r3, [r3, #12]
 8001666:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001668:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4313      	orrs	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d003      	beq.n	8001682 <HAL_ADC_Init+0xa2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d102      	bne.n	8001688 <HAL_ADC_Init+0xa8>
 8001682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001686:	e000      	b.n	800168a <HAL_ADC_Init+0xaa>
 8001688:	2300      	movs	r3, #0
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7d1b      	ldrb	r3, [r3, #20]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d119      	bne.n	80016cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	035a      	lsls	r2, r3, #13
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	e00b      	b.n	80016cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f043 0220 	orr.w	r2, r3, #32
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_ADC_Init+0x1a8>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016fc:	d003      	beq.n	8001706 <HAL_ADC_Init+0x126>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d104      	bne.n	8001710 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	3b01      	subs	r3, #1
 800170c:	051b      	lsls	r3, r3, #20
 800170e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	430a      	orrs	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ADC_Init+0x1ac>)
 800172c:	4013      	ands	r3, r2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d10b      	bne.n	800174c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800174a:	e018      	b.n	800177e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f023 0312 	bic.w	r3, r3, #18
 8001754:	f043 0210 	orr.w	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	ffe1f7fd 	.word	0xffe1f7fd
 800178c:	ff1f0efe 	.word	0xff1f0efe

08001790 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a64      	ldr	r2, [pc, #400]	; (8001938 <HAL_ADC_Start_DMA+0x1a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d004      	beq.n	80017b4 <HAL_ADC_Start_DMA+0x24>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a63      	ldr	r2, [pc, #396]	; (800193c <HAL_ADC_Start_DMA+0x1ac>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_Start_DMA+0x32>
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <HAL_ADC_Start_DMA+0x1a8>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 80b3 	bne.w	8001928 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Start_DMA+0x40>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0ae      	b.n	800192e <HAL_ADC_Start_DMA+0x19e>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f9c1 	bl	8001b60 <ADC_Enable>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 809a 	bne.w	800191e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_ADC_Start_DMA+0x1ac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d105      	bne.n	8001814 <HAL_ADC_Start_DMA+0x84>
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_ADC_Start_DMA+0x1a8>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d115      	bne.n	8001840 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d026      	beq.n	800187c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001836:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800183e:	e01d      	b.n	800187c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a39      	ldr	r2, [pc, #228]	; (8001938 <HAL_ADC_Start_DMA+0x1a8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d004      	beq.n	8001860 <HAL_ADC_Start_DMA+0xd0>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a38      	ldr	r2, [pc, #224]	; (800193c <HAL_ADC_Start_DMA+0x1ac>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d10d      	bne.n	800187c <HAL_ADC_Start_DMA+0xec>
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_ADC_Start_DMA+0x1a8>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001874:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f023 0206 	bic.w	r2, r3, #6
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
 8001894:	e002      	b.n	800189c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a25      	ldr	r2, [pc, #148]	; (8001940 <HAL_ADC_Start_DMA+0x1b0>)
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <HAL_ADC_Start_DMA+0x1b4>)
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_ADC_Start_DMA+0x1b8>)
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0202 	mvn.w	r2, #2
 80018c4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a18      	ldr	r0, [r3, #32]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	334c      	adds	r3, #76	; 0x4c
 80018e0:	4619      	mov	r1, r3
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f000 fba5 	bl	8002034 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018f8:	d108      	bne.n	800190c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001908:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800190a:	e00f      	b.n	800192c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800191a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800191c:	e006      	b.n	800192c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001926:	e001      	b.n	800192c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800192c:	7dfb      	ldrb	r3, [r7, #23]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40012400 	.word	0x40012400
 800193c:	40012800 	.word	0x40012800
 8001940:	08001c97 	.word	0x08001c97
 8001944:	08001d13 	.word	0x08001d13
 8001948:	08001d2f 	.word	0x08001d2f

0800194c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x20>
 800198c:	2302      	movs	r3, #2
 800198e:	e0dc      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1da>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d81c      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b05      	subs	r3, #5
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34
 80019d8:	e03c      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d81c      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3b23      	subs	r3, #35	; 0x23
 80019f4:	221f      	movs	r2, #31
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4019      	ands	r1, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b23      	subs	r3, #35	; 0x23
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1a:	e01b      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b41      	subs	r3, #65	; 0x41
 8001a2e:	221f      	movs	r2, #31
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4019      	ands	r1, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b41      	subs	r3, #65	; 0x41
 8001a48:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d91c      	bls.n	8001a96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68d9      	ldr	r1, [r3, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b1e      	subs	r3, #30
 8001a6e:	2207      	movs	r2, #7
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4019      	ands	r1, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6898      	ldr	r0, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	3b1e      	subs	r3, #30
 8001a88:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	e019      	b.n	8001aca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6919      	ldr	r1, [r3, #16]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4019      	ands	r1, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6898      	ldr	r0, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d003      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad6:	2b11      	cmp	r3, #17
 8001ad8:	d132      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d125      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d126      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d11a      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9a      	lsrs	r2, r3, #18
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x1b2>
 8001b2e:	e007      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40012400 	.word	0x40012400
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d040      	beq.n	8001c00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <ADC_Enable+0xac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <ADC_Enable+0xb0>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b9c:	e002      	b.n	8001ba4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001baa:	f7ff fd0f 	bl	80015cc <HAL_GetTick>
 8001bae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bb0:	e01f      	b.n	8001bf2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bb2:	f7ff fd0b 	bl	80015cc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d918      	bls.n	8001bf2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d011      	beq.n	8001bf2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0210 	orr.w	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e007      	b.n	8001c02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d1d8      	bne.n	8001bb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12e      	bne.n	8001c8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fcc5 	bl	80015cc <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c44:	e01b      	b.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c46:	f7ff fcc1 	bl	80015cc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d914      	bls.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e007      	b.n	8001c8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d0dc      	beq.n	8001c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d127      	bne.n	8001d00 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cc6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cca:	d115      	bne.n	8001cf8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d111      	bne.n	8001cf8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7fe fa47 	bl	800018c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cfe:	e004      	b.n	8001d0a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fe13 	bl	800194c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fe02 	bl	800195e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <__NVIC_EnableIRQ+0x34>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff90 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff2d 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff42 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff35 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e043      	b.n	800201e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_DMA_Init+0xa8>)
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_DMA_Init+0xac>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	009a      	lsls	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Init+0xb0>)
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	bffdfff8 	.word	0xbffdfff8
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_DMA_Start_IT+0x20>
 8002050:	2302      	movs	r3, #2
 8002052:	e04a      	b.n	80020ea <HAL_DMA_Start_IT+0xb6>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002062:	2b01      	cmp	r3, #1
 8002064:	d13a      	bne.n	80020dc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f9e8 	bl	8002460 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 020e 	orr.w	r2, r2, #14
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e00f      	b.n	80020ca <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0204 	bic.w	r2, r2, #4
 80020b8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 020a 	orr.w	r2, r2, #10
 80020c8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e005      	b.n	80020e8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
 80020e6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002104:	2b02      	cmp	r3, #2
 8002106:	d008      	beq.n	800211a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e020      	b.n	800215c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 020e 	bic.w	r2, r2, #14
 8002128:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
	...

08002168 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800217a:	2b02      	cmp	r3, #2
 800217c:	d005      	beq.n	800218a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e051      	b.n	800222e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020e 	bic.w	r2, r2, #14
 8002198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a22      	ldr	r2, [pc, #136]	; (8002238 <HAL_DMA_Abort_IT+0xd0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d029      	beq.n	8002208 <HAL_DMA_Abort_IT+0xa0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_DMA_Abort_IT+0xd4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <HAL_DMA_Abort_IT+0x9c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_DMA_Abort_IT+0xd8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d01a      	beq.n	80021fe <HAL_DMA_Abort_IT+0x96>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_DMA_Abort_IT+0xdc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d012      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x90>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_DMA_Abort_IT+0xe0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00a      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x8a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_DMA_Abort_IT+0xe4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d102      	bne.n	80021ec <HAL_DMA_Abort_IT+0x84>
 80021e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021ea:	e00e      	b.n	800220a <HAL_DMA_Abort_IT+0xa2>
 80021ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f0:	e00b      	b.n	800220a <HAL_DMA_Abort_IT+0xa2>
 80021f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f6:	e008      	b.n	800220a <HAL_DMA_Abort_IT+0xa2>
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	e005      	b.n	800220a <HAL_DMA_Abort_IT+0xa2>
 80021fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002202:	e002      	b.n	800220a <HAL_DMA_Abort_IT+0xa2>
 8002204:	2310      	movs	r3, #16
 8002206:	e000      	b.n	800220a <HAL_DMA_Abort_IT+0xa2>
 8002208:	2301      	movs	r3, #1
 800220a:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_DMA_Abort_IT+0xe8>)
 800220c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
    } 
  }
  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40020008 	.word	0x40020008
 800223c:	4002001c 	.word	0x4002001c
 8002240:	40020030 	.word	0x40020030
 8002244:	40020044 	.word	0x40020044
 8002248:	40020058 	.word	0x40020058
 800224c:	4002006c 	.word	0x4002006c
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	2204      	movs	r2, #4
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d04f      	beq.n	800231c <HAL_DMA_IRQHandler+0xc8>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d04a      	beq.n	800231c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0204 	bic.w	r2, r2, #4
 80022a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a66      	ldr	r2, [pc, #408]	; (8002444 <HAL_DMA_IRQHandler+0x1f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d029      	beq.n	8002302 <HAL_DMA_IRQHandler+0xae>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_DMA_IRQHandler+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_IRQHandler+0xaa>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a63      	ldr	r2, [pc, #396]	; (800244c <HAL_DMA_IRQHandler+0x1f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01a      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xa4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a62      	ldr	r2, [pc, #392]	; (8002450 <HAL_DMA_IRQHandler+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d012      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x9e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a60      	ldr	r2, [pc, #384]	; (8002454 <HAL_DMA_IRQHandler+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00a      	beq.n	80022ec <HAL_DMA_IRQHandler+0x98>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5f      	ldr	r2, [pc, #380]	; (8002458 <HAL_DMA_IRQHandler+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x92>
 80022e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022e4:	e00e      	b.n	8002304 <HAL_DMA_IRQHandler+0xb0>
 80022e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ea:	e00b      	b.n	8002304 <HAL_DMA_IRQHandler+0xb0>
 80022ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022f0:	e008      	b.n	8002304 <HAL_DMA_IRQHandler+0xb0>
 80022f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f6:	e005      	b.n	8002304 <HAL_DMA_IRQHandler+0xb0>
 80022f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fc:	e002      	b.n	8002304 <HAL_DMA_IRQHandler+0xb0>
 80022fe:	2340      	movs	r3, #64	; 0x40
 8002300:	e000      	b.n	8002304 <HAL_DMA_IRQHandler+0xb0>
 8002302:	2304      	movs	r3, #4
 8002304:	4a55      	ldr	r2, [pc, #340]	; (800245c <HAL_DMA_IRQHandler+0x208>)
 8002306:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8094 	beq.w	800243a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800231a:	e08e      	b.n	800243a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2202      	movs	r2, #2
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d056      	beq.n	80023da <HAL_DMA_IRQHandler+0x186>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d051      	beq.n	80023da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020a 	bic.w	r2, r2, #10
 8002352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <HAL_DMA_IRQHandler+0x1f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d029      	beq.n	80023ba <HAL_DMA_IRQHandler+0x166>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a37      	ldr	r2, [pc, #220]	; (8002448 <HAL_DMA_IRQHandler+0x1f4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x162>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a35      	ldr	r2, [pc, #212]	; (800244c <HAL_DMA_IRQHandler+0x1f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x15c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a34      	ldr	r2, [pc, #208]	; (8002450 <HAL_DMA_IRQHandler+0x1fc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d012      	beq.n	80023aa <HAL_DMA_IRQHandler+0x156>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_DMA_IRQHandler+0x200>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00a      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x150>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a31      	ldr	r2, [pc, #196]	; (8002458 <HAL_DMA_IRQHandler+0x204>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_DMA_IRQHandler+0x14a>
 8002398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800239c:	e00e      	b.n	80023bc <HAL_DMA_IRQHandler+0x168>
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	e00b      	b.n	80023bc <HAL_DMA_IRQHandler+0x168>
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	e008      	b.n	80023bc <HAL_DMA_IRQHandler+0x168>
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	e005      	b.n	80023bc <HAL_DMA_IRQHandler+0x168>
 80023b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b4:	e002      	b.n	80023bc <HAL_DMA_IRQHandler+0x168>
 80023b6:	2320      	movs	r3, #32
 80023b8:	e000      	b.n	80023bc <HAL_DMA_IRQHandler+0x168>
 80023ba:	2302      	movs	r3, #2
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_DMA_IRQHandler+0x208>)
 80023be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d034      	beq.n	800243a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023d8:	e02f      	b.n	800243a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2208      	movs	r2, #8
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d028      	beq.n	800243c <HAL_DMA_IRQHandler+0x1e8>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d023      	beq.n	800243c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020e 	bic.w	r2, r2, #14
 8002402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
    }
  }
  return;
 800243a:	bf00      	nop
 800243c:	bf00      	nop
}
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40020008 	.word	0x40020008
 8002448:	4002001c 	.word	0x4002001c
 800244c:	40020030 	.word	0x40020030
 8002450:	40020044 	.word	0x40020044
 8002454:	40020058 	.word	0x40020058
 8002458:	4002006c 	.word	0x4002006c
 800245c:	40020000 	.word	0x40020000

08002460 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f202 	lsl.w	r2, r1, r2
 800247c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b10      	cmp	r3, #16
 800248c:	d108      	bne.n	80024a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800249e:	e007      	b.n	80024b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b08b      	sub	sp, #44	; 0x2c
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ce:	e169      	b.n	80027a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024d0:	2201      	movs	r2, #1
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8158 	bne.w	800279e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a9a      	ldr	r2, [pc, #616]	; (800275c <HAL_GPIO_Init+0x2a0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d05e      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 80024f8:	4a98      	ldr	r2, [pc, #608]	; (800275c <HAL_GPIO_Init+0x2a0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d875      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 80024fe:	4a98      	ldr	r2, [pc, #608]	; (8002760 <HAL_GPIO_Init+0x2a4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d058      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 8002504:	4a96      	ldr	r2, [pc, #600]	; (8002760 <HAL_GPIO_Init+0x2a4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d86f      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 800250a:	4a96      	ldr	r2, [pc, #600]	; (8002764 <HAL_GPIO_Init+0x2a8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d052      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 8002510:	4a94      	ldr	r2, [pc, #592]	; (8002764 <HAL_GPIO_Init+0x2a8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d869      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 8002516:	4a94      	ldr	r2, [pc, #592]	; (8002768 <HAL_GPIO_Init+0x2ac>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04c      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 800251c:	4a92      	ldr	r2, [pc, #584]	; (8002768 <HAL_GPIO_Init+0x2ac>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d863      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 8002522:	4a92      	ldr	r2, [pc, #584]	; (800276c <HAL_GPIO_Init+0x2b0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d046      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 8002528:	4a90      	ldr	r2, [pc, #576]	; (800276c <HAL_GPIO_Init+0x2b0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d85d      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 800252e:	2b12      	cmp	r3, #18
 8002530:	d82a      	bhi.n	8002588 <HAL_GPIO_Init+0xcc>
 8002532:	2b12      	cmp	r3, #18
 8002534:	d859      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <HAL_GPIO_Init+0x80>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	080025b7 	.word	0x080025b7
 8002540:	08002591 	.word	0x08002591
 8002544:	080025a3 	.word	0x080025a3
 8002548:	080025e5 	.word	0x080025e5
 800254c:	080025eb 	.word	0x080025eb
 8002550:	080025eb 	.word	0x080025eb
 8002554:	080025eb 	.word	0x080025eb
 8002558:	080025eb 	.word	0x080025eb
 800255c:	080025eb 	.word	0x080025eb
 8002560:	080025eb 	.word	0x080025eb
 8002564:	080025eb 	.word	0x080025eb
 8002568:	080025eb 	.word	0x080025eb
 800256c:	080025eb 	.word	0x080025eb
 8002570:	080025eb 	.word	0x080025eb
 8002574:	080025eb 	.word	0x080025eb
 8002578:	080025eb 	.word	0x080025eb
 800257c:	080025eb 	.word	0x080025eb
 8002580:	08002599 	.word	0x08002599
 8002584:	080025ad 	.word	0x080025ad
 8002588:	4a79      	ldr	r2, [pc, #484]	; (8002770 <HAL_GPIO_Init+0x2b4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800258e:	e02c      	b.n	80025ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	623b      	str	r3, [r7, #32]
          break;
 8002596:	e029      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	3304      	adds	r3, #4
 800259e:	623b      	str	r3, [r7, #32]
          break;
 80025a0:	e024      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	3308      	adds	r3, #8
 80025a8:	623b      	str	r3, [r7, #32]
          break;
 80025aa:	e01f      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	330c      	adds	r3, #12
 80025b2:	623b      	str	r3, [r7, #32]
          break;
 80025b4:	e01a      	b.n	80025ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025be:	2304      	movs	r3, #4
 80025c0:	623b      	str	r3, [r7, #32]
          break;
 80025c2:	e013      	b.n	80025ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025cc:	2308      	movs	r3, #8
 80025ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	611a      	str	r2, [r3, #16]
          break;
 80025d6:	e009      	b.n	80025ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d8:	2308      	movs	r3, #8
 80025da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	615a      	str	r2, [r3, #20]
          break;
 80025e2:	e003      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
          break;
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x130>
          break;
 80025ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d801      	bhi.n	80025f6 <HAL_GPIO_Init+0x13a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_Init+0x13e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d802      	bhi.n	8002608 <HAL_GPIO_Init+0x14c>
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	e002      	b.n	800260e <HAL_GPIO_Init+0x152>
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	3b08      	subs	r3, #8
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	210f      	movs	r1, #15
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	6a39      	ldr	r1, [r7, #32]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80b1 	beq.w	800279e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800263c:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_GPIO_Init+0x2b8>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_GPIO_Init+0x2b8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_GPIO_Init+0x2b8>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002654:	4a48      	ldr	r2, [pc, #288]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a40      	ldr	r2, [pc, #256]	; (800277c <HAL_GPIO_Init+0x2c0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x1ec>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3f      	ldr	r2, [pc, #252]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1e8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3e      	ldr	r2, [pc, #248]	; (8002784 <HAL_GPIO_Init+0x2c8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3d      	ldr	r2, [pc, #244]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1e0>
 8002698:	2303      	movs	r3, #3
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 800269c:	2304      	movs	r3, #4
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a8:	2300      	movs	r3, #0
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ba:	492f      	ldr	r1, [pc, #188]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d4:	4b2d      	ldr	r3, [pc, #180]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	492c      	ldr	r1, [pc, #176]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4928      	ldr	r1, [pc, #160]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	43db      	mvns	r3, r3
 8002712:	491e      	ldr	r1, [pc, #120]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002714:	4013      	ands	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	4918      	ldr	r1, [pc, #96]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	43db      	mvns	r3, r3
 800273a:	4914      	ldr	r1, [pc, #80]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800273c:	4013      	ands	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d021      	beq.n	8002790 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	60cb      	str	r3, [r1, #12]
 8002758:	e021      	b.n	800279e <HAL_GPIO_Init+0x2e2>
 800275a:	bf00      	nop
 800275c:	10320000 	.word	0x10320000
 8002760:	10310000 	.word	0x10310000
 8002764:	10220000 	.word	0x10220000
 8002768:	10210000 	.word	0x10210000
 800276c:	10120000 	.word	0x10120000
 8002770:	10110000 	.word	0x10110000
 8002774:	40021000 	.word	0x40021000
 8002778:	40010000 	.word	0x40010000
 800277c:	40010800 	.word	0x40010800
 8002780:	40010c00 	.word	0x40010c00
 8002784:	40011000 	.word	0x40011000
 8002788:	40011400 	.word	0x40011400
 800278c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_GPIO_Init+0x304>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	43db      	mvns	r3, r3
 8002798:	4909      	ldr	r1, [pc, #36]	; (80027c0 <HAL_GPIO_Init+0x304>)
 800279a:	4013      	ands	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3301      	adds	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f ae8e 	bne.w	80024d0 <HAL_GPIO_Init+0x14>
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	372c      	adds	r7, #44	; 0x2c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43d9      	mvns	r1, r3
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	400b      	ands	r3, r1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e12b      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fcd4 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f002 f9aa 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a81      	ldr	r2, [pc, #516]	; (8002a9c <HAL_I2C_Init+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_I2C_Init+0x278>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7d      	ldr	r2, [pc, #500]	; (8002aa4 <HAL_I2C_Init+0x27c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a78      	ldr	r2, [pc, #480]	; (8002aa8 <HAL_I2C_Init+0x280>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_I2C_Init+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_I2C_Init+0x284>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	; (8002a9c <HAL_I2C_Init+0x274>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d819      	bhi.n	8002964 <HAL_I2C_Init+0x13c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002944:	400b      	ands	r3, r1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_I2C_Init+0x138>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fbb1 f3f3 	udiv	r3, r1, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	e051      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e04f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_I2C_Init+0x168>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_I2C_Init+0x18e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x196>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_I2C_Init+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e58      	subs	r0, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6911      	ldr	r1, [r2, #16]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	000186a0 	.word	0x000186a0
 8002aa0:	001e847f 	.word	0x001e847f
 8002aa4:	003d08ff 	.word	0x003d08ff
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	b08b      	sub	sp, #44	; 0x2c
 8002ab4:	af06      	add	r7, sp, #24
 8002ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0fd      	b.n	8002cbe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f007 fd42 	bl	800a560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 fd57 	bl	800659c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	687e      	ldr	r6, [r7, #4]
 8002af6:	466d      	mov	r5, sp
 8002af8:	f106 0410 	add.w	r4, r6, #16
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	1d33      	adds	r3, r6, #4
 8002b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f003 fd21 	bl	8006550 <USB_CoreInit>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ce      	b.n	8002cbe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fd52 	bl	80065d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e04c      	b.n	8002bcc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	3301      	adds	r3, #1
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	b298      	uxth	r0, r3
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3336      	adds	r3, #54	; 0x36
 8002b70:	4602      	mov	r2, r0
 8002b72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3303      	adds	r3, #3
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3338      	adds	r3, #56	; 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	333c      	adds	r3, #60	; 0x3c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3340      	adds	r3, #64	; 0x40
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d3ad      	bcc.n	8002b32 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e044      	b.n	8002c66 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	3301      	adds	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3b5      	bcc.n	8002bdc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	687e      	ldr	r6, [r7, #4]
 8002c78:	466d      	mov	r5, sp
 8002c7a:	f106 0410 	add.w	r4, r6, #16
 8002c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	1d33      	adds	r3, r6, #4
 8002c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	f003 fcac 	bl	80065e8 <USB_DevInit>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00d      	b.n	8002cbe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 fe1d 	bl	80088f6 <USB_DevDisconnect>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_PCD_Start+0x16>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e016      	b.n	8002d0a <HAL_PCD_Start+0x44>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fc41 	bl	8006570 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cee:	2101      	movs	r1, #1
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f007 fea8 	bl	800aa46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f005 fdf1 	bl	80088e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 fdf3 	bl	800890a <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2e:	d102      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fb61 	bl	80033f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 fde5 	bl	800890a <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d112      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f007 fc76 	bl	800a656 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f925 	bl	8002fbc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 fdc7 	bl	800890a <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d86:	d10b      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 fdb0 	bl	800890a <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db4:	d10b      	bne.n	8002dce <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 fd99 	bl	800890a <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	d126      	bne.n	8002e32 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0204 	bic.w	r2, r2, #4
 8002df6:	b292      	uxth	r2, r2
 8002df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0208 	bic.w	r2, r2, #8
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f007 fc57 	bl	800a6c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 fd67 	bl	800890a <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e46:	f040 8084 	bne.w	8002f52 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e011      	b.n	8002e74 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	8812      	ldrh	r2, [r2, #0]
 8002e60:	b292      	uxth	r2, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	f107 0120 	add.w	r1, r7, #32
 8002e68:	440b      	add	r3, r1
 8002e6a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	3301      	adds	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d9ea      	bls.n	8002e50 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002eaa:	bf00      	nop
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f6      	beq.n	8002eac <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	e010      	b.n	8002efe <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002edc:	7ffb      	ldrb	r3, [r7, #31]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	7ffa      	ldrb	r2, [r7, #31]
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	440a      	add	r2, r1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	f107 0120 	add.w	r1, r7, #32
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002ef6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	3301      	adds	r3, #1
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	2b07      	cmp	r3, #7
 8002f02:	d9eb      	bls.n	8002edc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	b292      	uxth	r2, r2
 8002f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0204 	orr.w	r2, r2, #4
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f007 fba1 	bl	800a694 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fcd7 	bl	800890a <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f66:	d10e      	bne.n	8002f86 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f007 fb5a 	bl	800a63a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fcbd 	bl	800890a <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_SetAddress+0x1a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e013      	b.n	8002ffe <HAL_PCD_SetAddress+0x42>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 fc64 	bl	80088bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	4608      	mov	r0, r1
 8003010:	4611      	mov	r1, r2
 8003012:	461a      	mov	r2, r3
 8003014:	4603      	mov	r3, r0
 8003016:	70fb      	strb	r3, [r7, #3]
 8003018:	460b      	mov	r3, r1
 800301a:	803b      	strh	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003028:	2b00      	cmp	r3, #0
 800302a:	da0e      	bge.n	800304a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	705a      	strb	r2, [r3, #1]
 8003048:	e00e      	b.n	8003068 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 0207 	and.w	r2, r3, #7
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003074:	883a      	ldrh	r2, [r7, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	78ba      	ldrb	r2, [r7, #2]
 800307e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003092:	78bb      	ldrb	r3, [r7, #2]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d102      	bne.n	800309e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_PCD_EP_Open+0xa6>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e00e      	b.n	80030ca <HAL_PCD_EP_Open+0xc4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fab4 	bl	8006628 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80030c8:	7afb      	ldrb	r3, [r7, #11]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da0e      	bge.n	8003104 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	705a      	strb	r2, [r3, #1]
 8003102:	e00e      	b.n	8003122 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 0207 	and.w	r2, r3, #7
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_PCD_EP_Close+0x6a>
 8003138:	2302      	movs	r3, #2
 800313a:	e00e      	b.n	800315a <HAL_PCD_EP_Close+0x88>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fdd6 	bl	8006cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	460b      	mov	r3, r1
 8003170:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	f003 0207 	and.w	r2, r3, #7
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2200      	movs	r2, #0
 80031a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6979      	ldr	r1, [r7, #20]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 ff88 	bl	80070d4 <USB_EPStartXfer>
 80031c4:	e005      	b.n	80031d2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 ff81 	bl	80070d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 0207 	and.w	r2, r3, #7
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	460b      	mov	r3, r1
 8003218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2201      	movs	r2, #1
 8003254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	b2da      	uxtb	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003262:	7afb      	ldrb	r3, [r7, #11]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6979      	ldr	r1, [r7, #20]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 ff2e 	bl	80070d4 <USB_EPStartXfer>
 8003278:	e005      	b.n	8003286 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	4618      	mov	r0, r3
 8003282:	f003 ff27 	bl	80070d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 0207 	and.w	r2, r3, #7
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d901      	bls.n	80032ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e04c      	b.n	8003348 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da0e      	bge.n	80032d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	705a      	strb	r2, [r3, #1]
 80032d2:	e00c      	b.n	80032ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_PCD_EP_SetStall+0x7e>
 800330a:	2302      	movs	r3, #2
 800330c:	e01c      	b.n	8003348 <HAL_PCD_EP_SetStall+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	4618      	mov	r0, r3
 800331e:	f005 f9d0 	bl	80086c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	2b00      	cmp	r3, #0
 800332a:	d108      	bne.n	800333e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f005 faf5 	bl	8008928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d901      	bls.n	800336e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e040      	b.n	80033f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800336e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003372:	2b00      	cmp	r3, #0
 8003374:	da0e      	bge.n	8003394 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	705a      	strb	r2, [r3, #1]
 8003392:	e00e      	b.n	80033b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_EP_ClrStall+0x82>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e00e      	b.n	80033f0 <HAL_PCD_EP_ClrStall+0xa0>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 f9be 	bl	8008762 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08e      	sub	sp, #56	; 0x38
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003400:	e2ec      	b.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800340a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800340c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003418:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 8161 	bne.w	80036e4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d152      	bne.n	80034d2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343c:	81fb      	strh	r3, [r7, #14]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344c:	b29b      	uxth	r3, r3
 800344e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3328      	adds	r3, #40	; 0x28
 8003454:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	3302      	adds	r3, #2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	441a      	add	r2, r3
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003490:	2100      	movs	r1, #0
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f007 f8b7 	bl	800a606 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 829b 	beq.w	80039dc <PCD_EP_ISR_Handler+0x5e4>
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8296 	bne.w	80039dc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b292      	uxth	r2, r2
 80034c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034d0:	e284      	b.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d034      	beq.n	8003556 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	3306      	adds	r3, #6
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800352a:	b29b      	uxth	r3, r3
 800352c:	f005 fa4c 	bl	80089c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29a      	uxth	r2, r3
 8003538:	f640 738f 	movw	r3, #3983	; 0xf8f
 800353c:	4013      	ands	r3, r2
 800353e:	823b      	strh	r3, [r7, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	8a3a      	ldrh	r2, [r7, #16]
 8003546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354a:	b292      	uxth	r2, r2
 800354c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f007 f82c 	bl	800a5ac <HAL_PCD_SetupStageCallback>
 8003554:	e242      	b.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003556:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800355a:	2b00      	cmp	r3, #0
 800355c:	f280 823e 	bge.w	80039dc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29a      	uxth	r2, r3
 8003568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800356c:	4013      	ands	r3, r2
 800356e:	83bb      	strh	r3, [r7, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	8bba      	ldrh	r2, [r7, #28]
 8003576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357a:	b292      	uxth	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	3306      	adds	r3, #6
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <PCD_EP_ISR_Handler+0x1ee>
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	6959      	ldr	r1, [r3, #20]
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f005 f9fc 	bl	80089c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	441a      	add	r2, r3
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f006 fff5 	bl	800a5d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 81f2 	bne.w	80039dc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003606:	b29b      	uxth	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4413      	add	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d112      	bne.n	8003646 <PCD_EP_ISR_Handler+0x24e>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362a:	b29a      	uxth	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363e:	b29a      	uxth	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	801a      	strh	r2, [r3, #0]
 8003644:	e02f      	b.n	80036a6 <PCD_EP_ISR_Handler+0x2ae>
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b3e      	cmp	r3, #62	; 0x3e
 800364c:	d813      	bhi.n	8003676 <PCD_EP_ISR_Handler+0x27e>
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <PCD_EP_ISR_Handler+0x270>
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	3301      	adds	r3, #1
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	b29b      	uxth	r3, r3
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	b29a      	uxth	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e017      	b.n	80036a6 <PCD_EP_ISR_Handler+0x2ae>
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <PCD_EP_ISR_Handler+0x298>
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	3b01      	subs	r3, #1
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	b29b      	uxth	r3, r3
 8003694:	029b      	lsls	r3, r3, #10
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	827b      	strh	r3, [r7, #18]
 80036b8:	8a7b      	ldrh	r3, [r7, #18]
 80036ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036be:	827b      	strh	r3, [r7, #18]
 80036c0:	8a7b      	ldrh	r3, [r7, #18]
 80036c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036c6:	827b      	strh	r3, [r7, #18]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	8a7b      	ldrh	r3, [r7, #18]
 80036ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8013      	strh	r3, [r2, #0]
 80036e2:	e17b      	b.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f280 80ea 	bge.w	80038d4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29a      	uxth	r2, r3
 8003712:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003716:	4013      	ands	r3, r2
 8003718:	853b      	strh	r3, [r7, #40]	; 0x28
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800372a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003732:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	7b1b      	ldrb	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d122      	bne.n	8003796 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	3306      	adds	r3, #6
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003778:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800377a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8087 	beq.w	8003890 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	6959      	ldr	r1, [r3, #20]
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	88da      	ldrh	r2, [r3, #6]
 800378e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003790:	f005 f91a 	bl	80089c8 <USB_ReadPMA>
 8003794:	e07c      	b.n	8003890 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	78db      	ldrb	r3, [r3, #3]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d108      	bne.n	80037b0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800379e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f927 	bl	80039f8 <HAL_PCD_EP_DB_Receive>
 80037aa:	4603      	mov	r3, r0
 80037ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037ae:	e06f      	b.n	8003890 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d021      	beq.n	800384e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	3302      	adds	r3, #2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003832:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02a      	beq.n	8003890 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	6959      	ldr	r1, [r3, #20]
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	891a      	ldrh	r2, [r3, #8]
 8003846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003848:	f005 f8be 	bl	80089c8 <USB_ReadPMA>
 800384c:	e020      	b.n	8003890 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	3306      	adds	r3, #6
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003876:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003878:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	6959      	ldr	r1, [r3, #20]
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	895a      	ldrh	r2, [r3, #10]
 800388a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800388c:	f005 f89c 	bl	80089c8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003896:	441a      	add	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038a2:	441a      	add	r2, r3
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <PCD_EP_ISR_Handler+0x4c2>
 80038b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d206      	bcs.n	80038c8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f006 fe85 	bl	800a5d0 <HAL_PCD_DataOutStageCallback>
 80038c6:	e005      	b.n	80038d4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 fc00 	bl	80070d4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d07e      	beq.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80038de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	843b      	strh	r3, [r7, #32]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	8c3b      	ldrh	r3, [r7, #32]
 800391e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d00c      	beq.n	800394c <PCD_EP_ISR_Handler+0x554>
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	78db      	ldrb	r3, [r3, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800393e:	2b02      	cmp	r3, #2
 8003940:	d146      	bne.n	80039d0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003942:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d141      	bne.n	80039d0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003954:	b29b      	uxth	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	3302      	adds	r3, #2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003974:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	8bfb      	ldrh	r3, [r7, #30]
 800397c:	429a      	cmp	r2, r3
 800397e:	d906      	bls.n	800398e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	8bfb      	ldrh	r3, [r7, #30]
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	619a      	str	r2, [r3, #24]
 800398c:	e002      	b.n	8003994 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f006 fe2f 	bl	800a606 <HAL_PCD_DataInStageCallback>
 80039a8:	e018      	b.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	8bfb      	ldrh	r3, [r7, #30]
 80039b0:	441a      	add	r2, r3
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	8bfb      	ldrh	r3, [r7, #30]
 80039bc:	441a      	add	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 fb83 	bl	80070d4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039ce:	e005      	b.n	80039dc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039d2:	461a      	mov	r2, r3
 80039d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f91b 	bl	8003c12 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	b21b      	sxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f6ff ad0a 	blt.w	8003402 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3738      	adds	r7, #56	; 0x38
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d07e      	beq.n	8003b0e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	3302      	adds	r3, #2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	8b7b      	ldrh	r3, [r7, #26]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d306      	bcc.n	8003a52 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	8b7b      	ldrh	r3, [r7, #26]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	619a      	str	r2, [r3, #24]
 8003a50:	e002      	b.n	8003a58 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d123      	bne.n	8003aa8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	833b      	strh	r3, [r7, #24]
 8003a7c:	8b3b      	ldrh	r3, [r7, #24]
 8003a7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a82:	833b      	strh	r3, [r7, #24]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	8b3b      	ldrh	r3, [r7, #24]
 8003a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01f      	beq.n	8003af2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003acc:	82fb      	strh	r3, [r7, #22]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	441a      	add	r2, r3
 8003adc:	8afb      	ldrh	r3, [r7, #22]
 8003ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003af2:	8b7b      	ldrh	r3, [r7, #26]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8087 	beq.w	8003c08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6959      	ldr	r1, [r3, #20]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	891a      	ldrh	r2, [r3, #8]
 8003b06:	8b7b      	ldrh	r3, [r7, #26]
 8003b08:	f004 ff5e 	bl	80089c8 <USB_ReadPMA>
 8003b0c:	e07c      	b.n	8003c08 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	3306      	adds	r3, #6
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	8b7b      	ldrh	r3, [r7, #26]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d306      	bcc.n	8003b50 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	8b7b      	ldrh	r3, [r7, #26]
 8003b48:	1ad2      	subs	r2, r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	619a      	str	r2, [r3, #24]
 8003b4e:	e002      	b.n	8003b56 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d123      	bne.n	8003ba6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b78:	83fb      	strh	r3, [r7, #30]
 8003b7a:	8bfb      	ldrh	r3, [r7, #30]
 8003b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b80:	83fb      	strh	r3, [r7, #30]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	8bfb      	ldrh	r3, [r7, #30]
 8003b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11f      	bne.n	8003bf0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	83bb      	strh	r3, [r7, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	8bbb      	ldrh	r3, [r7, #28]
 8003bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bf0:	8b7b      	ldrh	r3, [r7, #26]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6959      	ldr	r1, [r3, #20]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	895a      	ldrh	r2, [r3, #10]
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	f004 fee0 	bl	80089c8 <USB_ReadPMA>
    }
  }

  return count;
 8003c08:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b0a2      	sub	sp, #136	; 0x88
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 81c7 	beq.w	8003fba <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3302      	adds	r3, #2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d907      	bls.n	8003c74 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c6c:	1ad2      	subs	r2, r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	619a      	str	r2, [r3, #24]
 8003c72:	e002      	b.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 80b9 	bne.w	8003df6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d126      	bne.n	8003cda <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	4413      	add	r3, r2
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	011a      	lsls	r2, r3, #4
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	4413      	add	r3, r2
 8003cae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	e01a      	b.n	8003d10 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d116      	bne.n	8003d10 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	4413      	add	r3, r2
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	011a      	lsls	r2, r3, #4
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	4413      	add	r3, r2
 8003d04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	623b      	str	r3, [r7, #32]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d126      	bne.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4413      	add	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	011a      	lsls	r2, r3, #4
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	e017      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d113      	bne.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	4413      	add	r3, r2
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	011a      	lsls	r2, r3, #4
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f006 fc2f 	bl	800a606 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 82d4 	beq.w	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	827b      	strh	r3, [r7, #18]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	8a7b      	ldrh	r3, [r7, #18]
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]
 8003df4:	e2b2      	b.n	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d021      	beq.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	f040 8286 	bne.w	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e58:	441a      	add	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e66:	441a      	add	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6a1a      	ldr	r2, [r3, #32]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d309      	bcc.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e84:	1ad2      	subs	r2, r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	621a      	str	r2, [r3, #32]
 8003e8a:	e015      	b.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ea2:	e009      	b.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d155      	bne.n	8003f6c <HAL_PCD_EP_DB_Transmit+0x35a>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	4413      	add	r3, r2
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	011a      	lsls	r2, r3, #4
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d112      	bne.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x302>
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	801a      	strh	r2, [r3, #0]
 8003efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	e047      	b.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f16:	2b3e      	cmp	r3, #62	; 0x3e
 8003f18:	d811      	bhi.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x32c>
 8003f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e032      	b.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x342>
 8003f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f50:	3b01      	subs	r3, #1
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	e01b      	b.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d117      	bne.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	4413      	add	r3, r2
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	011a      	lsls	r2, r3, #4
 8003f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f94:	4413      	add	r3, r2
 8003f96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6959      	ldr	r1, [r3, #20]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	891a      	ldrh	r2, [r3, #8]
 8003fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f004 fcc3 	bl	800893e <USB_WritePMA>
 8003fb8:	e1d0      	b.n	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3306      	adds	r3, #6
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d307      	bcc.n	8004002 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	619a      	str	r2, [r3, #24]
 8004000:	e002      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 80c4 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d126      	bne.n	8004068 <HAL_PCD_EP_DB_Transmit+0x456>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	4413      	add	r3, r2
 8004030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	011a      	lsls	r2, r3, #4
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	4413      	add	r3, r2
 800403c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004040:	66bb      	str	r3, [r7, #104]	; 0x68
 8004042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800404c:	b29a      	uxth	r2, r3
 800404e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800405c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004060:	b29a      	uxth	r2, r3
 8004062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	e01a      	b.n	800409e <HAL_PCD_EP_DB_Transmit+0x48c>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d116      	bne.n	800409e <HAL_PCD_EP_DB_Transmit+0x48c>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	677b      	str	r3, [r7, #116]	; 0x74
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004084:	4413      	add	r3, r2
 8004086:	677b      	str	r3, [r7, #116]	; 0x74
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	011a      	lsls	r2, r3, #4
 800408e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004090:	4413      	add	r3, r2
 8004092:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004096:	673b      	str	r3, [r7, #112]	; 0x70
 8004098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409a:	2200      	movs	r2, #0
 800409c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d12f      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040bc:	b29b      	uxth	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c4:	4413      	add	r3, r2
 80040c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	011a      	lsls	r2, r3, #4
 80040d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040d4:	4413      	add	r3, r2
 80040d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004102:	b29a      	uxth	r2, r3
 8004104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e017      	b.n	800413c <HAL_PCD_EP_DB_Transmit+0x52a>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d113      	bne.n	800413c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004122:	4413      	add	r3, r2
 8004124:	67bb      	str	r3, [r7, #120]	; 0x78
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412e:	4413      	add	r3, r2
 8004130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004134:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004138:	2200      	movs	r2, #0
 800413a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f006 fa5f 	bl	800a606 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 8104 	bne.w	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]
 8004198:	e0e0      	b.n	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d121      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f040 80b4 	bne.w	800435c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041fc:	441a      	add	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800420a:	441a      	add	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d309      	bcc.n	8004230 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6a1a      	ldr	r2, [r3, #32]
 8004226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004228:	1ad2      	subs	r2, r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	621a      	str	r2, [r3, #32]
 800422e:	e015      	b.n	800425c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004238:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800423c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004246:	e009      	b.n	800425c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2200      	movs	r2, #0
 8004252:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	667b      	str	r3, [r7, #100]	; 0x64
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d155      	bne.n	8004316 <HAL_PCD_EP_DB_Transmit+0x704>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	4413      	add	r3, r2
 8004280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	011a      	lsls	r2, r3, #4
 8004288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428a:	4413      	add	r3, r2
 800428c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004290:	65bb      	str	r3, [r7, #88]	; 0x58
 8004292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004294:	2b00      	cmp	r3, #0
 8004296:	d112      	bne.n	80042be <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e044      	b.n	8004348 <HAL_PCD_EP_DB_Transmit+0x736>
 80042be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c0:	2b3e      	cmp	r3, #62	; 0x3e
 80042c2:	d811      	bhi.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80042c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_PCD_EP_DB_Transmit+0x6c8>
 80042d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d6:	3301      	adds	r3, #1
 80042d8:	657b      	str	r3, [r7, #84]	; 0x54
 80042da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042dc:	b29b      	uxth	r3, r3
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	e02f      	b.n	8004348 <HAL_PCD_EP_DB_Transmit+0x736>
 80042e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	657b      	str	r3, [r7, #84]	; 0x54
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_PCD_EP_DB_Transmit+0x6ec>
 80042f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fa:	3b01      	subs	r3, #1
 80042fc:	657b      	str	r3, [r7, #84]	; 0x54
 80042fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004300:	b29b      	uxth	r3, r3
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	b29b      	uxth	r3, r3
 8004306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430e:	b29a      	uxth	r2, r3
 8004310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	e018      	b.n	8004348 <HAL_PCD_EP_DB_Transmit+0x736>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d114      	bne.n	8004348 <HAL_PCD_EP_DB_Transmit+0x736>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432c:	4413      	add	r3, r2
 800432e:	667b      	str	r3, [r7, #100]	; 0x64
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004338:	4413      	add	r3, r2
 800433a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800433e:	663b      	str	r3, [r7, #96]	; 0x60
 8004340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004342:	b29a      	uxth	r2, r3
 8004344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004346:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6959      	ldr	r1, [r3, #20]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	895a      	ldrh	r2, [r3, #10]
 8004354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004356:	b29b      	uxth	r3, r3
 8004358:	f004 faf1 	bl	800893e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004376:	823b      	strh	r3, [r7, #16]
 8004378:	8a3b      	ldrh	r3, [r7, #16]
 800437a:	f083 0310 	eor.w	r3, r3, #16
 800437e:	823b      	strh	r3, [r7, #16]
 8004380:	8a3b      	ldrh	r3, [r7, #16]
 8004382:	f083 0320 	eor.w	r3, r3, #32
 8004386:	823b      	strh	r3, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	8a3b      	ldrh	r3, [r7, #16]
 8004398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3788      	adds	r7, #136	; 0x88
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	817b      	strh	r3, [r7, #10]
 80043c4:	4613      	mov	r3, r2
 80043c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043c8:	897b      	ldrh	r3, [r7, #10]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	897b      	ldrh	r3, [r7, #10]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e009      	b.n	8004400 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043ec:	897a      	ldrh	r2, [r7, #10]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d107      	bne.n	8004416 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	b29a      	uxth	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	80da      	strh	r2, [r3, #6]
 8004414:	e00b      	b.n	800442e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2201      	movs	r2, #1
 800441a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	b29a      	uxth	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0c1b      	lsrs	r3, r3, #16
 8004428:	b29a      	uxth	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
	...

0800443c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e26c      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8087 	beq.w	800456a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800445c:	4b92      	ldr	r3, [pc, #584]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b04      	cmp	r3, #4
 8004466:	d00c      	beq.n	8004482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004468:	4b8f      	ldr	r3, [pc, #572]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d112      	bne.n	800449a <HAL_RCC_OscConfig+0x5e>
 8004474:	4b8c      	ldr	r3, [pc, #560]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d10b      	bne.n	800449a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004482:	4b89      	ldr	r3, [pc, #548]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d06c      	beq.n	8004568 <HAL_RCC_OscConfig+0x12c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d168      	bne.n	8004568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e246      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x76>
 80044a4:	4b80      	ldr	r3, [pc, #512]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a7f      	ldr	r2, [pc, #508]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e02e      	b.n	8004510 <HAL_RCC_OscConfig+0xd4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x98>
 80044ba:	4b7b      	ldr	r3, [pc, #492]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a7a      	ldr	r2, [pc, #488]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b78      	ldr	r3, [pc, #480]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a77      	ldr	r2, [pc, #476]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e01d      	b.n	8004510 <HAL_RCC_OscConfig+0xd4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0xbc>
 80044de:	4b72      	ldr	r3, [pc, #456]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a71      	ldr	r2, [pc, #452]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b6f      	ldr	r3, [pc, #444]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6e      	ldr	r2, [pc, #440]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0xd4>
 80044f8:	4b6b      	ldr	r3, [pc, #428]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6a      	ldr	r2, [pc, #424]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b68      	ldr	r3, [pc, #416]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a67      	ldr	r2, [pc, #412]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 800450a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fd f858 	bl	80015cc <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fd f854 	bl	80015cc <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1fa      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0xe4>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fd f844 	bl	80015cc <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd f840 	bl	80015cc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1e6      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x10c>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d063      	beq.n	800463e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004576:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004582:	4b49      	ldr	r3, [pc, #292]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b08      	cmp	r3, #8
 800458c:	d11c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x18c>
 800458e:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d116      	bne.n	80045c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCC_OscConfig+0x176>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d001      	beq.n	80045b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e1ba      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b2:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4939      	ldr	r1, [pc, #228]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	e03a      	b.n	800463e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d0:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_RCC_OscConfig+0x270>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fc fff9 	bl	80015cc <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7fc fff5 	bl	80015cc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e19b      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4927      	ldr	r1, [pc, #156]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
 8004610:	e015      	b.n	800463e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <HAL_RCC_OscConfig+0x270>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fc ffd8 	bl	80015cc <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004620:	f7fc ffd4 	bl	80015cc <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e17a      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d03a      	beq.n	80046c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d019      	beq.n	8004686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <HAL_RCC_OscConfig+0x274>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7fc ffb8 	bl	80015cc <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004660:	f7fc ffb4 	bl	80015cc <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e15a      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HAL_RCC_OscConfig+0x26c>)
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800467e:	2001      	movs	r0, #1
 8004680:	f000 fad8 	bl	8004c34 <RCC_Delay>
 8004684:	e01c      	b.n	80046c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_RCC_OscConfig+0x274>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468c:	f7fc ff9e 	bl	80015cc <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004692:	e00f      	b.n	80046b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004694:	f7fc ff9a 	bl	80015cc <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d908      	bls.n	80046b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e140      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	42420000 	.word	0x42420000
 80046b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	4b9e      	ldr	r3, [pc, #632]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e9      	bne.n	8004694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a6 	beq.w	800481a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d2:	4b97      	ldr	r3, [pc, #604]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046de:	4b94      	ldr	r3, [pc, #592]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4a93      	ldr	r2, [pc, #588]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	61d3      	str	r3, [r2, #28]
 80046ea:	4b91      	ldr	r3, [pc, #580]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b8e      	ldr	r3, [pc, #568]	; (8004934 <HAL_RCC_OscConfig+0x4f8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b8b      	ldr	r3, [pc, #556]	; (8004934 <HAL_RCC_OscConfig+0x4f8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a8a      	ldr	r2, [pc, #552]	; (8004934 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fc ff5b 	bl	80015cc <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fc ff57 	bl	80015cc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	; 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0fd      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b81      	ldr	r3, [pc, #516]	; (8004934 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x312>
 8004740:	4b7b      	ldr	r3, [pc, #492]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4a7a      	ldr	r2, [pc, #488]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6213      	str	r3, [r2, #32]
 800474c:	e02d      	b.n	80047aa <HAL_RCC_OscConfig+0x36e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x334>
 8004756:	4b76      	ldr	r3, [pc, #472]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a75      	ldr	r2, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	4b73      	ldr	r3, [pc, #460]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a72      	ldr	r2, [pc, #456]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	6213      	str	r3, [r2, #32]
 800476e:	e01c      	b.n	80047aa <HAL_RCC_OscConfig+0x36e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b05      	cmp	r3, #5
 8004776:	d10c      	bne.n	8004792 <HAL_RCC_OscConfig+0x356>
 8004778:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a6c      	ldr	r2, [pc, #432]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 800477e:	f043 0304 	orr.w	r3, r3, #4
 8004782:	6213      	str	r3, [r2, #32]
 8004784:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4a69      	ldr	r2, [pc, #420]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6213      	str	r3, [r2, #32]
 8004790:	e00b      	b.n	80047aa <HAL_RCC_OscConfig+0x36e>
 8004792:	4b67      	ldr	r3, [pc, #412]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a66      	ldr	r2, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	4b64      	ldr	r3, [pc, #400]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4a63      	ldr	r2, [pc, #396]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d015      	beq.n	80047de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7fc ff0b 	bl	80015cc <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fc ff07 	bl	80015cc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0ab      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	4b57      	ldr	r3, [pc, #348]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ee      	beq.n	80047ba <HAL_RCC_OscConfig+0x37e>
 80047dc:	e014      	b.n	8004808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fc fef5 	bl	80015cc <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fc fef1 	bl	80015cc <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e095      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fc:	4b4c      	ldr	r3, [pc, #304]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ee      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d105      	bne.n	800481a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480e:	4b48      	ldr	r3, [pc, #288]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8081 	beq.w	8004926 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004824:	4b42      	ldr	r3, [pc, #264]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	d061      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d146      	bne.n	80048c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004838:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <HAL_RCC_OscConfig+0x4fc>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fc fec5 	bl	80015cc <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004846:	f7fc fec1 	bl	80015cc <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e067      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d108      	bne.n	8004880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800486e:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	492d      	ldr	r1, [pc, #180]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a19      	ldr	r1, [r3, #32]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	430b      	orrs	r3, r1
 8004892:	4927      	ldr	r1, [pc, #156]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004898:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x4fc>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fc fe95 	bl	80015cc <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fc fe91 	bl	80015cc <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e037      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x46a>
 80048c4:	e02f      	b.n	8004926 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_RCC_OscConfig+0x4fc>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fc fe7e 	bl	80015cc <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fc fe7a 	bl	80015cc <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e020      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x498>
 80048f2:	e018      	b.n	8004926 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e013      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_OscConfig+0x4f4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	429a      	cmp	r2, r3
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
 8004938:	42420060 	.word	0x42420060

0800493c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0d0      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d910      	bls.n	8004980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b67      	ldr	r3, [pc, #412]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	4965      	ldr	r1, [pc, #404]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b63      	ldr	r3, [pc, #396]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0b8      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004998:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	4a58      	ldr	r2, [pc, #352]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b0:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4a52      	ldr	r2, [pc, #328]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	494d      	ldr	r1, [pc, #308]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d040      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d115      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e07f      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e073      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e06b      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4936      	ldr	r1, [pc, #216]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fc fdce 	bl	80015cc <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f7fc fdca 	bl	80015cc <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e053      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 020c 	and.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1eb      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b27      	ldr	r3, [pc, #156]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d210      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 0207 	bic.w	r2, r3, #7
 8004a72:	4922      	ldr	r1, [pc, #136]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e032      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4916      	ldr	r1, [pc, #88]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aca:	f000 f821 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	490a      	ldr	r1, [pc, #40]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	5ccb      	ldrb	r3, [r1, r3]
 8004ade:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <HAL_RCC_ClockConfig+0x1cc>)
 8004ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_ClockConfig+0x1d0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc fd2c 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40022000 	.word	0x40022000
 8004b00:	40021000 	.word	0x40021000
 8004b04:	0800ab7c 	.word	0x0800ab7c
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	20000004 	.word	0x20000004

08004b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b10:	b490      	push	{r4, r7}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b16:	4b2a      	ldr	r3, [pc, #168]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b18:	1d3c      	adds	r4, r7, #4
 8004b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b20:	f240 2301 	movw	r3, #513	; 0x201
 8004b24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b3a:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x46>
 8004b4e:	e02d      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b52:	623b      	str	r3, [r7, #32]
      break;
 8004b54:	e02d      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b62:	4413      	add	r3, r2
 8004b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c5b      	lsrs	r3, r3, #17
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b82:	4413      	add	r3, r2
 8004b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b8e:	fb02 f203 	mul.w	r2, r2, r3
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	4a0b      	ldr	r2, [pc, #44]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	623b      	str	r3, [r7, #32]
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bae:	623b      	str	r3, [r7, #32]
      break;
 8004bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc90      	pop	{r4, r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	0800ab24 	.word	0x0800ab24
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	003d0900 	.word	0x003d0900

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	20000000 	.word	0x20000000

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be8:	f7ff fff2 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4903      	ldr	r1, [pc, #12]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	0800ab8c 	.word	0x0800ab8c

08004c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c10:	f7ff ffde 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	0adb      	lsrs	r3, r3, #11
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4903      	ldr	r1, [pc, #12]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	0800ab8c 	.word	0x0800ab8c

08004c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <RCC_Delay+0x34>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <RCC_Delay+0x38>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0a5b      	lsrs	r3, r3, #9
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c50:	bf00      	nop
  }
  while (Delay --);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	60fa      	str	r2, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f9      	bne.n	8004c50 <RCC_Delay+0x1c>
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	10624dd3 	.word	0x10624dd3

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07d      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c90:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4a4b      	ldr	r2, [pc, #300]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	61d3      	str	r3, [r2, #28]
 8004ca8:	4b49      	ldr	r3, [pc, #292]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b46      	ldr	r3, [pc, #280]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d118      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc4:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd0:	f7fc fc7c 	bl	80015cc <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd6:	e008      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd8:	f7fc fc78 	bl	80015cc <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e06d      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d027      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d14:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d24:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d2a:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d014      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fc fc47 	bl	80015cc <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d40:	e00a      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d42:	f7fc fc43 	bl	80015cc <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e036      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ee      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4917      	ldr	r1, [pc, #92]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	490b      	ldr	r1, [pc, #44]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	4904      	ldr	r1, [pc, #16]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	42420440 	.word	0x42420440

08004ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e041      	b.n	8004e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fa3a 	bl	800127c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 fc28 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d001      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e03a      	b.n	8004f0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <HAL_TIM_Base_Start_IT+0x98>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x58>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d009      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x58>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x58>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <HAL_TIM_Base_Start_IT+0xa0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d111      	bne.n	8004ef8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d010      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef6:	e007      	b.n	8004f08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800

08004f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e041      	b.n	8004fb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f839 	bl	8004fbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 fb86 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_PWM_Start+0x24>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e022      	b.n	800503a <HAL_TIM_PWM_Start+0x6a>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d109      	bne.n	800500e <HAL_TIM_PWM_Start+0x3e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	bf14      	ite	ne
 8005006:	2301      	movne	r3, #1
 8005008:	2300      	moveq	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e015      	b.n	800503a <HAL_TIM_PWM_Start+0x6a>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d109      	bne.n	8005028 <HAL_TIM_PWM_Start+0x58>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e008      	b.n	800503a <HAL_TIM_PWM_Start+0x6a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e05e      	b.n	8005100 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_PWM_Start+0x82>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005050:	e013      	b.n	800507a <HAL_TIM_PWM_Start+0xaa>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0x92>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	e00b      	b.n	800507a <HAL_TIM_PWM_Start+0xaa>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0xa2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	e003      	b.n	800507a <HAL_TIM_PWM_Start+0xaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2201      	movs	r2, #1
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fd74 	bl	8005b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_PWM_Start+0x138>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_TIM_PWM_Start+0x138>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_TIM_PWM_Start+0xfa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d009      	beq.n	80050ca <HAL_TIM_PWM_Start+0xfa>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <HAL_TIM_PWM_Start+0x13c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_TIM_PWM_Start+0xfa>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a12      	ldr	r2, [pc, #72]	; (8005110 <HAL_TIM_PWM_Start+0x140>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d111      	bne.n	80050ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b06      	cmp	r3, #6
 80050da:	d010      	beq.n	80050fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	e007      	b.n	80050fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800

08005114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0202 	mvn.w	r2, #2
 8005140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa6f 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa62 	bl	8005628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fa71 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b04      	cmp	r3, #4
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b04      	cmp	r3, #4
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0204 	mvn.w	r2, #4
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa45 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa38 	bl	8005628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa47 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0208 	mvn.w	r2, #8
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2204      	movs	r2, #4
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa1b 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa0e 	bl	8005628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa1d 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b10      	cmp	r3, #16
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b10      	cmp	r3, #16
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0210 	mvn.w	r2, #16
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2208      	movs	r2, #8
 8005242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9f1 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9e4 	bl	8005628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f9f3 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0201 	mvn.w	r2, #1
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fa ffe0 	bl	8000258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fce1 	bl	8005c86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9b7 	bl	800565e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b20      	cmp	r3, #32
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0220 	mvn.w	r2, #32
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fcac 	bl	8005c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800533a:	2302      	movs	r3, #2
 800533c:	e0ac      	b.n	8005498 <HAL_TIM_PWM_ConfigChannel+0x174>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	f200 809f 	bhi.w	800548c <HAL_TIM_PWM_ConfigChannel+0x168>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005389 	.word	0x08005389
 8005358:	0800548d 	.word	0x0800548d
 800535c:	0800548d 	.word	0x0800548d
 8005360:	0800548d 	.word	0x0800548d
 8005364:	080053c9 	.word	0x080053c9
 8005368:	0800548d 	.word	0x0800548d
 800536c:	0800548d 	.word	0x0800548d
 8005370:	0800548d 	.word	0x0800548d
 8005374:	0800540b 	.word	0x0800540b
 8005378:	0800548d 	.word	0x0800548d
 800537c:	0800548d 	.word	0x0800548d
 8005380:	0800548d 	.word	0x0800548d
 8005384:	0800544b 	.word	0x0800544b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f9d0 	bl	8005734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0208 	orr.w	r2, r2, #8
 80053a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6999      	ldr	r1, [r3, #24]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	619a      	str	r2, [r3, #24]
      break;
 80053c6:	e062      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fa16 	bl	8005800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6999      	ldr	r1, [r3, #24]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	619a      	str	r2, [r3, #24]
      break;
 8005408:	e041      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fa5f 	bl	80058d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0208 	orr.w	r2, r2, #8
 8005424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0204 	bic.w	r2, r2, #4
 8005434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69d9      	ldr	r1, [r3, #28]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	61da      	str	r2, [r3, #28]
      break;
 8005448:	e021      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 faa9 	bl	80059a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69d9      	ldr	r1, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	61da      	str	r2, [r3, #28]
      break;
 800548a:	e000      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800548c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0b3      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x180>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d03e      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xd0>
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	f200 8087 	bhi.w	8005608 <HAL_TIM_ConfigClockSource+0x168>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	f000 8085 	beq.w	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d87f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d01a      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xa2>
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d87b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d050      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x116>
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d877      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005518:	2b50      	cmp	r3, #80	; 0x50
 800551a:	d03c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xf6>
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d873      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d058      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x136>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d86f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d064      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d86b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d060      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d867      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d05a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005540:	e062      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 faee 	bl	8005b32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005564:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]
      break;
 800556e:	e04e      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 fad7 	bl	8005b32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e03b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f000 fa4e 	bl	8005a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2150      	movs	r1, #80	; 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 faa5 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80055b4:	e02b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f000 fa6c 	bl	8005aa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2160      	movs	r1, #96	; 0x60
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fa95 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80055d4:	e01b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 fa2e 	bl	8005a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fa85 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80055f4:	e00b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f000 fa7c 	bl	8005afe <TIM_ITRx_SetConfig>
        break;
 8005606:	e002      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800560c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a29      	ldr	r2, [pc, #164]	; (8005728 <TIM_Base_SetConfig+0xb8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_Base_SetConfig+0x30>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d007      	beq.n	80056a0 <TIM_Base_SetConfig+0x30>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a26      	ldr	r2, [pc, #152]	; (800572c <TIM_Base_SetConfig+0xbc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0x30>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a25      	ldr	r2, [pc, #148]	; (8005730 <TIM_Base_SetConfig+0xc0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <TIM_Base_SetConfig+0xb8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <TIM_Base_SetConfig+0xbc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <TIM_Base_SetConfig+0xc0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a07      	ldr	r2, [pc, #28]	; (8005728 <TIM_Base_SetConfig+0xb8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800

08005734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 0302 	bic.w	r3, r3, #2
 800577c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <TIM_OC1_SetConfig+0xc8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10c      	bne.n	80057aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0308 	bic.w	r3, r3, #8
 8005796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 0304 	bic.w	r3, r3, #4
 80057a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a13      	ldr	r2, [pc, #76]	; (80057fc <TIM_OC1_SetConfig+0xc8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d111      	bne.n	80057d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40012c00 	.word	0x40012c00

08005800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f023 0320 	bic.w	r3, r3, #32
 800584a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <TIM_OC2_SetConfig+0xd0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10d      	bne.n	800587c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <TIM_OC2_SetConfig+0xd0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d113      	bne.n	80058ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800588a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	40012c00 	.word	0x40012c00

080058d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800591c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <TIM_OC3_SetConfig+0xd0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10d      	bne.n	800594e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800594c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <TIM_OC3_SetConfig+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d113      	bne.n	800597e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800595c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	621a      	str	r2, [r3, #32]
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00

080059a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <TIM_OC4_SetConfig+0x98>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d109      	bne.n	8005a1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr
 8005a40:	40012c00 	.word	0x40012c00

08005a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 030a 	bic.w	r3, r3, #10
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f023 0210 	bic.w	r2, r3, #16
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	031b      	lsls	r3, r3, #12
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005adc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 0307 	orr.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	021a      	lsls	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	609a      	str	r2, [r3, #8]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2201      	movs	r2, #1
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	401a      	ands	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e046      	b.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00e      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1c:	d009      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d004      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d10c      	bne.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800

08005c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e03f      	b.n	8005d2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb fb52 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fba9 	bl	8006434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d11d      	bne.n	8005d88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Receive_IT+0x26>
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e016      	b.n	8005d8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Receive_IT+0x38>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e00f      	b.n	8005d8a <HAL_UART_Receive_IT+0x58>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f9cf 	bl	8006122 <UART_Start_Receive_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	e000      	b.n	8005d8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_UART_IRQHandler+0x52>
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa7f 	bl	80062e2 <UART_Receive_IT>
      return;
 8005de4:	e17b      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80b1 	beq.w	8005f50 <HAL_UART_IRQHandler+0x1bc>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <HAL_UART_IRQHandler+0x70>
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80a6 	beq.w	8005f50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_UART_IRQHandler+0x90>
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_UART_IRQHandler+0xb0>
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f043 0202 	orr.w	r2, r3, #2
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_UART_IRQHandler+0xd0>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	f043 0204 	orr.w	r2, r3, #4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <HAL_UART_IRQHandler+0xfa>
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_UART_IRQHandler+0xee>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0208 	orr.w	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 811e 	beq.w	80060d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x11e>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa18 	bl	80062e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_UART_IRQHandler+0x146>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d031      	beq.n	8005f3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f95a 	bl	8006194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d023      	beq.n	8005f36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4a76      	ldr	r2, [pc, #472]	; (80060e4 <HAL_UART_IRQHandler+0x350>)
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fc f928 	bl	8002168 <HAL_DMA_Abort_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e00e      	b.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8e3 	bl	80060fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00a      	b.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8df 	bl	80060fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e006      	b.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8db 	bl	80060fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f4a:	e0c3      	b.n	80060d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	bf00      	nop
    return;
 8005f4e:	e0c1      	b.n	80060d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 80a1 	bne.w	800609c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 809b 	beq.w	800609c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8095 	beq.w	800609c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d04e      	beq.n	8006034 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005fa0:	8a3b      	ldrh	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8098 	beq.w	80060d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fac:	8a3a      	ldrh	r2, [r7, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f080 8092 	bcs.w	80060d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8a3a      	ldrh	r2, [r7, #16]
 8005fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d02b      	beq.n	800601c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0210 	bic.w	r2, r2, #16
 8006010:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	4618      	mov	r0, r3
 8006018:	f7fc f86b 	bl	80020f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	b29b      	uxth	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f86d 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006032:	e051      	b.n	80060d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800603c:	b29b      	uxth	r3, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d047      	beq.n	80060dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800604c:	8a7b      	ldrh	r3, [r7, #18]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d044      	beq.n	80060dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006060:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0210 	bic.w	r2, r2, #16
 800608e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f839 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800609a:	e01f      	b.n	80060dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_UART_IRQHandler+0x324>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8af 	bl	8006214 <UART_Transmit_IT>
    return;
 80060b6:	e012      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <HAL_UART_IRQHandler+0x34a>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8f0 	bl	80062b2 <UART_EndTransmit_IT>
    return;
 80060d2:	e004      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
    return;
 80060d4:	bf00      	nop
 80060d6:	e002      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
      return;
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
      return;
 80060dc:	bf00      	nop
  }
}
 80060de:	3728      	adds	r7, #40	; 0x28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	080061ed 	.word	0x080061ed

080060e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2222      	movs	r2, #34	; 0x22
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006166:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0220 	orr.w	r2, r2, #32
 8006186:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d107      	bne.n	80061d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0210 	bic.w	r2, r2, #16
 80061d2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff ff77 	bl	80060fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b21      	cmp	r3, #33	; 0x21
 8006226:	d13e      	bne.n	80062a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d114      	bne.n	800625c <UART_Transmit_IT+0x48>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d110      	bne.n	800625c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800624e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]
 800625a:	e008      	b.n	800626e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6211      	str	r1, [r2, #32]
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4619      	mov	r1, r3
 800627c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr

080062b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ff08 	bl	80060e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b22      	cmp	r3, #34	; 0x22
 80062f4:	f040 8099 	bne.w	800642a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d117      	bne.n	8006332 <UART_Receive_IT+0x50>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d113      	bne.n	8006332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006320:	b29a      	uxth	r2, r3
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	1c9a      	adds	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
 8006330:	e026      	b.n	8006380 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d007      	beq.n	8006356 <UART_Receive_IT+0x74>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <UART_Receive_IT+0x82>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e008      	b.n	8006376 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006370:	b2da      	uxtb	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4619      	mov	r1, r3
 800638e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006390:	2b00      	cmp	r3, #0
 8006392:	d148      	bne.n	8006426 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0220 	bic.w	r2, r2, #32
 80063a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d123      	bne.n	800641c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0210 	bic.w	r2, r2, #16
 80063e8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d10a      	bne.n	800640e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fe79 	bl	800610c <HAL_UARTEx_RxEventCallback>
 800641a:	e002      	b.n	8006422 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7f9 fe95 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e002      	b.n	800642c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e000      	b.n	800642c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800642a:	2302      	movs	r3, #2
  }
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800646e:	f023 030c 	bic.w	r3, r3, #12
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	430b      	orrs	r3, r1
 800647a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <UART_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d103      	bne.n	80064a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe fbb6 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	e002      	b.n	80064aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064a4:	f7fe fb9e 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 80064a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009a      	lsls	r2, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	4a22      	ldr	r2, [pc, #136]	; (800654c <UART_SetConfig+0x118>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	0119      	lsls	r1, r3, #4
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009a      	lsls	r2, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <UART_SetConfig+0x118>)
 80064e2:	fba3 0302 	umull	r0, r3, r3, r2
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	2064      	movs	r0, #100	; 0x64
 80064ea:	fb00 f303 	mul.w	r3, r0, r3
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	3332      	adds	r3, #50	; 0x32
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <UART_SetConfig+0x118>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006500:	4419      	add	r1, r3
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009a      	lsls	r2, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	fbb2 f2f3 	udiv	r2, r2, r3
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <UART_SetConfig+0x118>)
 800651a:	fba3 0302 	umull	r0, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2064      	movs	r0, #100	; 0x64
 8006522:	fb00 f303 	mul.w	r3, r0, r3
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	3332      	adds	r3, #50	; 0x32
 800652c:	4a07      	ldr	r2, [pc, #28]	; (800654c <UART_SetConfig+0x118>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	440a      	add	r2, r1
 800653e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40013800 	.word	0x40013800
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006550:	b084      	sub	sp, #16
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	f107 0014 	add.w	r0, r7, #20
 800655e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	b004      	add	sp, #16
 800656e:	4770      	bx	lr

08006570 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006580:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006584:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	4013      	ands	r3, r2
 80065bc:	b29a      	uxth	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr

080065d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065e8:	b084      	sub	sp, #16
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	f107 0014 	add.w	r0, r7, #20
 80065f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	b004      	add	sp, #16
 8006626:	4770      	bx	lr

08006628 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006628:	b480      	push	{r7}
 800662a:	b09b      	sub	sp, #108	; 0x6c
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	2b03      	cmp	r3, #3
 8006658:	d81f      	bhi.n	800669a <USB_ActivateEndpoint+0x72>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <USB_ActivateEndpoint+0x38>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006671 	.word	0x08006671
 8006664:	0800668d 	.word	0x0800668d
 8006668:	080066a3 	.word	0x080066a3
 800666c:	0800667f 	.word	0x0800667f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006670:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006678:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800667c:	e012      	b.n	80066a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800667e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006682:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006686:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800668a:	e00b      	b.n	80066a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800668c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006694:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006698:	e004      	b.n	80066a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80066a0:	e000      	b.n	80066a4 <USB_ActivateEndpoint+0x7c>
      break;
 80066a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	441a      	add	r2, r3
 80066ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066dc:	b29a      	uxth	r2, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80066f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	7b1b      	ldrb	r3, [r3, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8149 	bne.w	80069a8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8084 	beq.w	8006828 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	4413      	add	r3, r2
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	011a      	lsls	r2, r3, #4
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	88db      	ldrh	r3, [r3, #6]
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	81fb      	strh	r3, [r7, #14]
 8006762:	89fb      	ldrh	r3, [r7, #14]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <USB_ActivateEndpoint+0x17c>
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	81bb      	strh	r3, [r7, #12]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	89bb      	ldrh	r3, [r7, #12]
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	78db      	ldrb	r3, [r3, #3]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d020      	beq.n	80067ee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c2:	813b      	strh	r3, [r7, #8]
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	f083 0320 	eor.w	r3, r3, #32
 80067ca:	813b      	strh	r3, [r7, #8]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	893b      	ldrh	r3, [r7, #8]
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
 80067ec:	e27f      	b.n	8006cee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006804:	817b      	strh	r3, [r7, #10]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	897b      	ldrh	r3, [r7, #10]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
 8006826:	e262      	b.n	8006cee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	4413      	add	r3, r2
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	011a      	lsls	r2, r3, #4
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	4413      	add	r3, r2
 8006846:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	88db      	ldrh	r3, [r3, #6]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	4413      	add	r3, r2
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	4413      	add	r3, r2
 800687a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800687e:	623b      	str	r3, [r7, #32]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d112      	bne.n	80068ae <USB_ActivateEndpoint+0x286>
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006892:	b29a      	uxth	r2, r3
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	e02f      	b.n	800690e <USB_ActivateEndpoint+0x2e6>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b3e      	cmp	r3, #62	; 0x3e
 80068b4:	d813      	bhi.n	80068de <USB_ActivateEndpoint+0x2b6>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	663b      	str	r3, [r7, #96]	; 0x60
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <USB_ActivateEndpoint+0x2a8>
 80068ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068cc:	3301      	adds	r3, #1
 80068ce:	663b      	str	r3, [r7, #96]	; 0x60
 80068d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e017      	b.n	800690e <USB_ActivateEndpoint+0x2e6>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	663b      	str	r3, [r7, #96]	; 0x60
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <USB_ActivateEndpoint+0x2d0>
 80068f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f4:	3b01      	subs	r3, #1
 80068f6:	663b      	str	r3, [r7, #96]	; 0x60
 80068f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	029b      	lsls	r3, r3, #10
 80068fe:	b29b      	uxth	r3, r3
 8006900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006908:	b29a      	uxth	r2, r3
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	83fb      	strh	r3, [r7, #30]
 800691c:	8bfb      	ldrh	r3, [r7, #30]
 800691e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01b      	beq.n	800695e <USB_ActivateEndpoint+0x336>
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693c:	83bb      	strh	r3, [r7, #28]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	8bbb      	ldrh	r3, [r7, #28]
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	837b      	strh	r3, [r7, #26]
 8006976:	8b7b      	ldrh	r3, [r7, #26]
 8006978:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800697c:	837b      	strh	r3, [r7, #26]
 800697e:	8b7b      	ldrh	r3, [r7, #26]
 8006980:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006984:	837b      	strh	r3, [r7, #26]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	8b7b      	ldrh	r3, [r7, #26]
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
 80069a6:	e1a2      	b.n	8006cee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80069d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80069dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f4:	4413      	add	r3, r2
 80069f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	011a      	lsls	r2, r3, #4
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	657b      	str	r3, [r7, #84]	; 0x54
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	891b      	ldrh	r3, [r3, #8]
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a28:	4413      	add	r3, r2
 8006a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	011a      	lsls	r2, r3, #4
 8006a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	895b      	ldrh	r3, [r3, #10]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 8091 	bne.w	8006b78 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01b      	beq.n	8006aa6 <USB_ActivateEndpoint+0x47e>
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ab4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <USB_ActivateEndpoint+0x4ce>
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b54:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	441a      	add	r2, r3
 8006b60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
 8006b76:	e0ba      	b.n	8006cee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01d      	beq.n	8006bd0 <USB_ActivateEndpoint+0x5a8>
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006be0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01d      	beq.n	8006c28 <USB_ActivateEndpoint+0x600>
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	78db      	ldrb	r3, [r3, #3]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d024      	beq.n	8006c7a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c4e:	f083 0320 	eor.w	r3, r3, #32
 8006c52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
 8006c78:	e01d      	b.n	8006cb6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ccc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006cee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	376c      	adds	r7, #108	; 0x6c
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b08d      	sub	sp, #52	; 0x34
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	7b1b      	ldrb	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 808e 	bne.w	8006e2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d044      	beq.n	8006da2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	81bb      	strh	r3, [r7, #12]
 8006d26:	89bb      	ldrh	r3, [r7, #12]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01b      	beq.n	8006d68 <USB_DeactivateEndpoint+0x6c>
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	817b      	strh	r3, [r7, #10]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	897b      	ldrh	r3, [r7, #10]
 8006d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d7e:	813b      	strh	r3, [r7, #8]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	8013      	strh	r3, [r2, #0]
 8006da0:	e192      	b.n	80070c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	827b      	strh	r3, [r7, #18]
 8006db0:	8a7b      	ldrh	r3, [r7, #18]
 8006db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01b      	beq.n	8006df2 <USB_DeactivateEndpoint+0xf6>
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	823b      	strh	r3, [r7, #16]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	8a3b      	ldrh	r3, [r7, #16]
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	81fb      	strh	r3, [r7, #14]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	89fb      	ldrh	r3, [r7, #14]
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
 8006e2a:	e14d      	b.n	80070c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 80a5 	bne.w	8006f80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	843b      	strh	r3, [r7, #32]
 8006e44:	8c3b      	ldrh	r3, [r7, #32]
 8006e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01b      	beq.n	8006e86 <USB_DeactivateEndpoint+0x18a>
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	83fb      	strh	r3, [r7, #30]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	8bfb      	ldrh	r3, [r7, #30]
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	83bb      	strh	r3, [r7, #28]
 8006e94:	8bbb      	ldrh	r3, [r7, #28]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01b      	beq.n	8006ed6 <USB_DeactivateEndpoint+0x1da>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb4:	837b      	strh	r3, [r7, #26]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	8b7b      	ldrh	r3, [r7, #26]
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eec:	833b      	strh	r3, [r7, #24]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	441a      	add	r2, r3
 8006ef8:	8b3b      	ldrh	r3, [r7, #24]
 8006efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f24:	82fb      	strh	r3, [r7, #22]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	8afb      	ldrh	r3, [r7, #22]
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5c:	82bb      	strh	r3, [r7, #20]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	8abb      	ldrh	r3, [r7, #20]
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]
 8006f7e:	e0a3      	b.n	80070c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01b      	beq.n	8006fd0 <USB_DeactivateEndpoint+0x2d4>
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006fde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01b      	beq.n	8007020 <USB_DeactivateEndpoint+0x324>
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	853b      	strh	r3, [r7, #40]	; 0x28
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800700c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007018:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800701c:	b29b      	uxth	r3, r3
 800701e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	b29b      	uxth	r3, r3
 8007056:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800707c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708c:	b29b      	uxth	r3, r3
 800708e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3734      	adds	r7, #52	; 0x34
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr

080070d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b0cc      	sub	sp, #304	; 0x130
 80070d8:	af00      	add	r7, sp, #0
 80070da:	1d3b      	adds	r3, r7, #4
 80070dc:	6018      	str	r0, [r3, #0]
 80070de:	463b      	mov	r3, r7
 80070e0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	f040 872e 	bne.w	8007f4a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	463b      	mov	r3, r7
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d905      	bls.n	800710a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80070fe:	463b      	mov	r3, r7
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007108:	e004      	b.n	8007114 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007114:	463b      	mov	r3, r7
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	7b1b      	ldrb	r3, [r3, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d134      	bne.n	8007188 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800711e:	463b      	mov	r3, r7
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6959      	ldr	r1, [r3, #20]
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	88da      	ldrh	r2, [r3, #6]
 800712a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712e:	b29b      	uxth	r3, r3
 8007130:	1d38      	adds	r0, r7, #4
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	f001 fc03 	bl	800893e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007138:	f107 0310 	add.w	r3, r7, #16
 800713c:	1d3a      	adds	r2, r7, #4
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	1d3b      	adds	r3, r7, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714a:	b29b      	uxth	r3, r3
 800714c:	4619      	mov	r1, r3
 800714e:	f107 0310 	add.w	r3, r7, #16
 8007152:	f107 0210 	add.w	r2, r7, #16
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	440a      	add	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	011a      	lsls	r2, r3, #4
 8007164:	f107 0310 	add.w	r3, r7, #16
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4413      	add	r3, r2
 800716c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007170:	f107 030c 	add.w	r3, r7, #12
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717a:	b29a      	uxth	r2, r3
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	f000 beac 	b.w	8007ee0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007188:	463b      	mov	r3, r7
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	78db      	ldrb	r3, [r3, #3]
 800718e:	2b02      	cmp	r3, #2
 8007190:	f040 838c 	bne.w	80078ac <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6a1a      	ldr	r2, [r3, #32]
 800719a:	463b      	mov	r3, r7
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	f240 8330 	bls.w	8007806 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80071c4:	1d3b      	adds	r3, r7, #4
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f4:	1ad2      	subs	r2, r2, r3
 80071f6:	463b      	mov	r3, r7
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071fc:	1d3b      	adds	r3, r7, #4
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 819e 	beq.w	8007554 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800721c:	1d3a      	adds	r2, r7, #4
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d17a      	bne.n	8007322 <USB_EPStartXfer+0x24e>
 800722c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007230:	1d3a      	adds	r2, r7, #4
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	1d3b      	adds	r3, r7, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	440a      	add	r2, r1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	011a      	lsls	r2, r3, #4
 8007258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4413      	add	r3, r2
 8007260:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11a      	bne.n	80072a8 <USB_EPStartXfer+0x1d4>
 8007272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007280:	b29a      	uxth	r2, r3
 8007282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729c:	b29a      	uxth	r2, r3
 800729e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	e062      	b.n	800736e <USB_EPStartXfer+0x29a>
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	2b3e      	cmp	r3, #62	; 0x3e
 80072ae:	d819      	bhi.n	80072e4 <USB_EPStartXfer+0x210>
 80072b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <USB_EPStartXfer+0x1fc>
 80072c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ca:	3301      	adds	r3, #1
 80072cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e044      	b.n	800736e <USB_EPStartXfer+0x29a>
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d104      	bne.n	8007304 <USB_EPStartXfer+0x230>
 80072fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fe:	3b01      	subs	r3, #1
 8007300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007308:	b29b      	uxth	r3, r3
 800730a:	029b      	lsls	r3, r3, #10
 800730c:	b29b      	uxth	r3, r3
 800730e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007316:	b29a      	uxth	r2, r3
 8007318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	e025      	b.n	800736e <USB_EPStartXfer+0x29a>
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d120      	bne.n	800736e <USB_EPStartXfer+0x29a>
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007334:	b29b      	uxth	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800733c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	440a      	add	r2, r1
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	463b      	mov	r3, r7
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	011a      	lsls	r2, r3, #4
 800734e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4413      	add	r3, r2
 8007356:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800735a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007364:	b29a      	uxth	r2, r3
 8007366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800736e:	463b      	mov	r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	895b      	ldrh	r3, [r3, #10]
 8007374:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007378:	463b      	mov	r3, r7
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6959      	ldr	r1, [r3, #20]
 800737e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007382:	b29b      	uxth	r3, r3
 8007384:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007388:	1d38      	adds	r0, r7, #4
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	f001 fad7 	bl	800893e <USB_WritePMA>
            ep->xfer_buff += len;
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739a:	441a      	add	r2, r3
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6a1a      	ldr	r2, [r3, #32]
 80073a8:	463b      	mov	r3, r7
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d909      	bls.n	80073c6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80073b2:	463b      	mov	r3, r7
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a1a      	ldr	r2, [r3, #32]
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	1ad2      	subs	r2, r2, r3
 80073be:	463b      	mov	r3, r7
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	621a      	str	r2, [r3, #32]
 80073c4:	e008      	b.n	80073d8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80073c6:	463b      	mov	r3, r7
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2200      	movs	r2, #0
 80073d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073d8:	463b      	mov	r3, r7
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d17a      	bne.n	80074d8 <USB_EPStartXfer+0x404>
 80073e2:	f107 0318 	add.w	r3, r7, #24
 80073e6:	1d3a      	adds	r2, r7, #4
 80073e8:	6812      	ldr	r2, [r2, #0]
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	f107 0318 	add.w	r3, r7, #24
 80073fc:	f107 0218 	add.w	r2, r7, #24
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	440a      	add	r2, r1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	011a      	lsls	r2, r3, #4
 800740e:	f107 0318 	add.w	r3, r7, #24
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4413      	add	r3, r2
 8007416:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d11a      	bne.n	800745e <USB_EPStartXfer+0x38a>
 8007428:	f107 0314 	add.w	r3, r7, #20
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007436:	b29a      	uxth	r2, r3
 8007438:	f107 0314 	add.w	r3, r7, #20
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007452:	b29a      	uxth	r2, r3
 8007454:	f107 0314 	add.w	r3, r7, #20
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e067      	b.n	800752e <USB_EPStartXfer+0x45a>
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	2b3e      	cmp	r3, #62	; 0x3e
 8007464:	d819      	bhi.n	800749a <USB_EPStartXfer+0x3c6>
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <USB_EPStartXfer+0x3b2>
 800747c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007480:	3301      	adds	r3, #1
 8007482:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007486:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800748a:	b29b      	uxth	r3, r3
 800748c:	029b      	lsls	r3, r3, #10
 800748e:	b29a      	uxth	r2, r3
 8007490:	f107 0314 	add.w	r3, r7, #20
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	801a      	strh	r2, [r3, #0]
 8007498:	e049      	b.n	800752e <USB_EPStartXfer+0x45a>
 800749a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <USB_EPStartXfer+0x3e6>
 80074b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074b4:	3b01      	subs	r3, #1
 80074b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e02a      	b.n	800752e <USB_EPStartXfer+0x45a>
 80074d8:	463b      	mov	r3, r7
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d125      	bne.n	800752e <USB_EPStartXfer+0x45a>
 80074e2:	f107 0320 	add.w	r3, r7, #32
 80074e6:	1d3a      	adds	r2, r7, #4
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	4619      	mov	r1, r3
 80074f8:	f107 0320 	add.w	r3, r7, #32
 80074fc:	f107 0220 	add.w	r2, r7, #32
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	440a      	add	r2, r1
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	011a      	lsls	r2, r3, #4
 800750e:	f107 0320 	add.w	r3, r7, #32
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4413      	add	r3, r2
 8007516:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800751a:	f107 031c 	add.w	r3, r7, #28
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007524:	b29a      	uxth	r2, r3
 8007526:	f107 031c 	add.w	r3, r7, #28
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800752e:	463b      	mov	r3, r7
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	891b      	ldrh	r3, [r3, #8]
 8007534:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007538:	463b      	mov	r3, r7
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6959      	ldr	r1, [r3, #20]
 800753e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007542:	b29b      	uxth	r3, r3
 8007544:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007548:	1d38      	adds	r0, r7, #4
 800754a:	6800      	ldr	r0, [r0, #0]
 800754c:	f001 f9f7 	bl	800893e <USB_WritePMA>
 8007550:	f000 bcc6 	b.w	8007ee0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007554:	463b      	mov	r3, r7
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d164      	bne.n	8007628 <USB_EPStartXfer+0x554>
 800755e:	1d3b      	adds	r3, r7, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	64bb      	str	r3, [r7, #72]	; 0x48
 8007564:	1d3b      	adds	r3, r7, #4
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756c:	b29b      	uxth	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007572:	4413      	add	r3, r2
 8007574:	64bb      	str	r3, [r7, #72]	; 0x48
 8007576:	463b      	mov	r3, r7
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	011a      	lsls	r2, r3, #4
 800757e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007580:	4413      	add	r3, r2
 8007582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007586:	647b      	str	r3, [r7, #68]	; 0x44
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d112      	bne.n	80075b6 <USB_EPStartXfer+0x4e2>
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800759a:	b29a      	uxth	r2, r3
 800759c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	e057      	b.n	8007666 <USB_EPStartXfer+0x592>
 80075b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ba:	2b3e      	cmp	r3, #62	; 0x3e
 80075bc:	d817      	bhi.n	80075ee <USB_EPStartXfer+0x51a>
 80075be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <USB_EPStartXfer+0x50a>
 80075d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d8:	3301      	adds	r3, #1
 80075da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	029b      	lsls	r3, r3, #10
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e03b      	b.n	8007666 <USB_EPStartXfer+0x592>
 80075ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <USB_EPStartXfer+0x53a>
 8007604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007608:	3b01      	subs	r3, #1
 800760a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800760e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007612:	b29b      	uxth	r3, r3
 8007614:	029b      	lsls	r3, r3, #10
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e01e      	b.n	8007666 <USB_EPStartXfer+0x592>
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d119      	bne.n	8007666 <USB_EPStartXfer+0x592>
 8007632:	1d3b      	adds	r3, r7, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	653b      	str	r3, [r7, #80]	; 0x50
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007646:	4413      	add	r3, r2
 8007648:	653b      	str	r3, [r7, #80]	; 0x50
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	011a      	lsls	r2, r3, #4
 8007652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007654:	4413      	add	r3, r2
 8007656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800765a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800765c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007660:	b29a      	uxth	r2, r3
 8007662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007666:	463b      	mov	r3, r7
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	891b      	ldrh	r3, [r3, #8]
 800766c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6959      	ldr	r1, [r3, #20]
 8007676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767a:	b29b      	uxth	r3, r3
 800767c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007680:	1d38      	adds	r0, r7, #4
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	f001 f95b 	bl	800893e <USB_WritePMA>
            ep->xfer_buff += len;
 8007688:	463b      	mov	r3, r7
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	441a      	add	r2, r3
 8007694:	463b      	mov	r3, r7
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800769a:	463b      	mov	r3, r7
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	463b      	mov	r3, r7
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d909      	bls.n	80076be <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80076aa:	463b      	mov	r3, r7
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	463b      	mov	r3, r7
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	621a      	str	r2, [r3, #32]
 80076bc:	e008      	b.n	80076d0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80076be:	463b      	mov	r3, r7
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076c8:	463b      	mov	r3, r7
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2200      	movs	r2, #0
 80076ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076d0:	1d3b      	adds	r3, r7, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d164      	bne.n	80077aa <USB_EPStartXfer+0x6d6>
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80076e6:	1d3b      	adds	r3, r7, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	4413      	add	r3, r2
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076f8:	463b      	mov	r3, r7
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	011a      	lsls	r2, r3, #4
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	4413      	add	r3, r2
 8007704:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
 800770a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d112      	bne.n	8007738 <USB_EPStartXfer+0x664>
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800771c:	b29a      	uxth	r2, r3
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007730:	b29a      	uxth	r2, r3
 8007732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	e054      	b.n	80077e2 <USB_EPStartXfer+0x70e>
 8007738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773c:	2b3e      	cmp	r3, #62	; 0x3e
 800773e:	d817      	bhi.n	8007770 <USB_EPStartXfer+0x69c>
 8007740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800774a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <USB_EPStartXfer+0x68c>
 8007756:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800775a:	3301      	adds	r3, #1
 800775c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007760:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007764:	b29b      	uxth	r3, r3
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	b29a      	uxth	r2, r3
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e038      	b.n	80077e2 <USB_EPStartXfer+0x70e>
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <USB_EPStartXfer+0x6bc>
 8007786:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800778a:	3b01      	subs	r3, #1
 800778c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007790:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007794:	b29b      	uxth	r3, r3
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e01b      	b.n	80077e2 <USB_EPStartXfer+0x70e>
 80077aa:	463b      	mov	r3, r7
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d116      	bne.n	80077e2 <USB_EPStartXfer+0x70e>
 80077b4:	1d3b      	adds	r3, r7, #4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077bc:	b29b      	uxth	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c2:	4413      	add	r3, r2
 80077c4:	643b      	str	r3, [r7, #64]	; 0x40
 80077c6:	463b      	mov	r3, r7
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d0:	4413      	add	r3, r2
 80077d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077e2:	463b      	mov	r3, r7
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	895b      	ldrh	r3, [r3, #10]
 80077e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ec:	463b      	mov	r3, r7
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6959      	ldr	r1, [r3, #20]
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077fc:	1d38      	adds	r0, r7, #4
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	f001 f89d 	bl	800893e <USB_WritePMA>
 8007804:	e36c      	b.n	8007ee0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007810:	1d3b      	adds	r3, r7, #4
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	463b      	mov	r3, r7
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800782e:	1d3b      	adds	r3, r7, #4
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	463b      	mov	r3, r7
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	441a      	add	r2, r3
 800783c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	b29b      	uxth	r3, r3
 8007852:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007862:	b29b      	uxth	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007868:	4413      	add	r3, r2
 800786a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800786c:	463b      	mov	r3, r7
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	011a      	lsls	r2, r3, #4
 8007874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007876:	4413      	add	r3, r2
 8007878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787c:	65bb      	str	r3, [r7, #88]	; 0x58
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	b29a      	uxth	r2, r3
 8007884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007886:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007888:	463b      	mov	r3, r7
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	891b      	ldrh	r3, [r3, #8]
 800788e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007892:	463b      	mov	r3, r7
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6959      	ldr	r1, [r3, #20]
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	b29b      	uxth	r3, r3
 800789e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078a2:	1d38      	adds	r0, r7, #4
 80078a4:	6800      	ldr	r0, [r0, #0]
 80078a6:	f001 f84a 	bl	800893e <USB_WritePMA>
 80078aa:	e319      	b.n	8007ee0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80078ac:	1d3b      	adds	r3, r7, #4
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80078ca:	1d3b      	adds	r3, r7, #4
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	463b      	mov	r3, r7
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80078dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80078f0:	463b      	mov	r3, r7
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	463b      	mov	r3, r7
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	463b      	mov	r3, r7
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8162 	beq.w	8007be2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800791e:	1d3b      	adds	r3, r7, #4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007926:	463b      	mov	r3, r7
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d164      	bne.n	80079fa <USB_EPStartXfer+0x926>
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	67bb      	str	r3, [r7, #120]	; 0x78
 8007936:	1d3b      	adds	r3, r7, #4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007944:	4413      	add	r3, r2
 8007946:	67bb      	str	r3, [r7, #120]	; 0x78
 8007948:	463b      	mov	r3, r7
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	011a      	lsls	r2, r3, #4
 8007950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007952:	4413      	add	r3, r2
 8007954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007958:	677b      	str	r3, [r7, #116]	; 0x74
 800795a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d112      	bne.n	8007988 <USB_EPStartXfer+0x8b4>
 8007962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800796c:	b29a      	uxth	r2, r3
 800796e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29a      	uxth	r2, r3
 8007982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	e057      	b.n	8007a38 <USB_EPStartXfer+0x964>
 8007988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798c:	2b3e      	cmp	r3, #62	; 0x3e
 800798e:	d817      	bhi.n	80079c0 <USB_EPStartXfer+0x8ec>
 8007990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800799a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <USB_EPStartXfer+0x8dc>
 80079a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079aa:	3301      	adds	r3, #1
 80079ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	029b      	lsls	r3, r3, #10
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	e03b      	b.n	8007a38 <USB_EPStartXfer+0x964>
 80079c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <USB_EPStartXfer+0x90c>
 80079d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079da:	3b01      	subs	r3, #1
 80079dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	e01e      	b.n	8007a38 <USB_EPStartXfer+0x964>
 80079fa:	463b      	mov	r3, r7
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d119      	bne.n	8007a38 <USB_EPStartXfer+0x964>
 8007a04:	1d3b      	adds	r3, r7, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a14:	4413      	add	r3, r2
 8007a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	011a      	lsls	r2, r3, #4
 8007a22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a26:	4413      	add	r3, r2
 8007a28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007a38:	463b      	mov	r3, r7
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	895b      	ldrh	r3, [r3, #10]
 8007a3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a42:	463b      	mov	r3, r7
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6959      	ldr	r1, [r3, #20]
 8007a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a52:	1d38      	adds	r0, r7, #4
 8007a54:	6800      	ldr	r0, [r0, #0]
 8007a56:	f000 ff72 	bl	800893e <USB_WritePMA>
          ep->xfer_buff += len;
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a64:	441a      	add	r2, r3
 8007a66:	463b      	mov	r3, r7
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a1a      	ldr	r2, [r3, #32]
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d909      	bls.n	8007a90 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a86:	1ad2      	subs	r2, r2, r3
 8007a88:	463b      	mov	r3, r7
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	621a      	str	r2, [r3, #32]
 8007a8e:	e008      	b.n	8007aa2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007a90:	463b      	mov	r3, r7
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 821a 	beq.w	8007ee0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aac:	463b      	mov	r3, r7
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d164      	bne.n	8007b80 <USB_EPStartXfer+0xaac>
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007abc:	1d3b      	adds	r3, r7, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aca:	4413      	add	r3, r2
 8007acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ace:	463b      	mov	r3, r7
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	011a      	lsls	r2, r3, #4
 8007ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad8:	4413      	add	r3, r2
 8007ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ade:	667b      	str	r3, [r7, #100]	; 0x64
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d112      	bne.n	8007b0e <USB_EPStartXfer+0xa3a>
 8007ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	e057      	b.n	8007bbe <USB_EPStartXfer+0xaea>
 8007b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b12:	2b3e      	cmp	r3, #62	; 0x3e
 8007b14:	d817      	bhi.n	8007b46 <USB_EPStartXfer+0xa72>
 8007b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <USB_EPStartXfer+0xa62>
 8007b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b30:	3301      	adds	r3, #1
 8007b32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	029b      	lsls	r3, r3, #10
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	e03b      	b.n	8007bbe <USB_EPStartXfer+0xaea>
 8007b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <USB_EPStartXfer+0xa92>
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b60:	3b01      	subs	r3, #1
 8007b62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	029b      	lsls	r3, r3, #10
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	e01e      	b.n	8007bbe <USB_EPStartXfer+0xaea>
 8007b80:	463b      	mov	r3, r7
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d119      	bne.n	8007bbe <USB_EPStartXfer+0xaea>
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b90:	1d3b      	adds	r3, r7, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b9e:	4413      	add	r3, r2
 8007ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	011a      	lsls	r2, r3, #4
 8007baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bac:	4413      	add	r3, r2
 8007bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	891b      	ldrh	r3, [r3, #8]
 8007bc4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bc8:	463b      	mov	r3, r7
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6959      	ldr	r1, [r3, #20]
 8007bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bd8:	1d38      	adds	r0, r7, #4
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	f000 feaf 	bl	800893e <USB_WritePMA>
 8007be0:	e17e      	b.n	8007ee0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be2:	463b      	mov	r3, r7
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d16f      	bne.n	8007ccc <USB_EPStartXfer+0xbf8>
 8007bec:	1d3b      	adds	r3, r7, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bf4:	1d3b      	adds	r3, r7, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c04:	4413      	add	r3, r2
 8007c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	011a      	lsls	r2, r3, #4
 8007c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c16:	4413      	add	r3, r2
 8007c18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d116      	bne.n	8007c56 <USB_EPStartXfer+0xb82>
 8007c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c3a:	801a      	strh	r2, [r3, #0]
 8007c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e05f      	b.n	8007d16 <USB_EPStartXfer+0xc42>
 8007c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5c:	d818      	bhi.n	8007c90 <USB_EPStartXfer+0xbbc>
 8007c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <USB_EPStartXfer+0xbaa>
 8007c74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	029b      	lsls	r3, r3, #10
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	e042      	b.n	8007d16 <USB_EPStartXfer+0xc42>
 8007c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c94:	095b      	lsrs	r3, r3, #5
 8007c96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <USB_EPStartXfer+0xbdc>
 8007ca6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007caa:	3b01      	subs	r3, #1
 8007cac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007cb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	029b      	lsls	r3, r3, #10
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	e024      	b.n	8007d16 <USB_EPStartXfer+0xc42>
 8007ccc:	463b      	mov	r3, r7
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d11f      	bne.n	8007d16 <USB_EPStartXfer+0xc42>
 8007cd6:	1d3b      	adds	r3, r7, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cde:	1d3b      	adds	r3, r7, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cee:	4413      	add	r3, r2
 8007cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	011a      	lsls	r2, r3, #4
 8007cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d16:	463b      	mov	r3, r7
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	891b      	ldrh	r3, [r3, #8]
 8007d1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d20:	463b      	mov	r3, r7
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6959      	ldr	r1, [r3, #20]
 8007d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d30:	1d38      	adds	r0, r7, #4
 8007d32:	6800      	ldr	r0, [r0, #0]
 8007d34:	f000 fe03 	bl	800893e <USB_WritePMA>
          ep->xfer_buff += len;
 8007d38:	463b      	mov	r3, r7
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695a      	ldr	r2, [r3, #20]
 8007d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d42:	441a      	add	r2, r3
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6a1a      	ldr	r2, [r3, #32]
 8007d50:	463b      	mov	r3, r7
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d909      	bls.n	8007d6e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d64:	1ad2      	subs	r2, r2, r3
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	621a      	str	r2, [r3, #32]
 8007d6c:	e008      	b.n	8007d80 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d6e:	463b      	mov	r3, r7
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d78:	463b      	mov	r3, r7
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80ab 	beq.w	8007ee0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d92:	463b      	mov	r3, r7
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d16f      	bne.n	8007e7c <USB_EPStartXfer+0xda8>
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007da4:	1d3b      	adds	r3, r7, #4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db4:	4413      	add	r3, r2
 8007db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	011a      	lsls	r2, r3, #4
 8007dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d116      	bne.n	8007e06 <USB_EPStartXfer+0xd32>
 8007dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	e05b      	b.n	8007ebe <USB_EPStartXfer+0xdea>
 8007e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e0c:	d818      	bhi.n	8007e40 <USB_EPStartXfer+0xd6c>
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <USB_EPStartXfer+0xd5a>
 8007e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	029b      	lsls	r3, r3, #10
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e03e      	b.n	8007ebe <USB_EPStartXfer+0xdea>
 8007e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4e:	f003 031f 	and.w	r3, r3, #31
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <USB_EPStartXfer+0xd8c>
 8007e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e020      	b.n	8007ebe <USB_EPStartXfer+0xdea>
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d11b      	bne.n	8007ebe <USB_EPStartXfer+0xdea>
 8007e86:	1d3b      	adds	r3, r7, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e96:	4413      	add	r3, r2
 8007e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	011a      	lsls	r2, r3, #4
 8007ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ebc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec8:	463b      	mov	r3, r7
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ed8:	1d38      	adds	r0, r7, #4
 8007eda:	6800      	ldr	r0, [r0, #0]
 8007edc:	f000 fd2f 	bl	800893e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f107 020a 	add.w	r2, r7, #10
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007efe:	8013      	strh	r3, [r2, #0]
 8007f00:	f107 030a 	add.w	r3, r7, #10
 8007f04:	f107 020a 	add.w	r2, r7, #10
 8007f08:	8812      	ldrh	r2, [r2, #0]
 8007f0a:	f082 0210 	eor.w	r2, r2, #16
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	f107 030a 	add.w	r3, r7, #10
 8007f14:	f107 020a 	add.w	r2, r7, #10
 8007f18:	8812      	ldrh	r2, [r2, #0]
 8007f1a:	f082 0220 	eor.w	r2, r2, #32
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	1d3b      	adds	r3, r7, #4
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	463b      	mov	r3, r7
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	f107 030a 	add.w	r3, r7, #10
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
 8007f48:	e3b5      	b.n	80086b6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	7b1b      	ldrb	r3, [r3, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 8090 	bne.w	8008076 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f56:	463b      	mov	r3, r7
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d90e      	bls.n	8007f84 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007f66:	463b      	mov	r3, r7
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007f70:	463b      	mov	r3, r7
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	619a      	str	r2, [r3, #24]
 8007f82:	e008      	b.n	8007f96 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007f84:	463b      	mov	r3, r7
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007f8e:	463b      	mov	r3, r7
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f96:	1d3b      	adds	r3, r7, #4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007fae:	4413      	add	r3, r2
 8007fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	011a      	lsls	r2, r3, #4
 8007fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d116      	bne.n	8008000 <USB_EPStartXfer+0xf2c>
 8007fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	e32c      	b.n	800865a <USB_EPStartXfer+0x1586>
 8008000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008004:	2b3e      	cmp	r3, #62	; 0x3e
 8008006:	d818      	bhi.n	800803a <USB_EPStartXfer+0xf66>
 8008008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <USB_EPStartXfer+0xf54>
 800801e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008022:	3301      	adds	r3, #1
 8008024:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008028:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800802c:	b29b      	uxth	r3, r3
 800802e:	029b      	lsls	r3, r3, #10
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	e30f      	b.n	800865a <USB_EPStartXfer+0x1586>
 800803a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <USB_EPStartXfer+0xf86>
 8008050:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008054:	3b01      	subs	r3, #1
 8008056:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800805a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800805e:	b29b      	uxth	r3, r3
 8008060:	029b      	lsls	r3, r3, #10
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806c:	b29a      	uxth	r2, r3
 800806e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	e2f1      	b.n	800865a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	78db      	ldrb	r3, [r3, #3]
 800807c:	2b02      	cmp	r3, #2
 800807e:	f040 818f 	bne.w	80083a0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008082:	463b      	mov	r3, r7
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d175      	bne.n	8008178 <USB_EPStartXfer+0x10a4>
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008094:	1d3b      	adds	r3, r7, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809c:	b29b      	uxth	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080a4:	4413      	add	r3, r2
 80080a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080aa:	463b      	mov	r3, r7
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	011a      	lsls	r2, r3, #4
 80080b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080b6:	4413      	add	r3, r2
 80080b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080c0:	463b      	mov	r3, r7
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d116      	bne.n	80080f8 <USB_EPStartXfer+0x1024>
 80080ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	e065      	b.n	80081c4 <USB_EPStartXfer+0x10f0>
 80080f8:	463b      	mov	r3, r7
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008100:	d81a      	bhi.n	8008138 <USB_EPStartXfer+0x1064>
 8008102:	463b      	mov	r3, r7
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800810e:	463b      	mov	r3, r7
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <USB_EPStartXfer+0x1052>
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008120:	3301      	adds	r3, #1
 8008122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812a:	b29b      	uxth	r3, r3
 800812c:	029b      	lsls	r3, r3, #10
 800812e:	b29a      	uxth	r2, r3
 8008130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	e045      	b.n	80081c4 <USB_EPStartXfer+0x10f0>
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	095b      	lsrs	r3, r3, #5
 8008140:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008144:	463b      	mov	r3, r7
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 031f 	and.w	r3, r3, #31
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <USB_EPStartXfer+0x1088>
 8008152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008156:	3b01      	subs	r3, #1
 8008158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800815c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008160:	b29b      	uxth	r3, r3
 8008162:	029b      	lsls	r3, r3, #10
 8008164:	b29b      	uxth	r3, r3
 8008166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800816e:	b29a      	uxth	r2, r3
 8008170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008174:	801a      	strh	r2, [r3, #0]
 8008176:	e025      	b.n	80081c4 <USB_EPStartXfer+0x10f0>
 8008178:	463b      	mov	r3, r7
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d120      	bne.n	80081c4 <USB_EPStartXfer+0x10f0>
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008192:	b29b      	uxth	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800819a:	4413      	add	r3, r2
 800819c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081a0:	463b      	mov	r3, r7
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	011a      	lsls	r2, r3, #4
 80081a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081b6:	463b      	mov	r3, r7
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	b29a      	uxth	r2, r3
 80081be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	1d3b      	adds	r3, r7, #4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081cc:	463b      	mov	r3, r7
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d175      	bne.n	80082c2 <USB_EPStartXfer+0x11ee>
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	461a      	mov	r2, r3
 80081ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081ee:	4413      	add	r3, r2
 80081f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081f4:	463b      	mov	r3, r7
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	011a      	lsls	r2, r3, #4
 80081fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008200:	4413      	add	r3, r2
 8008202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008206:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800820a:	463b      	mov	r3, r7
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d116      	bne.n	8008242 <USB_EPStartXfer+0x116e>
 8008214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008238:	b29a      	uxth	r2, r3
 800823a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	e061      	b.n	8008306 <USB_EPStartXfer+0x1232>
 8008242:	463b      	mov	r3, r7
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b3e      	cmp	r3, #62	; 0x3e
 800824a:	d81a      	bhi.n	8008282 <USB_EPStartXfer+0x11ae>
 800824c:	463b      	mov	r3, r7
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	085b      	lsrs	r3, r3, #1
 8008254:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008258:	463b      	mov	r3, r7
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <USB_EPStartXfer+0x119c>
 8008266:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800826a:	3301      	adds	r3, #1
 800826c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008270:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008274:	b29b      	uxth	r3, r3
 8008276:	029b      	lsls	r3, r3, #10
 8008278:	b29a      	uxth	r2, r3
 800827a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e041      	b.n	8008306 <USB_EPStartXfer+0x1232>
 8008282:	463b      	mov	r3, r7
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800828e:	463b      	mov	r3, r7
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	2b00      	cmp	r3, #0
 800829a:	d104      	bne.n	80082a6 <USB_EPStartXfer+0x11d2>
 800829c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082a0:	3b01      	subs	r3, #1
 80082a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	029b      	lsls	r3, r3, #10
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e021      	b.n	8008306 <USB_EPStartXfer+0x1232>
 80082c2:	463b      	mov	r3, r7
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d11c      	bne.n	8008306 <USB_EPStartXfer+0x1232>
 80082cc:	1d3b      	adds	r3, r7, #4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	461a      	mov	r2, r3
 80082d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082dc:	4413      	add	r3, r2
 80082de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082e2:	463b      	mov	r3, r7
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	011a      	lsls	r2, r3, #4
 80082ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082ee:	4413      	add	r3, r2
 80082f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082f8:	463b      	mov	r3, r7
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	b29a      	uxth	r2, r3
 8008300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008304:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008306:	463b      	mov	r3, r7
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 81a4 	beq.w	800865a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008326:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800832a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <USB_EPStartXfer+0x126a>
 8008332:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10d      	bne.n	800835a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800833e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 8187 	bne.w	800865a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800834c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 8180 	bne.w	800865a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800835a:	1d3b      	adds	r3, r7, #4
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	463b      	mov	r3, r7
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008374:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008378:	1d3b      	adds	r3, r7, #4
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	463b      	mov	r3, r7
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	441a      	add	r2, r3
 8008386:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800838a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800838e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800839a:	b29b      	uxth	r3, r3
 800839c:	8013      	strh	r3, [r2, #0]
 800839e:	e15c      	b.n	800865a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083a0:	463b      	mov	r3, r7
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	78db      	ldrb	r3, [r3, #3]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	f040 8155 	bne.w	8008656 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	463b      	mov	r3, r7
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d90e      	bls.n	80083da <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80083bc:	463b      	mov	r3, r7
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80083c6:	463b      	mov	r3, r7
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d0:	1ad2      	subs	r2, r2, r3
 80083d2:	463b      	mov	r3, r7
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	619a      	str	r2, [r3, #24]
 80083d8:	e008      	b.n	80083ec <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80083da:	463b      	mov	r3, r7
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80083e4:	463b      	mov	r3, r7
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2200      	movs	r2, #0
 80083ea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083ec:	463b      	mov	r3, r7
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d16f      	bne.n	80084d6 <USB_EPStartXfer+0x1402>
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083fe:	1d3b      	adds	r3, r7, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008406:	b29b      	uxth	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800840e:	4413      	add	r3, r2
 8008410:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008414:	463b      	mov	r3, r7
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	011a      	lsls	r2, r3, #4
 800841c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008420:	4413      	add	r3, r2
 8008422:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008426:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d116      	bne.n	8008460 <USB_EPStartXfer+0x138c>
 8008432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800843e:	b29a      	uxth	r2, r3
 8008440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008456:	b29a      	uxth	r2, r3
 8008458:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	e05f      	b.n	8008520 <USB_EPStartXfer+0x144c>
 8008460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008464:	2b3e      	cmp	r3, #62	; 0x3e
 8008466:	d818      	bhi.n	800849a <USB_EPStartXfer+0x13c6>
 8008468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <USB_EPStartXfer+0x13b4>
 800847e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008482:	3301      	adds	r3, #1
 8008484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800848c:	b29b      	uxth	r3, r3
 800848e:	029b      	lsls	r3, r3, #10
 8008490:	b29a      	uxth	r2, r3
 8008492:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	e042      	b.n	8008520 <USB_EPStartXfer+0x144c>
 800849a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800849e:	095b      	lsrs	r3, r3, #5
 80084a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a8:	f003 031f 	and.w	r3, r3, #31
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d104      	bne.n	80084ba <USB_EPStartXfer+0x13e6>
 80084b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b4:	3b01      	subs	r3, #1
 80084b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084be:	b29b      	uxth	r3, r3
 80084c0:	029b      	lsls	r3, r3, #10
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084d2:	801a      	strh	r2, [r3, #0]
 80084d4:	e024      	b.n	8008520 <USB_EPStartXfer+0x144c>
 80084d6:	463b      	mov	r3, r7
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d11f      	bne.n	8008520 <USB_EPStartXfer+0x144c>
 80084e0:	1d3b      	adds	r3, r7, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	461a      	mov	r2, r3
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f8:	4413      	add	r3, r2
 80084fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084fe:	463b      	mov	r3, r7
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	011a      	lsls	r2, r3, #4
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	4413      	add	r3, r2
 800850c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008510:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	1d3b      	adds	r3, r7, #4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d16f      	bne.n	8008612 <USB_EPStartXfer+0x153e>
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008542:	b29b      	uxth	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800854a:	4413      	add	r3, r2
 800854c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008550:	463b      	mov	r3, r7
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	011a      	lsls	r2, r3, #4
 8008558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800855c:	4413      	add	r3, r2
 800855e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d116      	bne.n	800859c <USB_EPStartXfer+0x14c8>
 800856e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	e05e      	b.n	800865a <USB_EPStartXfer+0x1586>
 800859c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a0:	2b3e      	cmp	r3, #62	; 0x3e
 80085a2:	d818      	bhi.n	80085d6 <USB_EPStartXfer+0x1502>
 80085a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <USB_EPStartXfer+0x14f0>
 80085ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085be:	3301      	adds	r3, #1
 80085c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e041      	b.n	800865a <USB_EPStartXfer+0x1586>
 80085d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e4:	f003 031f 	and.w	r3, r3, #31
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <USB_EPStartXfer+0x1522>
 80085ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085f0:	3b01      	subs	r3, #1
 80085f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	029b      	lsls	r3, r3, #10
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e023      	b.n	800865a <USB_EPStartXfer+0x1586>
 8008612:	463b      	mov	r3, r7
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d11e      	bne.n	800865a <USB_EPStartXfer+0x1586>
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862c:	4413      	add	r3, r2
 800862e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008632:	463b      	mov	r3, r7
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	011a      	lsls	r2, r3, #4
 800863a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863e:	4413      	add	r3, r2
 8008640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864c:	b29a      	uxth	r2, r3
 800864e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e001      	b.n	800865a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e02e      	b.n	80086b8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008674:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008678:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800867c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008680:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008684:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800868c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008690:	1d3b      	adds	r3, r7, #4
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	463b      	mov	r3, r7
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	441a      	add	r2, r3
 800869e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80086a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d020      	beq.n	8008716 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ea:	81bb      	strh	r3, [r7, #12]
 80086ec:	89bb      	ldrh	r3, [r7, #12]
 80086ee:	f083 0310 	eor.w	r3, r3, #16
 80086f2:	81bb      	strh	r3, [r7, #12]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	89bb      	ldrh	r3, [r7, #12]
 8008700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]
 8008714:	e01f      	b.n	8008756 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872c:	81fb      	strh	r3, [r7, #14]
 800872e:	89fb      	ldrh	r3, [r7, #14]
 8008730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008734:	81fb      	strh	r3, [r7, #14]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	441a      	add	r2, r3
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800874a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800874e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008752:	b29b      	uxth	r3, r3
 8008754:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr

08008762 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008762:	b480      	push	{r7}
 8008764:	b087      	sub	sp, #28
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	7b1b      	ldrb	r3, [r3, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f040 809d 	bne.w	80088b0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d04c      	beq.n	8008818 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	823b      	strh	r3, [r7, #16]
 800878c:	8a3b      	ldrh	r3, [r7, #16]
 800878e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01b      	beq.n	80087ce <USB_EPClearStall+0x6c>
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ac:	81fb      	strh	r3, [r7, #14]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	441a      	add	r2, r3
 80087b8:	89fb      	ldrh	r3, [r7, #14]
 80087ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	78db      	ldrb	r3, [r3, #3]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d06c      	beq.n	80088b0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ec:	81bb      	strh	r3, [r7, #12]
 80087ee:	89bb      	ldrh	r3, [r7, #12]
 80087f0:	f083 0320 	eor.w	r3, r3, #32
 80087f4:	81bb      	strh	r3, [r7, #12]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	441a      	add	r2, r3
 8008800:	89bb      	ldrh	r3, [r7, #12]
 8008802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008812:	b29b      	uxth	r3, r3
 8008814:	8013      	strh	r3, [r2, #0]
 8008816:	e04b      	b.n	80088b0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	82fb      	strh	r3, [r7, #22]
 8008826:	8afb      	ldrh	r3, [r7, #22]
 8008828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01b      	beq.n	8008868 <USB_EPClearStall+0x106>
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008846:	82bb      	strh	r3, [r7, #20]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	441a      	add	r2, r3
 8008852:	8abb      	ldrh	r3, [r7, #20]
 8008854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800885c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008864:	b29b      	uxth	r3, r3
 8008866:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	827b      	strh	r3, [r7, #18]
 8008880:	8a7b      	ldrh	r3, [r7, #18]
 8008882:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008886:	827b      	strh	r3, [r7, #18]
 8008888:	8a7b      	ldrh	r3, [r7, #18]
 800888a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800888e:	827b      	strh	r3, [r7, #18]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	441a      	add	r2, r3
 800889a:	8a7b      	ldrh	r3, [r7, #18]
 800889c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr

080088bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bc80      	pop	{r7}
 80088f4:	4770      	bx	lr

080088f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr

0800890a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008918:	b29b      	uxth	r3, r3
 800891a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800891c:	68fb      	ldr	r3, [r7, #12]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	bc80      	pop	{r7}
 8008926:	4770      	bx	lr

08008928 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr

0800893e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800893e:	b480      	push	{r7}
 8008940:	b08d      	sub	sp, #52	; 0x34
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	4611      	mov	r1, r2
 800894a:	461a      	mov	r2, r3
 800894c:	460b      	mov	r3, r1
 800894e:	80fb      	strh	r3, [r7, #6]
 8008950:	4613      	mov	r3, r2
 8008952:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008954:	88bb      	ldrh	r3, [r7, #4]
 8008956:	3301      	adds	r3, #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	005a      	lsls	r2, r3, #1
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008970:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008976:	e01e      	b.n	80089b6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	3301      	adds	r3, #1
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	b29b      	uxth	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	b29a      	uxth	r2, r3
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	3302      	adds	r3, #2
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	3302      	adds	r3, #2
 80089a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	3301      	adds	r3, #1
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	3b01      	subs	r3, #1
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1dd      	bne.n	8008978 <USB_WritePMA+0x3a>
  }
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	3734      	adds	r7, #52	; 0x34
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b08b      	sub	sp, #44	; 0x2c
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4611      	mov	r1, r2
 80089d4:	461a      	mov	r2, r3
 80089d6:	460b      	mov	r3, r1
 80089d8:	80fb      	strh	r3, [r7, #6]
 80089da:	4613      	mov	r3, r2
 80089dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089de:	88bb      	ldrh	r3, [r7, #4]
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	005a      	lsls	r2, r3, #1
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008a00:	e01b      	b.n	8008a3a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	3302      	adds	r3, #2
 8008a0e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	0a1b      	lsrs	r3, r3, #8
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	3302      	adds	r3, #2
 8008a32:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	3b01      	subs	r3, #1
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e0      	bne.n	8008a02 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008a40:	88bb      	ldrh	r3, [r7, #4]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d007      	beq.n	8008a5c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	372c      	adds	r7, #44	; 0x2c
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr

08008a66 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7c1b      	ldrb	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d115      	bne.n	8008aaa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a82:	2202      	movs	r2, #2
 8008a84:	2181      	movs	r1, #129	; 0x81
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fea1 	bl	800a7ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a96:	2202      	movs	r2, #2
 8008a98:	2101      	movs	r1, #1
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fe97 	bl	800a7ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008aa8:	e012      	b.n	8008ad0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008aaa:	2340      	movs	r3, #64	; 0x40
 8008aac:	2202      	movs	r2, #2
 8008aae:	2181      	movs	r1, #129	; 0x81
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fe8c 	bl	800a7ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	2202      	movs	r2, #2
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 fe83 	bl	800a7ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	2182      	movs	r1, #130	; 0x82
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fe79 	bl	800a7ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ae2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ae6:	f001 ff99 	bl	800aa1c <USBD_static_malloc>
 8008aea:	4602      	mov	r2, r0
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008afc:	2301      	movs	r3, #1
 8008afe:	73fb      	strb	r3, [r7, #15]
 8008b00:	e026      	b.n	8008b50 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b08:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	7c1b      	ldrb	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d109      	bne.n	8008b40 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b36:	2101      	movs	r1, #1
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 ff39 	bl	800a9b0 <USBD_LL_PrepareReceive>
 8008b3e:	e007      	b.n	8008b50 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	2101      	movs	r1, #1
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 ff30 	bl	800a9b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b6a:	2181      	movs	r1, #129	; 0x81
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fe54 	bl	800a81a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b78:	2101      	movs	r1, #1
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 fe4d 	bl	800a81a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b88:	2182      	movs	r1, #130	; 0x82
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fe45 	bl	800a81a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00e      	beq.n	8008bbe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 ff3f 	bl	800aa34 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d039      	beq.n	8008c66 <USBD_CDC_Setup+0x9e>
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d17f      	bne.n	8008cf6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	88db      	ldrh	r3, [r3, #6]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d029      	beq.n	8008c52 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da11      	bge.n	8008c2c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008c14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	88d2      	ldrh	r2, [r2, #6]
 8008c1a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c1c:	6939      	ldr	r1, [r7, #16]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	461a      	mov	r2, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 fa0a 	bl	800a03e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008c2a:	e06b      	b.n	8008d04 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	785a      	ldrb	r2, [r3, #1]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	88db      	ldrh	r3, [r3, #6]
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c42:	6939      	ldr	r1, [r7, #16]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	88db      	ldrh	r3, [r3, #6]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 fa25 	bl	800a09a <USBD_CtlPrepareRx>
      break;
 8008c50:	e058      	b.n	8008d04 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	7850      	ldrb	r0, [r2, #1]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	4798      	blx	r3
      break;
 8008c64:	e04e      	b.n	8008d04 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b0b      	cmp	r3, #11
 8008c6c:	d02e      	beq.n	8008ccc <USBD_CDC_Setup+0x104>
 8008c6e:	2b0b      	cmp	r3, #11
 8008c70:	dc38      	bgt.n	8008ce4 <USBD_CDC_Setup+0x11c>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <USBD_CDC_Setup+0xb4>
 8008c76:	2b0a      	cmp	r3, #10
 8008c78:	d014      	beq.n	8008ca4 <USBD_CDC_Setup+0xdc>
 8008c7a:	e033      	b.n	8008ce4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d107      	bne.n	8008c96 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c86:	f107 030c 	add.w	r3, r7, #12
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 f9d5 	bl	800a03e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c94:	e02e      	b.n	8008cf4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f966 	bl	8009f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ca2:	e027      	b.n	8008cf4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d107      	bne.n	8008cbe <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cae:	f107 030f 	add.w	r3, r7, #15
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 f9c1 	bl	800a03e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cbc:	e01a      	b.n	8008cf4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 f952 	bl	8009f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cca:	e013      	b.n	8008cf4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d00d      	beq.n	8008cf2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f946 	bl	8009f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ce2:	e006      	b.n	8008cf2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 f93f 	bl	8009f6a <USBD_CtlError>
          ret = USBD_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf0:	e000      	b.n	8008cf4 <USBD_CDC_Setup+0x12c>
          break;
 8008cf2:	bf00      	nop
      }
      break;
 8008cf4:	e006      	b.n	8008d04 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f936 	bl	8009f6a <USBD_CtlError>
      ret = USBD_FAIL;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	75fb      	strb	r3, [r7, #23]
      break;
 8008d02:	bf00      	nop
  }

  return ret;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d20:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d28:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d03a      	beq.n	8008daa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	440b      	add	r3, r1
 8008d42:	331c      	adds	r3, #28
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d029      	beq.n	8008d9e <USBD_CDC_DataIn+0x90>
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	440b      	add	r3, r1
 8008d58:	331c      	adds	r3, #28
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	78f9      	ldrb	r1, [r7, #3]
 8008d5e:	68b8      	ldr	r0, [r7, #8]
 8008d60:	460b      	mov	r3, r1
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4403      	add	r3, r0
 8008d6a:	3338      	adds	r3, #56	; 0x38
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d72:	fb03 f301 	mul.w	r3, r3, r1
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d110      	bne.n	8008d9e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	331c      	adds	r3, #28
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d90:	78f9      	ldrb	r1, [r7, #3]
 8008d92:	2300      	movs	r3, #0
 8008d94:	2200      	movs	r2, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fde7 	bl	800a96a <USBD_LL_Transmit>
 8008d9c:	e003      	b.n	8008da6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008daa:	2302      	movs	r3, #2
  }
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fe12 	bl	800a9f6 <USBD_LL_GetRxDataSize>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00d      	beq.n	8008e00 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4798      	blx	r3

    return USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e000      	b.n	8008e02 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008e00:	2302      	movs	r3, #2
  }
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e18:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d015      	beq.n	8008e50 <USBD_CDC_EP0_RxReady+0x46>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e2a:	2bff      	cmp	r3, #255	; 0xff
 8008e2c:	d010      	beq.n	8008e50 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008e3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e44:	b292      	uxth	r2, r2
 8008e46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	22ff      	movs	r2, #255	; 0xff
 8008e4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2243      	movs	r2, #67	; 0x43
 8008e68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc80      	pop	{r7}
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000094 	.word	0x20000094

08008e7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2243      	movs	r2, #67	; 0x43
 8008e88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e8a:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20000050 	.word	0x20000050

08008e9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2243      	movs	r2, #67	; 0x43
 8008ea8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008eaa:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	200000d8 	.word	0x200000d8

08008ebc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	220a      	movs	r2, #10
 8008ec8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	2000000c 	.word	0x2000000c

08008edc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr

08008f08 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr

08008f3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr

08008f60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01c      	beq.n	8008fb4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d115      	bne.n	8008fb0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	2181      	movs	r1, #129	; 0x81
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fcdf 	bl	800a96a <USBD_LL_Transmit>

      return USBD_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e002      	b.n	8008fb6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008fb4:	2302      	movs	r3, #2
  }
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d017      	beq.n	8009008 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7c1b      	ldrb	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fea:	2101      	movs	r1, #1
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 fcdf 	bl	800a9b0 <USBD_LL_PrepareReceive>
 8008ff2:	e007      	b.n	8009004 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ffa:	2340      	movs	r3, #64	; 0x40
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 fcd6 	bl	800a9b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	e000      	b.n	800900a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009008:	2302      	movs	r3, #2
  }
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	4613      	mov	r3, r2
 800901e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009026:	2302      	movs	r3, #2
 8009028:	e01a      	b.n	8009060 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	79fa      	ldrb	r2, [r7, #7]
 8009056:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f001 fb43 	bl	800a6e4 <USBD_LL_Init>

  return USBD_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d006      	beq.n	800908a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
 8009088:	e001      	b.n	800908e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800908a:	2302      	movs	r3, #2
 800908c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr

0800909a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 fb78 	bl	800a798 <USBD_LL_Start>

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00c      	beq.n	80090fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	78fa      	ldrb	r2, [r7, #3]
 80090ea:	4611      	mov	r1, r2
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	4611      	mov	r1, r2
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fed8 	bl	8009ef2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009150:	461a      	mov	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800915e:	f003 031f 	and.w	r3, r3, #31
 8009162:	2b02      	cmp	r3, #2
 8009164:	d016      	beq.n	8009194 <USBD_LL_SetupStage+0x6a>
 8009166:	2b02      	cmp	r3, #2
 8009168:	d81c      	bhi.n	80091a4 <USBD_LL_SetupStage+0x7a>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <USBD_LL_SetupStage+0x4a>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d008      	beq.n	8009184 <USBD_LL_SetupStage+0x5a>
 8009172:	e017      	b.n	80091a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f9cb 	bl	8009518 <USBD_StdDevReq>
      break;
 8009182:	e01a      	b.n	80091ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fa2d 	bl	80095ec <USBD_StdItfReq>
      break;
 8009192:	e012      	b.n	80091ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa6d 	bl	800967c <USBD_StdEPReq>
      break;
 80091a2:	e00a      	b.n	80091ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80091aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 fb50 	bl	800a858 <USBD_LL_StallEP>
      break;
 80091b8:	bf00      	nop
  }

  return USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	460b      	mov	r3, r1
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d14b      	bne.n	8009270 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d134      	bne.n	8009254 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d919      	bls.n	800922a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	68da      	ldr	r2, [r3, #12]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800920c:	429a      	cmp	r2, r3
 800920e:	d203      	bcs.n	8009218 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009214:	b29b      	uxth	r3, r3
 8009216:	e002      	b.n	800921e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800921c:	b29b      	uxth	r3, r3
 800921e:	461a      	mov	r2, r3
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 ff57 	bl	800a0d6 <USBD_CtlContinueRx>
 8009228:	e038      	b.n	800929c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800923c:	2b03      	cmp	r3, #3
 800923e:	d105      	bne.n	800924c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 ff54 	bl	800a0fa <USBD_CtlSendStatus>
 8009252:	e023      	b.n	800929c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800925a:	2b05      	cmp	r3, #5
 800925c:	d11e      	bne.n	800929c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f001 faf5 	bl	800a858 <USBD_LL_StallEP>
 800926e:	e015      	b.n	800929c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00d      	beq.n	8009298 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009282:	2b03      	cmp	r3, #3
 8009284:	d108      	bne.n	8009298 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	7afa      	ldrb	r2, [r7, #11]
 8009290:	4611      	mov	r1, r2
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	4798      	blx	r3
 8009296:	e001      	b.n	800929c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009298:	2302      	movs	r3, #2
 800929a:	e000      	b.n	800929e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b086      	sub	sp, #24
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	460b      	mov	r3, r1
 80092b0:	607a      	str	r2, [r7, #4]
 80092b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d17f      	bne.n	80093ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3314      	adds	r3, #20
 80092be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d15c      	bne.n	8009384 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d915      	bls.n	8009302 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	461a      	mov	r2, r3
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 fec1 	bl	800a076 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092f4:	2300      	movs	r3, #0
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f001 fb58 	bl	800a9b0 <USBD_LL_PrepareReceive>
 8009300:	e04e      	b.n	80093a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	6912      	ldr	r2, [r2, #16]
 800930a:	fbb3 f1f2 	udiv	r1, r3, r2
 800930e:	fb02 f201 	mul.w	r2, r2, r1
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11c      	bne.n	8009352 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009320:	429a      	cmp	r2, r3
 8009322:	d316      	bcc.n	8009352 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800932e:	429a      	cmp	r2, r3
 8009330:	d20f      	bcs.n	8009352 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009332:	2200      	movs	r2, #0
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fe9d 	bl	800a076 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009344:	2300      	movs	r3, #0
 8009346:	2200      	movs	r2, #0
 8009348:	2100      	movs	r1, #0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f001 fb30 	bl	800a9b0 <USBD_LL_PrepareReceive>
 8009350:	e026      	b.n	80093a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009364:	2b03      	cmp	r3, #3
 8009366:	d105      	bne.n	8009374 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009374:	2180      	movs	r1, #128	; 0x80
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f001 fa6e 	bl	800a858 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 fecf 	bl	800a120 <USBD_CtlReceiveStatus>
 8009382:	e00d      	b.n	80093a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800938a:	2b04      	cmp	r3, #4
 800938c:	d004      	beq.n	8009398 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009398:	2180      	movs	r1, #128	; 0x80
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f001 fa5c 	bl	800a858 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d11d      	bne.n	80093e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fe81 	bl	80090b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093b8:	e015      	b.n	80093e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d108      	bne.n	80093e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	7afa      	ldrb	r2, [r7, #11]
 80093da:	4611      	mov	r1, r2
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	4798      	blx	r3
 80093e0:	e001      	b.n	80093e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	e000      	b.n	80093e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	2200      	movs	r2, #0
 80093fc:	2100      	movs	r1, #0
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f9e5 	bl	800a7ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2240      	movs	r2, #64	; 0x40
 8009410:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	2200      	movs	r2, #0
 8009418:	2180      	movs	r1, #128	; 0x80
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f9d7 	bl	800a7ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2240      	movs	r2, #64	; 0x40
 800942a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d009      	beq.n	8009468 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6852      	ldr	r2, [r2, #4]
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	4611      	mov	r1, r2
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	4798      	blx	r3
  }

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009472:	b480      	push	{r7}
 8009474:	b083      	sub	sp, #12
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr

08009490 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2204      	movs	r2, #4
 80094a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d105      	bne.n	80094d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr

080094e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d10b      	bne.n	800950c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800952e:	2b40      	cmp	r3, #64	; 0x40
 8009530:	d005      	beq.n	800953e <USBD_StdDevReq+0x26>
 8009532:	2b40      	cmp	r3, #64	; 0x40
 8009534:	d84f      	bhi.n	80095d6 <USBD_StdDevReq+0xbe>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d009      	beq.n	800954e <USBD_StdDevReq+0x36>
 800953a:	2b20      	cmp	r3, #32
 800953c:	d14b      	bne.n	80095d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
      break;
 800954c:	e048      	b.n	80095e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	785b      	ldrb	r3, [r3, #1]
 8009552:	2b09      	cmp	r3, #9
 8009554:	d839      	bhi.n	80095ca <USBD_StdDevReq+0xb2>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <USBD_StdDevReq+0x44>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	080095ad 	.word	0x080095ad
 8009560:	080095c1 	.word	0x080095c1
 8009564:	080095cb 	.word	0x080095cb
 8009568:	080095b7 	.word	0x080095b7
 800956c:	080095cb 	.word	0x080095cb
 8009570:	0800958f 	.word	0x0800958f
 8009574:	08009585 	.word	0x08009585
 8009578:	080095cb 	.word	0x080095cb
 800957c:	080095a3 	.word	0x080095a3
 8009580:	08009599 	.word	0x08009599
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f9dc 	bl	8009944 <USBD_GetDescriptor>
          break;
 800958c:	e022      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fb3f 	bl	8009c14 <USBD_SetAddress>
          break;
 8009596:	e01d      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fb7e 	bl	8009c9c <USBD_SetConfig>
          break;
 80095a0:	e018      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fc07 	bl	8009db8 <USBD_GetConfig>
          break;
 80095aa:	e013      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fc37 	bl	8009e22 <USBD_GetStatus>
          break;
 80095b4:	e00e      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fc65 	bl	8009e88 <USBD_SetFeature>
          break;
 80095be:	e009      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fc74 	bl	8009eb0 <USBD_ClrFeature>
          break;
 80095c8:	e004      	b.n	80095d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fccc 	bl	8009f6a <USBD_CtlError>
          break;
 80095d2:	bf00      	nop
      }
      break;
 80095d4:	e004      	b.n	80095e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fcc6 	bl	8009f6a <USBD_CtlError>
      break;
 80095de:	bf00      	nop
  }

  return ret;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop

080095ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009602:	2b40      	cmp	r3, #64	; 0x40
 8009604:	d005      	beq.n	8009612 <USBD_StdItfReq+0x26>
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d82e      	bhi.n	8009668 <USBD_StdItfReq+0x7c>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <USBD_StdItfReq+0x26>
 800960e:	2b20      	cmp	r3, #32
 8009610:	d12a      	bne.n	8009668 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009618:	3b01      	subs	r3, #1
 800961a:	2b02      	cmp	r3, #2
 800961c:	d81d      	bhi.n	800965a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	889b      	ldrh	r3, [r3, #4]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	d813      	bhi.n	8009650 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	88db      	ldrh	r3, [r3, #6]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d110      	bne.n	8009664 <USBD_StdItfReq+0x78>
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10d      	bne.n	8009664 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fd56 	bl	800a0fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800964e:	e009      	b.n	8009664 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fc89 	bl	8009f6a <USBD_CtlError>
          break;
 8009658:	e004      	b.n	8009664 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc84 	bl	8009f6a <USBD_CtlError>
          break;
 8009662:	e000      	b.n	8009666 <USBD_StdItfReq+0x7a>
          break;
 8009664:	bf00      	nop
      }
      break;
 8009666:	e004      	b.n	8009672 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fc7d 	bl	8009f6a <USBD_CtlError>
      break;
 8009670:	bf00      	nop
  }

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	889b      	ldrh	r3, [r3, #4]
 800968e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d007      	beq.n	80096ac <USBD_StdEPReq+0x30>
 800969c:	2b40      	cmp	r3, #64	; 0x40
 800969e:	f200 8146 	bhi.w	800992e <USBD_StdEPReq+0x2b2>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <USBD_StdEPReq+0x40>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	f040 8141 	bne.w	800992e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
      break;
 80096ba:	e13d      	b.n	8009938 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d10a      	bne.n	80096de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	e12d      	b.n	800993a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	785b      	ldrb	r3, [r3, #1]
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d007      	beq.n	80096f6 <USBD_StdEPReq+0x7a>
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	f300 811b 	bgt.w	8009922 <USBD_StdEPReq+0x2a6>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d072      	beq.n	80097d6 <USBD_StdEPReq+0x15a>
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d03a      	beq.n	800976a <USBD_StdEPReq+0xee>
 80096f4:	e115      	b.n	8009922 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d002      	beq.n	8009706 <USBD_StdEPReq+0x8a>
 8009700:	2b03      	cmp	r3, #3
 8009702:	d015      	beq.n	8009730 <USBD_StdEPReq+0xb4>
 8009704:	e02b      	b.n	800975e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00c      	beq.n	8009726 <USBD_StdEPReq+0xaa>
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	2b80      	cmp	r3, #128	; 0x80
 8009710:	d009      	beq.n	8009726 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 f89e 	bl	800a858 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800971c:	2180      	movs	r1, #128	; 0x80
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 f89a 	bl	800a858 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009724:	e020      	b.n	8009768 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fc1e 	bl	8009f6a <USBD_CtlError>
              break;
 800972e:	e01b      	b.n	8009768 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	885b      	ldrh	r3, [r3, #2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10e      	bne.n	8009756 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <USBD_StdEPReq+0xda>
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b80      	cmp	r3, #128	; 0x80
 8009742:	d008      	beq.n	8009756 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	88db      	ldrh	r3, [r3, #6]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 f881 	bl	800a858 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fccf 	bl	800a0fa <USBD_CtlSendStatus>

              break;
 800975c:	e004      	b.n	8009768 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fc02 	bl	8009f6a <USBD_CtlError>
              break;
 8009766:	bf00      	nop
          }
          break;
 8009768:	e0e0      	b.n	800992c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009770:	2b02      	cmp	r3, #2
 8009772:	d002      	beq.n	800977a <USBD_StdEPReq+0xfe>
 8009774:	2b03      	cmp	r3, #3
 8009776:	d015      	beq.n	80097a4 <USBD_StdEPReq+0x128>
 8009778:	e026      	b.n	80097c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00c      	beq.n	800979a <USBD_StdEPReq+0x11e>
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b80      	cmp	r3, #128	; 0x80
 8009784:	d009      	beq.n	800979a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f864 	bl	800a858 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009790:	2180      	movs	r1, #128	; 0x80
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 f860 	bl	800a858 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009798:	e01c      	b.n	80097d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fbe4 	bl	8009f6a <USBD_CtlError>
              break;
 80097a2:	e017      	b.n	80097d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	885b      	ldrh	r3, [r3, #2]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d112      	bne.n	80097d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 f86b 	bl	800a896 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc9a 	bl	800a0fa <USBD_CtlSendStatus>
              }
              break;
 80097c6:	e004      	b.n	80097d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fbcd 	bl	8009f6a <USBD_CtlError>
              break;
 80097d0:	e000      	b.n	80097d4 <USBD_StdEPReq+0x158>
              break;
 80097d2:	bf00      	nop
          }
          break;
 80097d4:	e0aa      	b.n	800992c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d002      	beq.n	80097e6 <USBD_StdEPReq+0x16a>
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d032      	beq.n	800984a <USBD_StdEPReq+0x1ce>
 80097e4:	e097      	b.n	8009916 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d007      	beq.n	80097fc <USBD_StdEPReq+0x180>
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b80      	cmp	r3, #128	; 0x80
 80097f0:	d004      	beq.n	80097fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fbb8 	bl	8009f6a <USBD_CtlError>
                break;
 80097fa:	e091      	b.n	8009920 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009800:	2b00      	cmp	r3, #0
 8009802:	da0b      	bge.n	800981c <USBD_StdEPReq+0x1a0>
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	3310      	adds	r3, #16
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	4413      	add	r3, r2
 8009818:	3304      	adds	r3, #4
 800981a:	e00b      	b.n	8009834 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	3304      	adds	r3, #4
 8009834:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2202      	movs	r2, #2
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fbfb 	bl	800a03e <USBD_CtlSendData>
              break;
 8009848:	e06a      	b.n	8009920 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800984a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800984e:	2b00      	cmp	r3, #0
 8009850:	da11      	bge.n	8009876 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	f003 020f 	and.w	r2, r3, #15
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	3318      	adds	r3, #24
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d117      	bne.n	800989c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fb7b 	bl	8009f6a <USBD_CtlError>
                  break;
 8009874:	e054      	b.n	8009920 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fb68 	bl	8009f6a <USBD_CtlError>
                  break;
 800989a:	e041      	b.n	8009920 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da0b      	bge.n	80098bc <USBD_StdEPReq+0x240>
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	3310      	adds	r3, #16
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	4413      	add	r3, r2
 80098b8:	3304      	adds	r3, #4
 80098ba:	e00b      	b.n	80098d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	3304      	adds	r3, #4
 80098d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <USBD_StdEPReq+0x266>
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b80      	cmp	r3, #128	; 0x80
 80098e0:	d103      	bne.n	80098ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e00e      	b.n	8009908 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fff0 	bl	800a8d4 <USBD_LL_IsStallEP>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2201      	movs	r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	e002      	b.n	8009908 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2200      	movs	r2, #0
 8009906:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2202      	movs	r2, #2
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fb95 	bl	800a03e <USBD_CtlSendData>
              break;
 8009914:	e004      	b.n	8009920 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fb26 	bl	8009f6a <USBD_CtlError>
              break;
 800991e:	bf00      	nop
          }
          break;
 8009920:	e004      	b.n	800992c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb20 	bl	8009f6a <USBD_CtlError>
          break;
 800992a:	bf00      	nop
      }
      break;
 800992c:	e004      	b.n	8009938 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fb1a 	bl	8009f6a <USBD_CtlError>
      break;
 8009936:	bf00      	nop
  }

  return ret;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	885b      	ldrh	r3, [r3, #2]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	2b06      	cmp	r3, #6
 8009966:	f200 8128 	bhi.w	8009bba <USBD_GetDescriptor+0x276>
 800996a:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <USBD_GetDescriptor+0x2c>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	0800998d 	.word	0x0800998d
 8009974:	080099a5 	.word	0x080099a5
 8009978:	080099e5 	.word	0x080099e5
 800997c:	08009bbb 	.word	0x08009bbb
 8009980:	08009bbb 	.word	0x08009bbb
 8009984:	08009b5b 	.word	0x08009b5b
 8009988:	08009b87 	.word	0x08009b87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	7c12      	ldrb	r2, [r2, #16]
 8009998:	f107 0108 	add.w	r1, r7, #8
 800999c:	4610      	mov	r0, r2
 800999e:	4798      	blx	r3
 80099a0:	60f8      	str	r0, [r7, #12]
      break;
 80099a2:	e112      	b.n	8009bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	7c1b      	ldrb	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10d      	bne.n	80099c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b4:	f107 0208 	add.w	r2, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3301      	adds	r3, #1
 80099c2:	2202      	movs	r2, #2
 80099c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099c6:	e100      	b.n	8009bca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	f107 0208 	add.w	r2, r7, #8
 80099d4:	4610      	mov	r0, r2
 80099d6:	4798      	blx	r3
 80099d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	2202      	movs	r2, #2
 80099e0:	701a      	strb	r2, [r3, #0]
      break;
 80099e2:	e0f2      	b.n	8009bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	885b      	ldrh	r3, [r3, #2]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b05      	cmp	r3, #5
 80099ec:	f200 80ac 	bhi.w	8009b48 <USBD_GetDescriptor+0x204>
 80099f0:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBD_GetDescriptor+0xb4>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a11 	.word	0x08009a11
 80099fc:	08009a45 	.word	0x08009a45
 8009a00:	08009a79 	.word	0x08009a79
 8009a04:	08009aad 	.word	0x08009aad
 8009a08:	08009ae1 	.word	0x08009ae1
 8009a0c:	08009b15 	.word	0x08009b15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00b      	beq.n	8009a34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	7c12      	ldrb	r2, [r2, #16]
 8009a28:	f107 0108 	add.w	r1, r7, #8
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
 8009a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a32:	e091      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa97 	bl	8009f6a <USBD_CtlError>
            err++;
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	72fb      	strb	r3, [r7, #11]
          break;
 8009a42:	e089      	b.n	8009b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	7c12      	ldrb	r2, [r2, #16]
 8009a5c:	f107 0108 	add.w	r1, r7, #8
 8009a60:	4610      	mov	r0, r2
 8009a62:	4798      	blx	r3
 8009a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a66:	e077      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa7d 	bl	8009f6a <USBD_CtlError>
            err++;
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	3301      	adds	r3, #1
 8009a74:	72fb      	strb	r3, [r7, #11]
          break;
 8009a76:	e06f      	b.n	8009b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	7c12      	ldrb	r2, [r2, #16]
 8009a90:	f107 0108 	add.w	r1, r7, #8
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
 8009a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a9a:	e05d      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa63 	bl	8009f6a <USBD_CtlError>
            err++;
 8009aa4:	7afb      	ldrb	r3, [r7, #11]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aaa:	e055      	b.n	8009b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	7c12      	ldrb	r2, [r2, #16]
 8009ac4:	f107 0108 	add.w	r1, r7, #8
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4798      	blx	r3
 8009acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ace:	e043      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fa49 	bl	8009f6a <USBD_CtlError>
            err++;
 8009ad8:	7afb      	ldrb	r3, [r7, #11]
 8009ada:	3301      	adds	r3, #1
 8009adc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ade:	e03b      	b.n	8009b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	7c12      	ldrb	r2, [r2, #16]
 8009af8:	f107 0108 	add.w	r1, r7, #8
 8009afc:	4610      	mov	r0, r2
 8009afe:	4798      	blx	r3
 8009b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b02:	e029      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa2f 	bl	8009f6a <USBD_CtlError>
            err++;
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	72fb      	strb	r3, [r7, #11]
          break;
 8009b12:	e021      	b.n	8009b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	7c12      	ldrb	r2, [r2, #16]
 8009b2c:	f107 0108 	add.w	r1, r7, #8
 8009b30:	4610      	mov	r0, r2
 8009b32:	4798      	blx	r3
 8009b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b36:	e00f      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fa15 	bl	8009f6a <USBD_CtlError>
            err++;
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	3301      	adds	r3, #1
 8009b44:	72fb      	strb	r3, [r7, #11]
          break;
 8009b46:	e007      	b.n	8009b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fa0d 	bl	8009f6a <USBD_CtlError>
          err++;
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	3301      	adds	r3, #1
 8009b54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b56:	e038      	b.n	8009bca <USBD_GetDescriptor+0x286>
 8009b58:	e037      	b.n	8009bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	7c1b      	ldrb	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d109      	bne.n	8009b76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	f107 0208 	add.w	r2, r7, #8
 8009b6e:	4610      	mov	r0, r2
 8009b70:	4798      	blx	r3
 8009b72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b74:	e029      	b.n	8009bca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f9f6 	bl	8009f6a <USBD_CtlError>
        err++;
 8009b7e:	7afb      	ldrb	r3, [r7, #11]
 8009b80:	3301      	adds	r3, #1
 8009b82:	72fb      	strb	r3, [r7, #11]
      break;
 8009b84:	e021      	b.n	8009bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7c1b      	ldrb	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10d      	bne.n	8009baa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	f107 0208 	add.w	r2, r7, #8
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4798      	blx	r3
 8009b9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	2207      	movs	r2, #7
 8009ba6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ba8:	e00f      	b.n	8009bca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f9dc 	bl	8009f6a <USBD_CtlError>
        err++;
 8009bb2:	7afb      	ldrb	r3, [r7, #11]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8009bb8:	e007      	b.n	8009bca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9d4 	bl	8009f6a <USBD_CtlError>
      err++;
 8009bc2:	7afb      	ldrb	r3, [r7, #11]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009bc8:	bf00      	nop
  }

  if (err != 0U)
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d11c      	bne.n	8009c0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009bd0:	893b      	ldrh	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d011      	beq.n	8009bfa <USBD_GetDescriptor+0x2b6>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	88db      	ldrh	r3, [r3, #6]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00d      	beq.n	8009bfa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	88da      	ldrh	r2, [r3, #6]
 8009be2:	893b      	ldrh	r3, [r7, #8]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	bf28      	it	cs
 8009be8:	4613      	movcs	r3, r2
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bee:	893b      	ldrh	r3, [r7, #8]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fa22 	bl	800a03e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	88db      	ldrh	r3, [r3, #6]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa79 	bl	800a0fa <USBD_CtlSendStatus>
 8009c08:	e000      	b.n	8009c0c <USBD_GetDescriptor+0x2c8>
    return;
 8009c0a:	bf00      	nop
    }
  }
}
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop

08009c14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	889b      	ldrh	r3, [r3, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d130      	bne.n	8009c88 <USBD_SetAddress+0x74>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88db      	ldrh	r3, [r3, #6]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d12c      	bne.n	8009c88 <USBD_SetAddress+0x74>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	2b7f      	cmp	r3, #127	; 0x7f
 8009c34:	d828      	bhi.n	8009c88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	885b      	ldrh	r3, [r3, #2]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d104      	bne.n	8009c56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f98b 	bl	8009f6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c54:	e01d      	b.n	8009c92 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	7bfa      	ldrb	r2, [r7, #15]
 8009c5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fe62 	bl	800a92c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fa46 	bl	800a0fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7c:	e009      	b.n	8009c92 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c86:	e004      	b.n	8009c92 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f96d 	bl	8009f6a <USBD_CtlError>
  }
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	4b41      	ldr	r3, [pc, #260]	; (8009db4 <USBD_SetConfig+0x118>)
 8009cae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cb0:	4b40      	ldr	r3, [pc, #256]	; (8009db4 <USBD_SetConfig+0x118>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d904      	bls.n	8009cc2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f955 	bl	8009f6a <USBD_CtlError>
 8009cc0:	e075      	b.n	8009dae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d002      	beq.n	8009cd2 <USBD_SetConfig+0x36>
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d023      	beq.n	8009d18 <USBD_SetConfig+0x7c>
 8009cd0:	e062      	b.n	8009d98 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009cd2:	4b38      	ldr	r3, [pc, #224]	; (8009db4 <USBD_SetConfig+0x118>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d01a      	beq.n	8009d10 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009cda:	4b36      	ldr	r3, [pc, #216]	; (8009db4 <USBD_SetConfig+0x118>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2203      	movs	r2, #3
 8009ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009cec:	4b31      	ldr	r3, [pc, #196]	; (8009db4 <USBD_SetConfig+0x118>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff f9e7 	bl	80090c6 <USBD_SetClassConfig>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d104      	bne.n	8009d08 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f932 	bl	8009f6a <USBD_CtlError>
            return;
 8009d06:	e052      	b.n	8009dae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f9f6 	bl	800a0fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d0e:	e04e      	b.n	8009dae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9f2 	bl	800a0fa <USBD_CtlSendStatus>
        break;
 8009d16:	e04a      	b.n	8009dae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d18:	4b26      	ldr	r3, [pc, #152]	; (8009db4 <USBD_SetConfig+0x118>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d112      	bne.n	8009d46 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009d28:	4b22      	ldr	r3, [pc, #136]	; (8009db4 <USBD_SetConfig+0x118>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d32:	4b20      	ldr	r3, [pc, #128]	; (8009db4 <USBD_SetConfig+0x118>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff f9e3 	bl	8009104 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9db 	bl	800a0fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d44:	e033      	b.n	8009dae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009d46:	4b1b      	ldr	r3, [pc, #108]	; (8009db4 <USBD_SetConfig+0x118>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d01d      	beq.n	8009d90 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff f9d1 	bl	8009104 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d62:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <USBD_SetConfig+0x118>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d6c:	4b11      	ldr	r3, [pc, #68]	; (8009db4 <USBD_SetConfig+0x118>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7ff f9a7 	bl	80090c6 <USBD_SetClassConfig>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d104      	bne.n	8009d88 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f8f2 	bl	8009f6a <USBD_CtlError>
            return;
 8009d86:	e012      	b.n	8009dae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f9b6 	bl	800a0fa <USBD_CtlSendStatus>
        break;
 8009d8e:	e00e      	b.n	8009dae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f9b2 	bl	800a0fa <USBD_CtlSendStatus>
        break;
 8009d96:	e00a      	b.n	8009dae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f8e5 	bl	8009f6a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009da0:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <USBD_SetConfig+0x118>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff f9ac 	bl	8009104 <USBD_ClrClassConfig>
        break;
 8009dac:	bf00      	nop
    }
  }
}
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000198 	.word	0x20000198

08009db8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	88db      	ldrh	r3, [r3, #6]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d004      	beq.n	8009dd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f8cc 	bl	8009f6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dd2:	e022      	b.n	8009e1a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	dc02      	bgt.n	8009de4 <USBD_GetConfig+0x2c>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc03      	bgt.n	8009dea <USBD_GetConfig+0x32>
 8009de2:	e015      	b.n	8009e10 <USBD_GetConfig+0x58>
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d00b      	beq.n	8009e00 <USBD_GetConfig+0x48>
 8009de8:	e012      	b.n	8009e10 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3308      	adds	r3, #8
 8009df4:	2201      	movs	r2, #1
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f920 	bl	800a03e <USBD_CtlSendData>
        break;
 8009dfe:	e00c      	b.n	8009e1a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	2201      	movs	r2, #1
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f918 	bl	800a03e <USBD_CtlSendData>
        break;
 8009e0e:	e004      	b.n	8009e1a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f8a9 	bl	8009f6a <USBD_CtlError>
        break;
 8009e18:	bf00      	nop
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e32:	3b01      	subs	r3, #1
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d81e      	bhi.n	8009e76 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	88db      	ldrh	r3, [r3, #6]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d004      	beq.n	8009e4a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f891 	bl	8009f6a <USBD_CtlError>
        break;
 8009e48:	e01a      	b.n	8009e80 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f043 0202 	orr.w	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f8e5 	bl	800a03e <USBD_CtlSendData>
      break;
 8009e74:	e004      	b.n	8009e80 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f876 	bl	8009f6a <USBD_CtlError>
      break;
 8009e7e:	bf00      	nop
  }
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d106      	bne.n	8009ea8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f929 	bl	800a0fa <USBD_CtlSendStatus>
  }
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d80b      	bhi.n	8009ede <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	885b      	ldrh	r3, [r3, #2]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d10c      	bne.n	8009ee8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f90f 	bl	800a0fa <USBD_CtlSendStatus>
      }
      break;
 8009edc:	e004      	b.n	8009ee8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f842 	bl	8009f6a <USBD_CtlError>
      break;
 8009ee6:	e000      	b.n	8009eea <USBD_ClrFeature+0x3a>
      break;
 8009ee8:	bf00      	nop
  }
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	785a      	ldrb	r2, [r3, #1]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	3302      	adds	r3, #2
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	3303      	adds	r3, #3
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4413      	add	r3, r2
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	3305      	adds	r3, #5
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4413      	add	r3, r2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	3306      	adds	r3, #6
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	3307      	adds	r3, #7
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4413      	add	r3, r2
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	80da      	strh	r2, [r3, #6]

}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bc80      	pop	{r7}
 8009f68:	4770      	bx	lr

08009f6a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009f74:	2180      	movs	r1, #128	; 0x80
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fc6e 	bl	800a858 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fc6a 	bl	800a858 <USBD_LL_StallEP>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d032      	beq.n	800a008 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 f834 	bl	800a010 <USBD_GetLen>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	3301      	adds	r3, #1
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	75fa      	strb	r2, [r7, #23]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	7812      	ldrb	r2, [r2, #0]
 8009fc6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	75fa      	strb	r2, [r7, #23]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	2203      	movs	r2, #3
 8009fd6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009fd8:	e012      	b.n	800a000 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	60fa      	str	r2, [r7, #12]
 8009fe0:	7dfa      	ldrb	r2, [r7, #23]
 8009fe2:	1c51      	adds	r1, r2, #1
 8009fe4:	75f9      	strb	r1, [r7, #23]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	440a      	add	r2, r1
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	75fa      	strb	r2, [r7, #23]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e8      	bne.n	8009fda <USBD_GetString+0x4e>
    }
  }
}
 800a008:	bf00      	nop
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a01c:	e005      	b.n	800a02a <USBD_GetLen+0x1a>
  {
    len++;
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	3301      	adds	r3, #1
 800a022:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3301      	adds	r3, #1
 800a028:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1f5      	bne.n	800a01e <USBD_GetLen+0xe>
  }

  return len;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr

0800a03e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	4613      	mov	r3, r2
 800a04a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2202      	movs	r2, #2
 800a050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a054:	88fa      	ldrh	r2, [r7, #6]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a05a:	88fa      	ldrh	r2, [r7, #6]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	2100      	movs	r1, #0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 fc7f 	bl	800a96a <USBD_LL_Transmit>

  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	4613      	mov	r3, r2
 800a082:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	2100      	movs	r1, #0
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fc6d 	bl	800a96a <USBD_LL_Transmit>

  return USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0b0:	88fa      	ldrh	r2, [r7, #6]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a0b8:	88fa      	ldrh	r2, [r7, #6]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 fc72 	bl	800a9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0e4:	88fb      	ldrh	r3, [r7, #6]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fc60 	bl	800a9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a10a:	2300      	movs	r3, #0
 800a10c:	2200      	movs	r2, #0
 800a10e:	2100      	movs	r1, #0
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fc2a 	bl	800a96a <USBD_LL_Transmit>

  return USBD_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2205      	movs	r2, #5
 800a12c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a130:	2300      	movs	r3, #0
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fc3a 	bl	800a9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a14c:	2200      	movs	r2, #0
 800a14e:	4912      	ldr	r1, [pc, #72]	; (800a198 <MX_USB_DEVICE_Init+0x50>)
 800a150:	4812      	ldr	r0, [pc, #72]	; (800a19c <MX_USB_DEVICE_Init+0x54>)
 800a152:	f7fe ff5e 	bl	8009012 <USBD_Init>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a15c:	f7f6 ffae 	bl	80010bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a160:	490f      	ldr	r1, [pc, #60]	; (800a1a0 <MX_USB_DEVICE_Init+0x58>)
 800a162:	480e      	ldr	r0, [pc, #56]	; (800a19c <MX_USB_DEVICE_Init+0x54>)
 800a164:	f7fe ff80 	bl	8009068 <USBD_RegisterClass>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a16e:	f7f6 ffa5 	bl	80010bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a172:	490c      	ldr	r1, [pc, #48]	; (800a1a4 <MX_USB_DEVICE_Init+0x5c>)
 800a174:	4809      	ldr	r0, [pc, #36]	; (800a19c <MX_USB_DEVICE_Init+0x54>)
 800a176:	f7fe feb1 	bl	8008edc <USBD_CDC_RegisterInterface>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a180:	f7f6 ff9c 	bl	80010bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a184:	4805      	ldr	r0, [pc, #20]	; (800a19c <MX_USB_DEVICE_Init+0x54>)
 800a186:	f7fe ff88 	bl	800909a <USBD_Start>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a190:	f7f6 ff94 	bl	80010bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a194:	bf00      	nop
 800a196:	bd80      	pop	{r7, pc}
 800a198:	2000012c 	.word	0x2000012c
 800a19c:	20000bf8 	.word	0x20000bf8
 800a1a0:	20000018 	.word	0x20000018
 800a1a4:	2000011c 	.word	0x2000011c

0800a1a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4905      	ldr	r1, [pc, #20]	; (800a1c4 <CDC_Init_FS+0x1c>)
 800a1b0:	4805      	ldr	r0, [pc, #20]	; (800a1c8 <CDC_Init_FS+0x20>)
 800a1b2:	f7fe fea9 	bl	8008f08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1b6:	4905      	ldr	r1, [pc, #20]	; (800a1cc <CDC_Init_FS+0x24>)
 800a1b8:	4803      	ldr	r0, [pc, #12]	; (800a1c8 <CDC_Init_FS+0x20>)
 800a1ba:	f7fe febe 	bl	8008f3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	200010bc 	.word	0x200010bc
 800a1c8:	20000bf8 	.word	0x20000bf8
 800a1cc:	20000ebc 	.word	0x20000ebc

0800a1d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bc80      	pop	{r7}
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	2b23      	cmp	r3, #35	; 0x23
 800a1f4:	d84a      	bhi.n	800a28c <CDC_Control_FS+0xac>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <CDC_Control_FS+0x1c>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a28d 	.word	0x0800a28d
 800a200:	0800a28d 	.word	0x0800a28d
 800a204:	0800a28d 	.word	0x0800a28d
 800a208:	0800a28d 	.word	0x0800a28d
 800a20c:	0800a28d 	.word	0x0800a28d
 800a210:	0800a28d 	.word	0x0800a28d
 800a214:	0800a28d 	.word	0x0800a28d
 800a218:	0800a28d 	.word	0x0800a28d
 800a21c:	0800a28d 	.word	0x0800a28d
 800a220:	0800a28d 	.word	0x0800a28d
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	0800a28d 	.word	0x0800a28d
 800a22c:	0800a28d 	.word	0x0800a28d
 800a230:	0800a28d 	.word	0x0800a28d
 800a234:	0800a28d 	.word	0x0800a28d
 800a238:	0800a28d 	.word	0x0800a28d
 800a23c:	0800a28d 	.word	0x0800a28d
 800a240:	0800a28d 	.word	0x0800a28d
 800a244:	0800a28d 	.word	0x0800a28d
 800a248:	0800a28d 	.word	0x0800a28d
 800a24c:	0800a28d 	.word	0x0800a28d
 800a250:	0800a28d 	.word	0x0800a28d
 800a254:	0800a28d 	.word	0x0800a28d
 800a258:	0800a28d 	.word	0x0800a28d
 800a25c:	0800a28d 	.word	0x0800a28d
 800a260:	0800a28d 	.word	0x0800a28d
 800a264:	0800a28d 	.word	0x0800a28d
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a28d 	.word	0x0800a28d
 800a270:	0800a28d 	.word	0x0800a28d
 800a274:	0800a28d 	.word	0x0800a28d
 800a278:	0800a28d 	.word	0x0800a28d
 800a27c:	0800a28d 	.word	0x0800a28d
 800a280:	0800a28d 	.word	0x0800a28d
 800a284:	0800a28d 	.word	0x0800a28d
 800a288:	0800a28d 	.word	0x0800a28d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a28c:	bf00      	nop
  }

  return (USBD_OK);
 800a28e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop

0800a29c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <CDC_Receive_FS+0x38>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d006      	beq.n	800a2bc <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <CDC_Receive_FS+0x38>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	6812      	ldr	r2, [r2, #0]
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4806      	ldr	r0, [pc, #24]	; (800a2d8 <CDC_Receive_FS+0x3c>)
 800a2c0:	f7fe fe3b 	bl	8008f3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2c4:	4804      	ldr	r0, [pc, #16]	; (800a2d8 <CDC_Receive_FS+0x3c>)
 800a2c6:	f7fe fe7a 	bl	8008fbe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2ca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	2000019c 	.word	0x2000019c
 800a2d8:	20000bf8 	.word	0x20000bf8

0800a2dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <CDC_Transmit_FS+0x48>)
 800a2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e00b      	b.n	800a31a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a302:	887b      	ldrh	r3, [r7, #2]
 800a304:	461a      	mov	r2, r3
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4806      	ldr	r0, [pc, #24]	; (800a324 <CDC_Transmit_FS+0x48>)
 800a30a:	f7fe fdfd 	bl	8008f08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a30e:	4805      	ldr	r0, [pc, #20]	; (800a324 <CDC_Transmit_FS+0x48>)
 800a310:	f7fe fe26 	bl	8008f60 <USBD_CDC_TransmitPacket>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20000bf8 	.word	0x20000bf8

0800a328 <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800a330:	4a03      	ldr	r2, [pc, #12]	; (800a340 <CDC_AttachOnUSBData+0x18>)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6013      	str	r3, [r2, #0]
}
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	2000019c 	.word	0x2000019c

0800a344 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2212      	movs	r2, #18
 800a354:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a356:	4b03      	ldr	r3, [pc, #12]	; (800a364 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20000148 	.word	0x20000148

0800a368 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2204      	movs	r2, #4
 800a378:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a37a:	4b03      	ldr	r3, [pc, #12]	; (800a388 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	2000015c 	.word	0x2000015c

0800a38c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4907      	ldr	r1, [pc, #28]	; (800a3c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3a2:	4808      	ldr	r0, [pc, #32]	; (800a3c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3a4:	f7ff fdf2 	bl	8009f8c <USBD_GetString>
 800a3a8:	e004      	b.n	800a3b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4904      	ldr	r1, [pc, #16]	; (800a3c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ae:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3b0:	f7ff fdec 	bl	8009f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	200012bc 	.word	0x200012bc
 800a3c4:	0800ab34 	.word	0x0800ab34

0800a3c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	6039      	str	r1, [r7, #0]
 800a3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	4904      	ldr	r1, [pc, #16]	; (800a3e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3d8:	4804      	ldr	r0, [pc, #16]	; (800a3ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3da:	f7ff fdd7 	bl	8009f8c <USBD_GetString>
  return USBD_StrDesc;
 800a3de:	4b02      	ldr	r3, [pc, #8]	; (800a3e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	200012bc 	.word	0x200012bc
 800a3ec:	0800ab4c 	.word	0x0800ab4c

0800a3f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	6039      	str	r1, [r7, #0]
 800a3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	221a      	movs	r2, #26
 800a400:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a402:	f000 f843 	bl	800a48c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a406:	4b02      	ldr	r3, [pc, #8]	; (800a410 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000160 	.word	0x20000160

0800a414 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	6039      	str	r1, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d105      	bne.n	800a432 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	4907      	ldr	r1, [pc, #28]	; (800a448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a42a:	4808      	ldr	r0, [pc, #32]	; (800a44c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a42c:	f7ff fdae 	bl	8009f8c <USBD_GetString>
 800a430:	e004      	b.n	800a43c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	4904      	ldr	r1, [pc, #16]	; (800a448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a436:	4805      	ldr	r0, [pc, #20]	; (800a44c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a438:	f7ff fda8 	bl	8009f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a43c:	4b02      	ldr	r3, [pc, #8]	; (800a448 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200012bc 	.word	0x200012bc
 800a44c:	0800ab60 	.word	0x0800ab60

0800a450 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	6039      	str	r1, [r7, #0]
 800a45a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d105      	bne.n	800a46e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4907      	ldr	r1, [pc, #28]	; (800a484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a466:	4808      	ldr	r0, [pc, #32]	; (800a488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a468:	f7ff fd90 	bl	8009f8c <USBD_GetString>
 800a46c:	e004      	b.n	800a478 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4904      	ldr	r1, [pc, #16]	; (800a484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a472:	4805      	ldr	r0, [pc, #20]	; (800a488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a474:	f7ff fd8a 	bl	8009f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a478:	4b02      	ldr	r3, [pc, #8]	; (800a484 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	200012bc 	.word	0x200012bc
 800a488:	0800ab6c 	.word	0x0800ab6c

0800a48c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <Get_SerialNum+0x44>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a498:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <Get_SerialNum+0x48>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a49e:	4b0e      	ldr	r3, [pc, #56]	; (800a4d8 <Get_SerialNum+0x4c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4b2:	2208      	movs	r2, #8
 800a4b4:	4909      	ldr	r1, [pc, #36]	; (800a4dc <Get_SerialNum+0x50>)
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f814 	bl	800a4e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4bc:	2204      	movs	r2, #4
 800a4be:	4908      	ldr	r1, [pc, #32]	; (800a4e0 <Get_SerialNum+0x54>)
 800a4c0:	68b8      	ldr	r0, [r7, #8]
 800a4c2:	f000 f80f 	bl	800a4e4 <IntToUnicode>
  }
}
 800a4c6:	bf00      	nop
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	1ffff7e8 	.word	0x1ffff7e8
 800a4d4:	1ffff7ec 	.word	0x1ffff7ec
 800a4d8:	1ffff7f0 	.word	0x1ffff7f0
 800a4dc:	20000162 	.word	0x20000162
 800a4e0:	20000172 	.word	0x20000172

0800a4e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]
 800a4fa:	e027      	b.n	800a54c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	0f1b      	lsrs	r3, r3, #28
 800a500:	2b09      	cmp	r3, #9
 800a502:	d80b      	bhi.n	800a51c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	0f1b      	lsrs	r3, r3, #28
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	4619      	mov	r1, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	440b      	add	r3, r1
 800a514:	3230      	adds	r2, #48	; 0x30
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	e00a      	b.n	800a532 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	0f1b      	lsrs	r3, r3, #28
 800a520:	b2da      	uxtb	r2, r3
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	4619      	mov	r1, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	440b      	add	r3, r1
 800a52c:	3237      	adds	r2, #55	; 0x37
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	005b      	lsls	r3, r3, #1
 800a53c:	3301      	adds	r3, #1
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	3301      	adds	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
 800a54c:	7dfa      	ldrb	r2, [r7, #23]
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	429a      	cmp	r2, r3
 800a552:	d3d3      	bcc.n	800a4fc <IntToUnicode+0x18>
  }
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bc80      	pop	{r7}
 800a55e:	4770      	bx	lr

0800a560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a0d      	ldr	r2, [pc, #52]	; (800a5a4 <HAL_PCD_MspInit+0x44>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d113      	bne.n	800a59a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a572:	4b0d      	ldr	r3, [pc, #52]	; (800a5a8 <HAL_PCD_MspInit+0x48>)
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	4a0c      	ldr	r2, [pc, #48]	; (800a5a8 <HAL_PCD_MspInit+0x48>)
 800a578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a57c:	61d3      	str	r3, [r2, #28]
 800a57e:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <HAL_PCD_MspInit+0x48>)
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a58a:	2200      	movs	r2, #0
 800a58c:	2100      	movs	r1, #0
 800a58e:	2014      	movs	r0, #20
 800a590:	f7f7 fcbf 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a594:	2014      	movs	r0, #20
 800a596:	f7f7 fcd8 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a59a:	bf00      	nop
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	40005c00 	.word	0x40005c00
 800a5a8:	40021000 	.word	0x40021000

0800a5ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f7fe fdb1 	bl	800912a <USBD_LL_SetupStage>
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a5e2:	78fa      	ldrb	r2, [r7, #3]
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	440b      	add	r3, r1
 800a5f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	f7fe fde3 	bl	80091c4 <USBD_LL_DataOutStage>
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	440b      	add	r3, r1
 800a626:	333c      	adds	r3, #60	; 0x3c
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	4619      	mov	r1, r3
 800a62e:	f7fe fe3a 	bl	80092a6 <USBD_LL_DataInStage>
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe ff4a 	bl	80094e2 <USBD_LL_SOF>
}
 800a64e:	bf00      	nop
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a65e:	2301      	movs	r3, #1
 800a660:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d001      	beq.n	800a66e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a66a:	f7f6 fd27 	bl	80010bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a674:	7bfa      	ldrb	r2, [r7, #15]
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fefa 	bl	8009472 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe feb3 	bl	80093f0 <USBD_LL_Reset>
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe fef4 	bl	8009490 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6b0:	4b04      	ldr	r3, [pc, #16]	; (800a6c4 <HAL_PCD_SuspendCallback+0x30>)
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	4a03      	ldr	r2, [pc, #12]	; (800a6c4 <HAL_PCD_SuspendCallback+0x30>)
 800a6b6:	f043 0306 	orr.w	r3, r3, #6
 800a6ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	e000ed00 	.word	0xe000ed00

0800a6c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe feee 	bl	80094b8 <USBD_LL_Resume>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a6ec:	4a28      	ldr	r2, [pc, #160]	; (800a790 <USBD_LL_Init+0xac>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a26      	ldr	r2, [pc, #152]	; (800a790 <USBD_LL_Init+0xac>)
 800a6f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a6fc:	4b24      	ldr	r3, [pc, #144]	; (800a790 <USBD_LL_Init+0xac>)
 800a6fe:	4a25      	ldr	r2, [pc, #148]	; (800a794 <USBD_LL_Init+0xb0>)
 800a700:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a702:	4b23      	ldr	r3, [pc, #140]	; (800a790 <USBD_LL_Init+0xac>)
 800a704:	2208      	movs	r2, #8
 800a706:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a708:	4b21      	ldr	r3, [pc, #132]	; (800a790 <USBD_LL_Init+0xac>)
 800a70a:	2202      	movs	r2, #2
 800a70c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a70e:	4b20      	ldr	r3, [pc, #128]	; (800a790 <USBD_LL_Init+0xac>)
 800a710:	2200      	movs	r2, #0
 800a712:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a714:	4b1e      	ldr	r3, [pc, #120]	; (800a790 <USBD_LL_Init+0xac>)
 800a716:	2200      	movs	r2, #0
 800a718:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a71a:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <USBD_LL_Init+0xac>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a720:	481b      	ldr	r0, [pc, #108]	; (800a790 <USBD_LL_Init+0xac>)
 800a722:	f7f8 f9c5 	bl	8002ab0 <HAL_PCD_Init>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a72c:	f7f6 fcc6 	bl	80010bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a736:	2318      	movs	r3, #24
 800a738:	2200      	movs	r2, #0
 800a73a:	2100      	movs	r1, #0
 800a73c:	f7f9 fe3b 	bl	80043b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a746:	2358      	movs	r3, #88	; 0x58
 800a748:	2200      	movs	r2, #0
 800a74a:	2180      	movs	r1, #128	; 0x80
 800a74c:	f7f9 fe33 	bl	80043b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a756:	23c0      	movs	r3, #192	; 0xc0
 800a758:	2200      	movs	r2, #0
 800a75a:	2181      	movs	r1, #129	; 0x81
 800a75c:	f7f9 fe2b 	bl	80043b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a766:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a76a:	2200      	movs	r2, #0
 800a76c:	2101      	movs	r1, #1
 800a76e:	f7f9 fe22 	bl	80043b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a77c:	2200      	movs	r2, #0
 800a77e:	2182      	movs	r1, #130	; 0x82
 800a780:	f7f9 fe19 	bl	80043b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	200014bc 	.word	0x200014bc
 800a794:	40005c00 	.word	0x40005c00

0800a798 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f8 fa89 	bl	8002cc6 <HAL_PCD_Start>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f94e 	bl	800aa5c <USBD_Get_USB_Status>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	4611      	mov	r1, r2
 800a7da:	461a      	mov	r2, r3
 800a7dc:	4603      	mov	r3, r0
 800a7de:	70fb      	strb	r3, [r7, #3]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70bb      	strb	r3, [r7, #2]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7f6:	78bb      	ldrb	r3, [r7, #2]
 800a7f8:	883a      	ldrh	r2, [r7, #0]
 800a7fa:	78f9      	ldrb	r1, [r7, #3]
 800a7fc:	f7f8 fc03 	bl	8003006 <HAL_PCD_EP_Open>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	4618      	mov	r0, r3
 800a808:	f000 f928 	bl	800aa5c <USBD_Get_USB_Status>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a810:	7bbb      	ldrb	r3, [r7, #14]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	4611      	mov	r1, r2
 800a838:	4618      	mov	r0, r3
 800a83a:	f7f8 fc4a 	bl	80030d2 <HAL_PCD_EP_Close>
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f909 	bl	800aa5c <USBD_Get_USB_Status>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a872:	78fa      	ldrb	r2, [r7, #3]
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7f8 fd0a 	bl	8003290 <HAL_PCD_EP_SetStall>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	4618      	mov	r0, r3
 800a884:	f000 f8ea 	bl	800aa5c <USBD_Get_USB_Status>
 800a888:	4603      	mov	r3, r0
 800a88a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f8 fd4b 	bl	8003350 <HAL_PCD_EP_ClrStall>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 f8cb 	bl	800aa5c <USBD_Get_USB_Status>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	da0c      	bge.n	800a90a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f6:	68f9      	ldr	r1, [r7, #12]
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	440b      	add	r3, r1
 800a904:	3302      	adds	r3, #2
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	e00b      	b.n	800a922 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a910:	68f9      	ldr	r1, [r7, #12]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	440b      	add	r3, r1
 800a91c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a920:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr

0800a92c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7f8 fb36 	bl	8002fbc <HAL_PCD_SetAddress>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f880 	bl	800aa5c <USBD_Get_USB_Status>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a960:	7bbb      	ldrb	r3, [r7, #14]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b086      	sub	sp, #24
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	461a      	mov	r2, r3
 800a976:	460b      	mov	r3, r1
 800a978:	72fb      	strb	r3, [r7, #11]
 800a97a:	4613      	mov	r3, r2
 800a97c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a98c:	893b      	ldrh	r3, [r7, #8]
 800a98e:	7af9      	ldrb	r1, [r7, #11]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	f7f8 fc3a 	bl	800320a <HAL_PCD_EP_Transmit>
 800a996:	4603      	mov	r3, r0
 800a998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 f85d 	bl	800aa5c <USBD_Get_USB_Status>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	607a      	str	r2, [r7, #4]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	460b      	mov	r3, r1
 800a9be:	72fb      	strb	r3, [r7, #11]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9d2:	893b      	ldrh	r3, [r7, #8]
 800a9d4:	7af9      	ldrb	r1, [r7, #11]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	f7f8 fbc3 	bl	8003162 <HAL_PCD_EP_Receive>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f83a 	bl	800aa5c <USBD_Get_USB_Status>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f8 fbe5 	bl	80031dc <HAL_PCD_EP_GetRxCount>
 800aa12:	4603      	mov	r3, r0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa24:	4b02      	ldr	r3, [pc, #8]	; (800aa30 <USBD_static_malloc+0x14>)
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bc80      	pop	{r7}
 800aa2e:	4770      	bx	lr
 800aa30:	200001a0 	.word	0x200001a0

0800aa34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]

}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bc80      	pop	{r7}
 800aa44:	4770      	bx	lr

0800aa46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aa52:	bf00      	nop
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bc80      	pop	{r7}
 800aa5a:	4770      	bx	lr

0800aa5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d817      	bhi.n	800aaa0 <USBD_Get_USB_Status+0x44>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <USBD_Get_USB_Status+0x1c>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa8f 	.word	0x0800aa8f
 800aa80:	0800aa95 	.word	0x0800aa95
 800aa84:	0800aa9b 	.word	0x0800aa9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa8c:	e00b      	b.n	800aaa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa8e:	2302      	movs	r3, #2
 800aa90:	73fb      	strb	r3, [r7, #15]
    break;
 800aa92:	e008      	b.n	800aaa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa94:	2301      	movs	r3, #1
 800aa96:	73fb      	strb	r3, [r7, #15]
    break;
 800aa98:	e005      	b.n	800aaa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa9e:	e002      	b.n	800aaa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa4:	bf00      	nop
  }
  return usb_status;
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bc80      	pop	{r7}
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop

0800aab4 <__libc_init_array>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	2600      	movs	r6, #0
 800aab8:	4d0c      	ldr	r5, [pc, #48]	; (800aaec <__libc_init_array+0x38>)
 800aaba:	4c0d      	ldr	r4, [pc, #52]	; (800aaf0 <__libc_init_array+0x3c>)
 800aabc:	1b64      	subs	r4, r4, r5
 800aabe:	10a4      	asrs	r4, r4, #2
 800aac0:	42a6      	cmp	r6, r4
 800aac2:	d109      	bne.n	800aad8 <__libc_init_array+0x24>
 800aac4:	f000 f822 	bl	800ab0c <_init>
 800aac8:	2600      	movs	r6, #0
 800aaca:	4d0a      	ldr	r5, [pc, #40]	; (800aaf4 <__libc_init_array+0x40>)
 800aacc:	4c0a      	ldr	r4, [pc, #40]	; (800aaf8 <__libc_init_array+0x44>)
 800aace:	1b64      	subs	r4, r4, r5
 800aad0:	10a4      	asrs	r4, r4, #2
 800aad2:	42a6      	cmp	r6, r4
 800aad4:	d105      	bne.n	800aae2 <__libc_init_array+0x2e>
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aadc:	4798      	blx	r3
 800aade:	3601      	adds	r6, #1
 800aae0:	e7ee      	b.n	800aac0 <__libc_init_array+0xc>
 800aae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae6:	4798      	blx	r3
 800aae8:	3601      	adds	r6, #1
 800aaea:	e7f2      	b.n	800aad2 <__libc_init_array+0x1e>
 800aaec:	0800ab94 	.word	0x0800ab94
 800aaf0:	0800ab94 	.word	0x0800ab94
 800aaf4:	0800ab94 	.word	0x0800ab94
 800aaf8:	0800ab98 	.word	0x0800ab98

0800aafc <memset>:
 800aafc:	4603      	mov	r3, r0
 800aafe:	4402      	add	r2, r0
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d100      	bne.n	800ab06 <memset+0xa>
 800ab04:	4770      	bx	lr
 800ab06:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0a:	e7f9      	b.n	800ab00 <memset+0x4>

0800ab0c <_init>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	bf00      	nop
 800ab10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab12:	bc08      	pop	{r3}
 800ab14:	469e      	mov	lr, r3
 800ab16:	4770      	bx	lr

0800ab18 <_fini>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	bf00      	nop
 800ab1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1e:	bc08      	pop	{r3}
 800ab20:	469e      	mov	lr, r3
 800ab22:	4770      	bx	lr
