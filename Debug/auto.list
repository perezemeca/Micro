
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd1c  0800bd1c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd1c  0800bd1c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd1c  0800bd1c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd20  0800bd20  0001bd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bd24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000166c  2000017c  0800bea0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e8  0800bea0  000217e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5d5  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8a  00000000  00000000  0003e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00042508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00043bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde1  00000000  00000000  00045188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd28  00000000  00000000  00060f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097952  00000000  00000000  0007dc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001155e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  00115638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bb14 	.word	0x0800bb14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800bb14 	.word	0x0800bb14

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <InitEsp>:
		error=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
	}
/***********************************************************************************/
}

void InitEsp(_Rx *RXUSART1){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	switch(Estado){
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <InitEsp+0xa0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d83a      	bhi.n	800058a <InitEsp+0x86>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <InitEsp+0x18>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000531 	.word	0x08000531
 8000520:	08000543 	.word	0x08000543
 8000524:	08000555 	.word	0x08000555
 8000528:	08000567 	.word	0x08000567
 800052c:	08000579 	.word	0x08000579
		case 0:
			PutStrOnTx((_Tx *)&TXUSART1,AT); //Envio comando AT para ver si responde el ESP
 8000530:	491d      	ldr	r1, [pc, #116]	; (80005a8 <InitEsp+0xa4>)
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <InitEsp+0xa8>)
 8000534:	f000 fe7c 	bl	8001230 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,AT);    // Depuracion por USB
 8000538:	491b      	ldr	r1, [pc, #108]	; (80005a8 <InitEsp+0xa4>)
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <InitEsp+0xac>)
 800053c:	f000 fe78 	bl	8001230 <PutStrOnTx>
		break;
 8000540:	e023      	b.n	800058a <InitEsp+0x86>

		case 1:
			PutStrOnTx((_Tx *)&TXUSART1,CWMODE); //Envio comando CWMODE
 8000542:	491c      	ldr	r1, [pc, #112]	; (80005b4 <InitEsp+0xb0>)
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <InitEsp+0xa8>)
 8000546:	f000 fe73 	bl	8001230 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWMODE);    // Depuracion por USB
 800054a:	491a      	ldr	r1, [pc, #104]	; (80005b4 <InitEsp+0xb0>)
 800054c:	4818      	ldr	r0, [pc, #96]	; (80005b0 <InitEsp+0xac>)
 800054e:	f000 fe6f 	bl	8001230 <PutStrOnTx>

		break;
 8000552:	e01a      	b.n	800058a <InitEsp+0x86>

		case 2:
			PutStrOnTx((_Tx *)&TXUSART1,CWJAP_); //Envio comando CWJAP con los datos de la red
 8000554:	4918      	ldr	r1, [pc, #96]	; (80005b8 <InitEsp+0xb4>)
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <InitEsp+0xa8>)
 8000558:	f000 fe6a 	bl	8001230 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWJAP_);    // Depuracion por USB
 800055c:	4916      	ldr	r1, [pc, #88]	; (80005b8 <InitEsp+0xb4>)
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <InitEsp+0xac>)
 8000560:	f000 fe66 	bl	8001230 <PutStrOnTx>

		break;
 8000564:	e011      	b.n	800058a <InitEsp+0x86>
//			PutStrOnTx((_Tx *)&TXUSB,CIFSR);    // Depuracion por USB
//
//		break;

		case 3:
			PutStrOnTx((_Tx *)&TXUSART1,CIPMUX);
 8000566:	4915      	ldr	r1, [pc, #84]	; (80005bc <InitEsp+0xb8>)
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <InitEsp+0xa8>)
 800056a:	f000 fe61 	bl	8001230 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPMUX);    // Depuracion por USB
 800056e:	4913      	ldr	r1, [pc, #76]	; (80005bc <InitEsp+0xb8>)
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <InitEsp+0xac>)
 8000572:	f000 fe5d 	bl	8001230 <PutStrOnTx>

		break;
 8000576:	e008      	b.n	800058a <InitEsp+0x86>

		case 4:
			PutStrOnTx((_Tx *)&TXUSART1,CIPSTART);
 8000578:	4911      	ldr	r1, [pc, #68]	; (80005c0 <InitEsp+0xbc>)
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <InitEsp+0xa8>)
 800057c:	f000 fe58 	bl	8001230 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPSTART);    // Depuracion por USB
 8000580:	490f      	ldr	r1, [pc, #60]	; (80005c0 <InitEsp+0xbc>)
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <InitEsp+0xac>)
 8000584:	f000 fe54 	bl	8001230 <PutStrOnTx>

		break;
 8000588:	bf00      	nop
	}
	DecodeTimeOut = 4;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <InitEsp+0xc0>)
 800058c:	2204      	movs	r2, #4
 800058e:	801a      	strh	r2, [r3, #0]
	ESPReadyToRecyb = 1;
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <InitEsp+0xc4>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0320 	orr.w	r3, r3, #32
 8000598:	7013      	strb	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000744 	.word	0x20000744
 80005a8:	0800bb8c 	.word	0x0800bb8c
 80005ac:	20000c20 	.word	0x20000c20
 80005b0:	200006b8 	.word	0x200006b8
 80005b4:	0800bc08 	.word	0x0800bc08
 80005b8:	0800bb94 	.word	0x0800bb94
 80005bc:	0800bbbc 	.word	0x0800bbbc
 80005c0:	0800bbcc 	.word	0x0800bbcc
 80005c4:	2000052c 	.word	0x2000052c
 80005c8:	20000890 	.word	0x20000890

080005cc <Reset>:

void Reset(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	espConnected = 0;
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <Reset+0x3c>)
 80005d2:	7813      	ldrb	r3, [r2, #0]
 80005d4:	f36f 0300 	bfc	r3, #0, #1
 80005d8:	7013      	strb	r3, [r2, #0]
	ESPReadyToRecyb = 1;
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <Reset+0x3c>)
 80005dc:	7813      	ldrb	r3, [r2, #0]
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	7013      	strb	r3, [r2, #0]
	ResetESP = 1;
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <Reset+0x40>)
 80005e6:	7813      	ldrb	r3, [r2, #0]
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	7013      	strb	r3, [r2, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <Reset+0x44>)
 80005f0:	f006 fb48 	bl	8006c84 <HAL_UART_AbortReceive_IT>
	HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_RESET);//Reset ESP8266
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <Reset+0x48>)
 80005fa:	f003 f85c 	bl	80036b6 <HAL_GPIO_WritePin>
	DecodeTimeOut = 20;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <Reset+0x4c>)
 8000600:	2214      	movs	r2, #20
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000890 	.word	0x20000890
 800060c:	20000710 	.word	0x20000710
 8000610:	2000084c 	.word	0x2000084c
 8000614:	40010c00 	.word	0x40010c00
 8000618:	2000052c 	.word	0x2000052c

0800061c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
/***************** Contadores para control del flujo de tiempo ********************/
/*
 * Instancia cada 1ms
 *
 */
	if(htim->Instance == TIM4){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d125      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
		Count100ms--;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800063a:	801a      	strh	r2, [r3, #0]

		if(!Count100ms){
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x36>
			Count100ms = 100;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000648:	2264      	movs	r2, #100	; 0x64
 800064a:	801a      	strh	r2, [r3, #0]
			On100ms = 1;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 800064e:	2201      	movs	r2, #1
 8000650:	801a      	strh	r2, [r3, #0]
		}

		if(RXUSB.header) {
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000654:	79db      	ldrb	r3, [r3, #7]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00e      	beq.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
			RXUSB.timeout--;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800065e:	7bdb      	ldrb	r3, [r3, #15]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000668:	73da      	strb	r2, [r3, #15]
			if(!RXUSB.timeout)
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800066c:	7bdb      	ldrb	r3, [r3, #15]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
				RXUSB.header = 0;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	71da      	strb	r2, [r3, #7]
/************************* Incio lectura analogica por DMA *************************/
/*
 * Instancia cada 500us
 *
 */
	if(htim->Instance == TIM3){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10a      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800068e:	4413      	add	r3, r2
 8000690:	2208      	movs	r2, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000696:	f001 ffdd 	bl	8002654 <HAL_ADC_Start_DMA>
	}
/***********************************************************************************/

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40000800 	.word	0x40000800
 80006a8:	20000af0 	.word	0x20000af0
 80006ac:	20000586 	.word	0x20000586
 80006b0:	20000c0c 	.word	0x20000c0c
 80006b4:	40000400 	.word	0x40000400
 80006b8:	20000711 	.word	0x20000711
 80006bc:	200008e0 	.word	0x200008e0
 80006c0:	20000714 	.word	0x20000714

080006c4 <DecodeESP>:

void DecodeESP(_Rx *RXUSART1){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

//	if(RXUSART1->Buff[RXUSART1->ir] > 128){
//		Reset();
//	}

	if(espConnected){
 80006cc:	4b9f      	ldr	r3, [pc, #636]	; (800094c <DecodeESP+0x288>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d06d      	beq.n	80007b6 <DecodeESP+0xf2>
		//Decodifica \r\n+IPD,
		if(RXUSART1->Buff[RXUSART1->ir] == IPD[IndiceIPD]){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7952      	ldrb	r2, [r2, #5]
 80006e2:	4413      	add	r3, r2
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	4b9a      	ldr	r3, [pc, #616]	; (8000950 <DecodeESP+0x28c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4b99      	ldr	r3, [pc, #612]	; (8000954 <DecodeESP+0x290>)
 80006ee:	5c5b      	ldrb	r3, [r3, r1]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d10f      	bne.n	8000714 <DecodeESP+0x50>
			IndiceIPD++;
 80006f4:	4b96      	ldr	r3, [pc, #600]	; (8000950 <DecodeESP+0x28c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b94      	ldr	r3, [pc, #592]	; (8000950 <DecodeESP+0x28c>)
 80006fe:	701a      	strb	r2, [r3, #0]
			if(IndiceIPD == 7){
 8000700:	4b93      	ldr	r3, [pc, #588]	; (8000950 <DecodeESP+0x28c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d113      	bne.n	8000730 <DecodeESP+0x6c>
				DecodeIPD = 1;
 8000708:	4a90      	ldr	r2, [pc, #576]	; (800094c <DecodeESP+0x288>)
 800070a:	7813      	ldrb	r3, [r2, #0]
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	7013      	strb	r3, [r2, #0]
 8000712:	e00d      	b.n	8000730 <DecodeESP+0x6c>
			}
		}
		else{
			if((IndiceDisconnect > 0) && (!DecodeIPD)){
 8000714:	4b90      	ldr	r3, [pc, #576]	; (8000958 <DecodeESP+0x294>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <DecodeESP+0x6c>
 800071c:	4b8b      	ldr	r3, [pc, #556]	; (800094c <DecodeESP+0x288>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <DecodeESP+0x6c>
				IndiceDisconnect = 0;
 800072a:	4b8b      	ldr	r3, [pc, #556]	; (8000958 <DecodeESP+0x294>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(DecodeIPD){
 8000730:	4b86      	ldr	r3, [pc, #536]	; (800094c <DecodeESP+0x288>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d011      	beq.n	8000762 <DecodeESP+0x9e>
			if(RXUSART1->Buff[RXUSART1->ir]==':'){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7952      	ldrb	r2, [r2, #5]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b3a      	cmp	r3, #58	; 0x3a
 800074c:	d109      	bne.n	8000762 <DecodeESP+0x9e>
				DecodeHeaderESP = 1;
 800074e:	4a7f      	ldr	r2, [pc, #508]	; (800094c <DecodeESP+0x288>)
 8000750:	7813      	ldrb	r3, [r2, #0]
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	7013      	strb	r3, [r2, #0]
				DecodeIPD = 0;
 8000758:	4a7c      	ldr	r2, [pc, #496]	; (800094c <DecodeESP+0x288>)
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	f36f 1386 	bfc	r3, #6, #1
 8000760:	7013      	strb	r3, [r2, #0]
			}
		}

		//Decodifica WIFI DISCONNECT\r\n
		if(RXUSART1->Buff[RXUSART1->ir] == WIFI_DISCONNECT[IndiceDisconnect]){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7952      	ldrb	r2, [r2, #5]
 800076a:	4413      	add	r3, r2
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b7a      	ldr	r3, [pc, #488]	; (8000958 <DecodeESP+0x294>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	4b79      	ldr	r3, [pc, #484]	; (800095c <DecodeESP+0x298>)
 8000776:	5c5b      	ldrb	r3, [r3, r1]
 8000778:	429a      	cmp	r2, r3
 800077a:	d10f      	bne.n	800079c <DecodeESP+0xd8>
			IndiceDisconnect++;
 800077c:	4b76      	ldr	r3, [pc, #472]	; (8000958 <DecodeESP+0x294>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b74      	ldr	r3, [pc, #464]	; (8000958 <DecodeESP+0x294>)
 8000786:	701a      	strb	r2, [r3, #0]
			if(IndiceDisconnect == 17){
 8000788:	4b73      	ldr	r3, [pc, #460]	; (8000958 <DecodeESP+0x294>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b11      	cmp	r3, #17
 800078e:	d10c      	bne.n	80007aa <DecodeESP+0xe6>
				IndiceDisconnect=0;
 8000790:	4b71      	ldr	r3, [pc, #452]	; (8000958 <DecodeESP+0x294>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
				Reset();
 8000796:	f7ff ff19 	bl	80005cc <Reset>
 800079a:	e006      	b.n	80007aa <DecodeESP+0xe6>
			}
		}
		else{
			if(IndiceDisconnect > 0){
 800079c:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <DecodeESP+0x294>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <DecodeESP+0xe6>
				IndiceDisconnect = 0;
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <DecodeESP+0x294>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
			}
		}
		RXUSART1->ir++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	795b      	ldrb	r3, [r3, #5]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	715a      	strb	r2, [r3, #5]
	}

	//Decodifica inicializacion de ESP8266
	if((!espConnected) && (!DecodeTimeOut)){
 80007b6:	4b65      	ldr	r3, [pc, #404]	; (800094c <DecodeESP+0x288>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f040 815c 	bne.w	8000a7e <DecodeESP+0x3ba>
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <DecodeESP+0x29c>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f040 8156 	bne.w	8000a7e <DecodeESP+0x3ba>
		switch(Estado){
 80007d2:	4b64      	ldr	r3, [pc, #400]	; (8000964 <DecodeESP+0x2a0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	f200 815c 	bhi.w	8000a94 <DecodeESP+0x3d0>
 80007dc:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <DecodeESP+0x120>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	08000867 	.word	0x08000867
 80007ec:	080008d9 	.word	0x080008d9
 80007f0:	08000979 	.word	0x08000979
 80007f4:	080009f3 	.word	0x080009f3
			case 0:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_AT[Indice]){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7952      	ldrb	r2, [r2, #5]
 8000800:	4413      	add	r3, r2
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	4b58      	ldr	r3, [pc, #352]	; (8000968 <DecodeESP+0x2a4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	4b58      	ldr	r3, [pc, #352]	; (800096c <DecodeESP+0x2a8>)
 800080c:	5c5b      	ldrb	r3, [r3, r1]
 800080e:	429a      	cmp	r2, r3
 8000810:	d11c      	bne.n	800084c <DecodeESP+0x188>
					Indice ++;
 8000812:	4b55      	ldr	r3, [pc, #340]	; (8000968 <DecodeESP+0x2a4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <DecodeESP+0x2a4>)
 800081c:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	795b      	ldrb	r3, [r3, #5]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	715a      	strb	r2, [r3, #5]
					if(Indice == 10){
 800082a:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <DecodeESP+0x2a4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b0a      	cmp	r3, #10
 8000830:	f040 8127 	bne.w	8000a82 <DecodeESP+0x3be>
						Indice = 0;
 8000834:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <DecodeESP+0x2a4>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
						Estado = 1;
 800083a:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <DecodeESP+0x2a0>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <DecodeESP+0x288>)
 8000842:	7813      	ldrb	r3, [r2, #0]
 8000844:	f36f 1345 	bfc	r3, #5, #1
 8000848:	7013      	strb	r3, [r2, #0]
				else{
					RXUSART1->ir = RXUSART1->iw;
					Indice = 0;
					ESPReadyToRecyb = 0;
				}
			break;
 800084a:	e11a      	b.n	8000a82 <DecodeESP+0x3be>
					RXUSART1->ir = RXUSART1->iw;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791a      	ldrb	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	715a      	strb	r2, [r3, #5]
					Indice = 0;
 8000854:	4b44      	ldr	r3, [pc, #272]	; (8000968 <DecodeESP+0x2a4>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
					ESPReadyToRecyb = 0;
 800085a:	4a3c      	ldr	r2, [pc, #240]	; (800094c <DecodeESP+0x288>)
 800085c:	7813      	ldrb	r3, [r2, #0]
 800085e:	f36f 1345 	bfc	r3, #5, #1
 8000862:	7013      	strb	r3, [r2, #0]
			break;
 8000864:	e10d      	b.n	8000a82 <DecodeESP+0x3be>

			case 1:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWMODE[Indice]){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	7952      	ldrb	r2, [r2, #5]
 800086e:	4413      	add	r3, r2
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <DecodeESP+0x2a4>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <DecodeESP+0x2ac>)
 800087a:	5c5b      	ldrb	r3, [r3, r1]
 800087c:	429a      	cmp	r2, r3
 800087e:	d11c      	bne.n	80008ba <DecodeESP+0x1f6>
					Indice++;
 8000880:	4b39      	ldr	r3, [pc, #228]	; (8000968 <DecodeESP+0x2a4>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <DecodeESP+0x2a4>)
 800088a:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	3301      	adds	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	715a      	strb	r2, [r3, #5]
					if(Indice==19){
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <DecodeESP+0x2a4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b13      	cmp	r3, #19
 800089e:	f040 80f2 	bne.w	8000a86 <DecodeESP+0x3c2>
						Indice=0;
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <DecodeESP+0x2a4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
						Estado = 2;
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <DecodeESP+0x2a0>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 80008ae:	4a27      	ldr	r2, [pc, #156]	; (800094c <DecodeESP+0x288>)
 80008b0:	7813      	ldrb	r3, [r2, #0]
 80008b2:	f36f 1345 	bfc	r3, #5, #1
 80008b6:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 80008b8:	e0e5      	b.n	8000a86 <DecodeESP+0x3c2>
					if(Indice>0){
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <DecodeESP+0x2a4>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <DecodeESP+0x20c>
						RXUSART1->ir = RXUSART1->iw;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791a      	ldrb	r2, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	715a      	strb	r2, [r3, #5]
						Indice=0;
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <DecodeESP+0x2a4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <DecodeESP+0x2a0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
			break;
 80008d6:	e0d6      	b.n	8000a86 <DecodeESP+0x3c2>

			case 2:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWJAP_[Indice]){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7952      	ldrb	r2, [r2, #5]
 80008e0:	4413      	add	r3, r2
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <DecodeESP+0x2a4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <DecodeESP+0x2b0>)
 80008ec:	5c5b      	ldrb	r3, [r3, r1]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d11c      	bne.n	800092c <DecodeESP+0x268>
					Indice++;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <DecodeESP+0x2a4>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <DecodeESP+0x2a4>)
 80008fc:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	3301      	adds	r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	715a      	strb	r2, [r3, #5]
					if(Indice==LONG_ANS_CWJAP_){
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <DecodeESP+0x2a4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b58      	cmp	r3, #88	; 0x58
 8000910:	f040 80bb 	bne.w	8000a8a <DecodeESP+0x3c6>
						Indice = 0;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <DecodeESP+0x2a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
						Estado = 3;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <DecodeESP+0x2a0>)
 800091c:	2203      	movs	r2, #3
 800091e:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <DecodeESP+0x288>)
 8000922:	7813      	ldrb	r3, [r2, #0]
 8000924:	f36f 1345 	bfc	r3, #5, #1
 8000928:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 800092a:	e0ae      	b.n	8000a8a <DecodeESP+0x3c6>
					if(Indice>0){
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <DecodeESP+0x2a4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <DecodeESP+0x27e>
						RXUSART1->ir = RXUSART1->iw;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791a      	ldrb	r2, [r3, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	715a      	strb	r2, [r3, #5]
						Indice=0;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <DecodeESP+0x2a4>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <DecodeESP+0x2a0>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
			break;
 8000948:	e09f      	b.n	8000a8a <DecodeESP+0x3c6>
 800094a:	bf00      	nop
 800094c:	20000890 	.word	0x20000890
 8000950:	20000ae0 	.word	0x20000ae0
 8000954:	0800bcfc 	.word	0x0800bcfc
 8000958:	20000c02 	.word	0x20000c02
 800095c:	0800bce8 	.word	0x0800bce8
 8000960:	2000052c 	.word	0x2000052c
 8000964:	20000744 	.word	0x20000744
 8000968:	20000891 	.word	0x20000891
 800096c:	0800bcdc 	.word	0x0800bcdc
 8000970:	0800bc18 	.word	0x0800bc18
 8000974:	0800bc2c 	.word	0x0800bc2c

			case 3:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPMUX[Indice]){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	7952      	ldrb	r2, [r2, #5]
 8000980:	4413      	add	r3, r2
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <DecodeESP+0x3d8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <DecodeESP+0x3dc>)
 800098c:	5c5b      	ldrb	r3, [r3, r1]
 800098e:	429a      	cmp	r2, r3
 8000990:	d11b      	bne.n	80009ca <DecodeESP+0x306>
						Indice++;
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <DecodeESP+0x3d8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <DecodeESP+0x3d8>)
 800099c:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	715a      	strb	r2, [r3, #5]
						if(Indice == 19){
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <DecodeESP+0x3d8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b13      	cmp	r3, #19
 80009b0:	d16d      	bne.n	8000a8e <DecodeESP+0x3ca>
							Indice = 0;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <DecodeESP+0x3d8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
							Estado = 4;
 80009b8:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <DecodeESP+0x3e0>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	701a      	strb	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 80009be:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <DecodeESP+0x3e4>)
 80009c0:	7813      	ldrb	r3, [r2, #0]
 80009c2:	f36f 1345 	bfc	r3, #5, #1
 80009c6:	7013      	strb	r3, [r2, #0]
							Indice = 0;
						}
						Estado = 0;
						ESPReadyToRecyb = 0;
					}
			break;
 80009c8:	e061      	b.n	8000a8e <DecodeESP+0x3ca>
						if(Indice>0){
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <DecodeESP+0x3d8>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d006      	beq.n	80009e0 <DecodeESP+0x31c>
							RXUSART1->ir = RXUSART1->iw;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	791a      	ldrb	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <DecodeESP+0x3d8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
						Estado = 0;
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <DecodeESP+0x3e0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 80009e6:	4a30      	ldr	r2, [pc, #192]	; (8000aa8 <DecodeESP+0x3e4>)
 80009e8:	7813      	ldrb	r3, [r2, #0]
 80009ea:	f36f 1345 	bfc	r3, #5, #1
 80009ee:	7013      	strb	r3, [r2, #0]
			break;
 80009f0:	e04d      	b.n	8000a8e <DecodeESP+0x3ca>

			case 4:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPSTART[Indice]){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	7952      	ldrb	r2, [r2, #5]
 80009fa:	4413      	add	r3, r2
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <DecodeESP+0x3d8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <DecodeESP+0x3e8>)
 8000a06:	5c5b      	ldrb	r3, [r3, r1]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d11e      	bne.n	8000a4a <DecodeESP+0x386>
						Indice++;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <DecodeESP+0x3d8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <DecodeESP+0x3d8>)
 8000a16:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	795b      	ldrb	r3, [r3, #5]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	715a      	strb	r2, [r3, #5]
						if(Indice == 62){
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <DecodeESP+0x3d8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b3e      	cmp	r3, #62	; 0x3e
 8000a2a:	d132      	bne.n	8000a92 <DecodeESP+0x3ce>
							Indice = 0;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <DecodeESP+0x3d8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <DecodeESP+0x3e4>)
 8000a34:	7813      	ldrb	r3, [r2, #0]
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <DecodeESP+0x3e0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
							Count3000ms = 7;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <DecodeESP+0x3ec>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	801a      	strh	r2, [r3, #0]
							Estado = 0;
							Count3000ms = 7;
						}
						Estado = 0;
					}
			break;
 8000a48:	e023      	b.n	8000a92 <DecodeESP+0x3ce>
						if(Indice>0){
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <DecodeESP+0x3d8>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d011      	beq.n	8000a76 <DecodeESP+0x3b2>
							RXUSART1->ir = RXUSART1->iw;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	791a      	ldrb	r2, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <DecodeESP+0x3d8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <DecodeESP+0x3e4>)
 8000a62:	7813      	ldrb	r3, [r2, #0]
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <DecodeESP+0x3e0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
							Count3000ms = 7;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <DecodeESP+0x3ec>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	801a      	strh	r2, [r3, #0]
						Estado = 0;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <DecodeESP+0x3e0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
			break;
 8000a7c:	e009      	b.n	8000a92 <DecodeESP+0x3ce>
		}
	}
 8000a7e:	bf00      	nop
 8000a80:	e008      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a82:	bf00      	nop
 8000a84:	e006      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a86:	bf00      	nop
 8000a88:	e004      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a8a:	bf00      	nop
 8000a8c:	e002      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a92:	bf00      	nop
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000891 	.word	0x20000891
 8000aa0:	0800bc88 	.word	0x0800bc88
 8000aa4:	20000744 	.word	0x20000744
 8000aa8:	20000890 	.word	0x20000890
 8000aac:	0800bc9c 	.word	0x0800bc9c
 8000ab0:	200004c6 	.word	0x200004c6

08000ab4 <HAL_UART_RxCpltCallback>:
//			break;
//		}
//	}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_UART_RxCpltCallback+0x60>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d121      	bne.n	8000b0a <HAL_UART_RxCpltCallback+0x56>
		TXUSB.Buff[TXUSB.iw++] = rxUSART1Buff[RXUSART1.iw];
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_UART_RxCpltCallback+0x68>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_RxCpltCallback+0x68>)
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	1c59      	adds	r1, r3, #1
 8000ad8:	b2cc      	uxtb	r4, r1
 8000ada:	4910      	ldr	r1, [pc, #64]	; (8000b1c <HAL_UART_RxCpltCallback+0x68>)
 8000adc:	710c      	strb	r4, [r1, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_UART_RxCpltCallback+0x6c>)
 8000ae2:	5c12      	ldrb	r2, [r2, r0]
 8000ae4:	701a      	strb	r2, [r3, #0]
		RXUSART1.iw++;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000af2:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_UART_RxCpltCallback+0x6c>)
 8000afe:	4413      	add	r3, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <HAL_UART_RxCpltCallback+0x70>)
 8000b06:	f006 f88c 	bl	8006c22 <HAL_UART_Receive_IT>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40013800 	.word	0x40013800
 8000b18:	20000518 	.word	0x20000518
 8000b1c:	200006b8 	.word	0x200006b8
 8000b20:	2000019c 	.word	0x2000019c
 8000b24:	2000084c 	.word	0x2000084c

08000b28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	// Incrento indice del buffer
	iAdc++;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b3c:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d102      	bne.n	8000b4e <HAL_ADC_ConvCpltCallback+0x26>
		iAdc = 0;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	}
	ADC();
 8000b4e:	f000 f807 	bl	8000b60 <ADC>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000711 	.word	0x20000711

08000b60 <ADC>:
void ADC(){
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	volatile uint8_t c;

/***********************************************************************************/
/********************* Media movil de las 3 primeras lecturas **********************/
	if(FirtScan){
 8000b66:	4baf      	ldr	r3, [pc, #700]	; (8000e24 <ADC+0x2c4>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d07a      	beq.n	8000c64 <ADC+0x104>
		switch(iAdc){
 8000b6e:	4bae      	ldr	r3, [pc, #696]	; (8000e28 <ADC+0x2c8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <ADC+0x1e>
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d033      	beq.n	8000be4 <ADC+0x84>
				}
				FirtScan = 0;
			break;

			default:
			break;
 8000b7c:	e14d      	b.n	8000e1a <ADC+0x2ba>
				for(c=0;c<8;c++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e02a      	b.n	8000bda <ADC+0x7a>
					bufADC[1][c]=round((bufADC[0][c]+bufADC[1][c]) / 2 );
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4ba8      	ldr	r3, [pc, #672]	; (8000e2c <ADC+0x2cc>)
 8000b8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4aa4      	ldr	r2, [pc, #656]	; (8000e2c <ADC+0x2cc>)
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	440b      	add	r3, r1
 8000ba4:	0fda      	lsrs	r2, r3, #31
 8000ba6:	4413      	add	r3, r2
 8000ba8:	105b      	asrs	r3, r3, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fc20 	bl	80003f0 <__aeabi_i2d>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	79f9      	ldrb	r1, [r7, #7]
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	460c      	mov	r4, r1
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f7ff fc81 	bl	80004c4 <__aeabi_d2uiz>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	4a99      	ldr	r2, [pc, #612]	; (8000e2c <ADC+0x2cc>)
 8000bc8:	f104 0308 	add.w	r3, r4, #8
 8000bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d9d0      	bls.n	8000b84 <ADC+0x24>
			break;
 8000be2:	e11a      	b.n	8000e1a <ADC+0x2ba>
				for(c=0;c<8;c++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	e034      	b.n	8000c54 <ADC+0xf4>
					bufADC[2][c]=round((bufADC[0][c]+bufADC[1][c]+bufADC[2][c]) / 3);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b8e      	ldr	r3, [pc, #568]	; (8000e2c <ADC+0x2cc>)
 8000bf2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4a8b      	ldr	r2, [pc, #556]	; (8000e2c <ADC+0x2cc>)
 8000c00:	3308      	adds	r3, #8
 8000c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	440b      	add	r3, r1
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	4987      	ldr	r1, [pc, #540]	; (8000e2c <ADC+0x2cc>)
 8000c10:	3210      	adds	r2, #16
 8000c12:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c16:	b292      	uxth	r2, r2
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a85      	ldr	r2, [pc, #532]	; (8000e30 <ADC+0x2d0>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	17db      	asrs	r3, r3, #31
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbe3 	bl	80003f0 <__aeabi_i2d>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	79f9      	ldrb	r1, [r7, #7]
 8000c30:	b2c9      	uxtb	r1, r1
 8000c32:	460c      	mov	r4, r1
 8000c34:	4610      	mov	r0, r2
 8000c36:	4619      	mov	r1, r3
 8000c38:	f7ff fc44 	bl	80004c4 <__aeabi_d2uiz>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	4a7a      	ldr	r2, [pc, #488]	; (8000e2c <ADC+0x2cc>)
 8000c42:	f104 0310 	add.w	r3, r4, #16
 8000c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	d9c6      	bls.n	8000bea <ADC+0x8a>
				FirtScan = 0;
 8000c5c:	4b71      	ldr	r3, [pc, #452]	; (8000e24 <ADC+0x2c4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
			break;
 8000c62:	e0da      	b.n	8000e1a <ADC+0x2ba>
	}

/***********************************************************************************/
/********************* Media movil de las siguientes lecturas **********************/
	else{
		if(iAdc >= 0 && iAdc <= 1){
 8000c64:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <ADC+0x2c8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <ADC+0x2c8>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	f200 8081 	bhi.w	8000d76 <ADC+0x216>
			// Cruce por 0 y 1 donde se toman dos valores anteriores para hacer la media
			switch(iAdc){
 8000c74:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <ADC+0x2c8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <ADC+0x124>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d03b      	beq.n	8000cfa <ADC+0x19a>
 8000c82:	e0ca      	b.n	8000e1a <ADC+0x2ba>
				case 0:
					for(c = 0; c<8; c++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	e032      	b.n	8000cf0 <ADC+0x190>
						bufADC[0][c]=round(( bufADC[0][c]+bufADC[31][c]+bufADC[30][c]) / 3) ;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <ADC+0x2cc>)
 8000c92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4a63      	ldr	r2, [pc, #396]	; (8000e2c <ADC+0x2cc>)
 8000ca0:	33f8      	adds	r3, #248	; 0xf8
 8000ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	440b      	add	r3, r1
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	495f      	ldr	r1, [pc, #380]	; (8000e2c <ADC+0x2cc>)
 8000cb0:	32f0      	adds	r2, #240	; 0xf0
 8000cb2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a5d      	ldr	r2, [pc, #372]	; (8000e30 <ADC+0x2d0>)
 8000cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fb93 	bl	80003f0 <__aeabi_i2d>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	79f9      	ldrb	r1, [r7, #7]
 8000cd0:	b2c9      	uxtb	r1, r1
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fbf4 	bl	80004c4 <__aeabi_d2uiz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <ADC+0x2cc>)
 8000ce2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					for(c = 0; c<8; c++){
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d9c8      	bls.n	8000c8a <ADC+0x12a>
					}
				break;
 8000cf8:	e03c      	b.n	8000d74 <ADC+0x214>
				case 1:
					for(c = 0; c<8; c++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e034      	b.n	8000d6a <ADC+0x20a>
						bufADC[1][c]=round((bufADC[0][c]+bufADC[1][c]+bufADC[31][c]) / 3);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <ADC+0x2cc>)
 8000d08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4619      	mov	r1, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4a45      	ldr	r2, [pc, #276]	; (8000e2c <ADC+0x2cc>)
 8000d16:	3308      	adds	r3, #8
 8000d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	440b      	add	r3, r1
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	4941      	ldr	r1, [pc, #260]	; (8000e2c <ADC+0x2cc>)
 8000d26:	32f8      	adds	r2, #248	; 0xf8
 8000d28:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d2c:	b292      	uxth	r2, r2
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <ADC+0x2d0>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	17db      	asrs	r3, r3, #31
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb58 	bl	80003f0 <__aeabi_i2d>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	79f9      	ldrb	r1, [r7, #7]
 8000d46:	b2c9      	uxtb	r1, r1
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff fbb9 	bl	80004c4 <__aeabi_d2uiz>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <ADC+0x2cc>)
 8000d58:	f104 0308 	add.w	r3, r4, #8
 8000d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(c = 0; c<8; c++){
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	d9c6      	bls.n	8000d00 <ADC+0x1a0>
					}
				break;
 8000d72:	bf00      	nop
			switch(iAdc){
 8000d74:	e051      	b.n	8000e1a <ADC+0x2ba>
			}
		}
		else{
			// Cálculo comprendido entre bufADC[2] y bufADC[31]
			for(c = 0; c<8; c++){
 8000d76:	2300      	movs	r3, #0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	e049      	b.n	8000e10 <ADC+0x2b0>
				bufADC[iAdc][c] = round((bufADC[iAdc-2][c] + bufADC[iAdc-1][c] + bufADC[iAdc][c])/3);
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <ADC+0x2c8>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3b02      	subs	r3, #2
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <ADC+0x2cc>)
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	440b      	add	r3, r1
 8000d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <ADC+0x2c8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	4610      	mov	r0, r2
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <ADC+0x2cc>)
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	440b      	add	r3, r1
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <ADC+0x2c8>)
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	79f9      	ldrb	r1, [r7, #7]
 8000dbc:	b2c9      	uxtb	r1, r1
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	491a      	ldr	r1, [pc, #104]	; (8000e2c <ADC+0x2cc>)
 8000dc2:	00d2      	lsls	r2, r2, #3
 8000dc4:	4402      	add	r2, r0
 8000dc6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <ADC+0x2d0>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	17db      	asrs	r3, r3, #31
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb09 	bl	80003f0 <__aeabi_i2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4911      	ldr	r1, [pc, #68]	; (8000e28 <ADC+0x2c8>)
 8000de4:	7809      	ldrb	r1, [r1, #0]
 8000de6:	b2c9      	uxtb	r1, r1
 8000de8:	460d      	mov	r5, r1
 8000dea:	79f9      	ldrb	r1, [r7, #7]
 8000dec:	b2c9      	uxtb	r1, r1
 8000dee:	460c      	mov	r4, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fb66 	bl	80004c4 <__aeabi_d2uiz>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <ADC+0x2cc>)
 8000dfe:	00eb      	lsls	r3, r5, #3
 8000e00:	4423      	add	r3, r4
 8000e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(c = 0; c<8; c++){
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d9b1      	bls.n	8000d7c <ADC+0x21c>
			}
		}
	}
/***********************************************************************************/
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000198 	.word	0x20000198
 8000e28:	20000711 	.word	0x20000711
 8000e2c:	200008e0 	.word	0x200008e0
 8000e30:	55555556 	.word	0x55555556

08000e34 <MyCallBackOnUSBData>:
void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	e010      	b.n	8000e66 <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	441a      	add	r2, r3
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MyCallBackOnUSBData+0x48>)
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	1c59      	adds	r1, r3, #1
 8000e52:	b2c8      	uxtb	r0, r1
 8000e54:	4909      	ldr	r1, [pc, #36]	; (8000e7c <MyCallBackOnUSBData+0x48>)
 8000e56:	7108      	strb	r0, [r1, #4]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MyCallBackOnUSBData+0x4c>)
 8000e5e:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3ea      	bcc.n	8000e44 <MyCallBackOnUSBData+0x10>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000c0c 	.word	0x20000c0c
 8000e80:	200005b0 	.word	0x200005b0

08000e84 <DecodeHeader>:

    return aux;
}

void DecodeHeader(_Rx *RX)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 8000e92:	e0e3      	b.n	800105c <DecodeHeader+0x1d8>
        switch(RX->header) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	79db      	ldrb	r3, [r3, #7]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	f200 80c2 	bhi.w	8001022 <DecodeHeader+0x19e>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <DecodeHeader+0x20>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000ec1 	.word	0x08000ec1
 8000ea8:	08000ee1 	.word	0x08000ee1
 8000eac:	08000f0d 	.word	0x08000f0d
 8000eb0:	08000f39 	.word	0x08000f39
 8000eb4:	08000f65 	.word	0x08000f65
 8000eb8:	08000f7d 	.word	0x08000f7d
 8000ebc:	08000fd3 	.word	0x08000fd3
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	7952      	ldrb	r2, [r2, #5]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b55      	cmp	r3, #85	; 0x55
 8000ece:	f040 80ac 	bne.w	800102a <DecodeHeader+0x1a6>
                    RX->header = 1;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2205      	movs	r2, #5
 8000edc:	73da      	strb	r2, [r3, #15]
                }
                break;
 8000ede:	e0a4      	b.n	800102a <DecodeHeader+0x1a6>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	7952      	ldrb	r2, [r2, #5]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b4e      	cmp	r3, #78	; 0x4e
 8000eee:	d103      	bne.n	8000ef8 <DecodeHeader+0x74>
                    RX->header = 2;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000ef6:	e09b      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	795b      	ldrb	r3, [r3, #5]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	715a      	strb	r2, [r3, #5]
                break;
 8000f0a:	e091      	b.n	8001030 <DecodeHeader+0x1ac>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	7952      	ldrb	r2, [r2, #5]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b45      	cmp	r3, #69	; 0x45
 8000f1a:	d103      	bne.n	8000f24 <DecodeHeader+0xa0>
                    RX->header = 3;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000f22:	e085      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	715a      	strb	r2, [r3, #5]
                break;
 8000f36:	e07b      	b.n	8001030 <DecodeHeader+0x1ac>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	7952      	ldrb	r2, [r2, #5]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b52      	cmp	r3, #82	; 0x52
 8000f46:	d103      	bne.n	8000f50 <DecodeHeader+0xcc>
                    RX->header = 4;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000f4e:	e06f      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	715a      	strb	r2, [r3, #5]
                break;
 8000f62:	e065      	b.n	8001030 <DecodeHeader+0x1ac>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	7952      	ldrb	r2, [r2, #5]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2205      	movs	r2, #5
 8000f78:	71da      	strb	r2, [r3, #7]
                break;
 8000f7a:	e059      	b.n	8001030 <DecodeHeader+0x1ac>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7952      	ldrb	r2, [r2, #5]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b3a      	cmp	r3, #58	; 0x3a
 8000f8a:	d118      	bne.n	8000fbe <DecodeHeader+0x13a>
                    RX->header = 6;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2206      	movs	r2, #6
 8000f90:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	735a      	strb	r2, [r3, #13]
                    RX->iData &= RX->maskSize;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7b5a      	ldrb	r2, [r3, #13]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7b9b      	ldrb	r3, [r3, #14]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	735a      	strb	r2, [r3, #13]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7adb      	ldrb	r3, [r3, #11]
 8000fb2:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000fbc:	e038      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	795b      	ldrb	r3, [r3, #5]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	715a      	strb	r2, [r3, #5]
                break;
 8000fd0:	e02e      	b.n	8001030 <DecodeHeader+0x1ac>
            case 6:
                RX->nbytes--;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7adb      	ldrb	r3, [r3, #11]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7adb      	ldrb	r3, [r3, #11]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00c      	beq.n	8001000 <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a5a      	ldrb	r2, [r3, #9]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	7949      	ldrb	r1, [r1, #5]
 8000ff2:	440b      	add	r3, r1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4053      	eors	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	725a      	strb	r2, [r3, #9]
                    RX->header = 0 ;
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                    }
                }
                break;
 8000ffe:	e016      	b.n	800102e <DecodeHeader+0x1aa>
                    RX->header = 0 ;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7a5a      	ldrb	r2, [r3, #9]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	7949      	ldrb	r1, [r1, #5]
 8001012:	440b      	add	r3, r1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d109      	bne.n	800102e <DecodeHeader+0x1aa>
                        RX->ISCMD = 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	719a      	strb	r2, [r3, #6]
                break;
 8001020:	e005      	b.n	800102e <DecodeHeader+0x1aa>

            default:
                RX->header = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	71da      	strb	r2, [r3, #7]
                break;
 8001028:	e002      	b.n	8001030 <DecodeHeader+0x1ac>
                break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <DecodeHeader+0x1ac>
                break;
 800102e:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	795a      	ldrb	r2, [r3, #5]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b9b      	ldrb	r3, [r3, #14]
 8001038:	4013      	ands	r3, r2
 800103a:	b2da      	uxtb	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	795b      	ldrb	r3, [r3, #5]
 8001044:	3301      	adds	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;                                                // Enmascaro el indice de lectura - Cuando llega a 63 se pone en 0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	795a      	ldrb	r2, [r3, #5]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7b9b      	ldrb	r3, [r3, #14]
 8001054:	4013      	ands	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	795b      	ldrb	r3, [r3, #5]
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	429a      	cmp	r2, r3
 8001064:	f47f af16 	bne.w	8000e94 <DecodeHeader+0x10>
    }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <DecodeCmd>:

void DecodeCmd(_Rx *RX, _Tx *TX){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    RX->ISCMD = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	719a      	strb	r2, [r3, #6]

    switch(RX->Buff[RX->iData]){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	7b52      	ldrb	r2, [r2, #13]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2bf0      	cmp	r3, #240	; 0xf0
 8001092:	d118      	bne.n	80010c6 <DecodeCmd+0x52>

    	/*
         * Comando para enviar alive
         */
        case 0xF0:                                                              //Alive
			if(espConnected){
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <DecodeCmd+0x84>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <DecodeCmd+0x38>
				SendUDPData(0xF0, 1);
 80010a2:	2101      	movs	r1, #1
 80010a4:	20f0      	movs	r0, #240	; 0xf0
 80010a6:	f000 f865 	bl	8001174 <SendUDPData>
			else{
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xF0, 2);
	            PutByteOnTx((_Tx *)&TXUSB, 0x0D);
	            PutcksOnTx((_Tx *)&TXUSB);
			}
            break;
 80010aa:	e021      	b.n	80010f0 <DecodeCmd+0x7c>
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xF0, 2);
 80010ac:	2202      	movs	r2, #2
 80010ae:	21f0      	movs	r1, #240	; 0xf0
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <DecodeCmd+0x88>)
 80010b2:	f000 f935 	bl	8001320 <PutHeaderOnTx>
	            PutByteOnTx((_Tx *)&TXUSB, 0x0D);
 80010b6:	210d      	movs	r1, #13
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <DecodeCmd+0x88>)
 80010ba:	f000 f8e6 	bl	800128a <PutByteOnTx>
	            PutcksOnTx((_Tx *)&TXUSB);
 80010be:	480f      	ldr	r0, [pc, #60]	; (80010fc <DecodeCmd+0x88>)
 80010c0:	f000 f9c5 	bl	800144e <PutcksOnTx>
            break;
 80010c4:	e014      	b.n	80010f0 <DecodeCmd+0x7c>
        /*
         * Comando para enviar aviso de error
         */
        default:
			if(espConnected){
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <DecodeCmd+0x84>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <DecodeCmd+0x6a>
				SendUDPData(0xFF, 1);
 80010d4:	2101      	movs	r1, #1
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f000 f84c 	bl	8001174 <SendUDPData>
			}
			else{
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xFF, 1);
	            PutcksOnTx((_Tx *)&TXUSB);
			}
            break;
 80010dc:	e007      	b.n	80010ee <DecodeCmd+0x7a>
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xFF, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	21ff      	movs	r1, #255	; 0xff
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <DecodeCmd+0x88>)
 80010e4:	f000 f91c 	bl	8001320 <PutHeaderOnTx>
	            PutcksOnTx((_Tx *)&TXUSB);
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <DecodeCmd+0x88>)
 80010ea:	f000 f9b0 	bl	800144e <PutcksOnTx>
            break;
 80010ee:	bf00      	nop
    }
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000890 	.word	0x20000890
 80010fc:	200006b8 	.word	0x200006b8

08001100 <PutCIPSENDOnTx>:

void PutCIPSENDOnTx(const char * CantDatos){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
//	strcpy(CantBytes, (char *)CantDatos);
	PutStrOnTx((_Tx *)&TXUSART1, CIPSEND);
 8001108:	4918      	ldr	r1, [pc, #96]	; (800116c <PutCIPSENDOnTx+0x6c>)
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <PutCIPSENDOnTx+0x70>)
 800110c:	f000 f890 	bl	8001230 <PutStrOnTx>
	PutStrOnTx((_Tx *)&TXUSART1, CantDatos);
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001114:	f000 f88c 	bl	8001230 <PutStrOnTx>
	TXUSART1.Buff[TXUSART1.iw++] = '\r';
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <PutCIPSENDOnTx+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <PutCIPSENDOnTx+0x70>)
 800111e:	791b      	ldrb	r3, [r3, #4]
 8001120:	1c59      	adds	r1, r3, #1
 8001122:	b2c8      	uxtb	r0, r1
 8001124:	4912      	ldr	r1, [pc, #72]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001126:	7108      	strb	r0, [r1, #4]
 8001128:	4413      	add	r3, r2
 800112a:	220d      	movs	r2, #13
 800112c:	701a      	strb	r2, [r3, #0]
	TXUSART1.iw &= TXUSART1.maskSize;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001130:	791a      	ldrb	r2, [r3, #4]
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001134:	7a1b      	ldrb	r3, [r3, #8]
 8001136:	4013      	ands	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <PutCIPSENDOnTx+0x70>)
 800113c:	711a      	strb	r2, [r3, #4]
	TXUSART1.Buff[TXUSART1.iw++] = '\n';
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001144:	791b      	ldrb	r3, [r3, #4]
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	b2c8      	uxtb	r0, r1
 800114a:	4909      	ldr	r1, [pc, #36]	; (8001170 <PutCIPSENDOnTx+0x70>)
 800114c:	7108      	strb	r0, [r1, #4]
 800114e:	4413      	add	r3, r2
 8001150:	220a      	movs	r2, #10
 8001152:	701a      	strb	r2, [r3, #0]
	TXUSART1.iw &= TXUSART1.maskSize;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001156:	791a      	ldrb	r2, [r3, #4]
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <PutCIPSENDOnTx+0x70>)
 800115a:	7a1b      	ldrb	r3, [r3, #8]
 800115c:	4013      	ands	r3, r2
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <PutCIPSENDOnTx+0x70>)
 8001162:	711a      	strb	r2, [r3, #4]
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800bbfc 	.word	0x0800bbfc
 8001170:	20000c20 	.word	0x20000c20

08001174 <SendUDPData>:
void SendUDPData(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	switch(Data){
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SendUDPData+0xa4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d849      	bhi.n	8001214 <SendUDPData+0xa0>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <SendUDPData+0x14>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	08001199 	.word	0x08001199
 800118c:	080011ad 	.word	0x080011ad
 8001190:	080011d3 	.word	0x080011d3
 8001194:	080011e7 	.word	0x080011e7
		case 0:
			PutCIPSENDOnTx("9");
 8001198:	4820      	ldr	r0, [pc, #128]	; (800121c <SendUDPData+0xa8>)
 800119a:	f7ff ffb1 	bl	8001100 <PutCIPSENDOnTx>
			Data++;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <SendUDPData+0xa4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <SendUDPData+0xa4>)
 80011a8:	701a      	strb	r2, [r3, #0]
		break;
 80011aa:	e033      	b.n	8001214 <SendUDPData+0xa0>

		case 1:
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xF0, 2);
 80011ac:	2202      	movs	r2, #2
 80011ae:	21f0      	movs	r1, #240	; 0xf0
 80011b0:	481b      	ldr	r0, [pc, #108]	; (8001220 <SendUDPData+0xac>)
 80011b2:	f000 f8b5 	bl	8001320 <PutHeaderOnTx>
			PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 80011b6:	210d      	movs	r1, #13
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <SendUDPData+0xac>)
 80011ba:	f000 f866 	bl	800128a <PutByteOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <SendUDPData+0xac>)
 80011c0:	f000 f945 	bl	800144e <PutcksOnTx>
			Data++;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <SendUDPData+0xa4>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <SendUDPData+0xa4>)
 80011ce:	701a      	strb	r2, [r3, #0]
		break;
 80011d0:	e020      	b.n	8001214 <SendUDPData+0xa0>

		case 2:
			PutCIPSENDOnTx("24");
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <SendUDPData+0xb0>)
 80011d4:	f7ff ff94 	bl	8001100 <PutCIPSENDOnTx>
			Data++;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <SendUDPData+0xa4>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <SendUDPData+0xa4>)
 80011e2:	701a      	strb	r2, [r3, #0]
		break;
 80011e4:	e016      	b.n	8001214 <SendUDPData+0xa0>

		case 3:
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xA0, 17);
 80011e6:	2211      	movs	r2, #17
 80011e8:	21a0      	movs	r1, #160	; 0xa0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <SendUDPData+0xac>)
 80011ec:	f000 f898 	bl	8001320 <PutHeaderOnTx>
			PutBuffOnTx((_Tx *)&TXUSART1, (uint8_t *)&bufADC[iAdc], 16);
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <SendUDPData+0xb4>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <SendUDPData+0xb8>)
 80011fa:	4413      	add	r3, r2
 80011fc:	2210      	movs	r2, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <SendUDPData+0xac>)
 8001202:	f000 f860 	bl	80012c6 <PutBuffOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <SendUDPData+0xac>)
 8001208:	f000 f921 	bl	800144e <PutcksOnTx>
			Data = 0;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <SendUDPData+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
		break;
 8001212:	bf00      	nop
	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000898 	.word	0x20000898
 800121c:	0800bb2c 	.word	0x0800bb2c
 8001220:	20000c20 	.word	0x20000c20
 8001224:	0800bb30 	.word	0x0800bb30
 8001228:	20000711 	.word	0x20000711
 800122c:	200008e0 	.word	0x200008e0

08001230 <PutStrOnTx>:
//		break;
//	}
//}

void PutStrOnTx(_Tx *TX, const char *str)
{
 8001230:	b490      	push	{r4, r7}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]

    while(str[i]) {
 800123e:	e018      	b.n	8001272 <PutStrOnTx+0x42>
        TX->Buff[TX->iw++] = str[i++];
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	73fa      	strb	r2, [r7, #15]
 8001246:	461a      	mov	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	441a      	add	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	1c58      	adds	r0, r3, #1
 8001256:	b2c4      	uxtb	r4, r0
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	7104      	strb	r4, [r0, #4]
 800125c:	440b      	add	r3, r1
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	791a      	ldrb	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7a1b      	ldrb	r3, [r3, #8]
 800126a:	4013      	ands	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	711a      	strb	r2, [r3, #4]
    while(str[i]) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e0      	bne.n	8001240 <PutStrOnTx+0x10>
    }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bc90      	pop	{r4, r7}
 8001288:	4770      	bx	lr

0800128a <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	1c59      	adds	r1, r3, #1
 80012a0:	b2c8      	uxtb	r0, r1
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	7108      	strb	r0, [r1, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	78fa      	ldrb	r2, [r7, #3]
 80012aa:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	791a      	ldrb	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7a1b      	ldrb	r3, [r3, #8]
 80012b4:	4013      	ands	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	711a      	strb	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PutBuffOnTx>:

void PutBuffOnTx(_Tx *TX, uint8_t *buf, uint8_t length)
{
 80012c6:	b490      	push	{r4, r7}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0; i<length; i++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e018      	b.n	800130c <PutBuffOnTx+0x46>

    	TX->Buff[TX->iw++] = buf[i];
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	441a      	add	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	1c58      	adds	r0, r3, #1
 80012ea:	b2c4      	uxtb	r4, r0
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	7104      	strb	r4, [r0, #4]
 80012f0:	440b      	add	r3, r1
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
    	TX->iw &= TX->maskSize;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	791a      	ldrb	r2, [r3, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	7a1b      	ldrb	r3, [r3, #8]
 80012fe:	4013      	ands	r3, r2
 8001300:	b2da      	uxtb	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	711a      	strb	r2, [r3, #4]
    for(i=0; i<length; i++) {
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	3301      	adds	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfa      	ldrb	r2, [r7, #23]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3e2      	bcc.n	80012da <PutBuffOnTx+0x14>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bc90      	pop	{r4, r7}
 800131e:	4770      	bx	lr

08001320 <PutHeaderOnTx>:

void PutHeaderOnTx(_Tx *TX, uint8_t cmd, uint8_t CantDatos)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	1c59      	adds	r1, r3, #1
 800133a:	b2c8      	uxtb	r0, r1
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	7108      	strb	r0, [r1, #4]
 8001340:	4413      	add	r3, r2
 8001342:	2255      	movs	r2, #85	; 0x55
 8001344:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	791a      	ldrb	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7a1b      	ldrb	r3, [r3, #8]
 800134e:	4013      	ands	r3, r2
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	1c59      	adds	r1, r3, #1
 8001360:	b2c8      	uxtb	r0, r1
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	7108      	strb	r0, [r1, #4]
 8001366:	4413      	add	r3, r2
 8001368:	224e      	movs	r2, #78	; 0x4e
 800136a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	791a      	ldrb	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7a1b      	ldrb	r3, [r3, #8]
 8001374:	4013      	ands	r3, r2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	791b      	ldrb	r3, [r3, #4]
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	b2c8      	uxtb	r0, r1
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	7108      	strb	r0, [r1, #4]
 800138c:	4413      	add	r3, r2
 800138e:	2245      	movs	r2, #69	; 0x45
 8001390:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	791a      	ldrb	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7a1b      	ldrb	r3, [r3, #8]
 800139a:	4013      	ands	r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	791b      	ldrb	r3, [r3, #4]
 80013aa:	1c59      	adds	r1, r3, #1
 80013ac:	b2c8      	uxtb	r0, r1
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	7108      	strb	r0, [r1, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	2252      	movs	r2, #82	; 0x52
 80013b6:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	791a      	ldrb	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7a1b      	ldrb	r3, [r3, #8]
 80013c0:	4013      	ands	r3, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	711a      	strb	r2, [r3, #4]
    //lcmd cantidad de datos: id+payload+cks
    TX->length = CantDatos;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	78ba      	ldrb	r2, [r7, #2]
 80013cc:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = CantDatos + 1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	791b      	ldrb	r3, [r3, #4]
 80013d6:	1c59      	adds	r1, r3, #1
 80013d8:	b2c8      	uxtb	r0, r1
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	7108      	strb	r0, [r1, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	78ba      	ldrb	r2, [r7, #2]
 80013e2:	3201      	adds	r2, #1
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	791a      	ldrb	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	4013      	ands	r3, r2
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	1c59      	adds	r1, r3, #1
 8001402:	b2c8      	uxtb	r0, r1
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	7108      	strb	r0, [r1, #4]
 8001408:	4413      	add	r3, r2
 800140a:	223a      	movs	r2, #58	; 0x3a
 800140c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	791a      	ldrb	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7a1b      	ldrb	r3, [r3, #8]
 8001416:	4013      	ands	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = cmd;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	b2c8      	uxtb	r0, r1
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	7108      	strb	r0, [r1, #4]
 800142e:	4413      	add	r3, r2
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	791a      	ldrb	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7a1b      	ldrb	r3, [r3, #8]
 800143c:	4013      	ands	r3, r2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	711a      	strb	r2, [r3, #4]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <PutcksOnTx>:

void PutcksOnTx(_Tx *TX)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	799b      	ldrb	r3, [r3, #6]
 800145e:	3306      	adds	r3, #6
 8001460:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	791a      	ldrb	r2, [r3, #4]
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7a1a      	ldrb	r2, [r3, #8]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4013      	ands	r3, r2
 8001474:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 8001476:	e00e      	b.n	8001496 <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	1c59      	adds	r1, r3, #1
 8001480:	73b9      	strb	r1, [r7, #14]
 8001482:	4413      	add	r3, r2
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	4053      	eors	r3, r2
 800148a:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7a1a      	ldrb	r2, [r3, #8]
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	4013      	ands	r3, r2
 8001494:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	7bba      	ldrb	r2, [r7, #14]
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	b2c8      	uxtb	r0, r1
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	7108      	strb	r0, [r1, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	791a      	ldrb	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7a1b      	ldrb	r3, [r3, #8]
 80014be:	4013      	ands	r3, r2
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	711a      	strb	r2, [r3, #4]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f000 ff84 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 fa7e 	bl	80019d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014dc:	f000 fcd8 	bl	8001e90 <MX_GPIO_Init>
  MX_TIM4_Init();
 80014e0:	f000 fbf6 	bl	8001cd0 <MX_TIM4_Init>
  MX_I2C2_Init();
 80014e4:	f000 fb78 	bl	8001bd8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80014e8:	f000 fc8a 	bl	8001e00 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80014ec:	f000 fcb2 	bl	8001e54 <MX_DMA_Init>
  MX_ADC1_Init();
 80014f0:	f000 fad0 	bl	8001a94 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80014f4:	f009 fe2c 	bl	800b150 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80014f8:	f000 fb9c 	bl	8001c34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 80014fc:	48a2      	ldr	r0, [pc, #648]	; (8001788 <main+0x2b8>)
 80014fe:	f009 ff17 	bl	800b330 <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 8001502:	48a2      	ldr	r0, [pc, #648]	; (800178c <main+0x2bc>)
 8001504:	f004 fc32 	bl	8005d6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001508:	48a1      	ldr	r0, [pc, #644]	; (8001790 <main+0x2c0>)
 800150a:	f004 fc2f 	bl	8005d6c <HAL_TIM_Base_Start_IT>
  //Enable ESP8266
  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);	//Enable ESP8266
 800150e:	2201      	movs	r2, #1
 8001510:	2120      	movs	r1, #32
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <main+0x2c4>)
 8001514:	f002 f8cf 	bl	80036b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);	//Reset ESP8266
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	489d      	ldr	r0, [pc, #628]	; (8001794 <main+0x2c4>)
 800151e:	f002 f8ca 	bl	80036b6 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001522:	2100      	movs	r1, #0
 8001524:	4899      	ldr	r0, [pc, #612]	; (800178c <main+0x2bc>)
 8001526:	f004 fccb 	bl	8005ec0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800152a:	2104      	movs	r1, #4
 800152c:	4897      	ldr	r0, [pc, #604]	; (800178c <main+0x2bc>)
 800152e:	f004 fcc7 	bl	8005ec0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001532:	2108      	movs	r1, #8
 8001534:	4895      	ldr	r0, [pc, #596]	; (800178c <main+0x2bc>)
 8001536:	f004 fcc3 	bl	8005ec0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800153a:	210c      	movs	r1, #12
 800153c:	4893      	ldr	r0, [pc, #588]	; (800178c <main+0x2bc>)
 800153e:	f004 fcbf 	bl	8005ec0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001542:	4b92      	ldr	r3, [pc, #584]	; (800178c <main+0x2bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800154a:	4b90      	ldr	r3, [pc, #576]	; (800178c <main+0x2bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001552:	4b8e      	ldr	r3, [pc, #568]	; (800178c <main+0x2bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2200      	movs	r2, #0
 8001558:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800155a:	4b8c      	ldr	r3, [pc, #560]	; (800178c <main+0x2bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
/***********************************************************************************/
/************************** Inicializacion de contadores ***************************/
/***********************************************************************************/
  Count100ms = 100;
 8001562:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <main+0x2c8>)
 8001564:	2264      	movs	r2, #100	; 0x64
 8001566:	801a      	strh	r2, [r3, #0]
  Count200ms = 0;
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <main+0x2cc>)
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
  Count3000ms = 0;
 800156e:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <main+0x2d0>)
 8001570:	2200      	movs	r2, #0
 8001572:	801a      	strh	r2, [r3, #0]
  Count500ms = 5;
 8001574:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <main+0x2d4>)
 8001576:	2205      	movs	r2, #5
 8001578:	801a      	strh	r2, [r3, #0]
  DecodeTimeOut = 60;
 800157a:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <main+0x2d8>)
 800157c:	223c      	movs	r2, #60	; 0x3c
 800157e:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/*************************** Inicializacion de variables USB ***********************/
/***********************************************************************************/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 8001580:	4b8a      	ldr	r3, [pc, #552]	; (80017ac <main+0x2dc>)
 8001582:	4a8b      	ldr	r2, [pc, #556]	; (80017b0 <main+0x2e0>)
 8001584:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 8001586:	4b89      	ldr	r3, [pc, #548]	; (80017ac <main+0x2dc>)
 8001588:	2200      	movs	r2, #0
 800158a:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 800158c:	4b87      	ldr	r3, [pc, #540]	; (80017ac <main+0x2dc>)
 800158e:	2200      	movs	r2, #0
 8001590:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 8001592:	4b86      	ldr	r3, [pc, #536]	; (80017ac <main+0x2dc>)
 8001594:	2200      	movs	r2, #0
 8001596:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 255;
 8001598:	4b84      	ldr	r3, [pc, #528]	; (80017ac <main+0x2dc>)
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	739a      	strb	r2, [r3, #14]
  RXUSB.ISCMD = 0;
 800159e:	4b83      	ldr	r3, [pc, #524]	; (80017ac <main+0x2dc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 80015a4:	4b83      	ldr	r3, [pc, #524]	; (80017b4 <main+0x2e4>)
 80015a6:	4a84      	ldr	r2, [pc, #528]	; (80017b8 <main+0x2e8>)
 80015a8:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 80015aa:	4b82      	ldr	r3, [pc, #520]	; (80017b4 <main+0x2e4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 80015b0:	4b80      	ldr	r3, [pc, #512]	; (80017b4 <main+0x2e4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 255;
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <main+0x2e4>)
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	721a      	strb	r2, [r3, #8]
  TXUSB.maskBuf = 255;
 80015bc:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <main+0x2e4>)
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	725a      	strb	r2, [r3, #9]
/***********************************************************************************/

/***********************************************************************************/
/********************** Inicialización de  ESP8266 ************************/
/***********************************************************************************/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 80015c2:	4b7e      	ldr	r3, [pc, #504]	; (80017bc <main+0x2ec>)
 80015c4:	4a7e      	ldr	r2, [pc, #504]	; (80017c0 <main+0x2f0>)
 80015c6:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 80015c8:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <main+0x2ec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 80015ce:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <main+0x2ec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 80015d4:	4b79      	ldr	r3, [pc, #484]	; (80017bc <main+0x2ec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 255;
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <main+0x2ec>)
 80015dc:	22ff      	movs	r2, #255	; 0xff
 80015de:	739a      	strb	r2, [r3, #14]
  RXUSART1.ISCMD = 0;
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <main+0x2ec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	719a      	strb	r2, [r3, #6]

  TXUSART1.Buff = txUSART1Buff;
 80015e6:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <main+0x2f4>)
 80015e8:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <main+0x2f8>)
 80015ea:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 80015ec:	4b75      	ldr	r3, [pc, #468]	; (80017c4 <main+0x2f4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 80015f2:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <main+0x2f4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 255;
 80015f8:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <main+0x2f4>)
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	721a      	strb	r2, [r3, #8]
  TXUSART1.maskBuf = 255;
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <main+0x2f4>)
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	725a      	strb	r2, [r3, #9]

  /*Bits de control*/
  DecodeIPD = 0;
 8001604:	4a71      	ldr	r2, [pc, #452]	; (80017cc <main+0x2fc>)
 8001606:	7813      	ldrb	r3, [r2, #0]
 8001608:	f36f 1386 	bfc	r3, #6, #1
 800160c:	7013      	strb	r3, [r2, #0]
  DecodeCIPSEND = 0;
 800160e:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <main+0x300>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
  DecodeHeaderESP = 0;
 8001614:	4a6d      	ldr	r2, [pc, #436]	; (80017cc <main+0x2fc>)
 8001616:	7813      	ldrb	r3, [r2, #0]
 8001618:	f36f 03c3 	bfc	r3, #3, #1
 800161c:	7013      	strb	r3, [r2, #0]
  ESPReadyToRecyb = 0;
 800161e:	4a6b      	ldr	r2, [pc, #428]	; (80017cc <main+0x2fc>)
 8001620:	7813      	ldrb	r3, [r2, #0]
 8001622:	f36f 1345 	bfc	r3, #5, #1
 8001626:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND0xF0 = 0;
 8001628:	4a68      	ldr	r2, [pc, #416]	; (80017cc <main+0x2fc>)
 800162a:	7813      	ldrb	r3, [r2, #0]
 800162c:	f36f 13c7 	bfc	r3, #7, #1
 8001630:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND0xA0 = 0;
 8001632:	4a68      	ldr	r2, [pc, #416]	; (80017d4 <main+0x304>)
 8001634:	7813      	ldrb	r3, [r2, #0]
 8001636:	f36f 0382 	bfc	r3, #2, #1
 800163a:	7013      	strb	r3, [r2, #0]
  ResetESP = 1;
 800163c:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <main+0x304>)
 800163e:	7813      	ldrb	r3, [r2, #0]
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	7013      	strb	r3, [r2, #0]
  Estado = 0;
 8001646:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <main+0x308>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
  Indice = 0;
 800164c:	4b63      	ldr	r3, [pc, #396]	; (80017dc <main+0x30c>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
  SentDataESP = 0;
 8001652:	4a60      	ldr	r2, [pc, #384]	; (80017d4 <main+0x304>)
 8001654:	7813      	ldrb	r3, [r2, #0]
 8001656:	f36f 0341 	bfc	r3, #1, #1
 800165a:	7013      	strb	r3, [r2, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************ Inicializacion de variables ADC **************************/
/***********************************************************************************/
  iAdc = 0;
 800165c:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <main+0x310>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
  FirtScan=1;
 8001662:	4b60      	ldr	r3, [pc, #384]	; (80017e4 <main+0x314>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]


/***********************************************************************************/
/***************** Inicializacion de variables error cuadratico ********************/
/***********************************************************************************/
  posMINCenter = 0;
 8001668:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <main+0x318>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  posMINDerecha = 0;
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <main+0x31c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
  posMINIzquierda = 0;
 8001674:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <main+0x320>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
  sensorValue = 0;
 800167a:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <main+0x324>)
 800167c:	2200      	movs	r2, #0
 800167e:	801a      	strh	r2, [r3, #0]
  error = 0;
 8001680:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <main+0x328>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************* Inicialización de variables PID *************************/
/***********************************************************************************/
  Kp = 0;
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <main+0x32c>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
  Ki = 0;
 800168c:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <main+0x330>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
  Kd = 0;
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <main+0x334>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
  Proporcional = 0;
 8001698:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <main+0x338>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
  Integral = 0;
 800169e:	4b5b      	ldr	r3, [pc, #364]	; (800180c <main+0x33c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
  Derivativo = 0;
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <main+0x340>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED de estado - Parpadea cada 100ms
	  if(On100ms){
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <main+0x344>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d030      	beq.n	8001716 <main+0x246>
		  On100ms = 0;
 80016b4:	4b57      	ldr	r3, [pc, #348]	; (8001814 <main+0x344>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 80016ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016be:	4856      	ldr	r0, [pc, #344]	; (8001818 <main+0x348>)
 80016c0:	f002 f811 	bl	80036e6 <HAL_GPIO_TogglePin>

		  if(espConnected){
 80016c4:	4b41      	ldr	r3, [pc, #260]	; (80017cc <main+0x2fc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <main+0x22e>
			  if(Count200ms > 0){
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <main+0x2cc>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <main+0x21a>
				  Count200ms--;
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <main+0x2cc>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <main+0x2cc>)
 80016e8:	801a      	strh	r2, [r3, #0]
			  }
			  if(!Count200ms){
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <main+0x2cc>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d104      	bne.n	80016fe <main+0x22e>
				  Count200ms = 1;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <main+0x2cc>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	801a      	strh	r2, [r3, #0]
				  SendUDPData();
 80016fa:	f7ff fd3b 	bl	8001174 <SendUDPData>
//				  }
//			  }
		  }

		  //Utilizado como delay para no capturar basura de la ESP8266 al iniciarla
		  if(DecodeTimeOut > 0){
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <main+0x2d8>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <main+0x246>
			  DecodeTimeOut--;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <main+0x2d8>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <main+0x2d8>)
 8001714:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  //Recepcion por USB - Decodifica header
	  if(RXUSB.iw != RXUSB.ir) {
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <main+0x2dc>)
 8001718:	791b      	ldrb	r3, [r3, #4]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <main+0x2dc>)
 800171e:	795b      	ldrb	r3, [r3, #5]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	429a      	cmp	r2, r3
 8001724:	d002      	beq.n	800172c <main+0x25c>
		  DecodeHeader((_Rx *)&RXUSB);
 8001726:	4821      	ldr	r0, [pc, #132]	; (80017ac <main+0x2dc>)
 8001728:	f7ff fbac 	bl	8000e84 <DecodeHeader>
	  }
	  //Recepcion por USB - Decodifica comando
	  if(RXUSB.ISCMD) {
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <main+0x2dc>)
 800172e:	799b      	ldrb	r3, [r3, #6]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <main+0x26e>
		  DecodeCmd((_Rx *)&RXUSB, (_Tx *)&TXUSB);
 8001736:	491f      	ldr	r1, [pc, #124]	; (80017b4 <main+0x2e4>)
 8001738:	481c      	ldr	r0, [pc, #112]	; (80017ac <main+0x2dc>)
 800173a:	f7ff fc9b 	bl	8001074 <DecodeCmd>
	  }
	  //Transmision por USB
	  if(TXUSB.iw != TXUSB.ir) {
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <main+0x2e4>)
 8001740:	791a      	ldrb	r2, [r3, #4]
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <main+0x2e4>)
 8001744:	795b      	ldrb	r3, [r3, #5]
 8001746:	429a      	cmp	r2, r3
 8001748:	f000 808d 	beq.w	8001866 <main+0x396>
		  if(TXUSB.iw > TXUSB.ir){
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <main+0x2e4>)
 800174e:	791a      	ldrb	r2, [r3, #4]
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <main+0x2e4>)
 8001752:	795b      	ldrb	r3, [r3, #5]
 8001754:	429a      	cmp	r2, r3
 8001756:	d961      	bls.n	800181c <main+0x34c>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <main+0x2e4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <main+0x2e4>)
 800175e:	7952      	ldrb	r2, [r2, #5]
 8001760:	1898      	adds	r0, r3, r2
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <main+0x2e4>)
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <main+0x2e4>)
 800176a:	795b      	ldrb	r3, [r3, #5]
 800176c:	b29b      	uxth	r3, r3
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	b29b      	uxth	r3, r3
 8001772:	4619      	mov	r1, r3
 8001774:	f009 fdb6 	bl	800b2e4 <CDC_Transmit_FS>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d16b      	bne.n	8001856 <main+0x386>
				  TXUSB.ir=TXUSB.iw;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <main+0x2e4>)
 8001780:	791a      	ldrb	r2, [r3, #4]
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <main+0x2e4>)
 8001784:	715a      	strb	r2, [r3, #5]
 8001786:	e066      	b.n	8001856 <main+0x386>
 8001788:	08000e35 	.word	0x08000e35
 800178c:	200004cc 	.word	0x200004cc
 8001790:	200006c8 	.word	0x200006c8
 8001794:	40010c00 	.word	0x40010c00
 8001798:	20000af0 	.word	0x20000af0
 800179c:	20000ae2 	.word	0x20000ae2
 80017a0:	200004c6 	.word	0x200004c6
 80017a4:	200006b4 	.word	0x200006b4
 80017a8:	2000052c 	.word	0x2000052c
 80017ac:	20000c0c 	.word	0x20000c0c
 80017b0:	200005b0 	.word	0x200005b0
 80017b4:	200006b8 	.word	0x200006b8
 80017b8:	2000074c 	.word	0x2000074c
 80017bc:	20000518 	.word	0x20000518
 80017c0:	2000019c 	.word	0x2000019c
 80017c4:	20000c20 	.word	0x20000c20
 80017c8:	20000af4 	.word	0x20000af4
 80017cc:	20000890 	.word	0x20000890
 80017d0:	20000584 	.word	0x20000584
 80017d4:	20000710 	.word	0x20000710
 80017d8:	20000744 	.word	0x20000744
 80017dc:	20000891 	.word	0x20000891
 80017e0:	20000711 	.word	0x20000711
 80017e4:	20000198 	.word	0x20000198
 80017e8:	20000712 	.word	0x20000712
 80017ec:	200006c4 	.word	0x200006c4
 80017f0:	20000c2c 	.word	0x20000c2c
 80017f4:	20000bf8 	.word	0x20000bf8
 80017f8:	20000aec 	.word	0x20000aec
 80017fc:	20000c03 	.word	0x20000c03
 8001800:	20000514 	.word	0x20000514
 8001804:	20000ae4 	.word	0x20000ae4
 8001808:	20000c04 	.word	0x20000c04
 800180c:	20000bfc 	.word	0x20000bfc
 8001810:	20000588 	.word	0x20000588
 8001814:	20000586 	.word	0x20000586
 8001818:	40011000 	.word	0x40011000
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 800181c:	4b63      	ldr	r3, [pc, #396]	; (80019ac <main+0x4dc>)
 800181e:	7a5b      	ldrb	r3, [r3, #9]
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b62      	ldr	r3, [pc, #392]	; (80019ac <main+0x4dc>)
 8001824:	795b      	ldrb	r3, [r3, #5]
 8001826:	b29b      	uxth	r3, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <main+0x4e0>)
 8001832:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 8001834:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <main+0x4dc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5c      	ldr	r2, [pc, #368]	; (80019ac <main+0x4dc>)
 800183a:	7952      	ldrb	r2, [r2, #5]
 800183c:	4413      	add	r3, r2
 800183e:	4a5c      	ldr	r2, [pc, #368]	; (80019b0 <main+0x4e0>)
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f009 fd4d 	bl	800b2e4 <CDC_Transmit_FS>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <main+0x386>
				  TXUSB.ir = 0;
 8001850:	4b56      	ldr	r3, [pc, #344]	; (80019ac <main+0x4dc>)
 8001852:	2200      	movs	r2, #0
 8001854:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 8001856:	4b55      	ldr	r3, [pc, #340]	; (80019ac <main+0x4dc>)
 8001858:	795a      	ldrb	r2, [r3, #5]
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <main+0x4dc>)
 800185c:	7a1b      	ldrb	r3, [r3, #8]
 800185e:	4013      	ands	r3, r2
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <main+0x4dc>)
 8001864:	715a      	strb	r2, [r3, #5]
	  }

	  //Primera inicializacion de ESP8266 y Reset
	  if((!DecodeTimeOut) && (ResetESP) && (!ESPReadyToRecyb)){
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <main+0x4e4>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11a      	bne.n	80018a6 <main+0x3d6>
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <main+0x4e8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d013      	beq.n	80018a6 <main+0x3d6>
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <main+0x4ec>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <main+0x3d6>
		  InitEsp((_Rx *)&RXUSART1);
 800188c:	484c      	ldr	r0, [pc, #304]	; (80019c0 <main+0x4f0>)
 800188e:	f7fe fe39 	bl	8000504 <InitEsp>
		  //Interrupcion para recibir datos desde ESP8266
		  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 8001892:	2201      	movs	r2, #1
 8001894:	494b      	ldr	r1, [pc, #300]	; (80019c4 <main+0x4f4>)
 8001896:	484c      	ldr	r0, [pc, #304]	; (80019c8 <main+0x4f8>)
 8001898:	f005 f9c3 	bl	8006c22 <HAL_UART_Receive_IT>
		  ResetESP = 0;
 800189c:	4a46      	ldr	r2, [pc, #280]	; (80019b8 <main+0x4e8>)
 800189e:	7813      	ldrb	r3, [r2, #0]
 80018a0:	f36f 0300 	bfc	r3, #0, #1
 80018a4:	7013      	strb	r3, [r2, #0]
	  }

	  //Continua con los casos para iniciar
	  if((!espConnected) && (!ESPReadyToRecyb) && (!ResetESP) && (!DecodeTimeOut)){
 80018a6:	4b45      	ldr	r3, [pc, #276]	; (80019bc <main+0x4ec>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d115      	bne.n	80018e0 <main+0x410>
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <main+0x4ec>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <main+0x410>
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <main+0x4e8>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <main+0x410>
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <main+0x4e4>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <main+0x410>
		  InitEsp((_Rx *)&RXUSART1);
 80018da:	4839      	ldr	r0, [pc, #228]	; (80019c0 <main+0x4f0>)
 80018dc:	f7fe fe12 	bl	8000504 <InitEsp>
	  }

	  //Recepcion por ESP8266 - Decodifica comandos provenientes de ESP8266
	  if(RXUSART1.iw != RXUSART1.ir){
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <main+0x4f0>)
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <main+0x4f0>)
 80018e8:	795b      	ldrb	r3, [r3, #5]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d002      	beq.n	80018f6 <main+0x426>
		  DecodeESP((_Rx *)&RXUSART1);
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <main+0x4f0>)
 80018f2:	f7fe fee7 	bl	80006c4 <DecodeESP>
	  }
	  //Si la decodificacion resulta de un dato proveniente de PC, se decodifica header
	  if(DecodeHeaderESP){
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <main+0x4ec>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <main+0x444>
		  DecodeHeader((_Rx *)&RXUSART1);
 8001904:	482e      	ldr	r0, [pc, #184]	; (80019c0 <main+0x4f0>)
 8001906:	f7ff fabd 	bl	8000e84 <DecodeHeader>
		  DecodeHeaderESP = 0;
 800190a:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <main+0x4ec>)
 800190c:	7813      	ldrb	r3, [r2, #0]
 800190e:	f36f 03c3 	bfc	r3, #3, #1
 8001912:	7013      	strb	r3, [r2, #0]
	  }
	  //Recepcion por ESP8266 - Decodifica comando
	  if(RXUSART1.ISCMD) {
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <main+0x4f0>)
 8001916:	799b      	ldrb	r3, [r3, #6]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <main+0x456>
		  DecodeCmd((_Rx *)&RXUSART1, (_Tx *)&TXUSART1);
 800191e:	492b      	ldr	r1, [pc, #172]	; (80019cc <main+0x4fc>)
 8001920:	4827      	ldr	r0, [pc, #156]	; (80019c0 <main+0x4f0>)
 8001922:	f7ff fba7 	bl	8001074 <DecodeCmd>
	  }

	  //Transmision por ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <main+0x4fc>)
 8001928:	791a      	ldrb	r2, [r3, #4]
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <main+0x4fc>)
 800192c:	795b      	ldrb	r3, [r3, #5]
 800192e:	429a      	cmp	r2, r3
 8001930:	d012      	beq.n	8001958 <main+0x488>
		  if((huart1.Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE){
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <main+0x4f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193c:	2b80      	cmp	r3, #128	; 0x80
 800193e:	d10b      	bne.n	8001958 <main+0x488>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <main+0x4fc>)
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	b2d1      	uxtb	r1, r2
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <main+0x4fc>)
 800194a:	7151      	strb	r1, [r2, #5]
 800194c:	461a      	mov	r2, r3
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <main+0x500>)
 8001950:	5c9a      	ldrb	r2, [r3, r2]
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <main+0x4f8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
		  }
	  }

	  //Reset ESPE8266
	  if((HAL_GPIO_ReadPin(GPIOB, RESET_ESP_Pin) == GPIO_PIN_RESET) && (!DecodeTimeOut) && (ResetESP) && (ESPReadyToRecyb)){
 8001958:	2110      	movs	r1, #16
 800195a:	481e      	ldr	r0, [pc, #120]	; (80019d4 <main+0x504>)
 800195c:	f001 fe94 	bl	8003688 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f aea1 	bne.w	80016aa <main+0x1da>
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <main+0x4e4>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae9b 	bne.w	80016aa <main+0x1da>
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <main+0x4e8>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	f43f ae93 	beq.w	80016aa <main+0x1da>
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <main+0x4ec>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f43f ae8b 	beq.w	80016aa <main+0x1da>
		  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2110      	movs	r1, #16
 8001998:	480e      	ldr	r0, [pc, #56]	; (80019d4 <main+0x504>)
 800199a:	f001 fe8c 	bl	80036b6 <HAL_GPIO_WritePin>
		  ResetESP = 1;
 800199e:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <main+0x4e8>)
 80019a0:	7813      	ldrb	r3, [r2, #0]
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	7013      	strb	r3, [r2, #0]
	  if(On100ms){
 80019a8:	e67f      	b.n	80016aa <main+0x1da>
 80019aa:	bf00      	nop
 80019ac:	200006b8 	.word	0x200006b8
 80019b0:	2000058c 	.word	0x2000058c
 80019b4:	2000052c 	.word	0x2000052c
 80019b8:	20000710 	.word	0x20000710
 80019bc:	20000890 	.word	0x20000890
 80019c0:	20000518 	.word	0x20000518
 80019c4:	2000019c 	.word	0x2000019c
 80019c8:	2000084c 	.word	0x2000084c
 80019cc:	20000c20 	.word	0x20000c20
 80019d0:	20000af4 	.word	0x20000af4
 80019d4:	40010c00 	.word	0x40010c00

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b094      	sub	sp, #80	; 0x50
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	2228      	movs	r2, #40	; 0x28
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00a f88c 	bl	800bb04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a16:	2301      	movs	r3, #1
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a24:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fc7c 	bl	800532c <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a3a:	f000 faa1 	bl	8001f80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fee6 	bl	800582c <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a66:	f000 fa8b 	bl	8001f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001a6a:	2312      	movs	r3, #18
 8001a6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a72:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 f870 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a86:	f000 fa7b 	bl	8001f80 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3750      	adds	r7, #80	; 0x50
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001aa6:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <MX_ADC1_Init+0x140>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001ac0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ac4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001acc:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001ace:	2208      	movs	r2, #8
 8001ad0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad2:	483f      	ldr	r0, [pc, #252]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001ad4:	f000 fce6 	bl	80024a4 <HAL_ADC_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001ade:	f000 fa4f 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001aea:	2302      	movs	r3, #2
 8001aec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001af4:	f000 fe9e 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001afe:	f000 fa3f 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4830      	ldr	r0, [pc, #192]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001b10:	f000 fe90 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b1a:	f000 fa31 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b22:	2303      	movs	r3, #3
 8001b24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001b2c:	f000 fe82 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001b36:	f000 fa23 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4822      	ldr	r0, [pc, #136]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001b48:	f000 fe74 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001b52:	f000 fa15 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b56:	2304      	movs	r3, #4
 8001b58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001b64:	f000 fe66 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001b6e:	f000 fa07 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b72:	2305      	movs	r3, #5
 8001b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001b76:	2306      	movs	r3, #6
 8001b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001b80:	f000 fe58 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001b8a:	f000 f9f9 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b8e:	2306      	movs	r3, #6
 8001b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001b92:	2307      	movs	r3, #7
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001b9c:	f000 fe4a 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001ba6:	f000 f9eb 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001baa:	2307      	movs	r3, #7
 8001bac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_ADC1_Init+0x13c>)
 8001bb8:	f000 fe3c 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001bc2:	f000 f9dd 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000714 	.word	0x20000714
 8001bd4:	40012400 	.word	0x40012400

08001bd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001bde:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <MX_I2C2_Init+0x54>)
 8001be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001be4:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <MX_I2C2_Init+0x58>)
 8001be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_I2C2_Init+0x50>)
 8001c16:	f001 fd7f 	bl	8003718 <HAL_I2C_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c20:	f000 f9ae 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000530 	.word	0x20000530
 8001c2c:	40005800 	.word	0x40005800
 8001c30:	000186a0 	.word	0x000186a0

08001c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <MX_TIM3_Init+0x98>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c64:	f244 6250 	movw	r2, #18000	; 0x4650
 8001c68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c76:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c78:	f004 f828 	bl	8005ccc <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c82:	f000 f97d 	bl	8001f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c94:	f004 fb7c 	bl	8006390 <HAL_TIM_ConfigClockSource>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c9e:	f000 f96f 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001cb0:	f004 fefa 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cba:	f000 f961 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200006c8 	.word	0x200006c8
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d02:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <MX_TIM4_Init+0x12c>)
 8001d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d14:	f242 3228 	movw	r2, #9000	; 0x2328
 8001d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d26:	4834      	ldr	r0, [pc, #208]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d28:	f003 ffd0 	bl	8005ccc <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d32:	f000 f925 	bl	8001f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d40:	4619      	mov	r1, r3
 8001d42:	482d      	ldr	r0, [pc, #180]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d44:	f004 fb24 	bl	8006390 <HAL_TIM_ConfigClockSource>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d4e:	f000 f917 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d52:	4829      	ldr	r0, [pc, #164]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d54:	f004 f85c 	bl	8005e10 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d5e:	f000 f90f 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4821      	ldr	r0, [pc, #132]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d72:	f004 fe99 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d7c:	f000 f900 	bl	8001f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d80:	2360      	movs	r3, #96	; 0x60
 8001d82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4818      	ldr	r0, [pc, #96]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001d98:	f004 fa3c 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001da2:	f000 f8ed 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2204      	movs	r2, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4812      	ldr	r0, [pc, #72]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001dae:	f004 fa31 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001db8:	f000 f8e2 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001dc4:	f004 fa26 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001dce:	f000 f8d7 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4807      	ldr	r0, [pc, #28]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001dda:	f004 fa1b 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001de4:	f000 f8cc 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <MX_TIM4_Init+0x128>)
 8001dea:	f000 f9eb 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001dee:	bf00      	nop
 8001df0:	3738      	adds	r7, #56	; 0x38
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200004cc 	.word	0x200004cc
 8001dfc:	40000800 	.word	0x40000800

08001e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <MX_USART1_UART_Init+0x50>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e38:	f004 fea6 	bl	8006b88 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e42:	f000 f89d 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000084c 	.word	0x2000084c
 8001e50:	40013800 	.word	0x40013800

08001e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_DMA_Init+0x38>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <MX_DMA_Init+0x38>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6153      	str	r3, [r2, #20]
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_DMA_Init+0x38>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	200b      	movs	r0, #11
 8001e78:	f000 ffad 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e7c:	200b      	movs	r0, #11
 8001e7e:	f000 ffc6 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <MX_GPIO_Init+0xe0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0a:	481a      	ldr	r0, [pc, #104]	; (8001f74 <MX_GPIO_Init+0xe4>)
 8001f0c:	f001 fbd3 	bl	80036b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin|ENABLE_ESP_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2130      	movs	r1, #48	; 0x30
 8001f14:	4818      	ldr	r0, [pc, #96]	; (8001f78 <MX_GPIO_Init+0xe8>)
 8001f16:	f001 fbce 	bl	80036b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8001f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	4810      	ldr	r0, [pc, #64]	; (8001f74 <MX_GPIO_Init+0xe4>)
 8001f34:	f001 fa24 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f38:	23ff      	movs	r3, #255	; 0xff
 8001f3a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_GPIO_Init+0xec>)
 8001f48:	f001 fa1a 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_ESP_Pin ENABLE_ESP_Pin */
  GPIO_InitStruct.Pin = RESET_ESP_Pin|ENABLE_ESP_Pin;
 8001f4c:	2330      	movs	r3, #48	; 0x30
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_GPIO_Init+0xe8>)
 8001f64:	f001 fa0c 	bl	8003380 <HAL_GPIO_Init>

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	40010800 	.word	0x40010800

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <Error_Handler+0x8>
	...

08001f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6193      	str	r3, [r2, #24]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_MspInit+0x60>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_MspInit+0x60>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000

08001ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a28      	ldr	r2, [pc, #160]	; (80020ac <HAL_ADC_MspInit+0xbc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d149      	bne.n	80020a4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_ADC_MspInit+0xc0>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <HAL_ADC_MspInit+0xc0>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_ADC_MspInit+0xc0>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_ADC_MspInit+0xc0>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_ADC_MspInit+0xc0>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_ADC_MspInit+0xc0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002040:	23ff      	movs	r3, #255	; 0xff
 8002042:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002044:	2303      	movs	r3, #3
 8002046:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4819      	ldr	r0, [pc, #100]	; (80020b4 <HAL_ADC_MspInit+0xc4>)
 8002050:	f001 f996 	bl	8003380 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 8002056:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_ADC_MspInit+0xcc>)
 8002058:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 800206e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002072:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 8002076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800207a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 800208a:	f000 fedb 	bl	8002e44 <HAL_DMA_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002094:	f7ff ff74 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 800209c:	621a      	str	r2, [r3, #32]
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_ADC_MspInit+0xc8>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40012400 	.word	0x40012400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	2000089c 	.word	0x2000089c
 80020bc:	40020008 	.word	0x40020008

080020c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_I2C_MspInit+0x74>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d124      	bne.n	800212a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_I2C_MspInit+0x78>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <HAL_I2C_MspInit+0x78>)
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_I2C_MspInit+0x78>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fe:	2312      	movs	r3, #18
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	4619      	mov	r1, r3
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <HAL_I2C_MspInit+0x7c>)
 800210e:	f001 f937 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_I2C_MspInit+0x78>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_I2C_MspInit+0x78>)
 8002118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_I2C_MspInit+0x78>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40005800 	.word	0x40005800
 8002138:	40021000 	.word	0x40021000
 800213c:	40010c00 	.word	0x40010c00

08002140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <HAL_TIM_Base_MspInit+0x78>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d114      	bne.n	800217c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_TIM_Base_MspInit+0x7c>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_TIM_Base_MspInit+0x7c>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_TIM_Base_MspInit+0x7c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201d      	movs	r0, #29
 8002170:	f000 fe31 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002174:	201d      	movs	r0, #29
 8002176:	f000 fe4a 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800217a:	e018      	b.n	80021ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_TIM_Base_MspInit+0x80>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d113      	bne.n	80021ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_TIM_Base_MspInit+0x7c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0x7c>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_Base_MspInit+0x7c>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	201e      	movs	r0, #30
 80021a4:	f000 fe17 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a8:	201e      	movs	r0, #30
 80021aa:	f000 fe30 	bl	8002e0e <HAL_NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40000800 	.word	0x40000800

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_TIM_MspPostInit+0x5c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d118      	bne.n	8002216 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_TIM_MspPostInit+0x60>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_TIM_MspPostInit+0x60>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_TIM_MspPostInit+0x60>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2302      	movs	r3, #2
 8002208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_TIM_MspPostInit+0x64>)
 8002212:	f001 f8b5 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40000800 	.word	0x40000800
 8002224:	40021000 	.word	0x40021000
 8002228:	40010c00 	.word	0x40010c00

0800222c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_UART_MspInit+0x9c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d139      	bne.n	80022c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_UART_MspInit+0xa0>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_UART_MspInit+0xa0>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_UART_MspInit+0xa0>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_UART_MspInit+0xa0>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_UART_MspInit+0xa0>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_UART_MspInit+0xa0>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800227c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002280:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4619      	mov	r1, r3
 8002290:	480f      	ldr	r0, [pc, #60]	; (80022d0 <HAL_UART_MspInit+0xa4>)
 8002292:	f001 f875 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	4809      	ldr	r0, [pc, #36]	; (80022d0 <HAL_UART_MspInit+0xa4>)
 80022ac:	f001 f868 	bl	8003380 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2025      	movs	r0, #37	; 0x25
 80022b6:	f000 fd8e 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	; 0x25
 80022bc:	f000 fda7 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010800 	.word	0x40010800

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <NMI_Handler+0x4>

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <MemManage_Handler+0x4>

080022e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231a:	f000 f8a7 	bl	800246c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <DMA1_Channel1_IRQHandler+0x10>)
 800232a:	f000 fef5 	bl	8003118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000089c 	.word	0x2000089c

08002338 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800233e:	f001 fc60 	bl	8003c02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200014fc 	.word	0x200014fc

0800234c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM3_IRQHandler+0x10>)
 8002352:	f003 fe57 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200006c8 	.word	0x200006c8

08002360 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <TIM4_IRQHandler+0x10>)
 8002366:	f003 fe4d 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200004cc 	.word	0x200004cc

08002374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <USART1_IRQHandler+0x10>)
 800237a:	f004 fced 	bl	8006d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000084c 	.word	0x2000084c

08002388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002396:	490d      	ldr	r1, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023ac:	4c0a      	ldr	r4, [pc, #40]	; (80023d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ba:	f7ff ffe5 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f009 fb7d 	bl	800babc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023c2:	f7ff f885 	bl	80014d0 <main>
  bx lr
 80023c6:	4770      	bx	lr
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80023d0:	0800bd24 	.word	0x0800bd24
  ldr r2, =_sbss
 80023d4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80023d8:	200017e8 	.word	0x200017e8

080023dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC1_2_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_Init+0x28>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_Init+0x28>)
 80023ea:	f043 0310 	orr.w	r3, r3, #16
 80023ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 fce5 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f6:	200f      	movs	r0, #15
 80023f8:	f000 f808 	bl	800240c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fc:	f7ff fdc6 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x54>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_InitTick+0x58>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fcfd 	bl	8002e2a <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00e      	b.n	8002458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d80a      	bhi.n	8002456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f000 fcc5 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_InitTick+0x5c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000000 	.word	0x20000000
 8002464:	20000008 	.word	0x20000008
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_IncTick+0x1c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_IncTick+0x20>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_IncTick+0x20>)
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	20000008 	.word	0x20000008
 800248c:	20000c34 	.word	0x20000c34

08002490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <HAL_GetTick+0x10>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000c34 	.word	0x20000c34

080024a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0be      	b.n	8002644 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fd84 	bl	8001ff0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 faf5 	bl	8002ad8 <ADC_ConversionStop_Disable>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8099 	bne.w	8002632 <HAL_ADC_Init+0x18e>
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8095 	bne.w	8002632 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002510:	f023 0302 	bic.w	r3, r3, #2
 8002514:	f043 0202 	orr.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002524:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800252c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253c:	d003      	beq.n	8002546 <HAL_ADC_Init+0xa2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_ADC_Init+0xa8>
 8002546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254a:	e000      	b.n	800254e <HAL_ADC_Init+0xaa>
 800254c:	2300      	movs	r3, #0
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7d1b      	ldrb	r3, [r3, #20]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d119      	bne.n	8002590 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b1b      	ldrb	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	3b01      	subs	r3, #1
 800256a:	035a      	lsls	r2, r3, #13
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e00b      	b.n	8002590 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_ADC_Init+0x1a8>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c0:	d003      	beq.n	80025ca <HAL_ADC_Init+0x126>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d104      	bne.n	80025d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_ADC_Init+0x1ac>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10b      	bne.n	8002610 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800260e:	e018      	b.n	8002642 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	f023 0312 	bic.w	r3, r3, #18
 8002618:	f043 0210 	orr.w	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002630:	e007      	b.n	8002642 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	ffe1f7fd 	.word	0xffe1f7fd
 8002650:	ff1f0efe 	.word	0xff1f0efe

08002654 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a64      	ldr	r2, [pc, #400]	; (80027fc <HAL_ADC_Start_DMA+0x1a8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_ADC_Start_DMA+0x24>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a63      	ldr	r2, [pc, #396]	; (8002800 <HAL_ADC_Start_DMA+0x1ac>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d106      	bne.n	8002686 <HAL_ADC_Start_DMA+0x32>
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <HAL_ADC_Start_DMA+0x1a8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 80b3 	bne.w	80027ec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADC_Start_DMA+0x40>
 8002690:	2302      	movs	r3, #2
 8002692:	e0ae      	b.n	80027f2 <HAL_ADC_Start_DMA+0x19e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f9c1 	bl	8002a24 <ADC_Enable>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 809a 	bne.w	80027e2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a4e      	ldr	r2, [pc, #312]	; (8002800 <HAL_ADC_Start_DMA+0x1ac>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x84>
 80026cc:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <HAL_ADC_Start_DMA+0x1a8>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d115      	bne.n	8002704 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d026      	beq.n	8002740 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002702:	e01d      	b.n	8002740 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a39      	ldr	r2, [pc, #228]	; (80027fc <HAL_ADC_Start_DMA+0x1a8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_ADC_Start_DMA+0xd0>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a38      	ldr	r2, [pc, #224]	; (8002800 <HAL_ADC_Start_DMA+0x1ac>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10d      	bne.n	8002740 <HAL_ADC_Start_DMA+0xec>
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_ADC_Start_DMA+0x1a8>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002738:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	f023 0206 	bic.w	r2, r3, #6
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
 8002758:	e002      	b.n	8002760 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <HAL_ADC_Start_DMA+0x1b0>)
 800276e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a24      	ldr	r2, [pc, #144]	; (8002808 <HAL_ADC_Start_DMA+0x1b4>)
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a23      	ldr	r2, [pc, #140]	; (800280c <HAL_ADC_Start_DMA+0x1b8>)
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0202 	mvn.w	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002798:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a18      	ldr	r0, [r3, #32]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	334c      	adds	r3, #76	; 0x4c
 80027a4:	4619      	mov	r1, r3
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f000 fba5 	bl	8002ef8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027bc:	d108      	bne.n	80027d0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027cc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027ce:	e00f      	b.n	80027f0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027de:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027e0:	e006      	b.n	80027f0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80027ea:	e001      	b.n	80027f0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40012400 	.word	0x40012400
 8002800:	40012800 	.word	0x40012800
 8002804:	08002b5b 	.word	0x08002b5b
 8002808:	08002bd7 	.word	0x08002bd7
 800280c:	08002bf3 	.word	0x08002bf3

08002810 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x20>
 8002850:	2302      	movs	r3, #2
 8002852:	e0dc      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x1da>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b06      	cmp	r3, #6
 8002862:	d81c      	bhi.n	800289e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b05      	subs	r3, #5
 8002876:	221f      	movs	r2, #31
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	4019      	ands	r1, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b05      	subs	r3, #5
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
 800289c:	e03c      	b.n	8002918 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d81c      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b23      	subs	r3, #35	; 0x23
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	4019      	ands	r1, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b23      	subs	r3, #35	; 0x23
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
 80028de:	e01b      	b.n	8002918 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b41      	subs	r3, #65	; 0x41
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4019      	ands	r1, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b41      	subs	r3, #65	; 0x41
 800290c:	fa00 f203 	lsl.w	r2, r0, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b09      	cmp	r3, #9
 800291e:	d91c      	bls.n	800295a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68d9      	ldr	r1, [r3, #12]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	3b1e      	subs	r3, #30
 8002932:	2207      	movs	r2, #7
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6898      	ldr	r0, [r3, #8]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	3b1e      	subs	r3, #30
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	e019      	b.n	800298e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6919      	ldr	r1, [r3, #16]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	2207      	movs	r2, #7
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	4019      	ands	r1, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6898      	ldr	r0, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b10      	cmp	r3, #16
 8002994:	d003      	beq.n	800299e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800299a:	2b11      	cmp	r3, #17
 800299c:	d132      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_ADC_ConfigChannel+0x1e4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d125      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d126      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d11a      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_ADC_ConfigChannel+0x1e8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_ADC_ConfigChannel+0x1ec>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	0c9a      	lsrs	r2, r3, #18
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x1b2>
 80029f2:	e007      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012400 	.word	0x40012400
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	431bde83 	.word	0x431bde83

08002a24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d040      	beq.n	8002ac4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <ADC_Enable+0xac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <ADC_Enable+0xb0>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	0c9b      	lsrs	r3, r3, #18
 8002a5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a60:	e002      	b.n	8002a68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a6e:	f7ff fd0f 	bl	8002490 <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a74:	e01f      	b.n	8002ab6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a76:	f7ff fd0b 	bl	8002490 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d918      	bls.n	8002ab6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d011      	beq.n	8002ab6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d1d8      	bne.n	8002a76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	431bde83 	.word	0x431bde83

08002ad8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12e      	bne.n	8002b50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b02:	f7ff fcc5 	bl	8002490 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b08:	e01b      	b.n	8002b42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b0a:	f7ff fcc1 	bl	8002490 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d914      	bls.n	8002b42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e007      	b.n	8002b52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d0dc      	beq.n	8002b0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d127      	bne.n	8002bc4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b8a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b8e:	d115      	bne.n	8002bbc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d111      	bne.n	8002bbc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7fd ffb3 	bl	8000b28 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002bc2:	e004      	b.n	8002bce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff fe13 	bl	8002810 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fe02 	bl	8002822 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <__NVIC_EnableIRQ+0x34>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7ff ff90 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff2d 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff42 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff90 	bl	8002d18 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5f 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff35 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e043      	b.n	8002ee2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_DMA_Init+0xa8>)
 8002e62:	4413      	add	r3, r2
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_DMA_Init+0xac>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_DMA_Init+0xb0>)
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	bffdfff8 	.word	0xbffdfff8
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Start_IT+0x20>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e04a      	b.n	8002fae <HAL_DMA_Start_IT+0xb6>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d13a      	bne.n	8002fa0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f9e8 	bl	8003324 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 020e 	orr.w	r2, r2, #14
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e00f      	b.n	8002f8e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0204 	bic.w	r2, r2, #4
 8002f7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 020a 	orr.w	r2, r2, #10
 8002f8c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e005      	b.n	8002fac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b085      	sub	sp, #20
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d008      	beq.n	8002fde <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e020      	b.n	8003020 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 020e 	bic.w	r2, r2, #14
 8002fec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800301e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800303e:	2b02      	cmp	r3, #2
 8003040:	d005      	beq.n	800304e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e051      	b.n	80030f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020e 	bic.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_DMA_Abort_IT+0xd0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d029      	beq.n	80030cc <HAL_DMA_Abort_IT+0xa0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_DMA_Abort_IT+0xd4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x9c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_DMA_Abort_IT+0xd8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01a      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x96>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_DMA_Abort_IT+0xdc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d012      	beq.n	80030bc <HAL_DMA_Abort_IT+0x90>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_DMA_Abort_IT+0xe0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x8a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_DMA_Abort_IT+0xe4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <HAL_DMA_Abort_IT+0x84>
 80030aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ae:	e00e      	b.n	80030ce <HAL_DMA_Abort_IT+0xa2>
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b4:	e00b      	b.n	80030ce <HAL_DMA_Abort_IT+0xa2>
 80030b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ba:	e008      	b.n	80030ce <HAL_DMA_Abort_IT+0xa2>
 80030bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c0:	e005      	b.n	80030ce <HAL_DMA_Abort_IT+0xa2>
 80030c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c6:	e002      	b.n	80030ce <HAL_DMA_Abort_IT+0xa2>
 80030c8:	2310      	movs	r3, #16
 80030ca:	e000      	b.n	80030ce <HAL_DMA_Abort_IT+0xa2>
 80030cc:	2301      	movs	r3, #1
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <HAL_DMA_Abort_IT+0xe8>)
 80030d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
    } 
  }
  return status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40020008 	.word	0x40020008
 8003100:	4002001c 	.word	0x4002001c
 8003104:	40020030 	.word	0x40020030
 8003108:	40020044 	.word	0x40020044
 800310c:	40020058 	.word	0x40020058
 8003110:	4002006c 	.word	0x4002006c
 8003114:	40020000 	.word	0x40020000

08003118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2204      	movs	r2, #4
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d04f      	beq.n	80031e0 <HAL_DMA_IRQHandler+0xc8>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d04a      	beq.n	80031e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a66      	ldr	r2, [pc, #408]	; (8003308 <HAL_DMA_IRQHandler+0x1f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d029      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xae>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a65      	ldr	r2, [pc, #404]	; (800330c <HAL_DMA_IRQHandler+0x1f4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xaa>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_DMA_IRQHandler+0x1f8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01a      	beq.n	80031bc <HAL_DMA_IRQHandler+0xa4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a62      	ldr	r2, [pc, #392]	; (8003314 <HAL_DMA_IRQHandler+0x1fc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d012      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x9e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a60      	ldr	r2, [pc, #384]	; (8003318 <HAL_DMA_IRQHandler+0x200>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x98>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5f      	ldr	r2, [pc, #380]	; (800331c <HAL_DMA_IRQHandler+0x204>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d102      	bne.n	80031aa <HAL_DMA_IRQHandler+0x92>
 80031a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031a8:	e00e      	b.n	80031c8 <HAL_DMA_IRQHandler+0xb0>
 80031aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031ae:	e00b      	b.n	80031c8 <HAL_DMA_IRQHandler+0xb0>
 80031b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031b4:	e008      	b.n	80031c8 <HAL_DMA_IRQHandler+0xb0>
 80031b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ba:	e005      	b.n	80031c8 <HAL_DMA_IRQHandler+0xb0>
 80031bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c0:	e002      	b.n	80031c8 <HAL_DMA_IRQHandler+0xb0>
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	e000      	b.n	80031c8 <HAL_DMA_IRQHandler+0xb0>
 80031c6:	2304      	movs	r3, #4
 80031c8:	4a55      	ldr	r2, [pc, #340]	; (8003320 <HAL_DMA_IRQHandler+0x208>)
 80031ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8094 	beq.w	80032fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031de:	e08e      	b.n	80032fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2202      	movs	r2, #2
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d056      	beq.n	800329e <HAL_DMA_IRQHandler+0x186>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d051      	beq.n	800329e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020a 	bic.w	r2, r2, #10
 8003216:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a38      	ldr	r2, [pc, #224]	; (8003308 <HAL_DMA_IRQHandler+0x1f0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d029      	beq.n	800327e <HAL_DMA_IRQHandler+0x166>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a37      	ldr	r2, [pc, #220]	; (800330c <HAL_DMA_IRQHandler+0x1f4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_IRQHandler+0x162>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a35      	ldr	r2, [pc, #212]	; (8003310 <HAL_DMA_IRQHandler+0x1f8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x15c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_DMA_IRQHandler+0x1fc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d012      	beq.n	800326e <HAL_DMA_IRQHandler+0x156>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <HAL_DMA_IRQHandler+0x200>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x150>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <HAL_DMA_IRQHandler+0x204>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d102      	bne.n	8003262 <HAL_DMA_IRQHandler+0x14a>
 800325c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003260:	e00e      	b.n	8003280 <HAL_DMA_IRQHandler+0x168>
 8003262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003266:	e00b      	b.n	8003280 <HAL_DMA_IRQHandler+0x168>
 8003268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326c:	e008      	b.n	8003280 <HAL_DMA_IRQHandler+0x168>
 800326e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003272:	e005      	b.n	8003280 <HAL_DMA_IRQHandler+0x168>
 8003274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003278:	e002      	b.n	8003280 <HAL_DMA_IRQHandler+0x168>
 800327a:	2320      	movs	r3, #32
 800327c:	e000      	b.n	8003280 <HAL_DMA_IRQHandler+0x168>
 800327e:	2302      	movs	r3, #2
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_DMA_IRQHandler+0x208>)
 8003282:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d034      	beq.n	80032fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800329c:	e02f      	b.n	80032fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2208      	movs	r2, #8
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d028      	beq.n	8003300 <HAL_DMA_IRQHandler+0x1e8>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 020e 	bic.w	r2, r2, #14
 80032c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
    }
  }
  return;
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
}
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40020008 	.word	0x40020008
 800330c:	4002001c 	.word	0x4002001c
 8003310:	40020030 	.word	0x40020030
 8003314:	40020044 	.word	0x40020044
 8003318:	40020058 	.word	0x40020058
 800331c:	4002006c 	.word	0x4002006c
 8003320:	40020000 	.word	0x40020000

08003324 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b10      	cmp	r3, #16
 8003350:	d108      	bne.n	8003364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003362:	e007      	b.n	8003374 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
	...

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	e169      	b.n	8003668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003394:	2201      	movs	r2, #1
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8158 	bne.w	8003662 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a9a      	ldr	r2, [pc, #616]	; (8003620 <HAL_GPIO_Init+0x2a0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d05e      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033bc:	4a98      	ldr	r2, [pc, #608]	; (8003620 <HAL_GPIO_Init+0x2a0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d875      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033c2:	4a98      	ldr	r2, [pc, #608]	; (8003624 <HAL_GPIO_Init+0x2a4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d058      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033c8:	4a96      	ldr	r2, [pc, #600]	; (8003624 <HAL_GPIO_Init+0x2a4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d86f      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033ce:	4a96      	ldr	r2, [pc, #600]	; (8003628 <HAL_GPIO_Init+0x2a8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d052      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033d4:	4a94      	ldr	r2, [pc, #592]	; (8003628 <HAL_GPIO_Init+0x2a8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d869      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033da:	4a94      	ldr	r2, [pc, #592]	; (800362c <HAL_GPIO_Init+0x2ac>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04c      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033e0:	4a92      	ldr	r2, [pc, #584]	; (800362c <HAL_GPIO_Init+0x2ac>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d863      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033e6:	4a92      	ldr	r2, [pc, #584]	; (8003630 <HAL_GPIO_Init+0x2b0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d046      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033ec:	4a90      	ldr	r2, [pc, #576]	; (8003630 <HAL_GPIO_Init+0x2b0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d85d      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033f2:	2b12      	cmp	r3, #18
 80033f4:	d82a      	bhi.n	800344c <HAL_GPIO_Init+0xcc>
 80033f6:	2b12      	cmp	r3, #18
 80033f8:	d859      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <HAL_GPIO_Init+0x80>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	0800347b 	.word	0x0800347b
 8003404:	08003455 	.word	0x08003455
 8003408:	08003467 	.word	0x08003467
 800340c:	080034a9 	.word	0x080034a9
 8003410:	080034af 	.word	0x080034af
 8003414:	080034af 	.word	0x080034af
 8003418:	080034af 	.word	0x080034af
 800341c:	080034af 	.word	0x080034af
 8003420:	080034af 	.word	0x080034af
 8003424:	080034af 	.word	0x080034af
 8003428:	080034af 	.word	0x080034af
 800342c:	080034af 	.word	0x080034af
 8003430:	080034af 	.word	0x080034af
 8003434:	080034af 	.word	0x080034af
 8003438:	080034af 	.word	0x080034af
 800343c:	080034af 	.word	0x080034af
 8003440:	080034af 	.word	0x080034af
 8003444:	0800345d 	.word	0x0800345d
 8003448:	08003471 	.word	0x08003471
 800344c:	4a79      	ldr	r2, [pc, #484]	; (8003634 <HAL_GPIO_Init+0x2b4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003452:	e02c      	b.n	80034ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	623b      	str	r3, [r7, #32]
          break;
 800345a:	e029      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	3304      	adds	r3, #4
 8003462:	623b      	str	r3, [r7, #32]
          break;
 8003464:	e024      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	3308      	adds	r3, #8
 800346c:	623b      	str	r3, [r7, #32]
          break;
 800346e:	e01f      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	330c      	adds	r3, #12
 8003476:	623b      	str	r3, [r7, #32]
          break;
 8003478:	e01a      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003482:	2304      	movs	r3, #4
 8003484:	623b      	str	r3, [r7, #32]
          break;
 8003486:	e013      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003490:	2308      	movs	r3, #8
 8003492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	611a      	str	r2, [r3, #16]
          break;
 800349a:	e009      	b.n	80034b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800349c:	2308      	movs	r3, #8
 800349e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	615a      	str	r2, [r3, #20]
          break;
 80034a6:	e003      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034a8:	2300      	movs	r3, #0
 80034aa:	623b      	str	r3, [r7, #32]
          break;
 80034ac:	e000      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          break;
 80034ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2bff      	cmp	r3, #255	; 0xff
 80034b4:	d801      	bhi.n	80034ba <HAL_GPIO_Init+0x13a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e001      	b.n	80034be <HAL_GPIO_Init+0x13e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2bff      	cmp	r3, #255	; 0xff
 80034c4:	d802      	bhi.n	80034cc <HAL_GPIO_Init+0x14c>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_GPIO_Init+0x152>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	3b08      	subs	r3, #8
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	210f      	movs	r1, #15
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80b1 	beq.w	8003662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003500:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <HAL_GPIO_Init+0x2b8>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_GPIO_Init+0x2b8>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b4a      	ldr	r3, [pc, #296]	; (8003638 <HAL_GPIO_Init+0x2b8>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003518:	4a48      	ldr	r2, [pc, #288]	; (800363c <HAL_GPIO_Init+0x2bc>)
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <HAL_GPIO_Init+0x2c0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_GPIO_Init+0x1ec>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3f      	ldr	r2, [pc, #252]	; (8003644 <HAL_GPIO_Init+0x2c4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00d      	beq.n	8003568 <HAL_GPIO_Init+0x1e8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3e      	ldr	r2, [pc, #248]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <HAL_GPIO_Init+0x1e4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <HAL_GPIO_Init+0x2cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_GPIO_Init+0x1e0>
 800355c:	2303      	movs	r3, #3
 800355e:	e006      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 8003560:	2304      	movs	r3, #4
 8003562:	e004      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 8003564:	2302      	movs	r3, #2
 8003566:	e002      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 800356c:	2300      	movs	r3, #0
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	f002 0203 	and.w	r2, r2, #3
 8003574:	0092      	lsls	r2, r2, #2
 8003576:	4093      	lsls	r3, r2
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800357e:	492f      	ldr	r1, [pc, #188]	; (800363c <HAL_GPIO_Init+0x2bc>)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	3302      	adds	r3, #2
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d006      	beq.n	80035a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	492c      	ldr	r1, [pc, #176]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035a6:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	4928      	ldr	r1, [pc, #160]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	4922      	ldr	r1, [pc, #136]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	491e      	ldr	r1, [pc, #120]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4918      	ldr	r1, [pc, #96]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	4914      	ldr	r1, [pc, #80]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 8003600:	4013      	ands	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d021      	beq.n	8003654 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e021      	b.n	8003662 <HAL_GPIO_Init+0x2e2>
 800361e:	bf00      	nop
 8003620:	10320000 	.word	0x10320000
 8003624:	10310000 	.word	0x10310000
 8003628:	10220000 	.word	0x10220000
 800362c:	10210000 	.word	0x10210000
 8003630:	10120000 	.word	0x10120000
 8003634:	10110000 	.word	0x10110000
 8003638:	40021000 	.word	0x40021000
 800363c:	40010000 	.word	0x40010000
 8003640:	40010800 	.word	0x40010800
 8003644:	40010c00 	.word	0x40010c00
 8003648:	40011000 	.word	0x40011000
 800364c:	40011400 	.word	0x40011400
 8003650:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_GPIO_Init+0x304>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	43db      	mvns	r3, r3
 800365c:	4909      	ldr	r1, [pc, #36]	; (8003684 <HAL_GPIO_Init+0x304>)
 800365e:	4013      	ands	r3, r2
 8003660:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	3301      	adds	r3, #1
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	f47f ae8e 	bne.w	8003394 <HAL_GPIO_Init+0x14>
  }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	372c      	adds	r7, #44	; 0x2c
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40010400 	.word	0x40010400

08003688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e001      	b.n	80036aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	807b      	strh	r3, [r7, #2]
 80036c2:	4613      	mov	r3, r2
 80036c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036c6:	787b      	ldrb	r3, [r7, #1]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036d2:	e003      	b.n	80036dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	041a      	lsls	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	611a      	str	r2, [r3, #16]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	041a      	lsls	r2, r3, #16
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43d9      	mvns	r1, r3
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	400b      	ands	r3, r1
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e12b      	b.n	8003982 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fcbe 	bl	80020c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800376a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800377c:	f002 f9aa 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4a81      	ldr	r2, [pc, #516]	; (800398c <HAL_I2C_Init+0x274>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d807      	bhi.n	800379c <HAL_I2C_Init+0x84>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_I2C_Init+0x278>)
 8003790:	4293      	cmp	r3, r2
 8003792:	bf94      	ite	ls
 8003794:	2301      	movls	r3, #1
 8003796:	2300      	movhi	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e006      	b.n	80037aa <HAL_I2C_Init+0x92>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a7d      	ldr	r2, [pc, #500]	; (8003994 <HAL_I2C_Init+0x27c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf94      	ite	ls
 80037a4:	2301      	movls	r3, #1
 80037a6:	2300      	movhi	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0e7      	b.n	8003982 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a78      	ldr	r2, [pc, #480]	; (8003998 <HAL_I2C_Init+0x280>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9b      	lsrs	r3, r3, #18
 80037bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a6a      	ldr	r2, [pc, #424]	; (800398c <HAL_I2C_Init+0x274>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d802      	bhi.n	80037ec <HAL_I2C_Init+0xd4>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e009      	b.n	8003800 <HAL_I2C_Init+0xe8>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	4a69      	ldr	r2, [pc, #420]	; (800399c <HAL_I2C_Init+0x284>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	3301      	adds	r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	495c      	ldr	r1, [pc, #368]	; (800398c <HAL_I2C_Init+0x274>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d819      	bhi.n	8003854 <HAL_I2C_Init+0x13c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e59      	subs	r1, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fbb1 f3f3 	udiv	r3, r1, r3
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003834:	400b      	ands	r3, r1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_I2C_Init+0x138>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1e59      	subs	r1, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fbb1 f3f3 	udiv	r3, r1, r3
 8003848:	3301      	adds	r3, #1
 800384a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384e:	e051      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 8003850:	2304      	movs	r3, #4
 8003852:	e04f      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <HAL_I2C_Init+0x168>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	440b      	add	r3, r1
 800386a:	fbb0 f3f3 	udiv	r3, r0, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e012      	b.n	80038a6 <HAL_I2C_Init+0x18e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	0099      	lsls	r1, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Init+0x196>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e022      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10e      	bne.n	80038d4 <HAL_I2C_Init+0x1bc>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1e58      	subs	r0, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	440b      	add	r3, r1
 80038c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d2:	e00f      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	0099      	lsls	r1, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	6809      	ldr	r1, [r1, #0]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6911      	ldr	r1, [r2, #16]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	000186a0 	.word	0x000186a0
 8003990:	001e847f 	.word	0x001e847f
 8003994:	003d08ff 	.word	0x003d08ff
 8003998:	431bde83 	.word	0x431bde83
 800399c:	10624dd3 	.word	0x10624dd3

080039a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	b08b      	sub	sp, #44	; 0x2c
 80039a4:	af06      	add	r7, sp, #24
 80039a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0fd      	b.n	8003bae <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f007 fdce 	bl	800b568 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2203      	movs	r2, #3
 80039d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fde3 	bl	80075a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	687e      	ldr	r6, [r7, #4]
 80039e6:	466d      	mov	r5, sp
 80039e8:	f106 0410 	add.w	r4, r6, #16
 80039ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	1d33      	adds	r3, r6, #4
 80039f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f8:	6838      	ldr	r0, [r7, #0]
 80039fa:	f003 fdad 	bl	8007558 <USB_CoreInit>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0ce      	b.n	8003bae <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 fdde 	bl	80075d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e04c      	b.n	8003abc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	3301      	adds	r3, #1
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	b298      	uxth	r0, r3
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3336      	adds	r3, #54	; 0x36
 8003a60:	4602      	mov	r2, r0
 8003a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	3303      	adds	r3, #3
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3338      	adds	r3, #56	; 0x38
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	333c      	adds	r3, #60	; 0x3c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	440b      	add	r3, r1
 8003ab0:	3340      	adds	r3, #64	; 0x40
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3ad      	bcc.n	8003a22 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e044      	b.n	8003b56 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	3301      	adds	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d3b5      	bcc.n	8003acc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	687e      	ldr	r6, [r7, #4]
 8003b68:	466d      	mov	r5, sp
 8003b6a:	f106 0410 	add.w	r4, r6, #16
 8003b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	1d33      	adds	r3, r6, #4
 8003b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7a:	6838      	ldr	r0, [r7, #0]
 8003b7c:	f003 fd38 	bl	80075f0 <USB_DevInit>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00d      	b.n	8003bae <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f005 fea9 	bl	80098fe <USB_DevDisconnect>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_PCD_Start+0x16>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e016      	b.n	8003bfa <HAL_PCD_Start+0x44>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f003 fccd 	bl	8007578 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003bde:	2101      	movs	r1, #1
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f007 ff34 	bl	800ba4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 fe7d 	bl	80098ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b088      	sub	sp, #32
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f005 fe7f 	bl	8009912 <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d102      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fb61 	bl	80042e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f005 fe71 	bl	8009912 <USB_ReadInterrupts>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d112      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f007 fd02 	bl	800b65e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f925 	bl	8003eac <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f005 fe53 	bl	8009912 <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c76:	d10b      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f005 fe3c 	bl	8009912 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d10b      	bne.n	8003cbe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f005 fe25 	bl	8009912 <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d126      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0204 	bic.w	r2, r2, #4
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0208 	bic.w	r2, r2, #8
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f007 fce3 	bl	800b6d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 fdf3 	bl	8009912 <USB_ReadInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d36:	f040 8084 	bne.w	8003e42 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e011      	b.n	8003d64 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	7ffb      	ldrb	r3, [r7, #31]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	441a      	add	r2, r3
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	b292      	uxth	r2, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	f107 0120 	add.w	r1, r7, #32
 8003d58:	440b      	add	r3, r1
 8003d5a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	3301      	adds	r3, #1
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	7ffb      	ldrb	r3, [r7, #31]
 8003d66:	2b07      	cmp	r3, #7
 8003d68:	d9ea      	bls.n	8003d40 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	b292      	uxth	r2, r2
 8003d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003d9a:	bf00      	nop
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f6      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e010      	b.n	8003dee <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003dcc:	7ffb      	ldrb	r3, [r7, #31]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	7ffa      	ldrb	r2, [r7, #31]
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	440a      	add	r2, r1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	f107 0120 	add.w	r1, r7, #32
 8003de0:	440b      	add	r3, r1
 8003de2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003de6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	3301      	adds	r3, #1
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	7ffb      	ldrb	r3, [r7, #31]
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d9eb      	bls.n	8003dcc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0208 	orr.w	r2, r2, #8
 8003e06:	b292      	uxth	r2, r2
 8003e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0204 	orr.w	r2, r2, #4
 8003e36:	b292      	uxth	r2, r2
 8003e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f007 fc2d 	bl	800b69c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f005 fd63 	bl	8009912 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e56:	d10e      	bne.n	8003e76 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e6a:	b292      	uxth	r2, r2
 8003e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f007 fbe6 	bl	800b642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f005 fd49 	bl	8009912 <USB_ReadInterrupts>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9e:	b292      	uxth	r2, r2
 8003ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_PCD_SetAddress+0x1a>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e013      	b.n	8003eee <HAL_PCD_SetAddress+0x42>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f005 fcf0 	bl	80098c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	4608      	mov	r0, r1
 8003f00:	4611      	mov	r1, r2
 8003f02:	461a      	mov	r2, r3
 8003f04:	4603      	mov	r3, r0
 8003f06:	70fb      	strb	r3, [r7, #3]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	803b      	strh	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da0e      	bge.n	8003f3a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	705a      	strb	r2, [r3, #1]
 8003f38:	e00e      	b.n	8003f58 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 0207 	and.w	r2, r3, #7
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4413      	add	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f64:	883a      	ldrh	r2, [r7, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	78ba      	ldrb	r2, [r7, #2]
 8003f6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f82:	78bb      	ldrb	r3, [r7, #2]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_PCD_EP_Open+0xa6>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e00e      	b.n	8003fba <HAL_PCD_EP_Open+0xc4>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68f9      	ldr	r1, [r7, #12]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 fb40 	bl	8007630 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da0e      	bge.n	8003ff4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	705a      	strb	r2, [r3, #1]
 8003ff2:	e00e      	b.n	8004012 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 0207 	and.w	r2, r3, #7
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_PCD_EP_Close+0x6a>
 8004028:	2302      	movs	r3, #2
 800402a:	e00e      	b.n	800404a <HAL_PCD_EP_Close+0x88>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68f9      	ldr	r1, [r7, #12]
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fe62 	bl	8007d04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	460b      	mov	r3, r1
 8004060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004062:	7afb      	ldrb	r3, [r7, #11]
 8004064:	f003 0207 	and.w	r2, r3, #7
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004092:	7afb      	ldrb	r3, [r7, #11]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	b2da      	uxtb	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 f814 	bl	80080dc <USB_EPStartXfer>
 80040b4:	e005      	b.n	80040c2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 f80d 	bl	80080dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 0207 	and.w	r2, r3, #7
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	460b      	mov	r3, r1
 8004108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2201      	movs	r2, #1
 8004144:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004146:	7afb      	ldrb	r3, [r7, #11]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	b2da      	uxtb	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6979      	ldr	r1, [r7, #20]
 8004162:	4618      	mov	r0, r3
 8004164:	f003 ffba 	bl	80080dc <USB_EPStartXfer>
 8004168:	e005      	b.n	8004176 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	4618      	mov	r0, r3
 8004172:	f003 ffb3 	bl	80080dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 0207 	and.w	r2, r3, #7
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d901      	bls.n	800419e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e04c      	b.n	8004238 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800419e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da0e      	bge.n	80041c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	705a      	strb	r2, [r3, #1]
 80041c2:	e00c      	b.n	80041de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_PCD_EP_SetStall+0x7e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e01c      	b.n	8004238 <HAL_PCD_EP_SetStall+0xb8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	4618      	mov	r0, r3
 800420e:	f005 fa5c 	bl	80096ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	2b00      	cmp	r3, #0
 800421a:	d108      	bne.n	800422e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f005 fb81 	bl	8009930 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 020f 	and.w	r2, r3, #15
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d901      	bls.n	800425e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e040      	b.n	80042e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800425e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da0e      	bge.n	8004284 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	705a      	strb	r2, [r3, #1]
 8004282:	e00e      	b.n	80042a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_PCD_EP_ClrStall+0x82>
 80042be:	2302      	movs	r3, #2
 80042c0:	e00e      	b.n	80042e0 <HAL_PCD_EP_ClrStall+0xa0>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f005 fa4a 	bl	800976a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042f0:	e2ec      	b.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80042fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004308:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 8161 	bne.w	80045d4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d152      	bne.n	80043c2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	81fb      	strh	r3, [r7, #14]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	89fb      	ldrh	r3, [r7, #14]
 8004334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433c:	b29b      	uxth	r3, r3
 800433e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3328      	adds	r3, #40	; 0x28
 8004344:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	3302      	adds	r3, #2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	441a      	add	r2, r3
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004380:	2100      	movs	r1, #0
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f007 f943 	bl	800b60e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 829b 	beq.w	80048cc <PCD_EP_ISR_Handler+0x5e4>
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 8296 	bne.w	80048cc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b292      	uxth	r2, r2
 80043b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043c0:	e284      	b.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80043d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d034      	beq.n	8004446 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	3306      	adds	r3, #6
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800441a:	b29b      	uxth	r3, r3
 800441c:	f005 fad8 	bl	80099d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29a      	uxth	r2, r3
 8004428:	f640 738f 	movw	r3, #3983	; 0xf8f
 800442c:	4013      	ands	r3, r2
 800442e:	823b      	strh	r3, [r7, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	8a3a      	ldrh	r2, [r7, #16]
 8004436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800443a:	b292      	uxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f007 f8b8 	bl	800b5b4 <HAL_PCD_SetupStageCallback>
 8004444:	e242      	b.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004446:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800444a:	2b00      	cmp	r3, #0
 800444c:	f280 823e 	bge.w	80048cc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29a      	uxth	r2, r3
 8004458:	f640 738f 	movw	r3, #3983	; 0xf8f
 800445c:	4013      	ands	r3, r2
 800445e:	83bb      	strh	r3, [r7, #28]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	8bba      	ldrh	r2, [r7, #28]
 8004466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800446a:	b292      	uxth	r2, r2
 800446c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004476:	b29b      	uxth	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	3306      	adds	r3, #6
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d019      	beq.n	80044d6 <PCD_EP_ISR_Handler+0x1ee>
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d015      	beq.n	80044d6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	6959      	ldr	r1, [r3, #20]
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f005 fa88 	bl	80099d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	441a      	add	r2, r3
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f007 f881 	bl	800b5d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 81f2 	bne.w	80048cc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	4413      	add	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d112      	bne.n	8004536 <PCD_EP_ISR_Handler+0x24e>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800451a:	b29a      	uxth	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452e:	b29a      	uxth	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	e02f      	b.n	8004596 <PCD_EP_ISR_Handler+0x2ae>
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b3e      	cmp	r3, #62	; 0x3e
 800453c:	d813      	bhi.n	8004566 <PCD_EP_ISR_Handler+0x27e>
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <PCD_EP_ISR_Handler+0x270>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	3301      	adds	r3, #1
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	b29b      	uxth	r3, r3
 800455c:	029b      	lsls	r3, r3, #10
 800455e:	b29a      	uxth	r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	e017      	b.n	8004596 <PCD_EP_ISR_Handler+0x2ae>
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <PCD_EP_ISR_Handler+0x298>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	3b01      	subs	r3, #1
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	b29b      	uxth	r3, r3
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	b29b      	uxth	r3, r3
 8004588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004590:	b29a      	uxth	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	827b      	strh	r3, [r7, #18]
 80045a8:	8a7b      	ldrh	r3, [r7, #18]
 80045aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045ae:	827b      	strh	r3, [r7, #18]
 80045b0:	8a7b      	ldrh	r3, [r7, #18]
 80045b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045b6:	827b      	strh	r3, [r7, #18]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	8a7b      	ldrh	r3, [r7, #18]
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]
 80045d2:	e17b      	b.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f280 80ea 	bge.w	80047c4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29a      	uxth	r2, r3
 8004602:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004606:	4013      	ands	r3, r2
 8004608:	853b      	strh	r3, [r7, #40]	; 0x28
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800461a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800461e:	b292      	uxth	r2, r2
 8004620:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004622:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	7b1b      	ldrb	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d122      	bne.n	8004686 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	3306      	adds	r3, #6
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004668:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800466a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8087 	beq.w	8004780 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	6959      	ldr	r1, [r3, #20]
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	88da      	ldrh	r2, [r3, #6]
 800467e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004680:	f005 f9a6 	bl	80099d0 <USB_ReadPMA>
 8004684:	e07c      	b.n	8004780 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	78db      	ldrb	r3, [r3, #3]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d108      	bne.n	80046a0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800468e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004690:	461a      	mov	r2, r3
 8004692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f927 	bl	80048e8 <HAL_PCD_EP_DB_Receive>
 800469a:	4603      	mov	r3, r0
 800469c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800469e:	e06f      	b.n	8004780 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d021      	beq.n	800473e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	3302      	adds	r3, #2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004722:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004724:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02a      	beq.n	8004780 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	6959      	ldr	r1, [r3, #20]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	891a      	ldrh	r2, [r3, #8]
 8004736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004738:	f005 f94a 	bl	80099d0 <USB_ReadPMA>
 800473c:	e020      	b.n	8004780 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	3306      	adds	r3, #6
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004766:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004768:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	6959      	ldr	r1, [r3, #20]
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	895a      	ldrh	r2, [r3, #10]
 800477a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800477c:	f005 f928 	bl	80099d0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004786:	441a      	add	r2, r3
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004792:	441a      	add	r2, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <PCD_EP_ISR_Handler+0x4c2>
 80047a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d206      	bcs.n	80047b8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f006 ff11 	bl	800b5d8 <HAL_PCD_DataOutStageCallback>
 80047b6:	e005      	b.n	80047c4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047be:	4618      	mov	r0, r3
 80047c0:	f003 fc8c 	bl	80080dc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80047c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d07e      	beq.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80047ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	843b      	strh	r3, [r7, #32]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	441a      	add	r2, r3
 800480c:	8c3b      	ldrh	r3, [r7, #32]
 800480e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	78db      	ldrb	r3, [r3, #3]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d00c      	beq.n	800483c <PCD_EP_ISR_Handler+0x554>
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	78db      	ldrb	r3, [r3, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800482e:	2b02      	cmp	r3, #2
 8004830:	d146      	bne.n	80048c0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d141      	bne.n	80048c0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	3302      	adds	r3, #2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004864:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	8bfb      	ldrh	r3, [r7, #30]
 800486c:	429a      	cmp	r2, r3
 800486e:	d906      	bls.n	800487e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	8bfb      	ldrh	r3, [r7, #30]
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	619a      	str	r2, [r3, #24]
 800487c:	e002      	b.n	8004884 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2200      	movs	r2, #0
 8004882:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f006 febb 	bl	800b60e <HAL_PCD_DataInStageCallback>
 8004898:	e018      	b.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	8bfb      	ldrh	r3, [r7, #30]
 80048a0:	441a      	add	r2, r3
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	8bfb      	ldrh	r3, [r7, #30]
 80048ac:	441a      	add	r2, r3
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f003 fc0f 	bl	80080dc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80048be:	e005      	b.n	80048cc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048c2:	461a      	mov	r2, r3
 80048c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f91b 	bl	8004b02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f6ff ad0a 	blt.w	80042f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3738      	adds	r7, #56	; 0x38
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d07e      	beq.n	80049fe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	3302      	adds	r3, #2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004928:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	8b7b      	ldrh	r3, [r7, #26]
 8004930:	429a      	cmp	r2, r3
 8004932:	d306      	bcc.n	8004942 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	8b7b      	ldrh	r3, [r7, #26]
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	619a      	str	r2, [r3, #24]
 8004940:	e002      	b.n	8004948 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d123      	bne.n	8004998 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	833b      	strh	r3, [r7, #24]
 800496c:	8b3b      	ldrh	r3, [r7, #24]
 800496e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004972:	833b      	strh	r3, [r7, #24]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	8b3b      	ldrh	r3, [r7, #24]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01f      	beq.n	80049e2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049bc:	82fb      	strh	r3, [r7, #22]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8afb      	ldrh	r3, [r7, #22]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80049e2:	8b7b      	ldrh	r3, [r7, #26]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8087 	beq.w	8004af8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6959      	ldr	r1, [r3, #20]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	891a      	ldrh	r2, [r3, #8]
 80049f6:	8b7b      	ldrh	r3, [r7, #26]
 80049f8:	f004 ffea 	bl	80099d0 <USB_ReadPMA>
 80049fc:	e07c      	b.n	8004af8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	3306      	adds	r3, #6
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	8b7b      	ldrh	r3, [r7, #26]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d306      	bcc.n	8004a40 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	8b7b      	ldrh	r3, [r7, #26]
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	619a      	str	r2, [r3, #24]
 8004a3e:	e002      	b.n	8004a46 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d123      	bne.n	8004a96 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	83fb      	strh	r3, [r7, #30]
 8004a6a:	8bfb      	ldrh	r3, [r7, #30]
 8004a6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a70:	83fb      	strh	r3, [r7, #30]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8bfb      	ldrh	r3, [r7, #30]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11f      	bne.n	8004ae0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	83bb      	strh	r3, [r7, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	8bbb      	ldrh	r3, [r7, #28]
 8004acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ae0:	8b7b      	ldrh	r3, [r7, #26]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6959      	ldr	r1, [r3, #20]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	895a      	ldrh	r2, [r3, #10]
 8004af2:	8b7b      	ldrh	r3, [r7, #26]
 8004af4:	f004 ff6c 	bl	80099d0 <USB_ReadPMA>
    }
  }

  return count;
 8004af8:	8b7b      	ldrh	r3, [r7, #26]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b0a2      	sub	sp, #136	; 0x88
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 81c7 	beq.w	8004eaa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3302      	adds	r3, #2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d907      	bls.n	8004b64 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	619a      	str	r2, [r3, #24]
 8004b62:	e002      	b.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 80b9 	bne.w	8004ce6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d126      	bne.n	8004bca <HAL_PCD_EP_DB_Transmit+0xc8>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	4413      	add	r3, r2
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	011a      	lsls	r2, r3, #4
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e01a      	b.n	8004c00 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d116      	bne.n	8004c00 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	4413      	add	r3, r2
 8004be8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	011a      	lsls	r2, r3, #4
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	623b      	str	r3, [r7, #32]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d126      	bne.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	4413      	add	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	011a      	lsls	r2, r3, #4
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	e017      	b.n	8004c8c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d113      	bne.n	8004c8c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	4413      	add	r3, r2
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	011a      	lsls	r2, r3, #4
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	4619      	mov	r1, r3
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f006 fcbb 	bl	800b60e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 82d4 	beq.w	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	827b      	strh	r3, [r7, #18]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	8a7b      	ldrh	r3, [r7, #18]
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]
 8004ce4:	e2b2      	b.n	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d021      	beq.n	8004d34 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	f040 8286 	bne.w	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d48:	441a      	add	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d56:	441a      	add	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d309      	bcc.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	621a      	str	r2, [r3, #32]
 8004d7a:	e015      	b.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004d84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d92:	e009      	b.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d155      	bne.n	8004e5c <HAL_PCD_EP_DB_Transmit+0x35a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	4413      	add	r3, r2
 8004dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d112      	bne.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x302>
 8004dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	e047      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x392>
 8004e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e06:	2b3e      	cmp	r3, #62	; 0x3e
 8004e08:	d811      	bhi.n	8004e2e <HAL_PCD_EP_DB_Transmit+0x32c>
 8004e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	029b      	lsls	r3, r3, #10
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	e032      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x392>
 8004e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x342>
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e40:	3b01      	subs	r3, #1
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e01b      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x392>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d117      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x392>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	643b      	str	r3, [r7, #64]	; 0x40
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e78:	4413      	add	r3, r2
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	011a      	lsls	r2, r3, #4
 8004e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6959      	ldr	r1, [r3, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	891a      	ldrh	r2, [r3, #8]
 8004ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f004 fd4f 	bl	8009946 <USB_WritePMA>
 8004ea8:	e1d0      	b.n	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3306      	adds	r3, #6
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d307      	bcc.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	619a      	str	r2, [r3, #24]
 8004ef0:	e002      	b.n	8004ef8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 80c4 	bne.w	800508a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d126      	bne.n	8004f58 <HAL_PCD_EP_DB_Transmit+0x456>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	4413      	add	r3, r2
 8004f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	011a      	lsls	r2, r3, #4
 8004f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e01a      	b.n	8004f8e <HAL_PCD_EP_DB_Transmit+0x48c>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d116      	bne.n	8004f8e <HAL_PCD_EP_DB_Transmit+0x48c>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	677b      	str	r3, [r7, #116]	; 0x74
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f74:	4413      	add	r3, r2
 8004f76:	677b      	str	r3, [r7, #116]	; 0x74
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	4413      	add	r3, r2
 8004f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f86:	673b      	str	r3, [r7, #112]	; 0x70
 8004f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d12f      	bne.n	8004ffc <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	011a      	lsls	r2, r3, #4
 8004fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	e017      	b.n	800502c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d113      	bne.n	800502c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500c:	b29b      	uxth	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005012:	4413      	add	r3, r2
 8005014:	67bb      	str	r3, [r7, #120]	; 0x78
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	011a      	lsls	r2, r3, #4
 800501c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501e:	4413      	add	r3, r2
 8005020:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005024:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005028:	2200      	movs	r2, #0
 800502a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f006 faeb 	bl	800b60e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 8104 	bne.w	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]
 8005088:	e0e0      	b.n	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d121      	bne.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050de:	2b01      	cmp	r3, #1
 80050e0:	f040 80b4 	bne.w	800524c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050ec:	441a      	add	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050fa:	441a      	add	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	429a      	cmp	r2, r3
 800510a:	d309      	bcc.n	8005120 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005118:	1ad2      	subs	r2, r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	621a      	str	r2, [r3, #32]
 800511e:	e015      	b.n	800514c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d107      	bne.n	8005138 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800512c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005136:	e009      	b.n	800514c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2200      	movs	r2, #0
 8005142:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	667b      	str	r3, [r7, #100]	; 0x64
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d155      	bne.n	8005206 <HAL_PCD_EP_DB_Transmit+0x704>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516e:	4413      	add	r3, r2
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	011a      	lsls	r2, r3, #4
 8005178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517a:	4413      	add	r3, r2
 800517c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005180:	65bb      	str	r3, [r7, #88]	; 0x58
 8005182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005184:	2b00      	cmp	r3, #0
 8005186:	d112      	bne.n	80051ae <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005192:	b29a      	uxth	r2, r3
 8005194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e044      	b.n	8005238 <HAL_PCD_EP_DB_Transmit+0x736>
 80051ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b0:	2b3e      	cmp	r3, #62	; 0x3e
 80051b2:	d811      	bhi.n	80051d8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80051b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	657b      	str	r3, [r7, #84]	; 0x54
 80051ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_PCD_EP_DB_Transmit+0x6c8>
 80051c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c6:	3301      	adds	r3, #1
 80051c8:	657b      	str	r3, [r7, #84]	; 0x54
 80051ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e02f      	b.n	8005238 <HAL_PCD_EP_DB_Transmit+0x736>
 80051d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	657b      	str	r3, [r7, #84]	; 0x54
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <HAL_PCD_EP_DB_Transmit+0x6ec>
 80051e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ea:	3b01      	subs	r3, #1
 80051ec:	657b      	str	r3, [r7, #84]	; 0x54
 80051ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005202:	801a      	strh	r2, [r3, #0]
 8005204:	e018      	b.n	8005238 <HAL_PCD_EP_DB_Transmit+0x736>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d114      	bne.n	8005238 <HAL_PCD_EP_DB_Transmit+0x736>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005216:	b29b      	uxth	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800521c:	4413      	add	r3, r2
 800521e:	667b      	str	r3, [r7, #100]	; 0x64
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	011a      	lsls	r2, r3, #4
 8005226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005228:	4413      	add	r3, r2
 800522a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800522e:	663b      	str	r3, [r7, #96]	; 0x60
 8005230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005232:	b29a      	uxth	r2, r3
 8005234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005236:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6959      	ldr	r1, [r3, #20]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	895a      	ldrh	r2, [r3, #10]
 8005244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005246:	b29b      	uxth	r3, r3
 8005248:	f004 fb7d 	bl	8009946 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005266:	823b      	strh	r3, [r7, #16]
 8005268:	8a3b      	ldrh	r3, [r7, #16]
 800526a:	f083 0310 	eor.w	r3, r3, #16
 800526e:	823b      	strh	r3, [r7, #16]
 8005270:	8a3b      	ldrh	r3, [r7, #16]
 8005272:	f083 0320 	eor.w	r3, r3, #32
 8005276:	823b      	strh	r3, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	8a3b      	ldrh	r3, [r7, #16]
 8005288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	b29b      	uxth	r3, r3
 800529a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3788      	adds	r7, #136	; 0x88
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	817b      	strh	r3, [r7, #10]
 80052b4:	4613      	mov	r3, r2
 80052b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80052b8:	897b      	ldrh	r3, [r7, #10]
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c4:	897b      	ldrh	r3, [r7, #10]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e009      	b.n	80052f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052dc:	897a      	ldrh	r2, [r7, #10]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80052f0:	893b      	ldrh	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d107      	bne.n	8005306 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2200      	movs	r2, #0
 80052fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	80da      	strh	r2, [r3, #6]
 8005304:	e00b      	b.n	800531e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2201      	movs	r2, #1
 800530a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	b29a      	uxth	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	b29a      	uxth	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
	...

0800532c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e26c      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8087 	beq.w	800545a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800534c:	4b92      	ldr	r3, [pc, #584]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b04      	cmp	r3, #4
 8005356:	d00c      	beq.n	8005372 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005358:	4b8f      	ldr	r3, [pc, #572]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b08      	cmp	r3, #8
 8005362:	d112      	bne.n	800538a <HAL_RCC_OscConfig+0x5e>
 8005364:	4b8c      	ldr	r3, [pc, #560]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d10b      	bne.n	800538a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005372:	4b89      	ldr	r3, [pc, #548]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d06c      	beq.n	8005458 <HAL_RCC_OscConfig+0x12c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d168      	bne.n	8005458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e246      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x76>
 8005394:	4b80      	ldr	r3, [pc, #512]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7f      	ldr	r2, [pc, #508]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e02e      	b.n	8005400 <HAL_RCC_OscConfig+0xd4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x98>
 80053aa:	4b7b      	ldr	r3, [pc, #492]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7a      	ldr	r2, [pc, #488]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b78      	ldr	r3, [pc, #480]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a77      	ldr	r2, [pc, #476]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e01d      	b.n	8005400 <HAL_RCC_OscConfig+0xd4>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0xbc>
 80053ce:	4b72      	ldr	r3, [pc, #456]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a71      	ldr	r2, [pc, #452]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b6f      	ldr	r3, [pc, #444]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6e      	ldr	r2, [pc, #440]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0xd4>
 80053e8:	4b6b      	ldr	r3, [pc, #428]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6a      	ldr	r2, [pc, #424]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b68      	ldr	r3, [pc, #416]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a67      	ldr	r2, [pc, #412]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fd f842 	bl	8002490 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005410:	f7fd f83e 	bl	8002490 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e1fa      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	4b5d      	ldr	r3, [pc, #372]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0xe4>
 800542e:	e014      	b.n	800545a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fd f82e 	bl	8002490 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005438:	f7fd f82a 	bl	8002490 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e1e6      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	4b53      	ldr	r3, [pc, #332]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x10c>
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d063      	beq.n	800552e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005466:	4b4c      	ldr	r3, [pc, #304]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005472:	4b49      	ldr	r3, [pc, #292]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b08      	cmp	r3, #8
 800547c:	d11c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x18c>
 800547e:	4b46      	ldr	r3, [pc, #280]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	4b43      	ldr	r3, [pc, #268]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_RCC_OscConfig+0x176>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e1ba      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a2:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4939      	ldr	r1, [pc, #228]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	e03a      	b.n	800552e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d020      	beq.n	8005502 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c0:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x270>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fc ffe3 	bl	8002490 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fc ffdf 	bl	8002490 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e19b      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e0:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4927      	ldr	r1, [pc, #156]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	600b      	str	r3, [r1, #0]
 8005500:	e015      	b.n	800552e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x270>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fc ffc2 	bl	8002490 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005510:	f7fc ffbe 	bl	8002490 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e17a      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005522:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03a      	beq.n	80055b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d019      	beq.n	8005576 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_RCC_OscConfig+0x274>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005548:	f7fc ffa2 	bl	8002490 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005550:	f7fc ff9e 	bl	8002490 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e15a      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_RCC_OscConfig+0x26c>)
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800556e:	2001      	movs	r0, #1
 8005570:	f000 fad8 	bl	8005b24 <RCC_Delay>
 8005574:	e01c      	b.n	80055b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <HAL_RCC_OscConfig+0x274>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557c:	f7fc ff88 	bl	8002490 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005582:	e00f      	b.n	80055a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005584:	f7fc ff84 	bl	8002490 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d908      	bls.n	80055a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e140      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000
 800559c:	42420000 	.word	0x42420000
 80055a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a4:	4b9e      	ldr	r3, [pc, #632]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e9      	bne.n	8005584 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80a6 	beq.w	800570a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c2:	4b97      	ldr	r3, [pc, #604]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10d      	bne.n	80055ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ce:	4b94      	ldr	r3, [pc, #592]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4a93      	ldr	r2, [pc, #588]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	61d3      	str	r3, [r2, #28]
 80055da:	4b91      	ldr	r3, [pc, #580]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b8e      	ldr	r3, [pc, #568]	; (8005824 <HAL_RCC_OscConfig+0x4f8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d118      	bne.n	8005628 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f6:	4b8b      	ldr	r3, [pc, #556]	; (8005824 <HAL_RCC_OscConfig+0x4f8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a8a      	ldr	r2, [pc, #552]	; (8005824 <HAL_RCC_OscConfig+0x4f8>)
 80055fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005602:	f7fc ff45 	bl	8002490 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560a:	f7fc ff41 	bl	8002490 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b64      	cmp	r3, #100	; 0x64
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e0fd      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561c:	4b81      	ldr	r3, [pc, #516]	; (8005824 <HAL_RCC_OscConfig+0x4f8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d106      	bne.n	800563e <HAL_RCC_OscConfig+0x312>
 8005630:	4b7b      	ldr	r3, [pc, #492]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4a7a      	ldr	r2, [pc, #488]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	6213      	str	r3, [r2, #32]
 800563c:	e02d      	b.n	800569a <HAL_RCC_OscConfig+0x36e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x334>
 8005646:	4b76      	ldr	r3, [pc, #472]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	4a75      	ldr	r2, [pc, #468]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	6213      	str	r3, [r2, #32]
 8005652:	4b73      	ldr	r3, [pc, #460]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4a72      	ldr	r2, [pc, #456]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005658:	f023 0304 	bic.w	r3, r3, #4
 800565c:	6213      	str	r3, [r2, #32]
 800565e:	e01c      	b.n	800569a <HAL_RCC_OscConfig+0x36e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b05      	cmp	r3, #5
 8005666:	d10c      	bne.n	8005682 <HAL_RCC_OscConfig+0x356>
 8005668:	4b6d      	ldr	r3, [pc, #436]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	4a6c      	ldr	r2, [pc, #432]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 800566e:	f043 0304 	orr.w	r3, r3, #4
 8005672:	6213      	str	r3, [r2, #32]
 8005674:	4b6a      	ldr	r3, [pc, #424]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	4a69      	ldr	r2, [pc, #420]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6213      	str	r3, [r2, #32]
 8005680:	e00b      	b.n	800569a <HAL_RCC_OscConfig+0x36e>
 8005682:	4b67      	ldr	r3, [pc, #412]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	4a66      	ldr	r2, [pc, #408]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	6213      	str	r3, [r2, #32]
 800568e:	4b64      	ldr	r3, [pc, #400]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	4a63      	ldr	r2, [pc, #396]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fc fef5 	bl	8002490 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fc fef1 	bl	8002490 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0ab      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b57      	ldr	r3, [pc, #348]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCC_OscConfig+0x37e>
 80056cc:	e014      	b.n	80056f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fc fedf 	bl	8002490 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fc fedb 	bl	8002490 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e095      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ec:	4b4c      	ldr	r3, [pc, #304]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ee      	bne.n	80056d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fe:	4b48      	ldr	r3, [pc, #288]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	4a47      	ldr	r2, [pc, #284]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005708:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8081 	beq.w	8005816 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b08      	cmp	r3, #8
 800571e:	d061      	beq.n	80057e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d146      	bne.n	80057b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005728:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <HAL_RCC_OscConfig+0x4fc>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fc feaf 	bl	8002490 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005736:	f7fc feab 	bl	8002490 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e067      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005748:	4b35      	ldr	r3, [pc, #212]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d108      	bne.n	8005770 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800575e:	4b30      	ldr	r3, [pc, #192]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	492d      	ldr	r1, [pc, #180]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 800576c:	4313      	orrs	r3, r2
 800576e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a19      	ldr	r1, [r3, #32]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	430b      	orrs	r3, r1
 8005782:	4927      	ldr	r1, [pc, #156]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <HAL_RCC_OscConfig+0x4fc>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fc fe7f 	bl	8002490 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fc fe7b 	bl	8002490 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e037      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x46a>
 80057b4:	e02f      	b.n	8005816 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <HAL_RCC_OscConfig+0x4fc>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fc fe68 	bl	8002490 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fc fe64 	bl	8002490 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e020      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x498>
 80057e2:	e018      	b.n	8005816 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e013      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCC_OscConfig+0x4f4>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	429a      	cmp	r2, r3
 8005802:	d106      	bne.n	8005812 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d001      	beq.n	8005816 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
 8005828:	42420060 	.word	0x42420060

0800582c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0d0      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005840:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d910      	bls.n	8005870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584e:	4b67      	ldr	r3, [pc, #412]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 0207 	bic.w	r2, r3, #7
 8005856:	4965      	ldr	r1, [pc, #404]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0b8      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005888:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ac:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	494d      	ldr	r1, [pc, #308]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d040      	beq.n	800594c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d107      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d115      	bne.n	800590a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d107      	bne.n	80058fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ea:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e073      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e06b      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800590a:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f023 0203 	bic.w	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4936      	ldr	r1, [pc, #216]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800591c:	f7fc fdb8 	bl	8002490 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005922:	e00a      	b.n	800593a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005924:	f7fc fdb4 	bl	8002490 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e053      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593a:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 020c 	and.w	r2, r3, #12
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	429a      	cmp	r2, r3
 800594a:	d1eb      	bne.n	8005924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d210      	bcs.n	800597c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 0207 	bic.w	r2, r3, #7
 8005962:	4922      	ldr	r1, [pc, #136]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e032      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4916      	ldr	r1, [pc, #88]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	490e      	ldr	r1, [pc, #56]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ba:	f000 f821 	bl	8005a00 <HAL_RCC_GetSysClockFreq>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	490a      	ldr	r1, [pc, #40]	; (80059f4 <HAL_RCC_ClockConfig+0x1c8>)
 80059cc:	5ccb      	ldrb	r3, [r1, r3]
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1cc>)
 80059d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_RCC_ClockConfig+0x1d0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fc fd16 	bl	800240c <HAL_InitTick>

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40022000 	.word	0x40022000
 80059f0:	40021000 	.word	0x40021000
 80059f4:	0800bd04 	.word	0x0800bd04
 80059f8:	20000000 	.word	0x20000000
 80059fc:	20000004 	.word	0x20000004

08005a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a00:	b490      	push	{r4, r7}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a08:	1d3c      	adds	r4, r7, #4
 8005a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a10:	f240 2301 	movw	r3, #513	; 0x201
 8005a14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d002      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x40>
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCC_GetSysClockFreq+0x46>
 8005a3e:	e02d      	b.n	8005a9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a42:	623b      	str	r3, [r7, #32]
      break;
 8005a44:	e02d      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	0c9b      	lsrs	r3, r3, #18
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a52:	4413      	add	r3, r2
 8005a54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005a58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	0c5b      	lsrs	r3, r3, #17
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a72:	4413      	add	r3, r2
 8005a74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7e:	fb02 f203 	mul.w	r2, r2, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	e004      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a90:	fb02 f303 	mul.w	r3, r2, r3
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	623b      	str	r3, [r7, #32]
      break;
 8005a9a:	e002      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9e:	623b      	str	r3, [r7, #32]
      break;
 8005aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3728      	adds	r7, #40	; 0x28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc90      	pop	{r4, r7}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	0800bb34 	.word	0x0800bb34
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	007a1200 	.word	0x007a1200
 8005abc:	003d0900 	.word	0x003d0900

08005ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac4:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr
 8005ad0:	20000000 	.word	0x20000000

08005ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad8:	f7ff fff2 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4903      	ldr	r1, [pc, #12]	; (8005af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40021000 	.word	0x40021000
 8005af8:	0800bd14 	.word	0x0800bd14

08005afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b00:	f7ff ffde 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	0adb      	lsrs	r3, r3, #11
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	4903      	ldr	r1, [pc, #12]	; (8005b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b12:	5ccb      	ldrb	r3, [r1, r3]
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	0800bd14 	.word	0x0800bd14

08005b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <RCC_Delay+0x34>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <RCC_Delay+0x38>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	0a5b      	lsrs	r3, r3, #9
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b40:	bf00      	nop
  }
  while (Delay --);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	60fa      	str	r2, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f9      	bne.n	8005b40 <RCC_Delay+0x1c>
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	10624dd3 	.word	0x10624dd3

08005b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d07d      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b80:	4b4f      	ldr	r3, [pc, #316]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10d      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8c:	4b4c      	ldr	r3, [pc, #304]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	4a4b      	ldr	r2, [pc, #300]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	61d3      	str	r3, [r2, #28]
 8005b98:	4b49      	ldr	r3, [pc, #292]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d118      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb4:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a42      	ldr	r2, [pc, #264]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc0:	f7fc fc66 	bl	8002490 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc6:	e008      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc8:	f7fc fc62 	bl	8002490 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e06d      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bda:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005be6:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d02e      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d027      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c04:	4b2e      	ldr	r3, [pc, #184]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c14:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c1a:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2a:	f7fc fc31 	bl	8002490 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c30:	e00a      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c32:	f7fc fc2d 	bl	8002490 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e036      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c48:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ee      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4917      	ldr	r1, [pc, #92]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	490b      	ldr	r1, [pc, #44]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4904      	ldr	r1, [pc, #16]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	42420440 	.word	0x42420440

08005ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc fa24 	bl	8002140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 fc28 	bl	8006560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e03a      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIM_Base_Start_IT+0x98>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x58>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d009      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x58>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_TIM_Base_Start_IT+0x9c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x58>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <HAL_TIM_Base_Start_IT+0xa0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d111      	bne.n	8005de8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b06      	cmp	r3, #6
 8005dd4:	d010      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	e007      	b.n	8005df8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800

08005e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e041      	b.n	8005ea6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f839 	bl	8005eae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 fb86 	bl	8006560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_TIM_PWM_Start+0x24>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e022      	b.n	8005f2a <HAL_TIM_PWM_Start+0x6a>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d109      	bne.n	8005efe <HAL_TIM_PWM_Start+0x3e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	e015      	b.n	8005f2a <HAL_TIM_PWM_Start+0x6a>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d109      	bne.n	8005f18 <HAL_TIM_PWM_Start+0x58>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e008      	b.n	8005f2a <HAL_TIM_PWM_Start+0x6a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e05e      	b.n	8005ff0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x82>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f40:	e013      	b.n	8005f6a <HAL_TIM_PWM_Start+0xaa>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x92>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f50:	e00b      	b.n	8005f6a <HAL_TIM_PWM_Start+0xaa>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_PWM_Start+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f60:	e003      	b.n	8005f6a <HAL_TIM_PWM_Start+0xaa>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fd74 	bl	8006a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1e      	ldr	r2, [pc, #120]	; (8005ff8 <HAL_TIM_PWM_Start+0x138>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <HAL_TIM_PWM_Start+0x138>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00e      	beq.n	8005fba <HAL_TIM_PWM_Start+0xfa>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d009      	beq.n	8005fba <HAL_TIM_PWM_Start+0xfa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a14      	ldr	r2, [pc, #80]	; (8005ffc <HAL_TIM_PWM_Start+0x13c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <HAL_TIM_PWM_Start+0xfa>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a12      	ldr	r2, [pc, #72]	; (8006000 <HAL_TIM_PWM_Start+0x140>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d111      	bne.n	8005fde <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d010      	beq.n	8005fee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fdc:	e007      	b.n	8005fee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800

08006004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d122      	bne.n	8006060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b02      	cmp	r3, #2
 8006026:	d11b      	bne.n	8006060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0202 	mvn.w	r2, #2
 8006030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa6f 	bl	800652a <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa62 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa71 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b04      	cmp	r3, #4
 800606c:	d122      	bne.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d11b      	bne.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0204 	mvn.w	r2, #4
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa45 	bl	800652a <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa38 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa47 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d122      	bne.n	8006108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d11b      	bne.n	8006108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0208 	mvn.w	r2, #8
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2204      	movs	r2, #4
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa1b 	bl	800652a <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa0e 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa1d 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b10      	cmp	r3, #16
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0210 	mvn.w	r2, #16
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2208      	movs	r2, #8
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9f1 	bl	800652a <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9e4 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9f3 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b01      	cmp	r3, #1
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0201 	mvn.w	r2, #1
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fa fa4a 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fce1 	bl	8006b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d10e      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d107      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9b7 	bl	800654e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d10e      	bne.n	800620c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d107      	bne.n	800620c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0220 	mvn.w	r2, #32
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fcac 	bl	8006b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800622a:	2302      	movs	r3, #2
 800622c:	e0ac      	b.n	8006388 <HAL_TIM_PWM_ConfigChannel+0x174>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	f200 809f 	bhi.w	800637c <HAL_TIM_PWM_ConfigChannel+0x168>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	0800637d 	.word	0x0800637d
 800624c:	0800637d 	.word	0x0800637d
 8006250:	0800637d 	.word	0x0800637d
 8006254:	080062b9 	.word	0x080062b9
 8006258:	0800637d 	.word	0x0800637d
 800625c:	0800637d 	.word	0x0800637d
 8006260:	0800637d 	.word	0x0800637d
 8006264:	080062fb 	.word	0x080062fb
 8006268:	0800637d 	.word	0x0800637d
 800626c:	0800637d 	.word	0x0800637d
 8006270:	0800637d 	.word	0x0800637d
 8006274:	0800633b 	.word	0x0800633b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f9d0 	bl	8006624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	619a      	str	r2, [r3, #24]
      break;
 80062b6:	e062      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa16 	bl	80066f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	619a      	str	r2, [r3, #24]
      break;
 80062f8:	e041      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fa5f 	bl	80067c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0204 	bic.w	r2, r2, #4
 8006324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69d9      	ldr	r1, [r3, #28]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
      break;
 8006338:	e021      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 faa9 	bl	8006898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	61da      	str	r2, [r3, #28]
      break;
 800637a:	e000      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800637c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIM_ConfigClockSource+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0b3      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x180>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d03e      	beq.n	8006460 <HAL_TIM_ConfigClockSource+0xd0>
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	f200 8087 	bhi.w	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ee:	f000 8085 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x16c>
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f6:	d87f      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 80063f8:	2b70      	cmp	r3, #112	; 0x70
 80063fa:	d01a      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0xa2>
 80063fc:	2b70      	cmp	r3, #112	; 0x70
 80063fe:	d87b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d050      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x116>
 8006404:	2b60      	cmp	r3, #96	; 0x60
 8006406:	d877      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d03c      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0xf6>
 800640c:	2b50      	cmp	r3, #80	; 0x50
 800640e:	d873      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d058      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x136>
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d86f      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d064      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
 800641c:	2b30      	cmp	r3, #48	; 0x30
 800641e:	d86b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d060      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d867      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05c      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d05a      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006430:	e062      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6899      	ldr	r1, [r3, #8]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f000 faee 	bl	8006a22 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006454:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	609a      	str	r2, [r3, #8]
      break;
 800645e:	e04e      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f000 fad7 	bl	8006a22 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006482:	609a      	str	r2, [r3, #8]
      break;
 8006484:	e03b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 fa4e 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2150      	movs	r1, #80	; 0x50
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 faa5 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 80064a4:	e02b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 fa6c 	bl	8006990 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2160      	movs	r1, #96	; 0x60
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa95 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 80064c4:	e01b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 fa2e 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fa85 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 80064e4:	e00b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f000 fa7c 	bl	80069ee <TIM_ITRx_SetConfig>
        break;
 80064f6:	e002      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a29      	ldr	r2, [pc, #164]	; (8006618 <TIM_Base_SetConfig+0xb8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x30>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x30>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a26      	ldr	r2, [pc, #152]	; (800661c <TIM_Base_SetConfig+0xbc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x30>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a25      	ldr	r2, [pc, #148]	; (8006620 <TIM_Base_SetConfig+0xc0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <TIM_Base_SetConfig+0xb8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_Base_SetConfig+0x62>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d007      	beq.n	80065c2 <TIM_Base_SetConfig+0x62>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a19      	ldr	r2, [pc, #100]	; (800661c <TIM_Base_SetConfig+0xbc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_Base_SetConfig+0x62>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a18      	ldr	r2, [pc, #96]	; (8006620 <TIM_Base_SetConfig+0xc0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a07      	ldr	r2, [pc, #28]	; (8006618 <TIM_Base_SetConfig+0xb8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d103      	bne.n	8006608 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	615a      	str	r2, [r3, #20]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800

08006624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f023 0302 	bic.w	r3, r3, #2
 800666c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <TIM_OC1_SetConfig+0xc8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10c      	bne.n	800669a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0308 	bic.w	r3, r3, #8
 8006686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <TIM_OC1_SetConfig+0xc8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	621a      	str	r2, [r3, #32]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40012c00 	.word	0x40012c00

080066f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0320 	bic.w	r3, r3, #32
 800673a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <TIM_OC2_SetConfig+0xd0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10d      	bne.n	800676c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a14      	ldr	r2, [pc, #80]	; (80067c0 <TIM_OC2_SetConfig+0xd0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d113      	bne.n	800679c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800677a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	40012c00 	.word	0x40012c00

080067c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800680c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <TIM_OC3_SetConfig+0xd0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10d      	bne.n	800683e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800683c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a14      	ldr	r2, [pc, #80]	; (8006894 <TIM_OC3_SetConfig+0xd0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d113      	bne.n	800686e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800684c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	621a      	str	r2, [r3, #32]
}
 8006888:	bf00      	nop
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00

08006898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	031b      	lsls	r3, r3, #12
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a0f      	ldr	r2, [pc, #60]	; (8006930 <TIM_OC4_SetConfig+0x98>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d109      	bne.n	800690c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	019b      	lsls	r3, r3, #6
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr
 8006930:	40012c00 	.word	0x40012c00

08006934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 030a 	bic.w	r3, r3, #10
 8006970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 0210 	bic.w	r2, r3, #16
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	031b      	lsls	r3, r3, #12
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f043 0307 	orr.w	r3, r3, #7
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	021a      	lsls	r2, r3, #8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	609a      	str	r2, [r3, #8]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2201      	movs	r2, #1
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1a      	ldr	r2, [r3, #32]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	401a      	ands	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e046      	b.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a12      	ldr	r2, [pc, #72]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a10      	ldr	r2, [pc, #64]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10c      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800

08006b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e03f      	b.n	8006c1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fb fb3c 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	; 0x24
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fc35 	bl	800743c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695a      	ldr	r2, [r3, #20]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d11d      	bne.n	8006c78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_UART_Receive_IT+0x26>
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e016      	b.n	8006c7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Receive_IT+0x38>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e00f      	b.n	8006c7a <HAL_UART_Receive_IT+0x58>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fa42 	bl	80070f8 <UART_Start_Receive_IT>
 8006c74:	4603      	mov	r3, r0
 8006c76:	e000      	b.n	8006c7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0201 	bic.w	r2, r2, #1
 8006caa:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d107      	bne.n	8006cc4 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0210 	bic.w	r2, r2, #16
 8006cc2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d02d      	beq.n	8006d2e <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d013      	beq.n	8006d12 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	4a19      	ldr	r2, [pc, #100]	; (8006d54 <HAL_UART_AbortReceive_IT+0xd0>)
 8006cf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fc f998 	bl	800302c <HAL_DMA_Abort_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d022      	beq.n	8006d48 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	e01a      	b.n	8006d48 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9d2 	bl	80070d0 <HAL_UART_AbortReceiveCpltCallback>
 8006d2c:	e00c      	b.n	8006d48 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9c4 	bl	80070d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	080071eb 	.word	0x080071eb

08006d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10d      	bne.n	8006daa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_UART_IRQHandler+0x52>
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 faa0 	bl	80072e8 <UART_Receive_IT>
      return;
 8006da8:	e17b      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80b1 	beq.w	8006f14 <HAL_UART_IRQHandler+0x1bc>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x70>
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80a6 	beq.w	8006f14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <HAL_UART_IRQHandler+0x90>
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	f043 0201 	orr.w	r2, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_UART_IRQHandler+0xb0>
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	f043 0202 	orr.w	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_UART_IRQHandler+0xd0>
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f043 0204 	orr.w	r2, r3, #4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <HAL_UART_IRQHandler+0xfa>
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_UART_IRQHandler+0xee>
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f043 0208 	orr.w	r2, r3, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 811e 	beq.w	8007098 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <HAL_UART_IRQHandler+0x11e>
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa39 	bl	80072e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <HAL_UART_IRQHandler+0x146>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d031      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f963 	bl	800716a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d023      	beq.n	8006efa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d013      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	4a76      	ldr	r2, [pc, #472]	; (80070a8 <HAL_UART_IRQHandler+0x350>)
 8006ed0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fc f8a8 	bl	800302c <HAL_DMA_Abort_IT>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef0:	e00e      	b.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8e3 	bl	80070be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00a      	b.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f8df 	bl	80070be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e006      	b.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8db 	bl	80070be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f0e:	e0c3      	b.n	8007098 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	bf00      	nop
    return;
 8006f12:	e0c1      	b.n	8007098 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 80a1 	bne.w	8007060 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 809b 	beq.w	8007060 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8095 	beq.w	8007060 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d04e      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006f64:	8a3b      	ldrh	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8098 	beq.w	800709c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f70:	8a3a      	ldrh	r2, [r7, #16]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f080 8092 	bcs.w	800709c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8a3a      	ldrh	r2, [r7, #16]
 8006f7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d02b      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0210 	bic.w	r2, r2, #16
 8006fd4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fb ffeb 	bl	8002fb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f876 	bl	80070e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ff6:	e051      	b.n	800709c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007000:	b29b      	uxth	r3, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d047      	beq.n	80070a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007010:	8a7b      	ldrh	r3, [r7, #18]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d044      	beq.n	80070a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007024:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0210 	bic.w	r2, r2, #16
 8007052:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007054:	8a7b      	ldrh	r3, [r7, #18]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f842 	bl	80070e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800705e:	e01f      	b.n	80070a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_UART_IRQHandler+0x324>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8d0 	bl	800721a <UART_Transmit_IT>
    return;
 800707a:	e012      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f911 	bl	80072b8 <UART_EndTransmit_IT>
    return;
 8007096:	e004      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8007098:	bf00      	nop
 800709a:	e002      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80070a0:	bf00      	nop
  }
}
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	080071c3 	.word	0x080071c3

080070ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr

080070e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	460b      	mov	r3, r1
 80070ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2222      	movs	r2, #34	; 0x22
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800713c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695a      	ldr	r2, [r3, #20]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0201 	orr.w	r2, r2, #1
 800714c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0220 	orr.w	r2, r2, #32
 800715c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007180:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0210 	bic.w	r2, r2, #16
 80071a8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr

080071c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff6e 	bl	80070be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff ff5f 	bl	80070d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b21      	cmp	r3, #33	; 0x21
 800722c:	d13e      	bne.n	80072ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007236:	d114      	bne.n	8007262 <UART_Transmit_IT+0x48>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d110      	bne.n	8007262 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	1c9a      	adds	r2, r3, #2
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	621a      	str	r2, [r3, #32]
 8007260:	e008      	b.n	8007274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6211      	str	r1, [r2, #32]
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29b      	uxth	r3, r3
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	4619      	mov	r1, r3
 8007282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10f      	bne.n	80072a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072ac:	2302      	movs	r3, #2
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fee7 	bl	80070ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b22      	cmp	r3, #34	; 0x22
 80072fa:	f040 8099 	bne.w	8007430 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	d117      	bne.n	8007338 <UART_Receive_IT+0x50>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d113      	bne.n	8007338 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	b29a      	uxth	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	1c9a      	adds	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	629a      	str	r2, [r3, #40]	; 0x28
 8007336:	e026      	b.n	8007386 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d007      	beq.n	800735c <UART_Receive_IT+0x74>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <UART_Receive_IT+0x82>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e008      	b.n	800737c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007376:	b2da      	uxtb	r2, r3
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29b      	uxth	r3, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4619      	mov	r1, r3
 8007394:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007396:	2b00      	cmp	r3, #0
 8007398:	d148      	bne.n	800742c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0220 	bic.w	r2, r2, #32
 80073a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d123      	bne.n	8007422 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0210 	bic.w	r2, r2, #16
 80073ee:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b10      	cmp	r3, #16
 80073fc:	d10a      	bne.n	8007414 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fe61 	bl	80070e2 <HAL_UARTEx_RxEventCallback>
 8007420:	e002      	b.n	8007428 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7f9 fb46 	bl	8000ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e002      	b.n	8007432 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007476:	f023 030c 	bic.w	r3, r3, #12
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	430b      	orrs	r3, r1
 8007482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <UART_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d103      	bne.n	80074ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7fe fb2a 	bl	8005afc <HAL_RCC_GetPCLK2Freq>
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	e002      	b.n	80074b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fe fb12 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 80074b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	4a22      	ldr	r2, [pc, #136]	; (8007554 <UART_SetConfig+0x118>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	0119      	lsls	r1, r3, #4
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009a      	lsls	r2, r3, #2
 80074dc:	441a      	add	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <UART_SetConfig+0x118>)
 80074ea:	fba3 0302 	umull	r0, r3, r3, r2
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	2064      	movs	r0, #100	; 0x64
 80074f2:	fb00 f303 	mul.w	r3, r0, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	3332      	adds	r3, #50	; 0x32
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <UART_SetConfig+0x118>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007508:	4419      	add	r1, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009a      	lsls	r2, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007520:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <UART_SetConfig+0x118>)
 8007522:	fba3 0302 	umull	r0, r3, r3, r2
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	2064      	movs	r0, #100	; 0x64
 800752a:	fb00 f303 	mul.w	r3, r0, r3
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	3332      	adds	r3, #50	; 0x32
 8007534:	4a07      	ldr	r2, [pc, #28]	; (8007554 <UART_SetConfig+0x118>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	440a      	add	r2, r1
 8007546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40013800 	.word	0x40013800
 8007554:	51eb851f 	.word	0x51eb851f

08007558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007558:	b084      	sub	sp, #16
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	f107 0014 	add.w	r0, r7, #20
 8007566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	b004      	add	sp, #16
 8007576:	4770      	bx	lr

08007578 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007588:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800758c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80075b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	4013      	ands	r3, r2
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bc80      	pop	{r7}
 80075d6:	4770      	bx	lr

080075d8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80075f0:	b084      	sub	sp, #16
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	f107 0014 	add.w	r0, r7, #20
 80075fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	b004      	add	sp, #16
 800762e:	4770      	bx	lr

08007630 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007630:	b480      	push	{r7}
 8007632:	b09b      	sub	sp, #108	; 0x6c
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	78db      	ldrb	r3, [r3, #3]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d81f      	bhi.n	80076a2 <USB_ActivateEndpoint+0x72>
 8007662:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <USB_ActivateEndpoint+0x38>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	08007679 	.word	0x08007679
 800766c:	08007695 	.word	0x08007695
 8007670:	080076ab 	.word	0x080076ab
 8007674:	08007687 	.word	0x08007687
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007678:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800767c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007680:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007684:	e012      	b.n	80076ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007686:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800768a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800768e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007692:	e00b      	b.n	80076ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007694:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800769c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80076a0:	e004      	b.n	80076ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80076a8:	e000      	b.n	80076ac <USB_ActivateEndpoint+0x7c>
      break;
 80076aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	441a      	add	r2, r3
 80076b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007710:	b29b      	uxth	r3, r3
 8007712:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	7b1b      	ldrb	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 8149 	bne.w	80079b0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8084 	beq.w	8007830 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4413      	add	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	88db      	ldrh	r3, [r3, #6]
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	b29b      	uxth	r3, r3
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	81fb      	strh	r3, [r7, #14]
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01b      	beq.n	80077ac <USB_ActivateEndpoint+0x17c>
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	81bb      	strh	r3, [r7, #12]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	441a      	add	r2, r3
 8007796:	89bb      	ldrh	r3, [r7, #12]
 8007798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	78db      	ldrb	r3, [r3, #3]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d020      	beq.n	80077f6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ca:	813b      	strh	r3, [r7, #8]
 80077cc:	893b      	ldrh	r3, [r7, #8]
 80077ce:	f083 0320 	eor.w	r3, r3, #32
 80077d2:	813b      	strh	r3, [r7, #8]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	893b      	ldrh	r3, [r7, #8]
 80077e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8013      	strh	r3, [r2, #0]
 80077f4:	e27f      	b.n	8007cf6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780c:	817b      	strh	r3, [r7, #10]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	441a      	add	r2, r3
 8007818:	897b      	ldrh	r3, [r7, #10]
 800781a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782a:	b29b      	uxth	r3, r3
 800782c:	8013      	strh	r3, [r2, #0]
 800782e:	e262      	b.n	8007cf6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783a:	b29b      	uxth	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	4413      	add	r3, r2
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	011a      	lsls	r2, r3, #4
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	4413      	add	r3, r2
 800784e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	b29b      	uxth	r3, r3
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800786e:	b29b      	uxth	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	4413      	add	r3, r2
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	011a      	lsls	r2, r3, #4
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	4413      	add	r3, r2
 8007882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007886:	623b      	str	r3, [r7, #32]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d112      	bne.n	80078b6 <USB_ActivateEndpoint+0x286>
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800789a:	b29a      	uxth	r2, r3
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e02f      	b.n	8007916 <USB_ActivateEndpoint+0x2e6>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b3e      	cmp	r3, #62	; 0x3e
 80078bc:	d813      	bhi.n	80078e6 <USB_ActivateEndpoint+0x2b6>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	663b      	str	r3, [r7, #96]	; 0x60
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <USB_ActivateEndpoint+0x2a8>
 80078d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d4:	3301      	adds	r3, #1
 80078d6:	663b      	str	r3, [r7, #96]	; 0x60
 80078d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078da:	b29b      	uxth	r3, r3
 80078dc:	029b      	lsls	r3, r3, #10
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e017      	b.n	8007916 <USB_ActivateEndpoint+0x2e6>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	663b      	str	r3, [r7, #96]	; 0x60
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <USB_ActivateEndpoint+0x2d0>
 80078fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078fc:	3b01      	subs	r3, #1
 80078fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007910:	b29a      	uxth	r2, r3
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	83fb      	strh	r3, [r7, #30]
 8007924:	8bfb      	ldrh	r3, [r7, #30]
 8007926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01b      	beq.n	8007966 <USB_ActivateEndpoint+0x336>
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007944:	83bb      	strh	r3, [r7, #28]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	441a      	add	r2, r3
 8007950:	8bbb      	ldrh	r3, [r7, #28]
 8007952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800795a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800795e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007962:	b29b      	uxth	r3, r3
 8007964:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797c:	837b      	strh	r3, [r7, #26]
 800797e:	8b7b      	ldrh	r3, [r7, #26]
 8007980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007984:	837b      	strh	r3, [r7, #26]
 8007986:	8b7b      	ldrh	r3, [r7, #26]
 8007988:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800798c:	837b      	strh	r3, [r7, #26]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	8b7b      	ldrh	r3, [r7, #26]
 800799a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	8013      	strh	r3, [r2, #0]
 80079ae:	e1a2      	b.n	8007cf6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	441a      	add	r2, r3
 80079d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80079d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	461a      	mov	r2, r3
 80079fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079fc:	4413      	add	r3, r2
 80079fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	011a      	lsls	r2, r3, #4
 8007a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	891b      	ldrh	r3, [r3, #8]
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	653b      	str	r3, [r7, #80]	; 0x50
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a30:	4413      	add	r3, r2
 8007a32:	653b      	str	r3, [r7, #80]	; 0x50
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	011a      	lsls	r2, r3, #4
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	895b      	ldrh	r3, [r3, #10]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 8091 	bne.w	8007b80 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01b      	beq.n	8007aae <USB_ActivateEndpoint+0x47e>
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	873b      	strh	r3, [r7, #56]	; 0x38
 8007abc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <USB_ActivateEndpoint+0x4ce>
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007adc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5c:	867b      	strh	r3, [r7, #50]	; 0x32
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]
 8007b7e:	e0ba      	b.n	8007cf6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01d      	beq.n	8007bd8 <USB_ActivateEndpoint+0x5a8>
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	441a      	add	r2, r3
 8007bc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007be8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01d      	beq.n	8007c30 <USB_ActivateEndpoint+0x600>
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d024      	beq.n	8007c82 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007c52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c56:	f083 0320 	eor.w	r3, r3, #32
 8007c5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	441a      	add	r2, r3
 8007c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]
 8007c80:	e01d      	b.n	8007cbe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	441a      	add	r2, r3
 8007ce0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	376c      	adds	r7, #108	; 0x6c
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b08d      	sub	sp, #52	; 0x34
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	7b1b      	ldrb	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f040 808e 	bne.w	8007e34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d044      	beq.n	8007daa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	81bb      	strh	r3, [r7, #12]
 8007d2e:	89bb      	ldrh	r3, [r7, #12]
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01b      	beq.n	8007d70 <USB_DeactivateEndpoint+0x6c>
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4e:	817b      	strh	r3, [r7, #10]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	441a      	add	r2, r3
 8007d5a:	897b      	ldrh	r3, [r7, #10]
 8007d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d86:	813b      	strh	r3, [r7, #8]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	441a      	add	r2, r3
 8007d92:	893b      	ldrh	r3, [r7, #8]
 8007d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	8013      	strh	r3, [r2, #0]
 8007da8:	e192      	b.n	80080d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	827b      	strh	r3, [r7, #18]
 8007db8:	8a7b      	ldrh	r3, [r7, #18]
 8007dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01b      	beq.n	8007dfa <USB_DeactivateEndpoint+0xf6>
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd8:	823b      	strh	r3, [r7, #16]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	441a      	add	r2, r3
 8007de4:	8a3b      	ldrh	r3, [r7, #16]
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e10:	81fb      	strh	r3, [r7, #14]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]
 8007e32:	e14d      	b.n	80080d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f040 80a5 	bne.w	8007f88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	843b      	strh	r3, [r7, #32]
 8007e4c:	8c3b      	ldrh	r3, [r7, #32]
 8007e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d01b      	beq.n	8007e8e <USB_DeactivateEndpoint+0x18a>
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6c:	83fb      	strh	r3, [r7, #30]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	8bfb      	ldrh	r3, [r7, #30]
 8007e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	83bb      	strh	r3, [r7, #28]
 8007e9c:	8bbb      	ldrh	r3, [r7, #28]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01b      	beq.n	8007ede <USB_DeactivateEndpoint+0x1da>
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebc:	837b      	strh	r3, [r7, #26]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	8b7b      	ldrh	r3, [r7, #26]
 8007eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef4:	833b      	strh	r3, [r7, #24]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	441a      	add	r2, r3
 8007f00:	8b3b      	ldrh	r3, [r7, #24]
 8007f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	82fb      	strh	r3, [r7, #22]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	8afb      	ldrh	r3, [r7, #22]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f64:	82bb      	strh	r3, [r7, #20]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	8abb      	ldrh	r3, [r7, #20]
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]
 8007f86:	e0a3      	b.n	80080d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <USB_DeactivateEndpoint+0x2d4>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01b      	beq.n	8008028 <USB_DeactivateEndpoint+0x324>
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	853b      	strh	r3, [r7, #40]	; 0x28
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	441a      	add	r2, r3
 8008012:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800801c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008024:	b29b      	uxth	r3, r3
 8008026:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	441a      	add	r2, r3
 800804a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800804c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805c:	b29b      	uxth	r3, r3
 800805e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008076:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800808c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008094:	b29b      	uxth	r3, r3
 8008096:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3734      	adds	r7, #52	; 0x34
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b0cc      	sub	sp, #304	; 0x130
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	6018      	str	r0, [r3, #0]
 80080e6:	463b      	mov	r3, r7
 80080e8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080ea:	463b      	mov	r3, r7
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	f040 872e 	bne.w	8008f52 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80080f6:	463b      	mov	r3, r7
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699a      	ldr	r2, [r3, #24]
 80080fc:	463b      	mov	r3, r7
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	429a      	cmp	r2, r3
 8008104:	d905      	bls.n	8008112 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008106:	463b      	mov	r3, r7
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008110:	e004      	b.n	800811c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008112:	463b      	mov	r3, r7
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800811c:	463b      	mov	r3, r7
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	7b1b      	ldrb	r3, [r3, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d134      	bne.n	8008190 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008126:	463b      	mov	r3, r7
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6959      	ldr	r1, [r3, #20]
 800812c:	463b      	mov	r3, r7
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	88da      	ldrh	r2, [r3, #6]
 8008132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008136:	b29b      	uxth	r3, r3
 8008138:	1d38      	adds	r0, r7, #4
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	f001 fc03 	bl	8009946 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008140:	f107 0310 	add.w	r3, r7, #16
 8008144:	1d3a      	adds	r2, r7, #4
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	1d3b      	adds	r3, r7, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008152:	b29b      	uxth	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	f107 0310 	add.w	r3, r7, #16
 800815a:	f107 0210 	add.w	r2, r7, #16
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	440a      	add	r2, r1
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	011a      	lsls	r2, r3, #4
 800816c:	f107 0310 	add.w	r3, r7, #16
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4413      	add	r3, r2
 8008174:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008178:	f107 030c 	add.w	r3, r7, #12
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008182:	b29a      	uxth	r2, r3
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	801a      	strh	r2, [r3, #0]
 800818c:	f000 beac 	b.w	8008ee8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	2b02      	cmp	r3, #2
 8008198:	f040 838c 	bne.w	80088b4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800819c:	463b      	mov	r3, r7
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6a1a      	ldr	r2, [r3, #32]
 80081a2:	463b      	mov	r3, r7
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	f240 8330 	bls.w	800880e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80081ae:	1d3b      	adds	r3, r7, #4
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	463b      	mov	r3, r7
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081cc:	1d3b      	adds	r3, r7, #4
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	463b      	mov	r3, r7
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	441a      	add	r2, r3
 80081da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80081f2:	463b      	mov	r3, r7
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6a1a      	ldr	r2, [r3, #32]
 80081f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fc:	1ad2      	subs	r2, r2, r3
 80081fe:	463b      	mov	r3, r7
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008204:	1d3b      	adds	r3, r7, #4
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	463b      	mov	r3, r7
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 819e 	beq.w	800855c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008224:	1d3a      	adds	r2, r7, #4
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	463b      	mov	r3, r7
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d17a      	bne.n	800832a <USB_EPStartXfer+0x24e>
 8008234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008238:	1d3a      	adds	r2, r7, #4
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	1d3b      	adds	r3, r7, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008246:	b29b      	uxth	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800824e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	440a      	add	r2, r1
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	463b      	mov	r3, r7
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	011a      	lsls	r2, r3, #4
 8008260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4413      	add	r3, r2
 8008268:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800826c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d11a      	bne.n	80082b0 <USB_EPStartXfer+0x1d4>
 800827a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008288:	b29a      	uxth	r2, r3
 800828a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	e062      	b.n	8008376 <USB_EPStartXfer+0x29a>
 80082b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b4:	2b3e      	cmp	r3, #62	; 0x3e
 80082b6:	d819      	bhi.n	80082ec <USB_EPStartXfer+0x210>
 80082b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082bc:	085b      	lsrs	r3, r3, #1
 80082be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <USB_EPStartXfer+0x1fc>
 80082ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d2:	3301      	adds	r3, #1
 80082d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082dc:	b29b      	uxth	r3, r3
 80082de:	029b      	lsls	r3, r3, #10
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	801a      	strh	r2, [r3, #0]
 80082ea:	e044      	b.n	8008376 <USB_EPStartXfer+0x29a>
 80082ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fa:	f003 031f 	and.w	r3, r3, #31
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <USB_EPStartXfer+0x230>
 8008302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008306:	3b01      	subs	r3, #1
 8008308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800830c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008310:	b29b      	uxth	r3, r3
 8008312:	029b      	lsls	r3, r3, #10
 8008314:	b29b      	uxth	r3, r3
 8008316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831e:	b29a      	uxth	r2, r3
 8008320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	e025      	b.n	8008376 <USB_EPStartXfer+0x29a>
 800832a:	463b      	mov	r3, r7
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d120      	bne.n	8008376 <USB_EPStartXfer+0x29a>
 8008334:	1d3b      	adds	r3, r7, #4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833c:	b29b      	uxth	r3, r3
 800833e:	4619      	mov	r1, r3
 8008340:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008344:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	440a      	add	r2, r1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	463b      	mov	r3, r7
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	011a      	lsls	r2, r3, #4
 8008356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4413      	add	r3, r2
 800835e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836c:	b29a      	uxth	r2, r3
 800836e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008376:	463b      	mov	r3, r7
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	895b      	ldrh	r3, [r3, #10]
 800837c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008380:	463b      	mov	r3, r7
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6959      	ldr	r1, [r3, #20]
 8008386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838a:	b29b      	uxth	r3, r3
 800838c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008390:	1d38      	adds	r0, r7, #4
 8008392:	6800      	ldr	r0, [r0, #0]
 8008394:	f001 fad7 	bl	8009946 <USB_WritePMA>
            ep->xfer_buff += len;
 8008398:	463b      	mov	r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695a      	ldr	r2, [r3, #20]
 800839e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a2:	441a      	add	r2, r3
 80083a4:	463b      	mov	r3, r7
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6a1a      	ldr	r2, [r3, #32]
 80083b0:	463b      	mov	r3, r7
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d909      	bls.n	80083ce <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80083ba:	463b      	mov	r3, r7
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6a1a      	ldr	r2, [r3, #32]
 80083c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	463b      	mov	r3, r7
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	621a      	str	r2, [r3, #32]
 80083cc:	e008      	b.n	80083e0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80083ce:	463b      	mov	r3, r7
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80083d8:	463b      	mov	r3, r7
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083e0:	463b      	mov	r3, r7
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d17a      	bne.n	80084e0 <USB_EPStartXfer+0x404>
 80083ea:	f107 0318 	add.w	r3, r7, #24
 80083ee:	1d3a      	adds	r2, r7, #4
 80083f0:	6812      	ldr	r2, [r2, #0]
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	1d3b      	adds	r3, r7, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	f107 0318 	add.w	r3, r7, #24
 8008404:	f107 0218 	add.w	r2, r7, #24
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	440a      	add	r2, r1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	463b      	mov	r3, r7
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	011a      	lsls	r2, r3, #4
 8008416:	f107 0318 	add.w	r3, r7, #24
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4413      	add	r3, r2
 800841e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008422:	f107 0314 	add.w	r3, r7, #20
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d11a      	bne.n	8008466 <USB_EPStartXfer+0x38a>
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800843e:	b29a      	uxth	r2, r3
 8008440:	f107 0314 	add.w	r3, r7, #20
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	f107 0314 	add.w	r3, r7, #20
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29b      	uxth	r3, r3
 8008452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845a:	b29a      	uxth	r2, r3
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	e067      	b.n	8008536 <USB_EPStartXfer+0x45a>
 8008466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846a:	2b3e      	cmp	r3, #62	; 0x3e
 800846c:	d819      	bhi.n	80084a2 <USB_EPStartXfer+0x3c6>
 800846e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <USB_EPStartXfer+0x3b2>
 8008484:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008488:	3301      	adds	r3, #1
 800848a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800848e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008492:	b29b      	uxth	r3, r3
 8008494:	029b      	lsls	r3, r3, #10
 8008496:	b29a      	uxth	r2, r3
 8008498:	f107 0314 	add.w	r3, r7, #20
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	e049      	b.n	8008536 <USB_EPStartXfer+0x45a>
 80084a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a6:	095b      	lsrs	r3, r3, #5
 80084a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80084ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b0:	f003 031f 	and.w	r3, r3, #31
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <USB_EPStartXfer+0x3e6>
 80084b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80084bc:	3b01      	subs	r3, #1
 80084be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80084c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	029b      	lsls	r3, r3, #10
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	f107 0314 	add.w	r3, r7, #20
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e02a      	b.n	8008536 <USB_EPStartXfer+0x45a>
 80084e0:	463b      	mov	r3, r7
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d125      	bne.n	8008536 <USB_EPStartXfer+0x45a>
 80084ea:	f107 0320 	add.w	r3, r7, #32
 80084ee:	1d3a      	adds	r2, r7, #4
 80084f0:	6812      	ldr	r2, [r2, #0]
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	1d3b      	adds	r3, r7, #4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4619      	mov	r1, r3
 8008500:	f107 0320 	add.w	r3, r7, #32
 8008504:	f107 0220 	add.w	r2, r7, #32
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	440a      	add	r2, r1
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	463b      	mov	r3, r7
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	011a      	lsls	r2, r3, #4
 8008516:	f107 0320 	add.w	r3, r7, #32
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4413      	add	r3, r2
 800851e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008522:	f107 031c 	add.w	r3, r7, #28
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852c:	b29a      	uxth	r2, r3
 800852e:	f107 031c 	add.w	r3, r7, #28
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008536:	463b      	mov	r3, r7
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	891b      	ldrh	r3, [r3, #8]
 800853c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008540:	463b      	mov	r3, r7
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6959      	ldr	r1, [r3, #20]
 8008546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854a:	b29b      	uxth	r3, r3
 800854c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008550:	1d38      	adds	r0, r7, #4
 8008552:	6800      	ldr	r0, [r0, #0]
 8008554:	f001 f9f7 	bl	8009946 <USB_WritePMA>
 8008558:	f000 bcc6 	b.w	8008ee8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800855c:	463b      	mov	r3, r7
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d164      	bne.n	8008630 <USB_EPStartXfer+0x554>
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	64bb      	str	r3, [r7, #72]	; 0x48
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008574:	b29b      	uxth	r3, r3
 8008576:	461a      	mov	r2, r3
 8008578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857a:	4413      	add	r3, r2
 800857c:	64bb      	str	r3, [r7, #72]	; 0x48
 800857e:	463b      	mov	r3, r7
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	011a      	lsls	r2, r3, #4
 8008586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008588:	4413      	add	r3, r2
 800858a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800858e:	647b      	str	r3, [r7, #68]	; 0x44
 8008590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d112      	bne.n	80085be <USB_EPStartXfer+0x4e2>
 8008598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a6:	801a      	strh	r2, [r3, #0]
 80085a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e057      	b.n	800866e <USB_EPStartXfer+0x592>
 80085be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c2:	2b3e      	cmp	r3, #62	; 0x3e
 80085c4:	d817      	bhi.n	80085f6 <USB_EPStartXfer+0x51a>
 80085c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80085d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <USB_EPStartXfer+0x50a>
 80085dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085e0:	3301      	adds	r3, #1
 80085e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80085e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	e03b      	b.n	800866e <USB_EPStartXfer+0x592>
 80085f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fa:	095b      	lsrs	r3, r3, #5
 80085fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008604:	f003 031f 	and.w	r3, r3, #31
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <USB_EPStartXfer+0x53a>
 800860c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008610:	3b01      	subs	r3, #1
 8008612:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008616:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800861a:	b29b      	uxth	r3, r3
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	b29b      	uxth	r3, r3
 8008620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008628:	b29a      	uxth	r2, r3
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e01e      	b.n	800866e <USB_EPStartXfer+0x592>
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d119      	bne.n	800866e <USB_EPStartXfer+0x592>
 800863a:	1d3b      	adds	r3, r7, #4
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	653b      	str	r3, [r7, #80]	; 0x50
 8008640:	1d3b      	adds	r3, r7, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008648:	b29b      	uxth	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800864e:	4413      	add	r3, r2
 8008650:	653b      	str	r3, [r7, #80]	; 0x50
 8008652:	463b      	mov	r3, r7
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	011a      	lsls	r2, r3, #4
 800865a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800865c:	4413      	add	r3, r2
 800865e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008668:	b29a      	uxth	r2, r3
 800866a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	891b      	ldrh	r3, [r3, #8]
 8008674:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008678:	463b      	mov	r3, r7
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6959      	ldr	r1, [r3, #20]
 800867e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008682:	b29b      	uxth	r3, r3
 8008684:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008688:	1d38      	adds	r0, r7, #4
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	f001 f95b 	bl	8009946 <USB_WritePMA>
            ep->xfer_buff += len;
 8008690:	463b      	mov	r3, r7
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	695a      	ldr	r2, [r3, #20]
 8008696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869a:	441a      	add	r2, r3
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086a2:	463b      	mov	r3, r7
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a1a      	ldr	r2, [r3, #32]
 80086a8:	463b      	mov	r3, r7
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d909      	bls.n	80086c6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80086b2:	463b      	mov	r3, r7
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6a1a      	ldr	r2, [r3, #32]
 80086b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	463b      	mov	r3, r7
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	621a      	str	r2, [r3, #32]
 80086c4:	e008      	b.n	80086d8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80086c6:	463b      	mov	r3, r7
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80086d0:	463b      	mov	r3, r7
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2200      	movs	r2, #0
 80086d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086d8:	1d3b      	adds	r3, r7, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	643b      	str	r3, [r7, #64]	; 0x40
 80086de:	463b      	mov	r3, r7
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d164      	bne.n	80087b2 <USB_EPStartXfer+0x6d6>
 80086e8:	1d3b      	adds	r3, r7, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ee:	1d3b      	adds	r3, r7, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	4413      	add	r3, r2
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008700:	463b      	mov	r3, r7
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	011a      	lsls	r2, r3, #4
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	4413      	add	r3, r2
 800870c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
 8008712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d112      	bne.n	8008740 <USB_EPStartXfer+0x664>
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008724:	b29a      	uxth	r2, r3
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	801a      	strh	r2, [r3, #0]
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008738:	b29a      	uxth	r2, r3
 800873a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	e054      	b.n	80087ea <USB_EPStartXfer+0x70e>
 8008740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008744:	2b3e      	cmp	r3, #62	; 0x3e
 8008746:	d817      	bhi.n	8008778 <USB_EPStartXfer+0x69c>
 8008748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800874c:	085b      	lsrs	r3, r3, #1
 800874e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <USB_EPStartXfer+0x68c>
 800875e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008762:	3301      	adds	r3, #1
 8008764:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008768:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800876c:	b29b      	uxth	r3, r3
 800876e:	029b      	lsls	r3, r3, #10
 8008770:	b29a      	uxth	r2, r3
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	801a      	strh	r2, [r3, #0]
 8008776:	e038      	b.n	80087ea <USB_EPStartXfer+0x70e>
 8008778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877c:	095b      	lsrs	r3, r3, #5
 800877e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <USB_EPStartXfer+0x6bc>
 800878e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008792:	3b01      	subs	r3, #1
 8008794:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008798:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800879c:	b29b      	uxth	r3, r3
 800879e:	029b      	lsls	r3, r3, #10
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	e01b      	b.n	80087ea <USB_EPStartXfer+0x70e>
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d116      	bne.n	80087ea <USB_EPStartXfer+0x70e>
 80087bc:	1d3b      	adds	r3, r7, #4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ca:	4413      	add	r3, r2
 80087cc:	643b      	str	r3, [r7, #64]	; 0x40
 80087ce:	463b      	mov	r3, r7
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	011a      	lsls	r2, r3, #4
 80087d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d8:	4413      	add	r3, r2
 80087da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087ea:	463b      	mov	r3, r7
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	895b      	ldrh	r3, [r3, #10]
 80087f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087f4:	463b      	mov	r3, r7
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6959      	ldr	r1, [r3, #20]
 80087fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008804:	1d38      	adds	r0, r7, #4
 8008806:	6800      	ldr	r0, [r0, #0]
 8008808:	f001 f89d 	bl	8009946 <USB_WritePMA>
 800880c:	e36c      	b.n	8008ee8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800880e:	463b      	mov	r3, r7
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008818:	1d3b      	adds	r3, r7, #4
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	463b      	mov	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008836:	1d3b      	adds	r3, r7, #4
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	463b      	mov	r3, r7
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	441a      	add	r2, r3
 8008844:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008858:	b29b      	uxth	r3, r3
 800885a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886a:	b29b      	uxth	r3, r3
 800886c:	461a      	mov	r2, r3
 800886e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008870:	4413      	add	r3, r2
 8008872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008874:	463b      	mov	r3, r7
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	011a      	lsls	r2, r3, #4
 800887c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800887e:	4413      	add	r3, r2
 8008880:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008884:	65bb      	str	r3, [r7, #88]	; 0x58
 8008886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888a:	b29a      	uxth	r2, r3
 800888c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800888e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008890:	463b      	mov	r3, r7
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	891b      	ldrh	r3, [r3, #8]
 8008896:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800889a:	463b      	mov	r3, r7
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6959      	ldr	r1, [r3, #20]
 80088a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80088aa:	1d38      	adds	r0, r7, #4
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f001 f84a 	bl	8009946 <USB_WritePMA>
 80088b2:	e319      	b.n	8008ee8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	463b      	mov	r3, r7
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80088d2:	1d3b      	adds	r3, r7, #4
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	441a      	add	r2, r3
 80088e0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80088e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80088f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088f8:	463b      	mov	r3, r7
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6a1a      	ldr	r2, [r3, #32]
 80088fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	463b      	mov	r3, r7
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800890a:	1d3b      	adds	r3, r7, #4
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	463b      	mov	r3, r7
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 8162 	beq.w	8008bea <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008926:	1d3b      	adds	r3, r7, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800892e:	463b      	mov	r3, r7
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d164      	bne.n	8008a02 <USB_EPStartXfer+0x926>
 8008938:	1d3b      	adds	r3, r7, #4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	67bb      	str	r3, [r7, #120]	; 0x78
 800893e:	1d3b      	adds	r3, r7, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008946:	b29b      	uxth	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800894c:	4413      	add	r3, r2
 800894e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008950:	463b      	mov	r3, r7
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	011a      	lsls	r2, r3, #4
 8008958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895a:	4413      	add	r3, r2
 800895c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008960:	677b      	str	r3, [r7, #116]	; 0x74
 8008962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d112      	bne.n	8008990 <USB_EPStartXfer+0x8b4>
 800896a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008974:	b29a      	uxth	r2, r3
 8008976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008988:	b29a      	uxth	r2, r3
 800898a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800898c:	801a      	strh	r2, [r3, #0]
 800898e:	e057      	b.n	8008a40 <USB_EPStartXfer+0x964>
 8008990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008994:	2b3e      	cmp	r3, #62	; 0x3e
 8008996:	d817      	bhi.n	80089c8 <USB_EPStartXfer+0x8ec>
 8008998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80089a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <USB_EPStartXfer+0x8dc>
 80089ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089b2:	3301      	adds	r3, #1
 80089b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80089b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089bc:	b29b      	uxth	r3, r3
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	e03b      	b.n	8008a40 <USB_EPStartXfer+0x964>
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80089d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <USB_EPStartXfer+0x90c>
 80089de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089e2:	3b01      	subs	r3, #1
 80089e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80089e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	029b      	lsls	r3, r3, #10
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	e01e      	b.n	8008a40 <USB_EPStartXfer+0x964>
 8008a02:	463b      	mov	r3, r7
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d119      	bne.n	8008a40 <USB_EPStartXfer+0x964>
 8008a0c:	1d3b      	adds	r3, r7, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	011a      	lsls	r2, r3, #4
 8008a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a2e:	4413      	add	r3, r2
 8008a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	895b      	ldrh	r3, [r3, #10]
 8008a46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6959      	ldr	r1, [r3, #20]
 8008a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a5a:	1d38      	adds	r0, r7, #4
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f000 ff72 	bl	8009946 <USB_WritePMA>
          ep->xfer_buff += len;
 8008a62:	463b      	mov	r3, r7
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	695a      	ldr	r2, [r3, #20]
 8008a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6c:	441a      	add	r2, r3
 8008a6e:	463b      	mov	r3, r7
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008a74:	463b      	mov	r3, r7
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6a1a      	ldr	r2, [r3, #32]
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d909      	bls.n	8008a98 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008a84:	463b      	mov	r3, r7
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	463b      	mov	r3, r7
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	621a      	str	r2, [r3, #32]
 8008a96:	e008      	b.n	8008aaa <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008a98:	463b      	mov	r3, r7
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 821a 	beq.w	8008ee8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d164      	bne.n	8008b88 <USB_EPStartXfer+0xaac>
 8008abe:	1d3b      	adds	r3, r7, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ac4:	1d3b      	adds	r3, r7, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ad2:	4413      	add	r3, r2
 8008ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	011a      	lsls	r2, r3, #4
 8008ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8008ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d112      	bne.n	8008b16 <USB_EPStartXfer+0xa3a>
 8008af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	e057      	b.n	8008bc6 <USB_EPStartXfer+0xaea>
 8008b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b1c:	d817      	bhi.n	8008b4e <USB_EPStartXfer+0xa72>
 8008b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <USB_EPStartXfer+0xa62>
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	029b      	lsls	r3, r3, #10
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b4a:	801a      	strh	r2, [r3, #0]
 8008b4c:	e03b      	b.n	8008bc6 <USB_EPStartXfer+0xaea>
 8008b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b5c:	f003 031f 	and.w	r3, r3, #31
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <USB_EPStartXfer+0xa92>
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	029b      	lsls	r3, r3, #10
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b84:	801a      	strh	r2, [r3, #0]
 8008b86:	e01e      	b.n	8008bc6 <USB_EPStartXfer+0xaea>
 8008b88:	463b      	mov	r3, r7
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d119      	bne.n	8008bc6 <USB_EPStartXfer+0xaea>
 8008b92:	1d3b      	adds	r3, r7, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	673b      	str	r3, [r7, #112]	; 0x70
 8008b98:	1d3b      	adds	r3, r7, #4
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ba6:	4413      	add	r3, r2
 8008ba8:	673b      	str	r3, [r7, #112]	; 0x70
 8008baa:	463b      	mov	r3, r7
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	011a      	lsls	r2, r3, #4
 8008bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	891b      	ldrh	r3, [r3, #8]
 8008bcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6959      	ldr	r1, [r3, #20]
 8008bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008be0:	1d38      	adds	r0, r7, #4
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	f000 feaf 	bl	8009946 <USB_WritePMA>
 8008be8:	e17e      	b.n	8008ee8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bea:	463b      	mov	r3, r7
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	785b      	ldrb	r3, [r3, #1]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d16f      	bne.n	8008cd4 <USB_EPStartXfer+0xbf8>
 8008bf4:	1d3b      	adds	r3, r7, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c12:	463b      	mov	r3, r7
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	011a      	lsls	r2, r3, #4
 8008c1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c1e:	4413      	add	r3, r2
 8008c20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d116      	bne.n	8008c5e <USB_EPStartXfer+0xb82>
 8008c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c42:	801a      	strh	r2, [r3, #0]
 8008c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	e05f      	b.n	8008d1e <USB_EPStartXfer+0xc42>
 8008c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c62:	2b3e      	cmp	r3, #62	; 0x3e
 8008c64:	d818      	bhi.n	8008c98 <USB_EPStartXfer+0xbbc>
 8008c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <USB_EPStartXfer+0xbaa>
 8008c7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c80:	3301      	adds	r3, #1
 8008c82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	029b      	lsls	r3, r3, #10
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	e042      	b.n	8008d1e <USB_EPStartXfer+0xc42>
 8008c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9c:	095b      	lsrs	r3, r3, #5
 8008c9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca6:	f003 031f 	and.w	r3, r3, #31
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <USB_EPStartXfer+0xbdc>
 8008cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008cb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	029b      	lsls	r3, r3, #10
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cd0:	801a      	strh	r2, [r3, #0]
 8008cd2:	e024      	b.n	8008d1e <USB_EPStartXfer+0xc42>
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d11f      	bne.n	8008d1e <USB_EPStartXfer+0xc42>
 8008cde:	1d3b      	adds	r3, r7, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ce6:	1d3b      	adds	r3, r7, #4
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008cfc:	463b      	mov	r3, r7
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	011a      	lsls	r2, r3, #4
 8008d04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d08:	4413      	add	r3, r2
 8008d0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d1e:	463b      	mov	r3, r7
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	891b      	ldrh	r3, [r3, #8]
 8008d24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d28:	463b      	mov	r3, r7
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6959      	ldr	r1, [r3, #20]
 8008d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d38:	1d38      	adds	r0, r7, #4
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	f000 fe03 	bl	8009946 <USB_WritePMA>
          ep->xfer_buff += len;
 8008d40:	463b      	mov	r3, r7
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695a      	ldr	r2, [r3, #20]
 8008d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4a:	441a      	add	r2, r3
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008d52:	463b      	mov	r3, r7
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	463b      	mov	r3, r7
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d909      	bls.n	8008d76 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008d62:	463b      	mov	r3, r7
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6a1a      	ldr	r2, [r3, #32]
 8008d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d6c:	1ad2      	subs	r2, r2, r3
 8008d6e:	463b      	mov	r3, r7
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	621a      	str	r2, [r3, #32]
 8008d74:	e008      	b.n	8008d88 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d76:	463b      	mov	r3, r7
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d80:	463b      	mov	r3, r7
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2200      	movs	r2, #0
 8008d86:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80ab 	beq.w	8008ee8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d92:	1d3b      	adds	r3, r7, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d9a:	463b      	mov	r3, r7
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	785b      	ldrb	r3, [r3, #1]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d16f      	bne.n	8008e84 <USB_EPStartXfer+0xda8>
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dac:	1d3b      	adds	r3, r7, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	011a      	lsls	r2, r3, #4
 8008dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dce:	4413      	add	r3, r2
 8008dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d116      	bne.n	8008e0e <USB_EPStartXfer+0xd32>
 8008de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e0a:	801a      	strh	r2, [r3, #0]
 8008e0c:	e05b      	b.n	8008ec6 <USB_EPStartXfer+0xdea>
 8008e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e12:	2b3e      	cmp	r3, #62	; 0x3e
 8008e14:	d818      	bhi.n	8008e48 <USB_EPStartXfer+0xd6c>
 8008e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <USB_EPStartXfer+0xd5a>
 8008e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e03e      	b.n	8008ec6 <USB_EPStartXfer+0xdea>
 8008e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d104      	bne.n	8008e68 <USB_EPStartXfer+0xd8c>
 8008e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e62:	3b01      	subs	r3, #1
 8008e64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	029b      	lsls	r3, r3, #10
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	e020      	b.n	8008ec6 <USB_EPStartXfer+0xdea>
 8008e84:	463b      	mov	r3, r7
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d11b      	bne.n	8008ec6 <USB_EPStartXfer+0xdea>
 8008e8e:	1d3b      	adds	r3, r7, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	011a      	lsls	r2, r3, #4
 8008eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ec6:	463b      	mov	r3, r7
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	895b      	ldrh	r3, [r3, #10]
 8008ecc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6959      	ldr	r1, [r3, #20]
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ee0:	1d38      	adds	r0, r7, #4
 8008ee2:	6800      	ldr	r0, [r0, #0]
 8008ee4:	f000 fd2f 	bl	8009946 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ee8:	1d3b      	adds	r3, r7, #4
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f107 020a 	add.w	r2, r7, #10
 8008efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f06:	8013      	strh	r3, [r2, #0]
 8008f08:	f107 030a 	add.w	r3, r7, #10
 8008f0c:	f107 020a 	add.w	r2, r7, #10
 8008f10:	8812      	ldrh	r2, [r2, #0]
 8008f12:	f082 0210 	eor.w	r2, r2, #16
 8008f16:	801a      	strh	r2, [r3, #0]
 8008f18:	f107 030a 	add.w	r3, r7, #10
 8008f1c:	f107 020a 	add.w	r2, r7, #10
 8008f20:	8812      	ldrh	r2, [r2, #0]
 8008f22:	f082 0220 	eor.w	r2, r2, #32
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	1d3b      	adds	r3, r7, #4
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	f107 030a 	add.w	r3, r7, #10
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8013      	strh	r3, [r2, #0]
 8008f50:	e3b5      	b.n	80096be <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	7b1b      	ldrb	r3, [r3, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f040 8090 	bne.w	800907e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f5e:	463b      	mov	r3, r7
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	463b      	mov	r3, r7
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d90e      	bls.n	8008f8c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008f6e:	463b      	mov	r3, r7
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008f78:	463b      	mov	r3, r7
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699a      	ldr	r2, [r3, #24]
 8008f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	463b      	mov	r3, r7
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	619a      	str	r2, [r3, #24]
 8008f8a:	e008      	b.n	8008f9e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008f96:	463b      	mov	r3, r7
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f9e:	1d3b      	adds	r3, r7, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	011a      	lsls	r2, r3, #4
 8008fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fc8:	4413      	add	r3, r2
 8008fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d116      	bne.n	8009008 <USB_EPStartXfer+0xf2c>
 8008fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009004:	801a      	strh	r2, [r3, #0]
 8009006:	e32c      	b.n	8009662 <USB_EPStartXfer+0x1586>
 8009008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800900c:	2b3e      	cmp	r3, #62	; 0x3e
 800900e:	d818      	bhi.n	8009042 <USB_EPStartXfer+0xf66>
 8009010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800901a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <USB_EPStartXfer+0xf54>
 8009026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800902a:	3301      	adds	r3, #1
 800902c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009030:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009034:	b29b      	uxth	r3, r3
 8009036:	029b      	lsls	r3, r3, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800903e:	801a      	strh	r2, [r3, #0]
 8009040:	e30f      	b.n	8009662 <USB_EPStartXfer+0x1586>
 8009042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009046:	095b      	lsrs	r3, r3, #5
 8009048:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800904c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009050:	f003 031f 	and.w	r3, r3, #31
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <USB_EPStartXfer+0xf86>
 8009058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800905c:	3b01      	subs	r3, #1
 800905e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009062:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009066:	b29b      	uxth	r3, r3
 8009068:	029b      	lsls	r3, r3, #10
 800906a:	b29b      	uxth	r3, r3
 800906c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009074:	b29a      	uxth	r2, r3
 8009076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800907a:	801a      	strh	r2, [r3, #0]
 800907c:	e2f1      	b.n	8009662 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800907e:	463b      	mov	r3, r7
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	78db      	ldrb	r3, [r3, #3]
 8009084:	2b02      	cmp	r3, #2
 8009086:	f040 818f 	bne.w	80093a8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800908a:	463b      	mov	r3, r7
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d175      	bne.n	8009180 <USB_EPStartXfer+0x10a4>
 8009094:	1d3b      	adds	r3, r7, #4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800909c:	1d3b      	adds	r3, r7, #4
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090ac:	4413      	add	r3, r2
 80090ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090b2:	463b      	mov	r3, r7
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	011a      	lsls	r2, r3, #4
 80090ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090be:	4413      	add	r3, r2
 80090c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090c8:	463b      	mov	r3, r7
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d116      	bne.n	8009100 <USB_EPStartXfer+0x1024>
 80090d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090de:	b29a      	uxth	r2, r3
 80090e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e065      	b.n	80091cc <USB_EPStartXfer+0x10f0>
 8009100:	463b      	mov	r3, r7
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b3e      	cmp	r3, #62	; 0x3e
 8009108:	d81a      	bhi.n	8009140 <USB_EPStartXfer+0x1064>
 800910a:	463b      	mov	r3, r7
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009116:	463b      	mov	r3, r7
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <USB_EPStartXfer+0x1052>
 8009124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009128:	3301      	adds	r3, #1
 800912a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800912e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009132:	b29b      	uxth	r3, r3
 8009134:	029b      	lsls	r3, r3, #10
 8009136:	b29a      	uxth	r2, r3
 8009138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	e045      	b.n	80091cc <USB_EPStartXfer+0x10f0>
 8009140:	463b      	mov	r3, r7
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800914c:	463b      	mov	r3, r7
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f003 031f 	and.w	r3, r3, #31
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <USB_EPStartXfer+0x1088>
 800915a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915e:	3b01      	subs	r3, #1
 8009160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009168:	b29b      	uxth	r3, r3
 800916a:	029b      	lsls	r3, r3, #10
 800916c:	b29b      	uxth	r3, r3
 800916e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009176:	b29a      	uxth	r2, r3
 8009178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800917c:	801a      	strh	r2, [r3, #0]
 800917e:	e025      	b.n	80091cc <USB_EPStartXfer+0x10f0>
 8009180:	463b      	mov	r3, r7
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d120      	bne.n	80091cc <USB_EPStartXfer+0x10f0>
 800918a:	1d3b      	adds	r3, r7, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009192:	1d3b      	adds	r3, r7, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800919a:	b29b      	uxth	r3, r3
 800919c:	461a      	mov	r2, r3
 800919e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091a2:	4413      	add	r3, r2
 80091a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091a8:	463b      	mov	r3, r7
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	011a      	lsls	r2, r3, #4
 80091b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091b4:	4413      	add	r3, r2
 80091b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091be:	463b      	mov	r3, r7
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	1d3b      	adds	r3, r7, #4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091d4:	463b      	mov	r3, r7
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d175      	bne.n	80092ca <USB_EPStartXfer+0x11ee>
 80091de:	1d3b      	adds	r3, r7, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091e6:	1d3b      	adds	r3, r7, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80091f6:	4413      	add	r3, r2
 80091f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091fc:	463b      	mov	r3, r7
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	011a      	lsls	r2, r3, #4
 8009204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009208:	4413      	add	r3, r2
 800920a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800920e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009212:	463b      	mov	r3, r7
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d116      	bne.n	800924a <USB_EPStartXfer+0x116e>
 800921c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b29b      	uxth	r3, r3
 8009224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009228:	b29a      	uxth	r2, r3
 800922a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800923c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009240:	b29a      	uxth	r2, r3
 8009242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e061      	b.n	800930e <USB_EPStartXfer+0x1232>
 800924a:	463b      	mov	r3, r7
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2b3e      	cmp	r3, #62	; 0x3e
 8009252:	d81a      	bhi.n	800928a <USB_EPStartXfer+0x11ae>
 8009254:	463b      	mov	r3, r7
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009260:	463b      	mov	r3, r7
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <USB_EPStartXfer+0x119c>
 800926e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009272:	3301      	adds	r3, #1
 8009274:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009278:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800927c:	b29b      	uxth	r3, r3
 800927e:	029b      	lsls	r3, r3, #10
 8009280:	b29a      	uxth	r2, r3
 8009282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e041      	b.n	800930e <USB_EPStartXfer+0x1232>
 800928a:	463b      	mov	r3, r7
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009296:	463b      	mov	r3, r7
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d104      	bne.n	80092ae <USB_EPStartXfer+0x11d2>
 80092a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092a8:	3b01      	subs	r3, #1
 80092aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	029b      	lsls	r3, r3, #10
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	e021      	b.n	800930e <USB_EPStartXfer+0x1232>
 80092ca:	463b      	mov	r3, r7
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	785b      	ldrb	r3, [r3, #1]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d11c      	bne.n	800930e <USB_EPStartXfer+0x1232>
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092dc:	b29b      	uxth	r3, r3
 80092de:	461a      	mov	r2, r3
 80092e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092e4:	4413      	add	r3, r2
 80092e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	011a      	lsls	r2, r3, #4
 80092f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092f6:	4413      	add	r3, r2
 80092f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009300:	463b      	mov	r3, r7
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	b29a      	uxth	r2, r3
 8009308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800930c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 81a4 	beq.w	8009662 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800931a:	1d3b      	adds	r3, r7, #4
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	463b      	mov	r3, r7
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800932e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <USB_EPStartXfer+0x126a>
 800933a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800933e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10d      	bne.n	8009362 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009346:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800934a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800934e:	2b00      	cmp	r3, #0
 8009350:	f040 8187 	bne.w	8009662 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009354:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 8180 	bne.w	8009662 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009362:	1d3b      	adds	r3, r7, #4
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	463b      	mov	r3, r7
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	b29b      	uxth	r3, r3
 8009374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	463b      	mov	r3, r7
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800939a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800939e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]
 80093a6:	e15c      	b.n	8009662 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80093a8:	463b      	mov	r3, r7
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	78db      	ldrb	r3, [r3, #3]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	f040 8155 	bne.w	800965e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80093b4:	463b      	mov	r3, r7
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	463b      	mov	r3, r7
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d90e      	bls.n	80093e2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80093c4:	463b      	mov	r3, r7
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80093ce:	463b      	mov	r3, r7
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	1ad2      	subs	r2, r2, r3
 80093da:	463b      	mov	r3, r7
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	619a      	str	r2, [r3, #24]
 80093e0:	e008      	b.n	80093f4 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80093e2:	463b      	mov	r3, r7
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80093ec:	463b      	mov	r3, r7
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2200      	movs	r2, #0
 80093f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80093f4:	463b      	mov	r3, r7
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d16f      	bne.n	80094de <USB_EPStartXfer+0x1402>
 80093fe:	1d3b      	adds	r3, r7, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009406:	1d3b      	adds	r3, r7, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800940e:	b29b      	uxth	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009416:	4413      	add	r3, r2
 8009418:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800941c:	463b      	mov	r3, r7
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	011a      	lsls	r2, r3, #4
 8009424:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009428:	4413      	add	r3, r2
 800942a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800942e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d116      	bne.n	8009468 <USB_EPStartXfer+0x138c>
 800943a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009446:	b29a      	uxth	r2, r3
 8009448:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800944c:	801a      	strh	r2, [r3, #0]
 800944e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800945e:	b29a      	uxth	r2, r3
 8009460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	e05f      	b.n	8009528 <USB_EPStartXfer+0x144c>
 8009468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800946c:	2b3e      	cmp	r3, #62	; 0x3e
 800946e:	d818      	bhi.n	80094a2 <USB_EPStartXfer+0x13c6>
 8009470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800947a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <USB_EPStartXfer+0x13b4>
 8009486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800948a:	3301      	adds	r3, #1
 800948c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009494:	b29b      	uxth	r3, r3
 8009496:	029b      	lsls	r3, r3, #10
 8009498:	b29a      	uxth	r2, r3
 800949a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	e042      	b.n	8009528 <USB_EPStartXfer+0x144c>
 80094a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80094ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b0:	f003 031f 	and.w	r3, r3, #31
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d104      	bne.n	80094c2 <USB_EPStartXfer+0x13e6>
 80094b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094bc:	3b01      	subs	r3, #1
 80094be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80094c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	029b      	lsls	r3, r3, #10
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	e024      	b.n	8009528 <USB_EPStartXfer+0x144c>
 80094de:	463b      	mov	r3, r7
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d11f      	bne.n	8009528 <USB_EPStartXfer+0x144c>
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009500:	4413      	add	r3, r2
 8009502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009506:	463b      	mov	r3, r7
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	011a      	lsls	r2, r3, #4
 800950e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009512:	4413      	add	r3, r2
 8009514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009518:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800951c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009520:	b29a      	uxth	r2, r3
 8009522:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	1d3b      	adds	r3, r7, #4
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009530:	463b      	mov	r3, r7
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d16f      	bne.n	800961a <USB_EPStartXfer+0x153e>
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009542:	1d3b      	adds	r3, r7, #4
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800954a:	b29b      	uxth	r3, r3
 800954c:	461a      	mov	r2, r3
 800954e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009552:	4413      	add	r3, r2
 8009554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009558:	463b      	mov	r3, r7
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	011a      	lsls	r2, r3, #4
 8009560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009564:	4413      	add	r3, r2
 8009566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800956a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800956e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d116      	bne.n	80095a4 <USB_EPStartXfer+0x14c8>
 8009576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009582:	b29a      	uxth	r2, r3
 8009584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800959a:	b29a      	uxth	r2, r3
 800959c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a0:	801a      	strh	r2, [r3, #0]
 80095a2:	e05e      	b.n	8009662 <USB_EPStartXfer+0x1586>
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	2b3e      	cmp	r3, #62	; 0x3e
 80095aa:	d818      	bhi.n	80095de <USB_EPStartXfer+0x1502>
 80095ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b0:	085b      	lsrs	r3, r3, #1
 80095b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <USB_EPStartXfer+0x14f0>
 80095c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095c6:	3301      	adds	r3, #1
 80095c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	029b      	lsls	r3, r3, #10
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e041      	b.n	8009662 <USB_EPStartXfer+0x1586>
 80095de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ec:	f003 031f 	and.w	r3, r3, #31
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <USB_EPStartXfer+0x1522>
 80095f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095f8:	3b01      	subs	r3, #1
 80095fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009602:	b29b      	uxth	r3, r3
 8009604:	029b      	lsls	r3, r3, #10
 8009606:	b29b      	uxth	r3, r3
 8009608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009610:	b29a      	uxth	r2, r3
 8009612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009616:	801a      	strh	r2, [r3, #0]
 8009618:	e023      	b.n	8009662 <USB_EPStartXfer+0x1586>
 800961a:	463b      	mov	r3, r7
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d11e      	bne.n	8009662 <USB_EPStartXfer+0x1586>
 8009624:	1d3b      	adds	r3, r7, #4
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800962c:	b29b      	uxth	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009634:	4413      	add	r3, r2
 8009636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800963a:	463b      	mov	r3, r7
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	011a      	lsls	r2, r3, #4
 8009642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009646:	4413      	add	r3, r2
 8009648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800964c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009654:	b29a      	uxth	r2, r3
 8009656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	e001      	b.n	8009662 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e02e      	b.n	80096c0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009662:	1d3b      	adds	r3, r7, #4
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	463b      	mov	r3, r7
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009680:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009684:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009688:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800968c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009690:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009694:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009698:	1d3b      	adds	r3, r7, #4
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	463b      	mov	r3, r7
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	441a      	add	r2, r3
 80096a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80096aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	785b      	ldrb	r3, [r3, #1]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d020      	beq.n	800971e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f2:	81bb      	strh	r3, [r7, #12]
 80096f4:	89bb      	ldrh	r3, [r7, #12]
 80096f6:	f083 0310 	eor.w	r3, r3, #16
 80096fa:	81bb      	strh	r3, [r7, #12]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	441a      	add	r2, r3
 8009706:	89bb      	ldrh	r3, [r7, #12]
 8009708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009718:	b29b      	uxth	r3, r3
 800971a:	8013      	strh	r3, [r2, #0]
 800971c:	e01f      	b.n	800975e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009734:	81fb      	strh	r3, [r7, #14]
 8009736:	89fb      	ldrh	r3, [r7, #14]
 8009738:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800973c:	81fb      	strh	r3, [r7, #14]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	441a      	add	r2, r3
 8009748:	89fb      	ldrh	r3, [r7, #14]
 800974a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800974e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975a:	b29b      	uxth	r3, r3
 800975c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	bc80      	pop	{r7}
 8009768:	4770      	bx	lr

0800976a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800976a:	b480      	push	{r7}
 800976c:	b087      	sub	sp, #28
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	7b1b      	ldrb	r3, [r3, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 809d 	bne.w	80098b8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	785b      	ldrb	r3, [r3, #1]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d04c      	beq.n	8009820 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	823b      	strh	r3, [r7, #16]
 8009794:	8a3b      	ldrh	r3, [r7, #16]
 8009796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01b      	beq.n	80097d6 <USB_EPClearStall+0x6c>
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b4:	81fb      	strh	r3, [r7, #14]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	441a      	add	r2, r3
 80097c0:	89fb      	ldrh	r3, [r7, #14]
 80097c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	78db      	ldrb	r3, [r3, #3]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d06c      	beq.n	80098b8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097f4:	81bb      	strh	r3, [r7, #12]
 80097f6:	89bb      	ldrh	r3, [r7, #12]
 80097f8:	f083 0320 	eor.w	r3, r3, #32
 80097fc:	81bb      	strh	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	441a      	add	r2, r3
 8009808:	89bb      	ldrh	r3, [r7, #12]
 800980a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800980e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981a:	b29b      	uxth	r3, r3
 800981c:	8013      	strh	r3, [r2, #0]
 800981e:	e04b      	b.n	80098b8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	82fb      	strh	r3, [r7, #22]
 800982e:	8afb      	ldrh	r3, [r7, #22]
 8009830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01b      	beq.n	8009870 <USB_EPClearStall+0x106>
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800984a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984e:	82bb      	strh	r3, [r7, #20]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	441a      	add	r2, r3
 800985a:	8abb      	ldrh	r3, [r7, #20]
 800985c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986c:	b29b      	uxth	r3, r3
 800986e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29b      	uxth	r3, r3
 800987e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009886:	827b      	strh	r3, [r7, #18]
 8009888:	8a7b      	ldrh	r3, [r7, #18]
 800988a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800988e:	827b      	strh	r3, [r7, #18]
 8009890:	8a7b      	ldrh	r3, [r7, #18]
 8009892:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009896:	827b      	strh	r3, [r7, #18]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	441a      	add	r2, r3
 80098a2:	8a7b      	ldrh	r3, [r7, #18]
 80098a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	bc80      	pop	{r7}
 80098c2:	4770      	bx	lr

080098c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2280      	movs	r2, #128	; 0x80
 80098da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bc80      	pop	{r7}
 80098e8:	4770      	bx	lr

080098ea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bc80      	pop	{r7}
 80098fc:	4770      	bx	lr

080098fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr

08009912 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009912:	b480      	push	{r7}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009920:	b29b      	uxth	r3, r3
 8009922:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009924:	68fb      	ldr	r3, [r7, #12]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr

08009930 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr

08009946 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009946:	b480      	push	{r7}
 8009948:	b08d      	sub	sp, #52	; 0x34
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	4611      	mov	r1, r2
 8009952:	461a      	mov	r2, r3
 8009954:	460b      	mov	r3, r1
 8009956:	80fb      	strh	r3, [r7, #6]
 8009958:	4613      	mov	r3, r2
 800995a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800995c:	88bb      	ldrh	r3, [r7, #4]
 800995e:	3301      	adds	r3, #1
 8009960:	085b      	lsrs	r3, r3, #1
 8009962:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800996c:	88fb      	ldrh	r3, [r7, #6]
 800996e:	005a      	lsls	r2, r3, #1
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009978:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800997e:	e01e      	b.n	80099be <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	3301      	adds	r3, #1
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	b29b      	uxth	r3, r3
 8009996:	461a      	mov	r2, r3
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	3302      	adds	r3, #2
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	3302      	adds	r3, #2
 80099b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	3301      	adds	r3, #1
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	3b01      	subs	r3, #1
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1dd      	bne.n	8009980 <USB_WritePMA+0x3a>
  }
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	3734      	adds	r7, #52	; 0x34
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bc80      	pop	{r7}
 80099ce:	4770      	bx	lr

080099d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b08b      	sub	sp, #44	; 0x2c
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	4611      	mov	r1, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	460b      	mov	r3, r1
 80099e0:	80fb      	strh	r3, [r7, #6]
 80099e2:	4613      	mov	r3, r2
 80099e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80099e6:	88bb      	ldrh	r3, [r7, #4]
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	005a      	lsls	r2, r3, #1
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a02:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
 8009a08:	e01b      	b.n	8009a42 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	3302      	adds	r3, #2
 8009a16:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	3301      	adds	r3, #1
 8009a24:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	0a1b      	lsrs	r3, r3, #8
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	3301      	adds	r3, #1
 8009a34:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	3302      	adds	r3, #2
 8009a3a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e0      	bne.n	8009a0a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009a48:	88bb      	ldrh	r3, [r7, #4]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	701a      	strb	r2, [r3, #0]
  }
}
 8009a64:	bf00      	nop
 8009a66:	372c      	adds	r7, #44	; 0x2c
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bc80      	pop	{r7}
 8009a6c:	4770      	bx	lr

08009a6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7c1b      	ldrb	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d115      	bne.n	8009ab2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	2181      	movs	r1, #129	; 0x81
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 fea1 	bl	800b7d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f001 fe97 	bl	800b7d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009ab0:	e012      	b.n	8009ad8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ab2:	2340      	movs	r3, #64	; 0x40
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	2181      	movs	r1, #129	; 0x81
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 fe8c 	bl	800b7d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ac4:	2340      	movs	r3, #64	; 0x40
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	2101      	movs	r1, #1
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 fe83 	bl	800b7d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ad8:	2308      	movs	r3, #8
 8009ada:	2203      	movs	r2, #3
 8009adc:	2182      	movs	r1, #130	; 0x82
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fe79 	bl	800b7d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009aea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009aee:	f001 ff99 	bl	800ba24 <USBD_static_malloc>
 8009af2:	4602      	mov	r2, r0
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
 8009b08:	e026      	b.n	8009b58 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b10:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7c1b      	ldrb	r3, [r3, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d109      	bne.n	8009b48 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b3e:	2101      	movs	r1, #1
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 ff39 	bl	800b9b8 <USBD_LL_PrepareReceive>
 8009b46:	e007      	b.n	8009b58 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	2101      	movs	r1, #1
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 ff30 	bl	800b9b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b72:	2181      	movs	r1, #129	; 0x81
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 fe54 	bl	800b822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b80:	2101      	movs	r1, #1
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 fe4d 	bl	800b822 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b90:	2182      	movs	r1, #130	; 0x82
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fe45 	bl	800b822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00e      	beq.n	8009bc6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 ff3f 	bl	800ba3c <USBD_static_free>
    pdev->pClassData = NULL;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d039      	beq.n	8009c6e <USBD_CDC_Setup+0x9e>
 8009bfa:	2b20      	cmp	r3, #32
 8009bfc:	d17f      	bne.n	8009cfe <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	88db      	ldrh	r3, [r3, #6]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d029      	beq.n	8009c5a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	b25b      	sxtb	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	da11      	bge.n	8009c34 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009c1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	88d2      	ldrh	r2, [r2, #6]
 8009c22:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c24:	6939      	ldr	r1, [r7, #16]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88db      	ldrh	r3, [r3, #6]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fa0a 	bl	800b046 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009c32:	e06b      	b.n	8009d0c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	785a      	ldrb	r2, [r3, #1]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	88db      	ldrh	r3, [r3, #6]
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c4a:	6939      	ldr	r1, [r7, #16]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	88db      	ldrh	r3, [r3, #6]
 8009c50:	461a      	mov	r2, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fa25 	bl	800b0a2 <USBD_CtlPrepareRx>
      break;
 8009c58:	e058      	b.n	8009d0c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	7850      	ldrb	r0, [r2, #1]
 8009c66:	2200      	movs	r2, #0
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	4798      	blx	r3
      break;
 8009c6c:	e04e      	b.n	8009d0c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	785b      	ldrb	r3, [r3, #1]
 8009c72:	2b0b      	cmp	r3, #11
 8009c74:	d02e      	beq.n	8009cd4 <USBD_CDC_Setup+0x104>
 8009c76:	2b0b      	cmp	r3, #11
 8009c78:	dc38      	bgt.n	8009cec <USBD_CDC_Setup+0x11c>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <USBD_CDC_Setup+0xb4>
 8009c7e:	2b0a      	cmp	r3, #10
 8009c80:	d014      	beq.n	8009cac <USBD_CDC_Setup+0xdc>
 8009c82:	e033      	b.n	8009cec <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d107      	bne.n	8009c9e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009c8e:	f107 030c 	add.w	r3, r7, #12
 8009c92:	2202      	movs	r2, #2
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 f9d5 	bl	800b046 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c9c:	e02e      	b.n	8009cfc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 f966 	bl	800af72 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8009caa:	e027      	b.n	8009cfc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d107      	bne.n	8009cc6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cb6:	f107 030f 	add.w	r3, r7, #15
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 f9c1 	bl	800b046 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cc4:	e01a      	b.n	8009cfc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 f952 	bl	800af72 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cce:	2302      	movs	r3, #2
 8009cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8009cd2:	e013      	b.n	8009cfc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d00d      	beq.n	8009cfa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f946 	bl	800af72 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cea:	e006      	b.n	8009cfa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f93f 	bl	800af72 <USBD_CtlError>
          ret = USBD_FAIL;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8009cf8:	e000      	b.n	8009cfc <USBD_CDC_Setup+0x12c>
          break;
 8009cfa:	bf00      	nop
      }
      break;
 8009cfc:	e006      	b.n	8009d0c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 f936 	bl	800af72 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d06:	2302      	movs	r3, #2
 8009d08:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0a:	bf00      	nop
  }

  return ret;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d28:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d30:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d03a      	beq.n	8009db2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	331c      	adds	r3, #28
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d029      	beq.n	8009da6 <USBD_CDC_DataIn+0x90>
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	331c      	adds	r3, #28
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	78f9      	ldrb	r1, [r7, #3]
 8009d66:	68b8      	ldr	r0, [r7, #8]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4403      	add	r3, r0
 8009d72:	3338      	adds	r3, #56	; 0x38
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d7a:	fb03 f301 	mul.w	r3, r3, r1
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d110      	bne.n	8009da6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	331c      	adds	r3, #28
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d98:	78f9      	ldrb	r1, [r7, #3]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 fde7 	bl	800b972 <USBD_LL_Transmit>
 8009da4:	e003      	b.n	8009dae <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e000      	b.n	8009db4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009db2:	2302      	movs	r3, #2
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 fe12 	bl	800b9fe <USBD_LL_GetRxDataSize>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00d      	beq.n	8009e08 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e00:	4611      	mov	r1, r2
 8009e02:	4798      	blx	r3

    return USBD_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e000      	b.n	8009e0a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009e08:	2302      	movs	r3, #2
  }
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e20:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d015      	beq.n	8009e58 <USBD_CDC_EP0_RxReady+0x46>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e32:	2bff      	cmp	r3, #255	; 0xff
 8009e34:	d010      	beq.n	8009e58 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009e44:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e4c:	b292      	uxth	r2, r2
 8009e4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	22ff      	movs	r2, #255	; 0xff
 8009e54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2243      	movs	r2, #67	; 0x43
 8009e70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009e72:	4b03      	ldr	r3, [pc, #12]	; (8009e80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bc80      	pop	{r7}
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	20000094 	.word	0x20000094

08009e84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2243      	movs	r2, #67	; 0x43
 8009e90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009e92:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000050 	.word	0x20000050

08009ea4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2243      	movs	r2, #67	; 0x43
 8009eb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009eb2:	4b03      	ldr	r3, [pc, #12]	; (8009ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bc80      	pop	{r7}
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	200000d8 	.word	0x200000d8

08009ec4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	220a      	movs	r2, #10
 8009ed0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009ed2:	4b03      	ldr	r3, [pc, #12]	; (8009ee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bc80      	pop	{r7}
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	2000000c 	.word	0x2000000c

08009ee4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc80      	pop	{r7}
 8009f0e:	4770      	bx	lr

08009f10 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f24:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr

08009f42 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f52:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bc80      	pop	{r7}
 8009f66:	4770      	bx	lr

08009f68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d01c      	beq.n	8009fbc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d115      	bne.n	8009fb8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2181      	movs	r1, #129	; 0x81
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fcdf 	bl	800b972 <USBD_LL_Transmit>

      return USBD_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e002      	b.n	8009fbe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e000      	b.n	8009fbe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009fbc:	2302      	movs	r3, #2
  }
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d017      	beq.n	800a010 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7c1b      	ldrb	r3, [r3, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d109      	bne.n	8009ffc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fcdf 	bl	800b9b8 <USBD_LL_PrepareReceive>
 8009ffa:	e007      	b.n	800a00c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a002:	2340      	movs	r3, #64	; 0x40
 800a004:	2101      	movs	r1, #1
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 fcd6 	bl	800b9b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	e000      	b.n	800a012 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a010:	2302      	movs	r3, #2
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	4613      	mov	r3, r2
 800a026:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a02e:	2302      	movs	r3, #2
 800a030:	e01a      	b.n	800a068 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	79fa      	ldrb	r2, [r7, #7]
 800a05e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f001 fb43 	bl	800b6ec <USBD_LL_Init>

  return USBD_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]
 800a090:	e001      	b.n	800a096 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a092:	2302      	movs	r3, #2
 800a094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bc80      	pop	{r7}
 800a0a0:	4770      	bx	lr

0800a0a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 fb78 	bl	800b7a0 <USBD_LL_Start>

  return USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr

0800a0ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00c      	beq.n	800a102 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	78fa      	ldrb	r2, [r7, #3]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	4611      	mov	r1, r2
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	4798      	blx	r3

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fed8 	bl	800aefa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a158:	461a      	mov	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a166:	f003 031f 	and.w	r3, r3, #31
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d016      	beq.n	800a19c <USBD_LL_SetupStage+0x6a>
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d81c      	bhi.n	800a1ac <USBD_LL_SetupStage+0x7a>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <USBD_LL_SetupStage+0x4a>
 800a176:	2b01      	cmp	r3, #1
 800a178:	d008      	beq.n	800a18c <USBD_LL_SetupStage+0x5a>
 800a17a:	e017      	b.n	800a1ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9cb 	bl	800a520 <USBD_StdDevReq>
      break;
 800a18a:	e01a      	b.n	800a1c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fa2d 	bl	800a5f4 <USBD_StdItfReq>
      break;
 800a19a:	e012      	b.n	800a1c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fa6d 	bl	800a684 <USBD_StdEPReq>
      break;
 800a1aa:	e00a      	b.n	800a1c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a1b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fb50 	bl	800b860 <USBD_LL_StallEP>
      break;
 800a1c0:	bf00      	nop
  }

  return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a1da:	7afb      	ldrb	r3, [r7, #11]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d14b      	bne.n	800a278 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d134      	bne.n	800a25c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d919      	bls.n	800a232 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	68da      	ldr	r2, [r3, #12]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a214:	429a      	cmp	r2, r3
 800a216:	d203      	bcs.n	800a220 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	e002      	b.n	800a226 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a224:	b29b      	uxth	r3, r3
 800a226:	461a      	mov	r2, r3
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 ff57 	bl	800b0de <USBD_CtlContinueRx>
 800a230:	e038      	b.n	800a2a4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a244:	2b03      	cmp	r3, #3
 800a246:	d105      	bne.n	800a254 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 ff54 	bl	800b102 <USBD_CtlSendStatus>
 800a25a:	e023      	b.n	800a2a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a262:	2b05      	cmp	r3, #5
 800a264:	d11e      	bne.n	800a2a4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a26e:	2100      	movs	r1, #0
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f001 faf5 	bl	800b860 <USBD_LL_StallEP>
 800a276:	e015      	b.n	800a2a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00d      	beq.n	800a2a0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d108      	bne.n	800a2a0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	7afa      	ldrb	r2, [r7, #11]
 800a298:	4611      	mov	r1, r2
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	4798      	blx	r3
 800a29e:	e001      	b.n	800a2a4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e000      	b.n	800a2a6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b086      	sub	sp, #24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d17f      	bne.n	800a3c2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3314      	adds	r3, #20
 800a2c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d15c      	bne.n	800a38c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d915      	bls.n	800a30a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	6879      	ldr	r1, [r7, #4]
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 fec1 	bl	800b07e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	2200      	movs	r2, #0
 800a300:	2100      	movs	r1, #0
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f001 fb58 	bl	800b9b8 <USBD_LL_PrepareReceive>
 800a308:	e04e      	b.n	800a3a8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	6912      	ldr	r2, [r2, #16]
 800a312:	fbb3 f1f2 	udiv	r1, r3, r2
 800a316:	fb02 f201 	mul.w	r2, r2, r1
 800a31a:	1a9b      	subs	r3, r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d11c      	bne.n	800a35a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a328:	429a      	cmp	r2, r3
 800a32a:	d316      	bcc.n	800a35a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a336:	429a      	cmp	r2, r3
 800a338:	d20f      	bcs.n	800a35a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a33a:	2200      	movs	r2, #0
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 fe9d 	bl	800b07e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a34c:	2300      	movs	r3, #0
 800a34e:	2200      	movs	r2, #0
 800a350:	2100      	movs	r1, #0
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f001 fb30 	bl	800b9b8 <USBD_LL_PrepareReceive>
 800a358:	e026      	b.n	800a3a8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d105      	bne.n	800a37c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a37c:	2180      	movs	r1, #128	; 0x80
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f001 fa6e 	bl	800b860 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 fecf 	bl	800b128 <USBD_CtlReceiveStatus>
 800a38a:	e00d      	b.n	800a3a8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a392:	2b04      	cmp	r3, #4
 800a394:	d004      	beq.n	800a3a0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a3a0:	2180      	movs	r1, #128	; 0x80
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f001 fa5c 	bl	800b860 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d11d      	bne.n	800a3ee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff fe81 	bl	800a0ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3c0:	e015      	b.n	800a3ee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00d      	beq.n	800a3ea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d108      	bne.n	800a3ea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	7afa      	ldrb	r2, [r7, #11]
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	4798      	blx	r3
 800a3e8:	e001      	b.n	800a3ee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e000      	b.n	800a3f0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	2200      	movs	r2, #0
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 f9e5 	bl	800b7d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2240      	movs	r2, #64	; 0x40
 800a418:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a41c:	2340      	movs	r3, #64	; 0x40
 800a41e:	2200      	movs	r2, #0
 800a420:	2180      	movs	r1, #128	; 0x80
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 f9d7 	bl	800b7d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2240      	movs	r2, #64	; 0x40
 800a432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d009      	beq.n	800a470 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6852      	ldr	r2, [r2, #4]
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	4611      	mov	r1, r2
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	4798      	blx	r3
  }

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	78fa      	ldrb	r2, [r7, #3]
 800a48a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	bc80      	pop	{r7}
 800a496:	4770      	bx	lr

0800a498 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2204      	movs	r2, #4
 800a4b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bc80      	pop	{r7}
 800a4be:	4770      	bx	lr

0800a4c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d105      	bne.n	800a4de <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bc80      	pop	{r7}
 800a4e8:	4770      	bx	lr

0800a4ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d10b      	bne.n	800a514 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a536:	2b40      	cmp	r3, #64	; 0x40
 800a538:	d005      	beq.n	800a546 <USBD_StdDevReq+0x26>
 800a53a:	2b40      	cmp	r3, #64	; 0x40
 800a53c:	d84f      	bhi.n	800a5de <USBD_StdDevReq+0xbe>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d009      	beq.n	800a556 <USBD_StdDevReq+0x36>
 800a542:	2b20      	cmp	r3, #32
 800a544:	d14b      	bne.n	800a5de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
      break;
 800a554:	e048      	b.n	800a5e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	785b      	ldrb	r3, [r3, #1]
 800a55a:	2b09      	cmp	r3, #9
 800a55c:	d839      	bhi.n	800a5d2 <USBD_StdDevReq+0xb2>
 800a55e:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <USBD_StdDevReq+0x44>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a5b5 	.word	0x0800a5b5
 800a568:	0800a5c9 	.word	0x0800a5c9
 800a56c:	0800a5d3 	.word	0x0800a5d3
 800a570:	0800a5bf 	.word	0x0800a5bf
 800a574:	0800a5d3 	.word	0x0800a5d3
 800a578:	0800a597 	.word	0x0800a597
 800a57c:	0800a58d 	.word	0x0800a58d
 800a580:	0800a5d3 	.word	0x0800a5d3
 800a584:	0800a5ab 	.word	0x0800a5ab
 800a588:	0800a5a1 	.word	0x0800a5a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f9dc 	bl	800a94c <USBD_GetDescriptor>
          break;
 800a594:	e022      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fb3f 	bl	800ac1c <USBD_SetAddress>
          break;
 800a59e:	e01d      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fb7e 	bl	800aca4 <USBD_SetConfig>
          break;
 800a5a8:	e018      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fc07 	bl	800adc0 <USBD_GetConfig>
          break;
 800a5b2:	e013      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fc37 	bl	800ae2a <USBD_GetStatus>
          break;
 800a5bc:	e00e      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fc65 	bl	800ae90 <USBD_SetFeature>
          break;
 800a5c6:	e009      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fc74 	bl	800aeb8 <USBD_ClrFeature>
          break;
 800a5d0:	e004      	b.n	800a5dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fccc 	bl	800af72 <USBD_CtlError>
          break;
 800a5da:	bf00      	nop
      }
      break;
 800a5dc:	e004      	b.n	800a5e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fcc6 	bl	800af72 <USBD_CtlError>
      break;
 800a5e6:	bf00      	nop
  }

  return ret;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop

0800a5f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a60a:	2b40      	cmp	r3, #64	; 0x40
 800a60c:	d005      	beq.n	800a61a <USBD_StdItfReq+0x26>
 800a60e:	2b40      	cmp	r3, #64	; 0x40
 800a610:	d82e      	bhi.n	800a670 <USBD_StdItfReq+0x7c>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <USBD_StdItfReq+0x26>
 800a616:	2b20      	cmp	r3, #32
 800a618:	d12a      	bne.n	800a670 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a620:	3b01      	subs	r3, #1
 800a622:	2b02      	cmp	r3, #2
 800a624:	d81d      	bhi.n	800a662 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	889b      	ldrh	r3, [r3, #4]
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d813      	bhi.n	800a658 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	88db      	ldrh	r3, [r3, #6]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d110      	bne.n	800a66c <USBD_StdItfReq+0x78>
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10d      	bne.n	800a66c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fd56 	bl	800b102 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a656:	e009      	b.n	800a66c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fc89 	bl	800af72 <USBD_CtlError>
          break;
 800a660:	e004      	b.n	800a66c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fc84 	bl	800af72 <USBD_CtlError>
          break;
 800a66a:	e000      	b.n	800a66e <USBD_StdItfReq+0x7a>
          break;
 800a66c:	bf00      	nop
      }
      break;
 800a66e:	e004      	b.n	800a67a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fc7d 	bl	800af72 <USBD_CtlError>
      break;
 800a678:	bf00      	nop
  }

  return USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	889b      	ldrh	r3, [r3, #4]
 800a696:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d007      	beq.n	800a6b4 <USBD_StdEPReq+0x30>
 800a6a4:	2b40      	cmp	r3, #64	; 0x40
 800a6a6:	f200 8146 	bhi.w	800a936 <USBD_StdEPReq+0x2b2>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <USBD_StdEPReq+0x40>
 800a6ae:	2b20      	cmp	r3, #32
 800a6b0:	f040 8141 	bne.w	800a936 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
      break;
 800a6c2:	e13d      	b.n	800a940 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6cc:	2b20      	cmp	r3, #32
 800a6ce:	d10a      	bne.n	800a6e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	4798      	blx	r3
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	e12d      	b.n	800a942 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d007      	beq.n	800a6fe <USBD_StdEPReq+0x7a>
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	f300 811b 	bgt.w	800a92a <USBD_StdEPReq+0x2a6>
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d072      	beq.n	800a7de <USBD_StdEPReq+0x15a>
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d03a      	beq.n	800a772 <USBD_StdEPReq+0xee>
 800a6fc:	e115      	b.n	800a92a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	2b02      	cmp	r3, #2
 800a706:	d002      	beq.n	800a70e <USBD_StdEPReq+0x8a>
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d015      	beq.n	800a738 <USBD_StdEPReq+0xb4>
 800a70c:	e02b      	b.n	800a766 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00c      	beq.n	800a72e <USBD_StdEPReq+0xaa>
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	2b80      	cmp	r3, #128	; 0x80
 800a718:	d009      	beq.n	800a72e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f001 f89e 	bl	800b860 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a724:	2180      	movs	r1, #128	; 0x80
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 f89a 	bl	800b860 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a72c:	e020      	b.n	800a770 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fc1e 	bl	800af72 <USBD_CtlError>
              break;
 800a736:	e01b      	b.n	800a770 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	885b      	ldrh	r3, [r3, #2]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10e      	bne.n	800a75e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <USBD_StdEPReq+0xda>
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b80      	cmp	r3, #128	; 0x80
 800a74a:	d008      	beq.n	800a75e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	88db      	ldrh	r3, [r3, #6]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d104      	bne.n	800a75e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 f881 	bl	800b860 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fccf 	bl	800b102 <USBD_CtlSendStatus>

              break;
 800a764:	e004      	b.n	800a770 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fc02 	bl	800af72 <USBD_CtlError>
              break;
 800a76e:	bf00      	nop
          }
          break;
 800a770:	e0e0      	b.n	800a934 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d002      	beq.n	800a782 <USBD_StdEPReq+0xfe>
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d015      	beq.n	800a7ac <USBD_StdEPReq+0x128>
 800a780:	e026      	b.n	800a7d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00c      	beq.n	800a7a2 <USBD_StdEPReq+0x11e>
 800a788:	7bbb      	ldrb	r3, [r7, #14]
 800a78a:	2b80      	cmp	r3, #128	; 0x80
 800a78c:	d009      	beq.n	800a7a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f001 f864 	bl	800b860 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a798:	2180      	movs	r1, #128	; 0x80
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f001 f860 	bl	800b860 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7a0:	e01c      	b.n	800a7dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fbe4 	bl	800af72 <USBD_CtlError>
              break;
 800a7aa:	e017      	b.n	800a7dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	885b      	ldrh	r3, [r3, #2]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d112      	bne.n	800a7da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 f86b 	bl	800b89e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fc9a 	bl	800b102 <USBD_CtlSendStatus>
              }
              break;
 800a7ce:	e004      	b.n	800a7da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fbcd 	bl	800af72 <USBD_CtlError>
              break;
 800a7d8:	e000      	b.n	800a7dc <USBD_StdEPReq+0x158>
              break;
 800a7da:	bf00      	nop
          }
          break;
 800a7dc:	e0aa      	b.n	800a934 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d002      	beq.n	800a7ee <USBD_StdEPReq+0x16a>
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d032      	beq.n	800a852 <USBD_StdEPReq+0x1ce>
 800a7ec:	e097      	b.n	800a91e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d007      	beq.n	800a804 <USBD_StdEPReq+0x180>
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	2b80      	cmp	r3, #128	; 0x80
 800a7f8:	d004      	beq.n	800a804 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fbb8 	bl	800af72 <USBD_CtlError>
                break;
 800a802:	e091      	b.n	800a928 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	da0b      	bge.n	800a824 <USBD_StdEPReq+0x1a0>
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	3310      	adds	r3, #16
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	4413      	add	r3, r2
 800a820:	3304      	adds	r3, #4
 800a822:	e00b      	b.n	800a83c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a82a:	4613      	mov	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	4413      	add	r3, r2
 800a83a:	3304      	adds	r3, #4
 800a83c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2200      	movs	r2, #0
 800a842:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2202      	movs	r2, #2
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fbfb 	bl	800b046 <USBD_CtlSendData>
              break;
 800a850:	e06a      	b.n	800a928 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a856:	2b00      	cmp	r3, #0
 800a858:	da11      	bge.n	800a87e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	f003 020f 	and.w	r2, r3, #15
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	3318      	adds	r3, #24
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d117      	bne.n	800a8a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fb7b 	bl	800af72 <USBD_CtlError>
                  break;
 800a87c:	e054      	b.n	800a928 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	f003 020f 	and.w	r2, r3, #15
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	4613      	mov	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	440b      	add	r3, r1
 800a890:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d104      	bne.n	800a8a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fb68 	bl	800af72 <USBD_CtlError>
                  break;
 800a8a2:	e041      	b.n	800a928 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da0b      	bge.n	800a8c4 <USBD_StdEPReq+0x240>
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	3310      	adds	r3, #16
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	4413      	add	r3, r2
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	e00b      	b.n	800a8dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	4413      	add	r3, r2
 800a8da:	3304      	adds	r3, #4
 800a8dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <USBD_StdEPReq+0x266>
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b80      	cmp	r3, #128	; 0x80
 800a8e8:	d103      	bne.n	800a8f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	e00e      	b.n	800a910 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fff0 	bl	800b8dc <USBD_LL_IsStallEP>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2201      	movs	r2, #1
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e002      	b.n	800a910 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2202      	movs	r2, #2
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fb95 	bl	800b046 <USBD_CtlSendData>
              break;
 800a91c:	e004      	b.n	800a928 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fb26 	bl	800af72 <USBD_CtlError>
              break;
 800a926:	bf00      	nop
          }
          break;
 800a928:	e004      	b.n	800a934 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fb20 	bl	800af72 <USBD_CtlError>
          break;
 800a932:	bf00      	nop
      }
      break;
 800a934:	e004      	b.n	800a940 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fb1a 	bl	800af72 <USBD_CtlError>
      break;
 800a93e:	bf00      	nop
  }

  return ret;
 800a940:	7bfb      	ldrb	r3, [r7, #15]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a95e:	2300      	movs	r3, #0
 800a960:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	885b      	ldrh	r3, [r3, #2]
 800a966:	0a1b      	lsrs	r3, r3, #8
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	2b06      	cmp	r3, #6
 800a96e:	f200 8128 	bhi.w	800abc2 <USBD_GetDescriptor+0x276>
 800a972:	a201      	add	r2, pc, #4	; (adr r2, 800a978 <USBD_GetDescriptor+0x2c>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a995 	.word	0x0800a995
 800a97c:	0800a9ad 	.word	0x0800a9ad
 800a980:	0800a9ed 	.word	0x0800a9ed
 800a984:	0800abc3 	.word	0x0800abc3
 800a988:	0800abc3 	.word	0x0800abc3
 800a98c:	0800ab63 	.word	0x0800ab63
 800a990:	0800ab8f 	.word	0x0800ab8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	7c12      	ldrb	r2, [r2, #16]
 800a9a0:	f107 0108 	add.w	r1, r7, #8
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
 800a9a8:	60f8      	str	r0, [r7, #12]
      break;
 800a9aa:	e112      	b.n	800abd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7c1b      	ldrb	r3, [r3, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10d      	bne.n	800a9d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9bc:	f107 0208 	add.w	r2, r7, #8
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4798      	blx	r3
 800a9c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a9ce:	e100      	b.n	800abd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	f107 0208 	add.w	r2, r7, #8
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	701a      	strb	r2, [r3, #0]
      break;
 800a9ea:	e0f2      	b.n	800abd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	885b      	ldrh	r3, [r3, #2]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	f200 80ac 	bhi.w	800ab50 <USBD_GetDescriptor+0x204>
 800a9f8:	a201      	add	r2, pc, #4	; (adr r2, 800aa00 <USBD_GetDescriptor+0xb4>)
 800a9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fe:	bf00      	nop
 800aa00:	0800aa19 	.word	0x0800aa19
 800aa04:	0800aa4d 	.word	0x0800aa4d
 800aa08:	0800aa81 	.word	0x0800aa81
 800aa0c:	0800aab5 	.word	0x0800aab5
 800aa10:	0800aae9 	.word	0x0800aae9
 800aa14:	0800ab1d 	.word	0x0800ab1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3a:	e091      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa97 	bl	800af72 <USBD_CtlError>
            err++;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	3301      	adds	r3, #1
 800aa48:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4a:	e089      	b.n	800ab60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6e:	e077      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa7d 	bl	800af72 <USBD_CtlError>
            err++;
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7e:	e06f      	b.n	800ab60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7c12      	ldrb	r2, [r2, #16]
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa2:	e05d      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fa63 	bl	800af72 <USBD_CtlError>
            err++;
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	3301      	adds	r3, #1
 800aab0:	72fb      	strb	r3, [r7, #11]
          break;
 800aab2:	e055      	b.n	800ab60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7c12      	ldrb	r2, [r2, #16]
 800aacc:	f107 0108 	add.w	r1, r7, #8
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aad6:	e043      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa49 	bl	800af72 <USBD_CtlError>
            err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
          break;
 800aae6:	e03b      	b.n	800ab60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00b      	beq.n	800ab0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	7c12      	ldrb	r2, [r2, #16]
 800ab00:	f107 0108 	add.w	r1, r7, #8
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
 800ab08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab0a:	e029      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fa2f 	bl	800af72 <USBD_CtlError>
            err++;
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	3301      	adds	r3, #1
 800ab18:	72fb      	strb	r3, [r7, #11]
          break;
 800ab1a:	e021      	b.n	800ab60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	7c12      	ldrb	r2, [r2, #16]
 800ab34:	f107 0108 	add.w	r1, r7, #8
 800ab38:	4610      	mov	r0, r2
 800ab3a:	4798      	blx	r3
 800ab3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab3e:	e00f      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa15 	bl	800af72 <USBD_CtlError>
            err++;
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab4e:	e007      	b.n	800ab60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fa0d 	bl	800af72 <USBD_CtlError>
          err++;
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ab5e:	e038      	b.n	800abd2 <USBD_GetDescriptor+0x286>
 800ab60:	e037      	b.n	800abd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	7c1b      	ldrb	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab72:	f107 0208 	add.w	r2, r7, #8
 800ab76:	4610      	mov	r0, r2
 800ab78:	4798      	blx	r3
 800ab7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab7c:	e029      	b.n	800abd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f9f6 	bl	800af72 <USBD_CtlError>
        err++;
 800ab86:	7afb      	ldrb	r3, [r7, #11]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab8c:	e021      	b.n	800abd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	7c1b      	ldrb	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10d      	bne.n	800abb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9e:	f107 0208 	add.w	r2, r7, #8
 800aba2:	4610      	mov	r0, r2
 800aba4:	4798      	blx	r3
 800aba6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3301      	adds	r3, #1
 800abac:	2207      	movs	r2, #7
 800abae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abb0:	e00f      	b.n	800abd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f9dc 	bl	800af72 <USBD_CtlError>
        err++;
 800abba:	7afb      	ldrb	r3, [r7, #11]
 800abbc:	3301      	adds	r3, #1
 800abbe:	72fb      	strb	r3, [r7, #11]
      break;
 800abc0:	e007      	b.n	800abd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f9d4 	bl	800af72 <USBD_CtlError>
      err++;
 800abca:	7afb      	ldrb	r3, [r7, #11]
 800abcc:	3301      	adds	r3, #1
 800abce:	72fb      	strb	r3, [r7, #11]
      break;
 800abd0:	bf00      	nop
  }

  if (err != 0U)
 800abd2:	7afb      	ldrb	r3, [r7, #11]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d11c      	bne.n	800ac12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800abd8:	893b      	ldrh	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d011      	beq.n	800ac02 <USBD_GetDescriptor+0x2b6>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	88db      	ldrh	r3, [r3, #6]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00d      	beq.n	800ac02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88da      	ldrh	r2, [r3, #6]
 800abea:	893b      	ldrh	r3, [r7, #8]
 800abec:	4293      	cmp	r3, r2
 800abee:	bf28      	it	cs
 800abf0:	4613      	movcs	r3, r2
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abf6:	893b      	ldrh	r3, [r7, #8]
 800abf8:	461a      	mov	r2, r3
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fa22 	bl	800b046 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	88db      	ldrh	r3, [r3, #6]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d104      	bne.n	800ac14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa79 	bl	800b102 <USBD_CtlSendStatus>
 800ac10:	e000      	b.n	800ac14 <USBD_GetDescriptor+0x2c8>
    return;
 800ac12:	bf00      	nop
    }
  }
}
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop

0800ac1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	889b      	ldrh	r3, [r3, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d130      	bne.n	800ac90 <USBD_SetAddress+0x74>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	88db      	ldrh	r3, [r3, #6]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d12c      	bne.n	800ac90 <USBD_SetAddress+0x74>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ac3c:	d828      	bhi.n	800ac90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	885b      	ldrh	r3, [r3, #2]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d104      	bne.n	800ac5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f98b 	bl	800af72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac5c:	e01d      	b.n	800ac9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	7bfa      	ldrb	r2, [r7, #15]
 800ac62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fe62 	bl	800b934 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa46 	bl	800b102 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac84:	e009      	b.n	800ac9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8e:	e004      	b.n	800ac9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f96d 	bl	800af72 <USBD_CtlError>
  }
}
 800ac98:	bf00      	nop
 800ac9a:	bf00      	nop
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	4b41      	ldr	r3, [pc, #260]	; (800adbc <USBD_SetConfig+0x118>)
 800acb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800acb8:	4b40      	ldr	r3, [pc, #256]	; (800adbc <USBD_SetConfig+0x118>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d904      	bls.n	800acca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f955 	bl	800af72 <USBD_CtlError>
 800acc8:	e075      	b.n	800adb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d002      	beq.n	800acda <USBD_SetConfig+0x36>
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d023      	beq.n	800ad20 <USBD_SetConfig+0x7c>
 800acd8:	e062      	b.n	800ada0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800acda:	4b38      	ldr	r3, [pc, #224]	; (800adbc <USBD_SetConfig+0x118>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01a      	beq.n	800ad18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ace2:	4b36      	ldr	r3, [pc, #216]	; (800adbc <USBD_SetConfig+0x118>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2203      	movs	r2, #3
 800acf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800acf4:	4b31      	ldr	r3, [pc, #196]	; (800adbc <USBD_SetConfig+0x118>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff f9e7 	bl	800a0ce <USBD_SetClassConfig>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d104      	bne.n	800ad10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f932 	bl	800af72 <USBD_CtlError>
            return;
 800ad0e:	e052      	b.n	800adb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f9f6 	bl	800b102 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ad16:	e04e      	b.n	800adb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f9f2 	bl	800b102 <USBD_CtlSendStatus>
        break;
 800ad1e:	e04a      	b.n	800adb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ad20:	4b26      	ldr	r3, [pc, #152]	; (800adbc <USBD_SetConfig+0x118>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d112      	bne.n	800ad4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ad30:	4b22      	ldr	r3, [pc, #136]	; (800adbc <USBD_SetConfig+0x118>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	461a      	mov	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ad3a:	4b20      	ldr	r3, [pc, #128]	; (800adbc <USBD_SetConfig+0x118>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff f9e3 	bl	800a10c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f9db 	bl	800b102 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ad4c:	e033      	b.n	800adb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ad4e:	4b1b      	ldr	r3, [pc, #108]	; (800adbc <USBD_SetConfig+0x118>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d01d      	beq.n	800ad98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7ff f9d1 	bl	800a10c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ad6a:	4b14      	ldr	r3, [pc, #80]	; (800adbc <USBD_SetConfig+0x118>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad74:	4b11      	ldr	r3, [pc, #68]	; (800adbc <USBD_SetConfig+0x118>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff f9a7 	bl	800a0ce <USBD_SetClassConfig>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d104      	bne.n	800ad90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f8f2 	bl	800af72 <USBD_CtlError>
            return;
 800ad8e:	e012      	b.n	800adb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f9b6 	bl	800b102 <USBD_CtlSendStatus>
        break;
 800ad96:	e00e      	b.n	800adb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f9b2 	bl	800b102 <USBD_CtlSendStatus>
        break;
 800ad9e:	e00a      	b.n	800adb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f8e5 	bl	800af72 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ada8:	4b04      	ldr	r3, [pc, #16]	; (800adbc <USBD_SetConfig+0x118>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff f9ac 	bl	800a10c <USBD_ClrClassConfig>
        break;
 800adb4:	bf00      	nop
    }
  }
}
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	2000029c 	.word	0x2000029c

0800adc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	88db      	ldrh	r3, [r3, #6]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d004      	beq.n	800addc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f8cc 	bl	800af72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800adda:	e022      	b.n	800ae22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	dc02      	bgt.n	800adec <USBD_GetConfig+0x2c>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	dc03      	bgt.n	800adf2 <USBD_GetConfig+0x32>
 800adea:	e015      	b.n	800ae18 <USBD_GetConfig+0x58>
 800adec:	2b03      	cmp	r3, #3
 800adee:	d00b      	beq.n	800ae08 <USBD_GetConfig+0x48>
 800adf0:	e012      	b.n	800ae18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3308      	adds	r3, #8
 800adfc:	2201      	movs	r2, #1
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f920 	bl	800b046 <USBD_CtlSendData>
        break;
 800ae06:	e00c      	b.n	800ae22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f918 	bl	800b046 <USBD_CtlSendData>
        break;
 800ae16:	e004      	b.n	800ae22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f8a9 	bl	800af72 <USBD_CtlError>
        break;
 800ae20:	bf00      	nop
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d81e      	bhi.n	800ae7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	88db      	ldrh	r3, [r3, #6]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d004      	beq.n	800ae52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f891 	bl	800af72 <USBD_CtlError>
        break;
 800ae50:	e01a      	b.n	800ae88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	f043 0202 	orr.w	r2, r3, #2
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	330c      	adds	r3, #12
 800ae72:	2202      	movs	r2, #2
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f8e5 	bl	800b046 <USBD_CtlSendData>
      break;
 800ae7c:	e004      	b.n	800ae88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f876 	bl	800af72 <USBD_CtlError>
      break;
 800ae86:	bf00      	nop
  }
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	885b      	ldrh	r3, [r3, #2]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d106      	bne.n	800aeb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f929 	bl	800b102 <USBD_CtlSendStatus>
  }
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec8:	3b01      	subs	r3, #1
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d80b      	bhi.n	800aee6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	885b      	ldrh	r3, [r3, #2]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d10c      	bne.n	800aef0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f90f 	bl	800b102 <USBD_CtlSendStatus>
      }
      break;
 800aee4:	e004      	b.n	800aef0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f842 	bl	800af72 <USBD_CtlError>
      break;
 800aeee:	e000      	b.n	800aef2 <USBD_ClrFeature+0x3a>
      break;
 800aef0:	bf00      	nop
  }
}
 800aef2:	bf00      	nop
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	781a      	ldrb	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	785a      	ldrb	r2, [r3, #1]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	3302      	adds	r3, #2
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	3303      	adds	r3, #3
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	b29b      	uxth	r3, r3
 800af24:	021b      	lsls	r3, r3, #8
 800af26:	b29b      	uxth	r3, r3
 800af28:	4413      	add	r3, r2
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	3304      	adds	r3, #4
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	b29a      	uxth	r2, r3
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	3305      	adds	r3, #5
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	b29b      	uxth	r3, r3
 800af44:	4413      	add	r3, r2
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	3306      	adds	r3, #6
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	b29a      	uxth	r2, r3
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	3307      	adds	r3, #7
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	b29b      	uxth	r3, r3
 800af60:	4413      	add	r3, r2
 800af62:	b29a      	uxth	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	80da      	strh	r2, [r3, #6]

}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bc80      	pop	{r7}
 800af70:	4770      	bx	lr

0800af72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800af7c:	2180      	movs	r1, #128	; 0x80
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fc6e 	bl	800b860 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800af84:	2100      	movs	r1, #0
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fc6a 	bl	800b860 <USBD_LL_StallEP>
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d032      	beq.n	800b010 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f000 f834 	bl	800b018 <USBD_GetLen>
 800afb0:	4603      	mov	r3, r0
 800afb2:	3301      	adds	r3, #1
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	75fa      	strb	r2, [r7, #23]
 800afc4:	461a      	mov	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	4413      	add	r3, r2
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	7812      	ldrb	r2, [r2, #0]
 800afce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	75fa      	strb	r2, [r7, #23]
 800afd6:	461a      	mov	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	4413      	add	r3, r2
 800afdc:	2203      	movs	r2, #3
 800afde:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800afe0:	e012      	b.n	800b008 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1c5a      	adds	r2, r3, #1
 800afe6:	60fa      	str	r2, [r7, #12]
 800afe8:	7dfa      	ldrb	r2, [r7, #23]
 800afea:	1c51      	adds	r1, r2, #1
 800afec:	75f9      	strb	r1, [r7, #23]
 800afee:	4611      	mov	r1, r2
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	440a      	add	r2, r1
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	75fa      	strb	r2, [r7, #23]
 800affe:	461a      	mov	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	4413      	add	r3, r2
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e8      	bne.n	800afe2 <USBD_GetString+0x4e>
    }
  }
}
 800b010:	bf00      	nop
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b024:	e005      	b.n	800b032 <USBD_GetLen+0x1a>
  {
    len++;
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	3301      	adds	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3301      	adds	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1f5      	bne.n	800b026 <USBD_GetLen+0xe>
  }

  return len;
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	bc80      	pop	{r7}
 800b044:	4770      	bx	lr

0800b046 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	60f8      	str	r0, [r7, #12]
 800b04e:	60b9      	str	r1, [r7, #8]
 800b050:	4613      	mov	r3, r2
 800b052:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2202      	movs	r2, #2
 800b058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b05c:	88fa      	ldrh	r2, [r7, #6]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b062:	88fa      	ldrh	r2, [r7, #6]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	2100      	movs	r1, #0
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 fc7f 	bl	800b972 <USBD_LL_Transmit>

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	4613      	mov	r3, r2
 800b08a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b08c:	88fb      	ldrh	r3, [r7, #6]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	2100      	movs	r1, #0
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 fc6d 	bl	800b972 <USBD_LL_Transmit>

  return USBD_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b0c0:	88fa      	ldrh	r2, [r7, #6]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0c8:	88fb      	ldrh	r3, [r7, #6]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f000 fc72 	bl	800b9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fc60 	bl	800b9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2204      	movs	r2, #4
 800b10e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b112:	2300      	movs	r3, #0
 800b114:	2200      	movs	r2, #0
 800b116:	2100      	movs	r1, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fc2a 	bl	800b972 <USBD_LL_Transmit>

  return USBD_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2205      	movs	r2, #5
 800b134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b138:	2300      	movs	r3, #0
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fc3a 	bl	800b9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b154:	2200      	movs	r2, #0
 800b156:	4912      	ldr	r1, [pc, #72]	; (800b1a0 <MX_USB_DEVICE_Init+0x50>)
 800b158:	4812      	ldr	r0, [pc, #72]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b15a:	f7fe ff5e 	bl	800a01a <USBD_Init>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b164:	f7f6 ff0c 	bl	8001f80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b168:	490f      	ldr	r1, [pc, #60]	; (800b1a8 <MX_USB_DEVICE_Init+0x58>)
 800b16a:	480e      	ldr	r0, [pc, #56]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b16c:	f7fe ff80 	bl	800a070 <USBD_RegisterClass>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b176:	f7f6 ff03 	bl	8001f80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b17a:	490c      	ldr	r1, [pc, #48]	; (800b1ac <MX_USB_DEVICE_Init+0x5c>)
 800b17c:	4809      	ldr	r0, [pc, #36]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b17e:	f7fe feb1 	bl	8009ee4 <USBD_CDC_RegisterInterface>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b188:	f7f6 fefa 	bl	8001f80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b18c:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b18e:	f7fe ff88 	bl	800a0a2 <USBD_Start>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b198:	f7f6 fef2 	bl	8001f80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b19c:	bf00      	nop
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	2000012c 	.word	0x2000012c
 800b1a4:	20000c38 	.word	0x20000c38
 800b1a8:	20000018 	.word	0x20000018
 800b1ac:	2000011c 	.word	0x2000011c

0800b1b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4905      	ldr	r1, [pc, #20]	; (800b1cc <CDC_Init_FS+0x1c>)
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <CDC_Init_FS+0x20>)
 800b1ba:	f7fe fea9 	bl	8009f10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1be:	4905      	ldr	r1, [pc, #20]	; (800b1d4 <CDC_Init_FS+0x24>)
 800b1c0:	4803      	ldr	r0, [pc, #12]	; (800b1d0 <CDC_Init_FS+0x20>)
 800b1c2:	f7fe febe 	bl	8009f42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	200010fc 	.word	0x200010fc
 800b1d0:	20000c38 	.word	0x20000c38
 800b1d4:	20000efc 	.word	0x20000efc

0800b1d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b1dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bc80      	pop	{r7}
 800b1e4:	4770      	bx	lr
	...

0800b1e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	6039      	str	r1, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	2b23      	cmp	r3, #35	; 0x23
 800b1fc:	d84a      	bhi.n	800b294 <CDC_Control_FS+0xac>
 800b1fe:	a201      	add	r2, pc, #4	; (adr r2, 800b204 <CDC_Control_FS+0x1c>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b295 	.word	0x0800b295
 800b208:	0800b295 	.word	0x0800b295
 800b20c:	0800b295 	.word	0x0800b295
 800b210:	0800b295 	.word	0x0800b295
 800b214:	0800b295 	.word	0x0800b295
 800b218:	0800b295 	.word	0x0800b295
 800b21c:	0800b295 	.word	0x0800b295
 800b220:	0800b295 	.word	0x0800b295
 800b224:	0800b295 	.word	0x0800b295
 800b228:	0800b295 	.word	0x0800b295
 800b22c:	0800b295 	.word	0x0800b295
 800b230:	0800b295 	.word	0x0800b295
 800b234:	0800b295 	.word	0x0800b295
 800b238:	0800b295 	.word	0x0800b295
 800b23c:	0800b295 	.word	0x0800b295
 800b240:	0800b295 	.word	0x0800b295
 800b244:	0800b295 	.word	0x0800b295
 800b248:	0800b295 	.word	0x0800b295
 800b24c:	0800b295 	.word	0x0800b295
 800b250:	0800b295 	.word	0x0800b295
 800b254:	0800b295 	.word	0x0800b295
 800b258:	0800b295 	.word	0x0800b295
 800b25c:	0800b295 	.word	0x0800b295
 800b260:	0800b295 	.word	0x0800b295
 800b264:	0800b295 	.word	0x0800b295
 800b268:	0800b295 	.word	0x0800b295
 800b26c:	0800b295 	.word	0x0800b295
 800b270:	0800b295 	.word	0x0800b295
 800b274:	0800b295 	.word	0x0800b295
 800b278:	0800b295 	.word	0x0800b295
 800b27c:	0800b295 	.word	0x0800b295
 800b280:	0800b295 	.word	0x0800b295
 800b284:	0800b295 	.word	0x0800b295
 800b288:	0800b295 	.word	0x0800b295
 800b28c:	0800b295 	.word	0x0800b295
 800b290:	0800b295 	.word	0x0800b295
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b294:	bf00      	nop
  }

  return (USBD_OK);
 800b296:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bc80      	pop	{r7}
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop

0800b2a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <CDC_Receive_FS+0x38>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d006      	beq.n	800b2c4 <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <CDC_Receive_FS+0x38>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	6812      	ldr	r2, [r2, #0]
 800b2be:	4611      	mov	r1, r2
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2c4:	6879      	ldr	r1, [r7, #4]
 800b2c6:	4806      	ldr	r0, [pc, #24]	; (800b2e0 <CDC_Receive_FS+0x3c>)
 800b2c8:	f7fe fe3b 	bl	8009f42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2cc:	4804      	ldr	r0, [pc, #16]	; (800b2e0 <CDC_Receive_FS+0x3c>)
 800b2ce:	f7fe fe7a 	bl	8009fc6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b2d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	200002a0 	.word	0x200002a0
 800b2e0:	20000c38 	.word	0x20000c38

0800b2e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2f4:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <CDC_Transmit_FS+0x48>)
 800b2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b306:	2301      	movs	r3, #1
 800b308:	e00b      	b.n	800b322 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b30a:	887b      	ldrh	r3, [r7, #2]
 800b30c:	461a      	mov	r2, r3
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	4806      	ldr	r0, [pc, #24]	; (800b32c <CDC_Transmit_FS+0x48>)
 800b312:	f7fe fdfd 	bl	8009f10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b316:	4805      	ldr	r0, [pc, #20]	; (800b32c <CDC_Transmit_FS+0x48>)
 800b318:	f7fe fe26 	bl	8009f68 <USBD_CDC_TransmitPacket>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20000c38 	.word	0x20000c38

0800b330 <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800b338:	4a03      	ldr	r2, [pc, #12]	; (800b348 <CDC_AttachOnUSBData+0x18>)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6013      	str	r3, [r2, #0]
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr
 800b348:	200002a0 	.word	0x200002a0

0800b34c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	6039      	str	r1, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2212      	movs	r2, #18
 800b35c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b35e:	4b03      	ldr	r3, [pc, #12]	; (800b36c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	bc80      	pop	{r7}
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	20000148 	.word	0x20000148

0800b370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2204      	movs	r2, #4
 800b380:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b382:	4b03      	ldr	r3, [pc, #12]	; (800b390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	bc80      	pop	{r7}
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	2000015c 	.word	0x2000015c

0800b394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	4907      	ldr	r1, [pc, #28]	; (800b3c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3aa:	4808      	ldr	r0, [pc, #32]	; (800b3cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3ac:	f7ff fdf2 	bl	800af94 <USBD_GetString>
 800b3b0:	e004      	b.n	800b3bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4904      	ldr	r1, [pc, #16]	; (800b3c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3b6:	4805      	ldr	r0, [pc, #20]	; (800b3cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3b8:	f7ff fdec 	bl	800af94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3bc:	4b02      	ldr	r3, [pc, #8]	; (800b3c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	200012fc 	.word	0x200012fc
 800b3cc:	0800bb44 	.word	0x0800bb44

0800b3d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	4904      	ldr	r1, [pc, #16]	; (800b3f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3e0:	4804      	ldr	r0, [pc, #16]	; (800b3f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3e2:	f7ff fdd7 	bl	800af94 <USBD_GetString>
  return USBD_StrDesc;
 800b3e6:	4b02      	ldr	r3, [pc, #8]	; (800b3f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	200012fc 	.word	0x200012fc
 800b3f4:	0800bb5c 	.word	0x0800bb5c

0800b3f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	6039      	str	r1, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	221a      	movs	r2, #26
 800b408:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b40a:	f000 f843 	bl	800b494 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b40e:	4b02      	ldr	r3, [pc, #8]	; (800b418 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000160 	.word	0x20000160

0800b41c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d105      	bne.n	800b43a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	4907      	ldr	r1, [pc, #28]	; (800b450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b432:	4808      	ldr	r0, [pc, #32]	; (800b454 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b434:	f7ff fdae 	bl	800af94 <USBD_GetString>
 800b438:	e004      	b.n	800b444 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4904      	ldr	r1, [pc, #16]	; (800b450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b43e:	4805      	ldr	r0, [pc, #20]	; (800b454 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b440:	f7ff fda8 	bl	800af94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	200012fc 	.word	0x200012fc
 800b454:	0800bb70 	.word	0x0800bb70

0800b458 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	6039      	str	r1, [r7, #0]
 800b462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4907      	ldr	r1, [pc, #28]	; (800b48c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b46e:	4808      	ldr	r0, [pc, #32]	; (800b490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b470:	f7ff fd90 	bl	800af94 <USBD_GetString>
 800b474:	e004      	b.n	800b480 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4904      	ldr	r1, [pc, #16]	; (800b48c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b47c:	f7ff fd8a 	bl	800af94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b480:	4b02      	ldr	r3, [pc, #8]	; (800b48c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	200012fc 	.word	0x200012fc
 800b490:	0800bb7c 	.word	0x0800bb7c

0800b494 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b49a:	4b0f      	ldr	r3, [pc, #60]	; (800b4d8 <Get_SerialNum+0x44>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4a0:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <Get_SerialNum+0x48>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4a6:	4b0e      	ldr	r3, [pc, #56]	; (800b4e0 <Get_SerialNum+0x4c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	4909      	ldr	r1, [pc, #36]	; (800b4e4 <Get_SerialNum+0x50>)
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 f814 	bl	800b4ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	4908      	ldr	r1, [pc, #32]	; (800b4e8 <Get_SerialNum+0x54>)
 800b4c8:	68b8      	ldr	r0, [r7, #8]
 800b4ca:	f000 f80f 	bl	800b4ec <IntToUnicode>
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	1ffff7e8 	.word	0x1ffff7e8
 800b4dc:	1ffff7ec 	.word	0x1ffff7ec
 800b4e0:	1ffff7f0 	.word	0x1ffff7f0
 800b4e4:	20000162 	.word	0x20000162
 800b4e8:	20000172 	.word	0x20000172

0800b4ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
 800b502:	e027      	b.n	800b554 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	0f1b      	lsrs	r3, r3, #28
 800b508:	2b09      	cmp	r3, #9
 800b50a:	d80b      	bhi.n	800b524 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	0f1b      	lsrs	r3, r3, #28
 800b510:	b2da      	uxtb	r2, r3
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	4619      	mov	r1, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	440b      	add	r3, r1
 800b51c:	3230      	adds	r2, #48	; 0x30
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	e00a      	b.n	800b53a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	0f1b      	lsrs	r3, r3, #28
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	4619      	mov	r1, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	440b      	add	r3, r1
 800b534:	3237      	adds	r2, #55	; 0x37
 800b536:	b2d2      	uxtb	r2, r2
 800b538:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	3301      	adds	r3, #1
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	4413      	add	r3, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	3301      	adds	r3, #1
 800b552:	75fb      	strb	r3, [r7, #23]
 800b554:	7dfa      	ldrb	r2, [r7, #23]
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d3d3      	bcc.n	800b504 <IntToUnicode+0x18>
  }
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	bc80      	pop	{r7}
 800b566:	4770      	bx	lr

0800b568 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a0d      	ldr	r2, [pc, #52]	; (800b5ac <HAL_PCD_MspInit+0x44>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d113      	bne.n	800b5a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b57a:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <HAL_PCD_MspInit+0x48>)
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	4a0c      	ldr	r2, [pc, #48]	; (800b5b0 <HAL_PCD_MspInit+0x48>)
 800b580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b584:	61d3      	str	r3, [r2, #28]
 800b586:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <HAL_PCD_MspInit+0x48>)
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b58e:	60fb      	str	r3, [r7, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b592:	2200      	movs	r2, #0
 800b594:	2100      	movs	r1, #0
 800b596:	2014      	movs	r0, #20
 800b598:	f7f7 fc1d 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b59c:	2014      	movs	r0, #20
 800b59e:	f7f7 fc36 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b5a2:	bf00      	nop
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	40005c00 	.word	0x40005c00
 800b5b0:	40021000 	.word	0x40021000

0800b5b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	f7fe fdb1 	bl	800a132 <USBD_LL_SetupStage>
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b5ea:	78fa      	ldrb	r2, [r7, #3]
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	440b      	add	r3, r1
 800b5f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	78fb      	ldrb	r3, [r7, #3]
 800b600:	4619      	mov	r1, r3
 800b602:	f7fe fde3 	bl	800a1cc <USBD_LL_DataOutStage>
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b620:	78fa      	ldrb	r2, [r7, #3]
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	440b      	add	r3, r1
 800b62e:	333c      	adds	r3, #60	; 0x3c
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	78fb      	ldrb	r3, [r7, #3]
 800b634:	4619      	mov	r1, r3
 800b636:	f7fe fe3a 	bl	800a2ae <USBD_LL_DataInStage>
}
 800b63a:	bf00      	nop
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe ff4a 	bl	800a4ea <USBD_LL_SOF>
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b666:	2301      	movs	r3, #1
 800b668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d001      	beq.n	800b676 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b672:	f7f6 fc85 	bl	8001f80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b67c:	7bfa      	ldrb	r2, [r7, #15]
 800b67e:	4611      	mov	r1, r2
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fefa 	bl	800a47a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe feb3 	bl	800a3f8 <USBD_LL_Reset>
}
 800b692:	bf00      	nop
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fef4 	bl	800a498 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d005      	beq.n	800b6c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <HAL_PCD_SuspendCallback+0x30>)
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	4a03      	ldr	r2, [pc, #12]	; (800b6cc <HAL_PCD_SuspendCallback+0x30>)
 800b6be:	f043 0306 	orr.w	r3, r3, #6
 800b6c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	e000ed00 	.word	0xe000ed00

0800b6d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fe feee 	bl	800a4c0 <USBD_LL_Resume>
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b6f4:	4a28      	ldr	r2, [pc, #160]	; (800b798 <USBD_LL_Init+0xac>)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a26      	ldr	r2, [pc, #152]	; (800b798 <USBD_LL_Init+0xac>)
 800b700:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b704:	4b24      	ldr	r3, [pc, #144]	; (800b798 <USBD_LL_Init+0xac>)
 800b706:	4a25      	ldr	r2, [pc, #148]	; (800b79c <USBD_LL_Init+0xb0>)
 800b708:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b70a:	4b23      	ldr	r3, [pc, #140]	; (800b798 <USBD_LL_Init+0xac>)
 800b70c:	2208      	movs	r2, #8
 800b70e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b710:	4b21      	ldr	r3, [pc, #132]	; (800b798 <USBD_LL_Init+0xac>)
 800b712:	2202      	movs	r2, #2
 800b714:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b716:	4b20      	ldr	r3, [pc, #128]	; (800b798 <USBD_LL_Init+0xac>)
 800b718:	2200      	movs	r2, #0
 800b71a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b71c:	4b1e      	ldr	r3, [pc, #120]	; (800b798 <USBD_LL_Init+0xac>)
 800b71e:	2200      	movs	r2, #0
 800b720:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b722:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <USBD_LL_Init+0xac>)
 800b724:	2200      	movs	r2, #0
 800b726:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b728:	481b      	ldr	r0, [pc, #108]	; (800b798 <USBD_LL_Init+0xac>)
 800b72a:	f7f8 f939 	bl	80039a0 <HAL_PCD_Init>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b734:	f7f6 fc24 	bl	8001f80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b73e:	2318      	movs	r3, #24
 800b740:	2200      	movs	r2, #0
 800b742:	2100      	movs	r1, #0
 800b744:	f7f9 fdaf 	bl	80052a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b74e:	2358      	movs	r3, #88	; 0x58
 800b750:	2200      	movs	r2, #0
 800b752:	2180      	movs	r1, #128	; 0x80
 800b754:	f7f9 fda7 	bl	80052a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b75e:	23c0      	movs	r3, #192	; 0xc0
 800b760:	2200      	movs	r2, #0
 800b762:	2181      	movs	r1, #129	; 0x81
 800b764:	f7f9 fd9f 	bl	80052a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b76e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b772:	2200      	movs	r2, #0
 800b774:	2101      	movs	r1, #1
 800b776:	f7f9 fd96 	bl	80052a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b780:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b784:	2200      	movs	r2, #0
 800b786:	2182      	movs	r1, #130	; 0x82
 800b788:	f7f9 fd8d 	bl	80052a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200014fc 	.word	0x200014fc
 800b79c:	40005c00 	.word	0x40005c00

0800b7a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f8 f9fd 	bl	8003bb6 <HAL_PCD_Start>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f94e 	bl	800ba64 <USBD_Get_USB_Status>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	4608      	mov	r0, r1
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	70fb      	strb	r3, [r7, #3]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	70bb      	strb	r3, [r7, #2]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7fe:	78bb      	ldrb	r3, [r7, #2]
 800b800:	883a      	ldrh	r2, [r7, #0]
 800b802:	78f9      	ldrb	r1, [r7, #3]
 800b804:	f7f8 fb77 	bl	8003ef6 <HAL_PCD_EP_Open>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f928 	bl	800ba64 <USBD_Get_USB_Status>
 800b814:	4603      	mov	r3, r0
 800b816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b818:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	460b      	mov	r3, r1
 800b82c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	4611      	mov	r1, r2
 800b840:	4618      	mov	r0, r3
 800b842:	f7f8 fbbe 	bl	8003fc2 <HAL_PCD_EP_Close>
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f909 	bl	800ba64 <USBD_Get_USB_Status>
 800b852:	4603      	mov	r3, r0
 800b854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b856:	7bbb      	ldrb	r3, [r7, #14]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f8 fc7e 	bl	8004180 <HAL_PCD_EP_SetStall>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 f8ea 	bl	800ba64 <USBD_Get_USB_Status>
 800b890:	4603      	mov	r3, r0
 800b892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b894:	7bbb      	ldrb	r3, [r7, #14]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7f8 fcbf 	bl	8004240 <HAL_PCD_EP_ClrStall>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f8cb 	bl	800ba64 <USBD_Get_USB_Status>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	da0c      	bge.n	800b912 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fe:	68f9      	ldr	r1, [r7, #12]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	440b      	add	r3, r1
 800b90c:	3302      	adds	r3, #2
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	e00b      	b.n	800b92a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b912:	78fb      	ldrb	r3, [r7, #3]
 800b914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b918:	68f9      	ldr	r1, [r7, #12]
 800b91a:	4613      	mov	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	00db      	lsls	r3, r3, #3
 800b922:	440b      	add	r3, r1
 800b924:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b928:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	bc80      	pop	{r7}
 800b932:	4770      	bx	lr

0800b934 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b94e:	78fa      	ldrb	r2, [r7, #3]
 800b950:	4611      	mov	r1, r2
 800b952:	4618      	mov	r0, r3
 800b954:	f7f8 faaa 	bl	8003eac <HAL_PCD_SetAddress>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f880 	bl	800ba64 <USBD_Get_USB_Status>
 800b964:	4603      	mov	r3, r0
 800b966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b968:	7bbb      	ldrb	r3, [r7, #14]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b086      	sub	sp, #24
 800b976:	af00      	add	r7, sp, #0
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	461a      	mov	r2, r3
 800b97e:	460b      	mov	r3, r1
 800b980:	72fb      	strb	r3, [r7, #11]
 800b982:	4613      	mov	r3, r2
 800b984:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b994:	893b      	ldrh	r3, [r7, #8]
 800b996:	7af9      	ldrb	r1, [r7, #11]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	f7f8 fbae 	bl	80040fa <HAL_PCD_EP_Transmit>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f85d 	bl	800ba64 <USBD_Get_USB_Status>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	607a      	str	r2, [r7, #4]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	72fb      	strb	r3, [r7, #11]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9da:	893b      	ldrh	r3, [r7, #8]
 800b9dc:	7af9      	ldrb	r1, [r7, #11]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	f7f8 fb37 	bl	8004052 <HAL_PCD_EP_Receive>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 f83a 	bl	800ba64 <USBD_Get_USB_Status>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b082      	sub	sp, #8
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba10:	78fa      	ldrb	r2, [r7, #3]
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7f8 fb59 	bl	80040cc <HAL_PCD_EP_GetRxCount>
 800ba1a:	4603      	mov	r3, r0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba2c:	4b02      	ldr	r3, [pc, #8]	; (800ba38 <USBD_static_malloc+0x14>)
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bc80      	pop	{r7}
 800ba36:	4770      	bx	lr
 800ba38:	200002a4 	.word	0x200002a4

0800ba3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]

}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bc80      	pop	{r7}
 800ba4c:	4770      	bx	lr

0800ba4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ba5a:	bf00      	nop
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bc80      	pop	{r7}
 800ba62:	4770      	bx	lr

0800ba64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d817      	bhi.n	800baa8 <USBD_Get_USB_Status+0x44>
 800ba78:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <USBD_Get_USB_Status+0x1c>)
 800ba7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7e:	bf00      	nop
 800ba80:	0800ba91 	.word	0x0800ba91
 800ba84:	0800ba97 	.word	0x0800ba97
 800ba88:	0800ba9d 	.word	0x0800ba9d
 800ba8c:	0800baa3 	.word	0x0800baa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]
    break;
 800ba94:	e00b      	b.n	800baae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba96:	2302      	movs	r3, #2
 800ba98:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9a:	e008      	b.n	800baae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	73fb      	strb	r3, [r7, #15]
    break;
 800baa0:	e005      	b.n	800baae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800baa2:	2302      	movs	r3, #2
 800baa4:	73fb      	strb	r3, [r7, #15]
    break;
 800baa6:	e002      	b.n	800baae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800baa8:	2302      	movs	r3, #2
 800baaa:	73fb      	strb	r3, [r7, #15]
    break;
 800baac:	bf00      	nop
  }
  return usb_status;
 800baae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bc80      	pop	{r7}
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop

0800babc <__libc_init_array>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	2600      	movs	r6, #0
 800bac0:	4d0c      	ldr	r5, [pc, #48]	; (800baf4 <__libc_init_array+0x38>)
 800bac2:	4c0d      	ldr	r4, [pc, #52]	; (800baf8 <__libc_init_array+0x3c>)
 800bac4:	1b64      	subs	r4, r4, r5
 800bac6:	10a4      	asrs	r4, r4, #2
 800bac8:	42a6      	cmp	r6, r4
 800baca:	d109      	bne.n	800bae0 <__libc_init_array+0x24>
 800bacc:	f000 f822 	bl	800bb14 <_init>
 800bad0:	2600      	movs	r6, #0
 800bad2:	4d0a      	ldr	r5, [pc, #40]	; (800bafc <__libc_init_array+0x40>)
 800bad4:	4c0a      	ldr	r4, [pc, #40]	; (800bb00 <__libc_init_array+0x44>)
 800bad6:	1b64      	subs	r4, r4, r5
 800bad8:	10a4      	asrs	r4, r4, #2
 800bada:	42a6      	cmp	r6, r4
 800badc:	d105      	bne.n	800baea <__libc_init_array+0x2e>
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae4:	4798      	blx	r3
 800bae6:	3601      	adds	r6, #1
 800bae8:	e7ee      	b.n	800bac8 <__libc_init_array+0xc>
 800baea:	f855 3b04 	ldr.w	r3, [r5], #4
 800baee:	4798      	blx	r3
 800baf0:	3601      	adds	r6, #1
 800baf2:	e7f2      	b.n	800bada <__libc_init_array+0x1e>
 800baf4:	0800bd1c 	.word	0x0800bd1c
 800baf8:	0800bd1c 	.word	0x0800bd1c
 800bafc:	0800bd1c 	.word	0x0800bd1c
 800bb00:	0800bd20 	.word	0x0800bd20

0800bb04 <memset>:
 800bb04:	4603      	mov	r3, r0
 800bb06:	4402      	add	r2, r0
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d100      	bne.n	800bb0e <memset+0xa>
 800bb0c:	4770      	bx	lr
 800bb0e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb12:	e7f9      	b.n	800bb08 <memset+0x4>

0800bb14 <_init>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	bf00      	nop
 800bb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1a:	bc08      	pop	{r3}
 800bb1c:	469e      	mov	lr, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_fini>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr
