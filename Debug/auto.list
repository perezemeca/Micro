
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800c028  0800c028  0001c028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c25c  0800c25c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c25c  0800c25c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c25c  0800c25c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c25c  0800c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ac  2000017c  0800c3e0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001928  0800c3e0  00021928  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5cd  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d86  00000000  00000000  0003e772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  000424f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00043be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde7  00000000  00000000  00045188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1be  00000000  00000000  00060f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097986  00000000  00000000  0007e12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115ab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c8  00000000  00000000  00115b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c010 	.word	0x0800c010

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800c010 	.word	0x0800c010

0800014c <PID>:
/**********************************************************************************/
/********************************** Funciones *************************************/
/**********************************************************************************/


void PID(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
//		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
//		return;
//	}

/**************************** CÃ¡lculo de variables PID ****************************/
	ProporcionalMA.i16[0] = KpMA*error.i16[0];
 8000150:	4b64      	ldr	r3, [pc, #400]	; (80002e4 <PID+0x198>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b29b      	uxth	r3, r3
 8000156:	4a64      	ldr	r2, [pc, #400]	; (80002e8 <PID+0x19c>)
 8000158:	f9b2 2000 	ldrsh.w	r2, [r2]
 800015c:	b292      	uxth	r2, r2
 800015e:	fb02 f303 	mul.w	r3, r2, r3
 8000162:	b29b      	uxth	r3, r3
 8000164:	b21a      	sxth	r2, r3
 8000166:	4b61      	ldr	r3, [pc, #388]	; (80002ec <PID+0x1a0>)
 8000168:	801a      	strh	r2, [r3, #0]
	ProporcionalMB = KpMB*error.i16[0];
 800016a:	4b61      	ldr	r3, [pc, #388]	; (80002f0 <PID+0x1a4>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	b29b      	uxth	r3, r3
 8000170:	4a5d      	ldr	r2, [pc, #372]	; (80002e8 <PID+0x19c>)
 8000172:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000176:	b292      	uxth	r2, r2
 8000178:	fb02 f303 	mul.w	r3, r2, r3
 800017c:	b29b      	uxth	r3, r3
 800017e:	b21a      	sxth	r2, r3
 8000180:	4b5c      	ldr	r3, [pc, #368]	; (80002f4 <PID+0x1a8>)
 8000182:	801a      	strh	r2, [r3, #0]
//	Integral += 2*error.i16; //Integral += Ki*error;
	DerivativoMA = KdMA*(error.i16[0]-lastError)*100; //Kd*(error-lastError)
 8000184:	4b5c      	ldr	r3, [pc, #368]	; (80002f8 <PID+0x1ac>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	b29b      	uxth	r3, r3
 800018a:	4a57      	ldr	r2, [pc, #348]	; (80002e8 <PID+0x19c>)
 800018c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000190:	4611      	mov	r1, r2
 8000192:	4a5a      	ldr	r2, [pc, #360]	; (80002fc <PID+0x1b0>)
 8000194:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000198:	1a8a      	subs	r2, r1, r2
 800019a:	b292      	uxth	r2, r2
 800019c:	fb02 f303 	mul.w	r3, r2, r3
 80001a0:	b29b      	uxth	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	0092      	lsls	r2, r2, #2
 80001a6:	4413      	add	r3, r2
 80001a8:	461a      	mov	r2, r3
 80001aa:	0091      	lsls	r1, r2, #2
 80001ac:	461a      	mov	r2, r3
 80001ae:	460b      	mov	r3, r1
 80001b0:	4413      	add	r3, r2
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	b29b      	uxth	r3, r3
 80001b6:	b21a      	sxth	r2, r3
 80001b8:	4b51      	ldr	r3, [pc, #324]	; (8000300 <PID+0x1b4>)
 80001ba:	801a      	strh	r2, [r3, #0]
	DerivativoMB = KdMB*(error.i16[0]-lastError)*100;
 80001bc:	4b51      	ldr	r3, [pc, #324]	; (8000304 <PID+0x1b8>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	4a49      	ldr	r2, [pc, #292]	; (80002e8 <PID+0x19c>)
 80001c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80001c8:	4611      	mov	r1, r2
 80001ca:	4a4c      	ldr	r2, [pc, #304]	; (80002fc <PID+0x1b0>)
 80001cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80001d0:	1a8a      	subs	r2, r1, r2
 80001d2:	b292      	uxth	r2, r2
 80001d4:	fb02 f303 	mul.w	r3, r2, r3
 80001d8:	b29b      	uxth	r3, r3
 80001da:	461a      	mov	r2, r3
 80001dc:	0092      	lsls	r2, r2, #2
 80001de:	4413      	add	r3, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	0091      	lsls	r1, r2, #2
 80001e4:	461a      	mov	r2, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	4413      	add	r3, r2
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	b21a      	sxth	r2, r3
 80001f0:	4b45      	ldr	r3, [pc, #276]	; (8000308 <PID+0x1bc>)
 80001f2:	801a      	strh	r2, [r3, #0]

	PWM_A.i16[0]= ProporcionalMA.i16[0] + IntegralMA + DerivativoMA;
 80001f4:	4b3d      	ldr	r3, [pc, #244]	; (80002ec <PID+0x1a0>)
 80001f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	4b43      	ldr	r3, [pc, #268]	; (800030c <PID+0x1c0>)
 80001fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000202:	b29b      	uxth	r3, r3
 8000204:	4413      	add	r3, r2
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b3d      	ldr	r3, [pc, #244]	; (8000300 <PID+0x1b4>)
 800020a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800020e:	b29b      	uxth	r3, r3
 8000210:	4413      	add	r3, r2
 8000212:	b29b      	uxth	r3, r3
 8000214:	b21a      	sxth	r2, r3
 8000216:	4b3e      	ldr	r3, [pc, #248]	; (8000310 <PID+0x1c4>)
 8000218:	801a      	strh	r2, [r3, #0]
	PWM_B.i16[0]= ProporcionalMB + IntegralMB + DerivativoMB;
 800021a:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <PID+0x1a8>)
 800021c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000220:	b29a      	uxth	r2, r3
 8000222:	4b3c      	ldr	r3, [pc, #240]	; (8000314 <PID+0x1c8>)
 8000224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000228:	b29b      	uxth	r3, r3
 800022a:	4413      	add	r3, r2
 800022c:	b29a      	uxth	r2, r3
 800022e:	4b36      	ldr	r3, [pc, #216]	; (8000308 <PID+0x1bc>)
 8000230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000234:	b29b      	uxth	r3, r3
 8000236:	4413      	add	r3, r2
 8000238:	b29b      	uxth	r3, r3
 800023a:	b21a      	sxth	r2, r3
 800023c:	4b36      	ldr	r3, [pc, #216]	; (8000318 <PID+0x1cc>)
 800023e:	801a      	strh	r2, [r3, #0]

	PWMA.i16[0] = PWMBaseA.i16[0] + PWM_A.i16[0];
 8000240:	4b36      	ldr	r3, [pc, #216]	; (800031c <PID+0x1d0>)
 8000242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000246:	b29a      	uxth	r2, r3
 8000248:	4b31      	ldr	r3, [pc, #196]	; (8000310 <PID+0x1c4>)
 800024a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800024e:	b29b      	uxth	r3, r3
 8000250:	4413      	add	r3, r2
 8000252:	b29b      	uxth	r3, r3
 8000254:	b21a      	sxth	r2, r3
 8000256:	4b32      	ldr	r3, [pc, #200]	; (8000320 <PID+0x1d4>)
 8000258:	801a      	strh	r2, [r3, #0]
	PWMB.i16[0] = PWMBaseB.i16[0] - PWM_B.i16[0];
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <PID+0x1d8>)
 800025c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000260:	b29a      	uxth	r2, r3
 8000262:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <PID+0x1cc>)
 8000264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000268:	b29b      	uxth	r3, r3
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	b29b      	uxth	r3, r3
 800026e:	b21a      	sxth	r2, r3
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <PID+0x1dc>)
 8000272:	801a      	strh	r2, [r3, #0]
/**********************************************************************************/

/************************ Seteo de variables fuera de rango ************************/
	if(PWMA.i16[0] > PWMAMAX)
 8000274:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <PID+0x1d4>)
 8000276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800027a:	f641 1264 	movw	r2, #6500	; 0x1964
 800027e:	4293      	cmp	r3, r2
 8000280:	dd03      	ble.n	800028a <PID+0x13e>
		PWMA.i16[0] = PWMAMAX;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <PID+0x1d4>)
 8000284:	f641 1264 	movw	r2, #6500	; 0x1964
 8000288:	801a      	strh	r2, [r3, #0]

//	if(PWMB.i16[0] > PWMBMAX+1000)
//		PWMB.i16[0] = PWMBMAX+1000;

	if(PWMA.i16[0] < 0)
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <PID+0x1d4>)
 800028c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000290:	2b00      	cmp	r3, #0
 8000292:	da02      	bge.n	800029a <PID+0x14e>
		PWMA.i16[0] = 0;
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <PID+0x1d4>)
 8000296:	2200      	movs	r2, #0
 8000298:	801a      	strh	r2, [r3, #0]

	if(PWMB.i16[0] < 0)
 800029a:	4b23      	ldr	r3, [pc, #140]	; (8000328 <PID+0x1dc>)
 800029c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da02      	bge.n	80002aa <PID+0x15e>
		PWMB.i16[0] = 0;
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <PID+0x1dc>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/*************************** Actuacion de motores con PID **************************/
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,PWMA.i16[0]);
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <PID+0x1d4>)
 80002ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <PID+0x1e0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <PID+0x1e0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2200      	movs	r2, #0
 80002bc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,PWMB.i16[0]);
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <PID+0x1dc>)
 80002c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <PID+0x1e0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <PID+0x1e0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2200      	movs	r2, #0
 80002d0:	641a      	str	r2, [r3, #64]	; 0x40
/***********************************************************************************/

	lastError=error.i16[0];
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <PID+0x19c>)
 80002d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <PID+0x1b0>)
 80002da:	801a      	strh	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000d2a 	.word	0x20000d2a
 80002e8:	20000b94 	.word	0x20000b94
 80002ec:	20000b4c 	.word	0x20000b4c
 80002f0:	20000cc1 	.word	0x20000cc1
 80002f4:	20000d28 	.word	0x20000d28
 80002f8:	200008ac 	.word	0x200008ac
 80002fc:	200008fc 	.word	0x200008fc
 8000300:	20000948 	.word	0x20000948
 8000304:	200005c4 	.word	0x200005c4
 8000308:	200008f4 	.word	0x200008f4
 800030c:	2000070c 	.word	0x2000070c
 8000310:	20000cc4 	.word	0x20000cc4
 8000314:	20000b6e 	.word	0x20000b6e
 8000318:	20000b74 	.word	0x20000b74
 800031c:	200004c8 	.word	0x200004c8
 8000320:	20000cfc 	.word	0x20000cfc
 8000324:	20000534 	.word	0x20000534
 8000328:	20000d2c 	.word	0x20000d2c
 800032c:	200004ec 	.word	0x200004ec

08000330 <ErrorCuadratico>:

void ErrorCuadratico(){
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
/******************************* Variables locales *********************************/
	uint16_t aux[10];

	sensorValue = bufADC[iAdc][0];
 8000336:	4b85      	ldr	r3, [pc, #532]	; (800054c <ErrorCuadratico+0x21c>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4a84      	ldr	r2, [pc, #528]	; (8000550 <ErrorCuadratico+0x220>)
 800033e:	011b      	lsls	r3, r3, #4
 8000340:	4413      	add	r3, r2
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	b21a      	sxth	r2, r3
 8000346:	4b83      	ldr	r3, [pc, #524]	; (8000554 <ErrorCuadratico+0x224>)
 8000348:	801a      	strh	r2, [r3, #0]

	posMINCenter=0;
 800034a:	4b83      	ldr	r3, [pc, #524]	; (8000558 <ErrorCuadratico+0x228>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
/***********************************************************************************/

/*************************** Encuentro la menor lectura ****************************/
	for(uint8_t c=0; c<8; c++){
 8000350:	2300      	movs	r3, #0
 8000352:	75fb      	strb	r3, [r7, #23]
 8000354:	e034      	b.n	80003c0 <ErrorCuadratico+0x90>
		if(sensorValue < bufADC[iAdc][c]){
 8000356:	4b7f      	ldr	r3, [pc, #508]	; (8000554 <ErrorCuadratico+0x224>)
 8000358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800035c:	4618      	mov	r0, r3
 800035e:	4b7b      	ldr	r3, [pc, #492]	; (800054c <ErrorCuadratico+0x21c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	7dfb      	ldrb	r3, [r7, #23]
 8000368:	4979      	ldr	r1, [pc, #484]	; (8000550 <ErrorCuadratico+0x220>)
 800036a:	00d2      	lsls	r2, r2, #3
 800036c:	4413      	add	r3, r2
 800036e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000372:	4298      	cmp	r0, r3
 8000374:	da0f      	bge.n	8000396 <ErrorCuadratico+0x66>
			sensorValue = bufADC[iAdc][c];
 8000376:	4b75      	ldr	r3, [pc, #468]	; (800054c <ErrorCuadratico+0x21c>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	7dfb      	ldrb	r3, [r7, #23]
 8000380:	4973      	ldr	r1, [pc, #460]	; (8000550 <ErrorCuadratico+0x220>)
 8000382:	00d2      	lsls	r2, r2, #3
 8000384:	4413      	add	r3, r2
 8000386:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800038a:	b21a      	sxth	r2, r3
 800038c:	4b71      	ldr	r3, [pc, #452]	; (8000554 <ErrorCuadratico+0x224>)
 800038e:	801a      	strh	r2, [r3, #0]
			posMINCenter = c;
 8000390:	4a71      	ldr	r2, [pc, #452]	; (8000558 <ErrorCuadratico+0x228>)
 8000392:	7dfb      	ldrb	r3, [r7, #23]
 8000394:	7013      	strb	r3, [r2, #0]
		}
		aux[c+1]=bufADC[iAdc][c];
 8000396:	4b6d      	ldr	r3, [pc, #436]	; (800054c <ErrorCuadratico+0x21c>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b2db      	uxtb	r3, r3
 800039c:	4619      	mov	r1, r3
 800039e:	7dfa      	ldrb	r2, [r7, #23]
 80003a0:	7dfb      	ldrb	r3, [r7, #23]
 80003a2:	3301      	adds	r3, #1
 80003a4:	486a      	ldr	r0, [pc, #424]	; (8000550 <ErrorCuadratico+0x220>)
 80003a6:	00c9      	lsls	r1, r1, #3
 80003a8:	440a      	add	r2, r1
 80003aa:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	f107 0118 	add.w	r1, r7, #24
 80003b4:	440b      	add	r3, r1
 80003b6:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(uint8_t c=0; c<8; c++){
 80003ba:	7dfb      	ldrb	r3, [r7, #23]
 80003bc:	3301      	adds	r3, #1
 80003be:	75fb      	strb	r3, [r7, #23]
 80003c0:	7dfb      	ldrb	r3, [r7, #23]
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	d9c7      	bls.n	8000356 <ErrorCuadratico+0x26>
	}

	posMINCenter+=1;
 80003c6:	4b64      	ldr	r3, [pc, #400]	; (8000558 <ErrorCuadratico+0x228>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	3301      	adds	r3, #1
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b62      	ldr	r3, [pc, #392]	; (8000558 <ErrorCuadratico+0x228>)
 80003d0:	701a      	strb	r2, [r3, #0]
	aux[0]=aux[2];
 80003d2:	88bb      	ldrh	r3, [r7, #4]
 80003d4:	803b      	strh	r3, [r7, #0]
	aux[9]=aux[7];
 80003d6:	89fb      	ldrh	r3, [r7, #14]
 80003d8:	827b      	strh	r3, [r7, #18]
/***********************************************************************************/

/***************** Calculo de error segun peso asignado a sensores *****************/
	posMINDerecha=posMINCenter+1;
 80003da:	4b5f      	ldr	r3, [pc, #380]	; (8000558 <ErrorCuadratico+0x228>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b5e      	ldr	r3, [pc, #376]	; (800055c <ErrorCuadratico+0x22c>)
 80003e4:	701a      	strb	r2, [r3, #0]
	posMINIzquierda=posMINCenter-1;
 80003e6:	4b5c      	ldr	r3, [pc, #368]	; (8000558 <ErrorCuadratico+0x228>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b5c      	ldr	r3, [pc, #368]	; (8000560 <ErrorCuadratico+0x230>)
 80003f0:	701a      	strb	r2, [r3, #0]
	fx2_fx3=aux[posMINCenter]-aux[posMINDerecha];
 80003f2:	4b59      	ldr	r3, [pc, #356]	; (8000558 <ErrorCuadratico+0x228>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	f107 0218 	add.w	r2, r7, #24
 80003fc:	4413      	add	r3, r2
 80003fe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000402:	461a      	mov	r2, r3
 8000404:	4b55      	ldr	r3, [pc, #340]	; (800055c <ErrorCuadratico+0x22c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	f107 0118 	add.w	r1, r7, #24
 800040e:	440b      	add	r3, r1
 8000410:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	4a53      	ldr	r2, [pc, #332]	; (8000564 <ErrorCuadratico+0x234>)
 8000418:	6013      	str	r3, [r2, #0]
	fx2_fx1=aux[posMINCenter]-aux[posMINIzquierda];
 800041a:	4b4f      	ldr	r3, [pc, #316]	; (8000558 <ErrorCuadratico+0x228>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	f107 0218 	add.w	r2, r7, #24
 8000424:	4413      	add	r3, r2
 8000426:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800042a:	461a      	mov	r2, r3
 800042c:	4b4c      	ldr	r3, [pc, #304]	; (8000560 <ErrorCuadratico+0x230>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	f107 0118 	add.w	r1, r7, #24
 8000436:	440b      	add	r3, r1
 8000438:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	4a4a      	ldr	r2, [pc, #296]	; (8000568 <ErrorCuadratico+0x238>)
 8000440:	6013      	str	r3, [r2, #0]
	x2_x1=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINIzquierda];
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <ErrorCuadratico+0x228>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b48      	ldr	r3, [pc, #288]	; (800056c <ErrorCuadratico+0x23c>)
 800044a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b43      	ldr	r3, [pc, #268]	; (8000560 <ErrorCuadratico+0x230>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	4b45      	ldr	r3, [pc, #276]	; (800056c <ErrorCuadratico+0x23c>)
 8000458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800045c:	b29b      	uxth	r3, r3
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	b29b      	uxth	r3, r3
 8000462:	b21a      	sxth	r2, r3
 8000464:	4b42      	ldr	r3, [pc, #264]	; (8000570 <ErrorCuadratico+0x240>)
 8000466:	801a      	strh	r2, [r3, #0]
	x2_x1cuad=(x2_x1*x2_x1);
 8000468:	4b41      	ldr	r3, [pc, #260]	; (8000570 <ErrorCuadratico+0x240>)
 800046a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800046e:	b29b      	uxth	r3, r3
 8000470:	4a3f      	ldr	r2, [pc, #252]	; (8000570 <ErrorCuadratico+0x240>)
 8000472:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000476:	b292      	uxth	r2, r2
 8000478:	fb02 f303 	mul.w	r3, r2, r3
 800047c:	b29b      	uxth	r3, r3
 800047e:	b21a      	sxth	r2, r3
 8000480:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <ErrorCuadratico+0x244>)
 8000482:	801a      	strh	r2, [r3, #0]
	x2_x3=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINDerecha];
 8000484:	4b34      	ldr	r3, [pc, #208]	; (8000558 <ErrorCuadratico+0x228>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4b38      	ldr	r3, [pc, #224]	; (800056c <ErrorCuadratico+0x23c>)
 800048c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000490:	b29a      	uxth	r2, r3
 8000492:	4b32      	ldr	r3, [pc, #200]	; (800055c <ErrorCuadratico+0x22c>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	4b34      	ldr	r3, [pc, #208]	; (800056c <ErrorCuadratico+0x23c>)
 800049a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	b21a      	sxth	r2, r3
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <ErrorCuadratico+0x248>)
 80004a8:	801a      	strh	r2, [r3, #0]
	x2_x3cuad=(x2_x3*x2_x3);
 80004aa:	4b33      	ldr	r3, [pc, #204]	; (8000578 <ErrorCuadratico+0x248>)
 80004ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <ErrorCuadratico+0x248>)
 80004b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80004b8:	b292      	uxth	r2, r2
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	b29b      	uxth	r3, r3
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	4b2e      	ldr	r3, [pc, #184]	; (800057c <ErrorCuadratico+0x24c>)
 80004c4:	801a      	strh	r2, [r3, #0]
	denominador=-(2*(x2_x1*fx2_fx3-x2_x3*fx2_fx1));
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <ErrorCuadratico+0x240>)
 80004c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <ErrorCuadratico+0x234>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	fb03 f202 	mul.w	r2, r3, r2
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <ErrorCuadratico+0x248>)
 80004d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004dc:	4619      	mov	r1, r3
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <ErrorCuadratico+0x238>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	fb03 f301 	mul.w	r3, r3, r1
 80004e6:	1ad2      	subs	r2, r2, r3
 80004e8:	4613      	mov	r3, r2
 80004ea:	07db      	lsls	r3, r3, #31
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <ErrorCuadratico+0x250>)
 80004f4:	601a      	str	r2, [r3, #0]
	if(denominador!= 0){
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <ErrorCuadratico+0x250>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d021      	beq.n	8000542 <ErrorCuadratico+0x212>
		error.i16[0]=(int16_t)COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <ErrorCuadratico+0x228>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <ErrorCuadratico+0x23c>)
 8000506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <ErrorCuadratico+0x244>)
 800050e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000512:	4619      	mov	r1, r3
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <ErrorCuadratico+0x234>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	fb03 f101 	mul.w	r1, r3, r1
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <ErrorCuadratico+0x24c>)
 800051e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000522:	4618      	mov	r0, r3
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <ErrorCuadratico+0x238>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	fb03 f300 	mul.w	r3, r3, r0
 800052c:	1ac9      	subs	r1, r1, r3
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <ErrorCuadratico+0x250>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	fb91 f3f3 	sdiv	r3, r1, r3
 8000536:	b29b      	uxth	r3, r3
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	b29b      	uxth	r3, r3
 800053c:	b21a      	sxth	r2, r3
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <ErrorCuadratico+0x254>)
 8000540:	801a      	strh	r2, [r3, #0]
	}
/***********************************************************************************/
}
 8000542:	bf00      	nop
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000771 	.word	0x20000771
 8000550:	2000094c 	.word	0x2000094c
 8000554:	20000cbc 	.word	0x20000cbc
 8000558:	20000774 	.word	0x20000774
 800055c:	20000724 	.word	0x20000724
 8000560:	20000d6c 	.word	0x20000d6c
 8000564:	20000d70 	.word	0x20000d70
 8000568:	20000cb8 	.word	0x20000cb8
 800056c:	0800c21c 	.word	0x0800c21c
 8000570:	200005e8 	.word	0x200005e8
 8000574:	20000554 	.word	0x20000554
 8000578:	200004e8 	.word	0x200004e8
 800057c:	200008fa 	.word	0x200008fa
 8000580:	20000710 	.word	0x20000710
 8000584:	20000b94 	.word	0x20000b94

08000588 <Reset>:

void Reset(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	espConnected = 0;
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <Reset+0x3c>)
 800058e:	7813      	ldrb	r3, [r2, #0]
 8000590:	f36f 0300 	bfc	r3, #0, #1
 8000594:	7013      	strb	r3, [r2, #0]
	ESPReadyToRecyb = 1;
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <Reset+0x3c>)
 8000598:	7813      	ldrb	r3, [r2, #0]
 800059a:	f043 0320 	orr.w	r3, r3, #32
 800059e:	7013      	strb	r3, [r2, #0]
	ResetESP = 1;
 80005a0:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <Reset+0x40>)
 80005a2:	7813      	ldrb	r3, [r2, #0]
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	7013      	strb	r3, [r2, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <Reset+0x44>)
 80005ac:	f006 fde8 	bl	8007180 <HAL_UART_AbortReceive_IT>
	HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_RESET);//Reset ESP8266
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <Reset+0x48>)
 80005b6:	f003 fafc 	bl	8003bb2 <HAL_GPIO_WritePin>
	DecodeTimeOut = 20;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <Reset+0x4c>)
 80005bc:	2214      	movs	r2, #20
 80005be:	801a      	strh	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200008f8 	.word	0x200008f8
 80005c8:	20000770 	.word	0x20000770
 80005cc:	200008b0 	.word	0x200008b0
 80005d0:	40010c00 	.word	0x40010c00
 80005d4:	2000056c 	.word	0x2000056c

080005d8 <InitEsp>:

void InitEsp(_Rx *RXUSART1){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	switch(Estado){
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <InitEsp+0xa0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d83a      	bhi.n	800065e <InitEsp+0x86>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <InitEsp+0x18>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000605 	.word	0x08000605
 80005f4:	08000617 	.word	0x08000617
 80005f8:	08000629 	.word	0x08000629
 80005fc:	0800063b 	.word	0x0800063b
 8000600:	0800064d 	.word	0x0800064d
		case 0:
			PutStrOnTx((_Tx *)&TXUSART1,AT); //Envio comando AT para ver si responde el ESP
 8000604:	491d      	ldr	r1, [pc, #116]	; (800067c <InitEsp+0xa4>)
 8000606:	481e      	ldr	r0, [pc, #120]	; (8000680 <InitEsp+0xa8>)
 8000608:	f001 f80b 	bl	8001622 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,AT);    // Depuracion por USB
 800060c:	491b      	ldr	r1, [pc, #108]	; (800067c <InitEsp+0xa4>)
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <InitEsp+0xac>)
 8000610:	f001 f807 	bl	8001622 <PutStrOnTx>
		break;
 8000614:	e023      	b.n	800065e <InitEsp+0x86>

		case 1:
			PutStrOnTx((_Tx *)&TXUSART1,CWMODE); //Envio comando CWMODE
 8000616:	491c      	ldr	r1, [pc, #112]	; (8000688 <InitEsp+0xb0>)
 8000618:	4819      	ldr	r0, [pc, #100]	; (8000680 <InitEsp+0xa8>)
 800061a:	f001 f802 	bl	8001622 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWMODE);    // Depuracion por USB
 800061e:	491a      	ldr	r1, [pc, #104]	; (8000688 <InitEsp+0xb0>)
 8000620:	4818      	ldr	r0, [pc, #96]	; (8000684 <InitEsp+0xac>)
 8000622:	f000 fffe 	bl	8001622 <PutStrOnTx>

		break;
 8000626:	e01a      	b.n	800065e <InitEsp+0x86>

		case 2:
			PutStrOnTx((_Tx *)&TXUSART1,CWJAP_); //Envio comando CWJAP con los datos de la red
 8000628:	4918      	ldr	r1, [pc, #96]	; (800068c <InitEsp+0xb4>)
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <InitEsp+0xa8>)
 800062c:	f000 fff9 	bl	8001622 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWJAP_);    // Depuracion por USB
 8000630:	4916      	ldr	r1, [pc, #88]	; (800068c <InitEsp+0xb4>)
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <InitEsp+0xac>)
 8000634:	f000 fff5 	bl	8001622 <PutStrOnTx>

		break;
 8000638:	e011      	b.n	800065e <InitEsp+0x86>

		case 3:
			PutStrOnTx((_Tx *)&TXUSART1,CIPMUX);
 800063a:	4915      	ldr	r1, [pc, #84]	; (8000690 <InitEsp+0xb8>)
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <InitEsp+0xa8>)
 800063e:	f000 fff0 	bl	8001622 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPMUX);    // Depuracion por USB
 8000642:	4913      	ldr	r1, [pc, #76]	; (8000690 <InitEsp+0xb8>)
 8000644:	480f      	ldr	r0, [pc, #60]	; (8000684 <InitEsp+0xac>)
 8000646:	f000 ffec 	bl	8001622 <PutStrOnTx>

		break;
 800064a:	e008      	b.n	800065e <InitEsp+0x86>

		case 4:
			PutStrOnTx((_Tx *)&TXUSART1,CIPSTART);
 800064c:	4911      	ldr	r1, [pc, #68]	; (8000694 <InitEsp+0xbc>)
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <InitEsp+0xa8>)
 8000650:	f000 ffe7 	bl	8001622 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPSTART);    // Depuracion por USB
 8000654:	490f      	ldr	r1, [pc, #60]	; (8000694 <InitEsp+0xbc>)
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <InitEsp+0xac>)
 8000658:	f000 ffe3 	bl	8001622 <PutStrOnTx>

		break;
 800065c:	bf00      	nop
	}
	DecodeTimeOut = 4;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <InitEsp+0xc0>)
 8000660:	2204      	movs	r2, #4
 8000662:	801a      	strh	r2, [r3, #0]
	ESPReadyToRecyb = 1;
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <InitEsp+0xc4>)
 8000666:	7813      	ldrb	r3, [r2, #0]
 8000668:	f043 0320 	orr.w	r3, r3, #32
 800066c:	7013      	strb	r3, [r2, #0]
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200007a9 	.word	0x200007a9
 800067c:	0800c08c 	.word	0x0800c08c
 8000680:	20000d1c 	.word	0x20000d1c
 8000684:	20000718 	.word	0x20000718
 8000688:	0800c110 	.word	0x0800c110
 800068c:	0800c094 	.word	0x0800c094
 8000690:	0800c0c4 	.word	0x0800c0c4
 8000694:	0800c0d4 	.word	0x0800c0d4
 8000698:	2000056c 	.word	0x2000056c
 800069c:	200008f8 	.word	0x200008f8

080006a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
/***************** Contadores para control del flujo de tiempo ********************/
/*
 * Instancia cada 1ms
 *
 */
	if(htim->Instance == TIM4){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d133      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x7a>
		Count100ms--;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3b01      	subs	r3, #1
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006be:	801a      	strh	r2, [r3, #0]
		Countms--;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	3b01      	subs	r3, #1
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80006cc:	801a      	strh	r2, [r3, #0]
		Count5ms--;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80006da:	801a      	strh	r2, [r3, #0]
		if(!Count100ms){
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d105      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x52>
			Count100ms = 100;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	801a      	strh	r2, [r3, #0]
			On100ms = 1;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	801a      	strh	r2, [r3, #0]
		}

		if(RXUSB.header) {
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80006f4:	79db      	ldrb	r3, [r3, #7]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00e      	beq.n	800071a <HAL_TIM_PeriodElapsedCallback+0x7a>
			RXUSB.timeout--;
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80006fe:	7bdb      	ldrb	r3, [r3, #15]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	3b01      	subs	r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000708:	73da      	strb	r2, [r3, #15]
			if(!RXUSB.timeout)
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800070c:	7bdb      	ldrb	r3, [r3, #15]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x7a>
				RXUSB.header = 0;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000716:	2200      	movs	r2, #0
 8000718:	71da      	strb	r2, [r3, #7]
/************************* Incio lectura analogica por DMA *************************/
/*
 * Instancia cada 500us
 *
 */
	if(htim->Instance == TIM3){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d10a      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x9a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800072e:	4413      	add	r3, r2
 8000730:	2208      	movs	r2, #8
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000736:	f002 fa0b 	bl	8002b50 <HAL_ADC_Start_DMA>
	}
/***********************************************************************************/

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40000800 	.word	0x40000800
 8000748:	20000bb4 	.word	0x20000bb4
 800074c:	200004ea 	.word	0x200004ea
 8000750:	20000772 	.word	0x20000772
 8000754:	200005c6 	.word	0x200005c6
 8000758:	20000ce8 	.word	0x20000ce8
 800075c:	40000400 	.word	0x40000400
 8000760:	20000771 	.word	0x20000771
 8000764:	2000094c 	.word	0x2000094c
 8000768:	20000778 	.word	0x20000778

0800076c <DecodeESP>:

void DecodeESP(_Rx *RXUSART1){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

	if((espConnected) && (!DecodeHeaderESP)){
 8000774:	4b9d      	ldr	r3, [pc, #628]	; (80009ec <DecodeESP+0x280>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 80a3 	beq.w	80008ca <DecodeESP+0x15e>
 8000784:	4b99      	ldr	r3, [pc, #612]	; (80009ec <DecodeESP+0x280>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	f040 809b 	bne.w	80008ca <DecodeESP+0x15e>
		//Decodifica \r\n+IPD,
		if((RXUSART1->Buff[RXUSART1->ir] == IPD[IndiceIPD]) && (IndiceIPD < 7)){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	7952      	ldrb	r2, [r2, #5]
 800079c:	4413      	add	r3, r2
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	4b93      	ldr	r3, [pc, #588]	; (80009f0 <DecodeESP+0x284>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4b93      	ldr	r3, [pc, #588]	; (80009f4 <DecodeESP+0x288>)
 80007a8:	5c5b      	ldrb	r3, [r3, r1]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d116      	bne.n	80007dc <DecodeESP+0x70>
 80007ae:	4b90      	ldr	r3, [pc, #576]	; (80009f0 <DecodeESP+0x284>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d812      	bhi.n	80007dc <DecodeESP+0x70>
			IndiceIPD++;
 80007b6:	4b8e      	ldr	r3, [pc, #568]	; (80009f0 <DecodeESP+0x284>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <DecodeESP+0x284>)
 80007c0:	701a      	strb	r2, [r3, #0]
			if(IndiceIPD == 7){
 80007c2:	4b8b      	ldr	r3, [pc, #556]	; (80009f0 <DecodeESP+0x284>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d117      	bne.n	80007fa <DecodeESP+0x8e>
				DecodeIPD = 1;
 80007ca:	4a88      	ldr	r2, [pc, #544]	; (80009ec <DecodeESP+0x280>)
 80007cc:	7813      	ldrb	r3, [r2, #0]
 80007ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d2:	7013      	strb	r3, [r2, #0]
				IndiceIPD = 0;
 80007d4:	4b86      	ldr	r3, [pc, #536]	; (80009f0 <DecodeESP+0x284>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
			if(IndiceIPD == 7){
 80007da:	e00e      	b.n	80007fa <DecodeESP+0x8e>
			}
		}
		else{
			if((IndiceIPD > 0) && (!DecodeIPD)){
 80007dc:	4b84      	ldr	r3, [pc, #528]	; (80009f0 <DecodeESP+0x284>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00a      	beq.n	80007fa <DecodeESP+0x8e>
 80007e4:	4b81      	ldr	r3, [pc, #516]	; (80009ec <DecodeESP+0x280>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <DecodeESP+0x8e>
				IndiceIPD = 0;
 80007f2:	4b7f      	ldr	r3, [pc, #508]	; (80009f0 <DecodeESP+0x284>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
//				RXUSART1->ir = RXUSART1->iw;
				return;
 80007f8:	e1d5      	b.n	8000ba6 <DecodeESP+0x43a>
			}
		}

		if(DecodeIPD){
 80007fa:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <DecodeESP+0x280>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d012      	beq.n	800082e <DecodeESP+0xc2>
			if(RXUSART1->Buff[RXUSART1->ir]==':'){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	7952      	ldrb	r2, [r2, #5]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b3a      	cmp	r3, #58	; 0x3a
 8000816:	d10a      	bne.n	800082e <DecodeESP+0xc2>
				DecodeHeaderESP = 1;
 8000818:	4a74      	ldr	r2, [pc, #464]	; (80009ec <DecodeESP+0x280>)
 800081a:	7813      	ldrb	r3, [r2, #0]
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	7013      	strb	r3, [r2, #0]
				DecodeIPD = 0;
 8000822:	4a72      	ldr	r2, [pc, #456]	; (80009ec <DecodeESP+0x280>)
 8000824:	7813      	ldrb	r3, [r2, #0]
 8000826:	f36f 1386 	bfc	r3, #6, #1
 800082a:	7013      	strb	r3, [r2, #0]
				return;
 800082c:	e1bb      	b.n	8000ba6 <DecodeESP+0x43a>
			}
		}

		//Decodifica WIFI DISCONNECT\r\n
		if(RXUSART1->Buff[RXUSART1->ir] == WIFI_DISCONNECT[IndiceDisconnect]){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7952      	ldrb	r2, [r2, #5]
 8000836:	4413      	add	r3, r2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <DecodeESP+0x28c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	4b6e      	ldr	r3, [pc, #440]	; (80009fc <DecodeESP+0x290>)
 8000842:	5c5b      	ldrb	r3, [r3, r1]
 8000844:	429a      	cmp	r2, r3
 8000846:	d10f      	bne.n	8000868 <DecodeESP+0xfc>
			IndiceDisconnect++;
 8000848:	4b6b      	ldr	r3, [pc, #428]	; (80009f8 <DecodeESP+0x28c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b69      	ldr	r3, [pc, #420]	; (80009f8 <DecodeESP+0x28c>)
 8000852:	701a      	strb	r2, [r3, #0]
			if(IndiceDisconnect == 17){
 8000854:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <DecodeESP+0x28c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b11      	cmp	r3, #17
 800085a:	d10c      	bne.n	8000876 <DecodeESP+0x10a>
				IndiceDisconnect=0;
 800085c:	4b66      	ldr	r3, [pc, #408]	; (80009f8 <DecodeESP+0x28c>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
				Reset();
 8000862:	f7ff fe91 	bl	8000588 <Reset>
 8000866:	e006      	b.n	8000876 <DecodeESP+0x10a>
			}
		}
		else{
			if(IndiceDisconnect > 0){
 8000868:	4b63      	ldr	r3, [pc, #396]	; (80009f8 <DecodeESP+0x28c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <DecodeESP+0x10a>
				IndiceDisconnect = 0;
 8000870:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <DecodeESP+0x28c>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			}
		}

		//Decodifica ERROR
		if(RXUSART1->Buff[RXUSART1->ir] == Error[IndiceError]){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	7952      	ldrb	r2, [r2, #5]
 800087e:	4413      	add	r3, r2
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <DecodeESP+0x294>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4b5e      	ldr	r3, [pc, #376]	; (8000a04 <DecodeESP+0x298>)
 800088a:	5c5b      	ldrb	r3, [r3, r1]
 800088c:	429a      	cmp	r2, r3
 800088e:	d10f      	bne.n	80008b0 <DecodeESP+0x144>
			IndiceError++;
 8000890:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <DecodeESP+0x294>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b59      	ldr	r3, [pc, #356]	; (8000a00 <DecodeESP+0x294>)
 800089a:	701a      	strb	r2, [r3, #0]
			if(IndiceError == 9){
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <DecodeESP+0x294>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b09      	cmp	r3, #9
 80008a2:	d10c      	bne.n	80008be <DecodeESP+0x152>
				IndiceError=0;
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <DecodeESP+0x294>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
				Reset();
 80008aa:	f7ff fe6d 	bl	8000588 <Reset>
 80008ae:	e006      	b.n	80008be <DecodeESP+0x152>
			}
		}
		else{
			if(IndiceError > 0){
 80008b0:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <DecodeESP+0x294>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <DecodeESP+0x152>
				IndiceError = 0;
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <DecodeESP+0x294>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
			}
		}

		RXUSART1->ir++;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	795b      	ldrb	r3, [r3, #5]
 80008c2:	3301      	adds	r3, #1
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	715a      	strb	r2, [r3, #5]
	}

	//Decodifica inicializacion de ESP8266
	if((!espConnected) && (!DecodeTimeOut)){
 80008ca:	4b48      	ldr	r3, [pc, #288]	; (80009ec <DecodeESP+0x280>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f040 8166 	bne.w	8000ba6 <DecodeESP+0x43a>
 80008da:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <DecodeESP+0x29c>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f040 8160 	bne.w	8000ba6 <DecodeESP+0x43a>
		switch(Estado){
 80008e6:	4b49      	ldr	r3, [pc, #292]	; (8000a0c <DecodeESP+0x2a0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	f200 815b 	bhi.w	8000ba6 <DecodeESP+0x43a>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <DecodeESP+0x18c>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	0800090d 	.word	0x0800090d
 80008fc:	0800097b 	.word	0x0800097b
 8000900:	08000a1d 	.word	0x08000a1d
 8000904:	08000a8f 	.word	0x08000a8f
 8000908:	08000b09 	.word	0x08000b09
			case 0:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_AT[Indice]){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7952      	ldrb	r2, [r2, #5]
 8000914:	4413      	add	r3, r2
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <DecodeESP+0x2a4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <DecodeESP+0x2a8>)
 8000920:	5c5b      	ldrb	r3, [r3, r1]
 8000922:	429a      	cmp	r2, r3
 8000924:	d11c      	bne.n	8000960 <DecodeESP+0x1f4>
					Indice ++;
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <DecodeESP+0x2a4>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <DecodeESP+0x2a4>)
 8000930:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	3301      	adds	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	715a      	strb	r2, [r3, #5]
					if(Indice == 10){
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <DecodeESP+0x2a4>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b0a      	cmp	r3, #10
 8000944:	f040 8126 	bne.w	8000b94 <DecodeESP+0x428>
						Indice = 0;
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <DecodeESP+0x2a4>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
						Estado = 1;
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <DecodeESP+0x2a0>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000954:	4a25      	ldr	r2, [pc, #148]	; (80009ec <DecodeESP+0x280>)
 8000956:	7813      	ldrb	r3, [r2, #0]
 8000958:	f36f 1345 	bfc	r3, #5, #1
 800095c:	7013      	strb	r3, [r2, #0]
				else{
					RXUSART1->ir = RXUSART1->iw;
					Indice = 0;
					ESPReadyToRecyb = 0;
				}
			break;
 800095e:	e119      	b.n	8000b94 <DecodeESP+0x428>
					RXUSART1->ir = RXUSART1->iw;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791a      	ldrb	r2, [r3, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	715a      	strb	r2, [r3, #5]
					Indice = 0;
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <DecodeESP+0x2a4>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
					ESPReadyToRecyb = 0;
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <DecodeESP+0x280>)
 8000970:	7813      	ldrb	r3, [r2, #0]
 8000972:	f36f 1345 	bfc	r3, #5, #1
 8000976:	7013      	strb	r3, [r2, #0]
			break;
 8000978:	e10c      	b.n	8000b94 <DecodeESP+0x428>

			case 1:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWMODE[Indice]){
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	7952      	ldrb	r2, [r2, #5]
 8000982:	4413      	add	r3, r2
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <DecodeESP+0x2a4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <DecodeESP+0x2ac>)
 800098e:	5c5b      	ldrb	r3, [r3, r1]
 8000990:	429a      	cmp	r2, r3
 8000992:	d11c      	bne.n	80009ce <DecodeESP+0x262>
					Indice++;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <DecodeESP+0x2a4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <DecodeESP+0x2a4>)
 800099e:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	715a      	strb	r2, [r3, #5]
					if(Indice==19){
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <DecodeESP+0x2a4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b13      	cmp	r3, #19
 80009b2:	f040 80f1 	bne.w	8000b98 <DecodeESP+0x42c>
						Indice=0;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <DecodeESP+0x2a4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
						Estado = 2;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <DecodeESP+0x2a0>)
 80009be:	2202      	movs	r2, #2
 80009c0:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <DecodeESP+0x280>)
 80009c4:	7813      	ldrb	r3, [r2, #0]
 80009c6:	f36f 1345 	bfc	r3, #5, #1
 80009ca:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 80009cc:	e0e4      	b.n	8000b98 <DecodeESP+0x42c>
					if(Indice>0){
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <DecodeESP+0x2a4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d006      	beq.n	80009e4 <DecodeESP+0x278>
						RXUSART1->ir = RXUSART1->iw;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791a      	ldrb	r2, [r3, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	715a      	strb	r2, [r3, #5]
						Indice=0;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <DecodeESP+0x2a4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <DecodeESP+0x2a0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
			break;
 80009ea:	e0d5      	b.n	8000b98 <DecodeESP+0x42c>
 80009ec:	200008f8 	.word	0x200008f8
 80009f0:	20000b6c 	.word	0x20000b6c
 80009f4:	0800c208 	.word	0x0800c208
 80009f8:	20000cc0 	.word	0x20000cc0
 80009fc:	0800c1f4 	.word	0x0800c1f4
 8000a00:	200007a8 	.word	0x200007a8
 8000a04:	0800c210 	.word	0x0800c210
 8000a08:	2000056c 	.word	0x2000056c
 8000a0c:	200007a9 	.word	0x200007a9
 8000a10:	200008f9 	.word	0x200008f9
 8000a14:	0800c1e8 	.word	0x0800c1e8
 8000a18:	0800c120 	.word	0x0800c120

			case 2:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWJAP_[Indice]){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	7952      	ldrb	r2, [r2, #5]
 8000a24:	4413      	add	r3, r2
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	4b60      	ldr	r3, [pc, #384]	; (8000bac <DecodeESP+0x440>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <DecodeESP+0x444>)
 8000a30:	5c5b      	ldrb	r3, [r3, r1]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d11c      	bne.n	8000a70 <DecodeESP+0x304>
					Indice++;
 8000a36:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <DecodeESP+0x440>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <DecodeESP+0x440>)
 8000a40:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	795b      	ldrb	r3, [r3, #5]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	715a      	strb	r2, [r3, #5]
					if(Indice==LONG_ANS_CWJAP_){
 8000a4e:	4b57      	ldr	r3, [pc, #348]	; (8000bac <DecodeESP+0x440>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b61      	cmp	r3, #97	; 0x61
 8000a54:	f040 80a2 	bne.w	8000b9c <DecodeESP+0x430>
						Indice = 0;
 8000a58:	4b54      	ldr	r3, [pc, #336]	; (8000bac <DecodeESP+0x440>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
						Estado = 3;
 8000a5e:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <DecodeESP+0x448>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000a64:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <DecodeESP+0x44c>)
 8000a66:	7813      	ldrb	r3, [r2, #0]
 8000a68:	f36f 1345 	bfc	r3, #5, #1
 8000a6c:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 8000a6e:	e095      	b.n	8000b9c <DecodeESP+0x430>
					if(Indice>0){
 8000a70:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <DecodeESP+0x440>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <DecodeESP+0x31a>
						RXUSART1->ir = RXUSART1->iw;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	791a      	ldrb	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	715a      	strb	r2, [r3, #5]
						Indice=0;
 8000a80:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <DecodeESP+0x440>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 8000a86:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <DecodeESP+0x448>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
			break;
 8000a8c:	e086      	b.n	8000b9c <DecodeESP+0x430>

			case 3:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPMUX[Indice]){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	7952      	ldrb	r2, [r2, #5]
 8000a96:	4413      	add	r3, r2
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b44      	ldr	r3, [pc, #272]	; (8000bac <DecodeESP+0x440>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <DecodeESP+0x450>)
 8000aa2:	5c5b      	ldrb	r3, [r3, r1]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d11b      	bne.n	8000ae0 <DecodeESP+0x374>
						Indice++;
 8000aa8:	4b40      	ldr	r3, [pc, #256]	; (8000bac <DecodeESP+0x440>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <DecodeESP+0x440>)
 8000ab2:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	715a      	strb	r2, [r3, #5]
						if(Indice == 19){
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <DecodeESP+0x440>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b13      	cmp	r3, #19
 8000ac6:	d16b      	bne.n	8000ba0 <DecodeESP+0x434>
							Indice = 0;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	; (8000bac <DecodeESP+0x440>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
							Estado = 4;
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <DecodeESP+0x448>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	701a      	strb	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 8000ad4:	4a38      	ldr	r2, [pc, #224]	; (8000bb8 <DecodeESP+0x44c>)
 8000ad6:	7813      	ldrb	r3, [r2, #0]
 8000ad8:	f36f 1345 	bfc	r3, #5, #1
 8000adc:	7013      	strb	r3, [r2, #0]
							Indice = 0;
						}
						Estado = 0;
						ESPReadyToRecyb = 0;
					}
			break;
 8000ade:	e05f      	b.n	8000ba0 <DecodeESP+0x434>
						if(Indice>0){
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <DecodeESP+0x440>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <DecodeESP+0x38a>
							RXUSART1->ir = RXUSART1->iw;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	791a      	ldrb	r2, [r3, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <DecodeESP+0x440>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
						Estado = 0;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <DecodeESP+0x448>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <DecodeESP+0x44c>)
 8000afe:	7813      	ldrb	r3, [r2, #0]
 8000b00:	f36f 1345 	bfc	r3, #5, #1
 8000b04:	7013      	strb	r3, [r2, #0]
			break;
 8000b06:	e04b      	b.n	8000ba0 <DecodeESP+0x434>

			case 4:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPSTART[Indice]){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	7952      	ldrb	r2, [r2, #5]
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <DecodeESP+0x440>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <DecodeESP+0x454>)
 8000b1c:	5c5b      	ldrb	r3, [r3, r1]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d11e      	bne.n	8000b60 <DecodeESP+0x3f4>
						Indice++;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <DecodeESP+0x440>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <DecodeESP+0x440>)
 8000b2c:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	715a      	strb	r2, [r3, #5]
						if(Indice == LONG_ANS_CIPSTART ){
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <DecodeESP+0x440>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b3b      	cmp	r3, #59	; 0x3b
 8000b40:	d130      	bne.n	8000ba4 <DecodeESP+0x438>
							Indice = 0;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <DecodeESP+0x440>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <DecodeESP+0x44c>)
 8000b4a:	7813      	ldrb	r3, [r2, #0]
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <DecodeESP+0x448>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
							Countms = 70;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <DecodeESP+0x458>)
 8000b5a:	2246      	movs	r2, #70	; 0x46
 8000b5c:	801a      	strh	r2, [r3, #0]
							Countms = 70;
							Estado = 0;
						}
						Estado = 0;
					}
			break;
 8000b5e:	e021      	b.n	8000ba4 <DecodeESP+0x438>
						if(Indice>0){
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <DecodeESP+0x440>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d011      	beq.n	8000b8c <DecodeESP+0x420>
							RXUSART1->ir = RXUSART1->iw;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	791a      	ldrb	r2, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <DecodeESP+0x440>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <DecodeESP+0x44c>)
 8000b78:	7813      	ldrb	r3, [r2, #0]
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	7013      	strb	r3, [r2, #0]
							Countms = 70;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <DecodeESP+0x458>)
 8000b82:	2246      	movs	r2, #70	; 0x46
 8000b84:	801a      	strh	r2, [r3, #0]
							Estado = 0;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <DecodeESP+0x448>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
						Estado = 0;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <DecodeESP+0x448>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
			break;
 8000b92:	e007      	b.n	8000ba4 <DecodeESP+0x438>
			break;
 8000b94:	bf00      	nop
 8000b96:	e006      	b.n	8000ba6 <DecodeESP+0x43a>
			break;
 8000b98:	bf00      	nop
 8000b9a:	e004      	b.n	8000ba6 <DecodeESP+0x43a>
			break;
 8000b9c:	bf00      	nop
 8000b9e:	e002      	b.n	8000ba6 <DecodeESP+0x43a>
			break;
 8000ba0:	bf00      	nop
 8000ba2:	e000      	b.n	8000ba6 <DecodeESP+0x43a>
			break;
 8000ba4:	bf00      	nop
		}
	}
}
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200008f9 	.word	0x200008f9
 8000bb0:	0800c134 	.word	0x0800c134
 8000bb4:	200007a9 	.word	0x200007a9
 8000bb8:	200008f8 	.word	0x200008f8
 8000bbc:	0800c198 	.word	0x0800c198
 8000bc0:	0800c1ac 	.word	0x0800c1ac
 8000bc4:	200004ea 	.word	0x200004ea

08000bc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <HAL_UART_RxCpltCallback+0x40>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d111      	bne.n	8000bfe <HAL_UART_RxCpltCallback+0x36>
//		TXUSB.Buff[TXUSB.iw++] = rxUSART1Buff[RXUSART1.iw];
		RXUSART1.iw++;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_UART_RxCpltCallback+0x44>)
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_UART_RxCpltCallback+0x44>)
 8000be6:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_UART_RxCpltCallback+0x44>)
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_UART_RxCpltCallback+0x48>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <HAL_UART_RxCpltCallback+0x4c>)
 8000bfa:	f006 fa90 	bl	800711e <HAL_UART_Receive_IT>
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	20000558 	.word	0x20000558
 8000c10:	2000019c 	.word	0x2000019c
 8000c14:	200008b0 	.word	0x200008b0

08000c18 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	// Incrento indice del buffer
	iAdc++;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d102      	bne.n	8000c3e <HAL_ADC_ConvCpltCallback+0x26>
		iAdc = 0;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
	}
//	ADC();
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000771 	.word	0x20000771

08000c4c <MyCallBackOnUSBData>:
			break;
		}
	}
/***********************************************************************************/
}
void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e010      	b.n	8000c7e <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	441a      	add	r2, r3
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MyCallBackOnUSBData+0x48>)
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	1c59      	adds	r1, r3, #1
 8000c6a:	b2c8      	uxtb	r0, r1
 8000c6c:	4909      	ldr	r1, [pc, #36]	; (8000c94 <MyCallBackOnUSBData+0x48>)
 8000c6e:	7108      	strb	r0, [r1, #4]
 8000c70:	4619      	mov	r1, r3
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MyCallBackOnUSBData+0x4c>)
 8000c76:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d3ea      	bcc.n	8000c5c <MyCallBackOnUSBData+0x10>
	}
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000ce8 	.word	0x20000ce8
 8000c98:	200005ec 	.word	0x200005ec

08000c9c <DecodeHeader>:

void DecodeHeader(_Rx *RX)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 8000caa:	e0ed      	b.n	8000e88 <DecodeHeader+0x1ec>
        switch(RX->header) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	79db      	ldrb	r3, [r3, #7]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	f200 80c7 	bhi.w	8000e44 <DecodeHeader+0x1a8>
 8000cb6:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <DecodeHeader+0x20>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000cd9 	.word	0x08000cd9
 8000cc0:	08000cf9 	.word	0x08000cf9
 8000cc4:	08000d25 	.word	0x08000d25
 8000cc8:	08000d51 	.word	0x08000d51
 8000ccc:	08000d7d 	.word	0x08000d7d
 8000cd0:	08000d95 	.word	0x08000d95
 8000cd4:	08000deb 	.word	0x08000deb
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	7952      	ldrb	r2, [r2, #5]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b55      	cmp	r3, #85	; 0x55
 8000ce6:	f040 80b6 	bne.w	8000e56 <DecodeHeader+0x1ba>
                    RX->header = 1;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2205      	movs	r2, #5
 8000cf4:	73da      	strb	r2, [r3, #15]
                }
                break;
 8000cf6:	e0ae      	b.n	8000e56 <DecodeHeader+0x1ba>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	7952      	ldrb	r2, [r2, #5]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b4e      	cmp	r3, #78	; 0x4e
 8000d06:	d103      	bne.n	8000d10 <DecodeHeader+0x74>
                    RX->header = 2;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000d0e:	e0a5      	b.n	8000e5c <DecodeHeader+0x1c0>
                    RX->header = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	795b      	ldrb	r3, [r3, #5]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	715a      	strb	r2, [r3, #5]
                break;
 8000d22:	e09b      	b.n	8000e5c <DecodeHeader+0x1c0>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	7952      	ldrb	r2, [r2, #5]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b45      	cmp	r3, #69	; 0x45
 8000d32:	d103      	bne.n	8000d3c <DecodeHeader+0xa0>
                    RX->header = 3;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000d3a:	e08f      	b.n	8000e5c <DecodeHeader+0x1c0>
                    RX->header = 0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	715a      	strb	r2, [r3, #5]
                break;
 8000d4e:	e085      	b.n	8000e5c <DecodeHeader+0x1c0>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	7952      	ldrb	r2, [r2, #5]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b52      	cmp	r3, #82	; 0x52
 8000d5e:	d103      	bne.n	8000d68 <DecodeHeader+0xcc>
                    RX->header = 4;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2204      	movs	r2, #4
 8000d64:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000d66:	e079      	b.n	8000e5c <DecodeHeader+0x1c0>
                    RX->header = 0 ;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	795b      	ldrb	r3, [r3, #5]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	715a      	strb	r2, [r3, #5]
                break;
 8000d7a:	e06f      	b.n	8000e5c <DecodeHeader+0x1c0>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	7952      	ldrb	r2, [r2, #5]
 8000d84:	4413      	add	r3, r2
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2205      	movs	r2, #5
 8000d90:	71da      	strb	r2, [r3, #7]
                break;
 8000d92:	e063      	b.n	8000e5c <DecodeHeader+0x1c0>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	7952      	ldrb	r2, [r2, #5]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b3a      	cmp	r3, #58	; 0x3a
 8000da2:	d118      	bne.n	8000dd6 <DecodeHeader+0x13a>
                    RX->header = 6;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2206      	movs	r2, #6
 8000da8:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	735a      	strb	r2, [r3, #13]
                    RX->iData &= RX->maskSize;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7b5a      	ldrb	r2, [r3, #13]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7b9b      	ldrb	r3, [r3, #14]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	735a      	strb	r2, [r3, #13]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7adb      	ldrb	r3, [r3, #11]
 8000dca:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000dd4:	e042      	b.n	8000e5c <DecodeHeader+0x1c0>
                    RX->header = 0 ;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	795b      	ldrb	r3, [r3, #5]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	715a      	strb	r2, [r3, #5]
                break;
 8000de8:	e038      	b.n	8000e5c <DecodeHeader+0x1c0>
            case 6:
                RX->nbytes--;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7adb      	ldrb	r3, [r3, #11]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7adb      	ldrb	r3, [r3, #11]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00c      	beq.n	8000e18 <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7a5a      	ldrb	r2, [r3, #9]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	7949      	ldrb	r1, [r1, #5]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4053      	eors	r3, r2
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	725a      	strb	r2, [r3, #9]
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                        DecodeHeaderESP = 0;
                    }
                }
                break;
 8000e16:	e020      	b.n	8000e5a <DecodeHeader+0x1be>
                    RX->header = 0 ;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7a5a      	ldrb	r2, [r3, #9]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	7949      	ldrb	r1, [r1, #5]
 8000e2a:	440b      	add	r3, r1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d113      	bne.n	8000e5a <DecodeHeader+0x1be>
                        RX->ISCMD = 1;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	719a      	strb	r2, [r3, #6]
                        DecodeHeaderESP = 0;
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <DecodeHeader+0x204>)
 8000e3a:	7813      	ldrb	r3, [r2, #0]
 8000e3c:	f36f 03c3 	bfc	r3, #3, #1
 8000e40:	7013      	strb	r3, [r2, #0]
                break;
 8000e42:	e00a      	b.n	8000e5a <DecodeHeader+0x1be>

            default:
                RX->header = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	71da      	strb	r2, [r3, #7]
                DecodeHeaderESP = 0;
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <DecodeHeader+0x204>)
 8000e4c:	7813      	ldrb	r3, [r2, #0]
 8000e4e:	f36f 03c3 	bfc	r3, #3, #1
 8000e52:	7013      	strb	r3, [r2, #0]
                break;
 8000e54:	e002      	b.n	8000e5c <DecodeHeader+0x1c0>
                break;
 8000e56:	bf00      	nop
 8000e58:	e000      	b.n	8000e5c <DecodeHeader+0x1c0>
                break;
 8000e5a:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	795a      	ldrb	r2, [r3, #5]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7b9b      	ldrb	r3, [r3, #14]
 8000e64:	4013      	ands	r3, r2
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	795b      	ldrb	r3, [r3, #5]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;    // Enmascaro el indice de lectura - Cuando llega a 255 se pone en 0
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	795a      	ldrb	r2, [r3, #5]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7b9b      	ldrb	r3, [r3, #14]
 8000e80:	4013      	ands	r3, r2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	795b      	ldrb	r3, [r3, #5]
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	f47f af0c 	bne.w	8000cac <DecodeHeader+0x10>
    }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	200008f8 	.word	0x200008f8

08000ea4 <DecodeCmd>:

void DecodeCmd(_Rx *RX, _Tx *TX){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
    RX->ISCMD = 0;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	719a      	strb	r2, [r3, #6]

    switch(RX->Buff[RX->iData]){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	7b52      	ldrb	r2, [r2, #13]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2bf0      	cmp	r3, #240	; 0xf0
 8000ec2:	d039      	beq.n	8000f38 <DecodeCmd+0x94>
 8000ec4:	2bf0      	cmp	r3, #240	; 0xf0
 8000ec6:	f300 80e0 	bgt.w	800108a <DecodeCmd+0x1e6>
 8000eca:	2ba7      	cmp	r3, #167	; 0xa7
 8000ecc:	dc1a      	bgt.n	8000f04 <DecodeCmd+0x60>
 8000ece:	2ba0      	cmp	r3, #160	; 0xa0
 8000ed0:	f2c0 80db 	blt.w	800108a <DecodeCmd+0x1e6>
 8000ed4:	3ba0      	subs	r3, #160	; 0xa0
 8000ed6:	2b07      	cmp	r3, #7
 8000ed8:	f200 80d7 	bhi.w	800108a <DecodeCmd+0x1e6>
 8000edc:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <DecodeCmd+0x40>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000f63 	.word	0x08000f63
 8000ee8:	08000fd9 	.word	0x08000fd9
 8000eec:	08001053 	.word	0x08001053
 8000ef0:	0800107f 	.word	0x0800107f
 8000ef4:	0800108b 	.word	0x0800108b
 8000ef8:	0800108b 	.word	0x0800108b
 8000efc:	08000f1d 	.word	0x08000f1d
 8000f00:	08000f0b 	.word	0x08000f0b
 8000f04:	2be0      	cmp	r3, #224	; 0xe0
 8000f06:	d042      	beq.n	8000f8e <DecodeCmd+0xea>
 8000f08:	e0bf      	b.n	800108a <DecodeCmd+0x1e6>

    	case 0xA7:
		    PCConnected = 1;
 8000f0a:	4a6d      	ldr	r2, [pc, #436]	; (80010c0 <DecodeCmd+0x21c>)
 8000f0c:	7813      	ldrb	r3, [r2, #0]
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	7013      	strb	r3, [r2, #0]
			Data = 0;
 8000f14:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <DecodeCmd+0x220>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    	break;
 8000f1a:	e0cd      	b.n	80010b8 <DecodeCmd+0x214>

    	case 0xA6:
			PCConnected = 0;
 8000f1c:	4a68      	ldr	r2, [pc, #416]	; (80010c0 <DecodeCmd+0x21c>)
 8000f1e:	7813      	ldrb	r3, [r2, #0]
 8000f20:	f36f 0341 	bfc	r3, #1, #1
 8000f24:	7013      	strb	r3, [r2, #0]
			Data = 0;
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <DecodeCmd+0x220>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			Start = 0;
 8000f2c:	4a66      	ldr	r2, [pc, #408]	; (80010c8 <DecodeCmd+0x224>)
 8000f2e:	7813      	ldrb	r3, [r2, #0]
 8000f30:	f36f 03c3 	bfc	r3, #3, #1
 8000f34:	7013      	strb	r3, [r2, #0]
		break;
 8000f36:	e0bf      	b.n	80010b8 <DecodeCmd+0x214>

    	/*
         * Comando para enviar alive
         */
        case 0xF0:                                                              //Alive
			if(!espConnected){
 8000f38:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <DecodeCmd+0x21c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f040 80b1 	bne.w	80010aa <DecodeCmd+0x206>
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xF0, 2);
 8000f48:	2202      	movs	r2, #2
 8000f4a:	21f0      	movs	r1, #240	; 0xf0
 8000f4c:	485f      	ldr	r0, [pc, #380]	; (80010cc <DecodeCmd+0x228>)
 8000f4e:	f000 fbe0 	bl	8001712 <PutHeaderOnTx>
	            PutByteOnTx((_Tx *)&TXUSB, 0x0D);
 8000f52:	210d      	movs	r1, #13
 8000f54:	485d      	ldr	r0, [pc, #372]	; (80010cc <DecodeCmd+0x228>)
 8000f56:	f000 fb91 	bl	800167c <PutByteOnTx>
	            PutcksOnTx((_Tx *)&TXUSB);
 8000f5a:	485c      	ldr	r0, [pc, #368]	; (80010cc <DecodeCmd+0x228>)
 8000f5c:	f000 fc70 	bl	8001840 <PutcksOnTx>
			}
		break;
 8000f60:	e0a3      	b.n	80010aa <DecodeCmd+0x206>
		/*
		 * Comando para enviar valor de sensores
		 */
        case 0xA0:
        	if(!espConnected){
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <DecodeCmd+0x21c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 809e 	bne.w	80010ae <DecodeCmd+0x20a>
        		PutHeaderOnTx((_Tx *)&TXUSB, 0xA0, 17);
 8000f72:	2211      	movs	r2, #17
 8000f74:	21a0      	movs	r1, #160	; 0xa0
 8000f76:	4855      	ldr	r0, [pc, #340]	; (80010cc <DecodeCmd+0x228>)
 8000f78:	f000 fbcb 	bl	8001712 <PutHeaderOnTx>
        		PutBuffOnTx((_Tx *)&TXUSB, (uint8_t *)bufADC, 16);
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	4954      	ldr	r1, [pc, #336]	; (80010d0 <DecodeCmd+0x22c>)
 8000f80:	4852      	ldr	r0, [pc, #328]	; (80010cc <DecodeCmd+0x228>)
 8000f82:	f000 fb99 	bl	80016b8 <PutBuffOnTx>
				PutcksOnTx((_Tx *)&TXUSB);
 8000f86:	4851      	ldr	r0, [pc, #324]	; (80010cc <DecodeCmd+0x228>)
 8000f88:	f000 fc5a 	bl	8001840 <PutcksOnTx>
        	}
        break;
 8000f8c:	e08f      	b.n	80010ae <DecodeCmd+0x20a>
        /*
		 * Comando para recibir valor de constantes
		 */
        case 0xE0:
        	KpMA =  GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2101      	movs	r1, #1
 8000f92:	4850      	ldr	r0, [pc, #320]	; (80010d4 <DecodeCmd+0x230>)
 8000f94:	f000 fb12 	bl	80015bc <GetByteFromRx>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <DecodeCmd+0x234>)
 8000f9e:	701a      	strb	r2, [r3, #0]
        	KdMA =  GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	484b      	ldr	r0, [pc, #300]	; (80010d4 <DecodeCmd+0x230>)
 8000fa6:	f000 fb09 	bl	80015bc <GetByteFromRx>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <DecodeCmd+0x238>)
 8000fb0:	701a      	strb	r2, [r3, #0]

        	KpMB =  GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4847      	ldr	r0, [pc, #284]	; (80010d4 <DecodeCmd+0x230>)
 8000fb8:	f000 fb00 	bl	80015bc <GetByteFromRx>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <DecodeCmd+0x23c>)
 8000fc2:	701a      	strb	r2, [r3, #0]
			KdMB =  GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4842      	ldr	r0, [pc, #264]	; (80010d4 <DecodeCmd+0x230>)
 8000fca:	f000 faf7 	bl	80015bc <GetByteFromRx>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <DecodeCmd+0x240>)
 8000fd4:	701a      	strb	r2, [r3, #0]
        break;
 8000fd6:	e06f      	b.n	80010b8 <DecodeCmd+0x214>
        /*
		 * Comando para recibir valor base o minimo de PWM
		 */
        case 0xA1:

        	PWMBaseA.i8[0] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	483d      	ldr	r0, [pc, #244]	; (80010d4 <DecodeCmd+0x230>)
 8000fde:	f000 faed 	bl	80015bc <GetByteFromRx>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <DecodeCmd+0x244>)
 8000fe8:	701a      	strb	r2, [r3, #0]
        	PWMBaseA.i8[1] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4839      	ldr	r0, [pc, #228]	; (80010d4 <DecodeCmd+0x230>)
 8000ff0:	f000 fae4 	bl	80015bc <GetByteFromRx>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <DecodeCmd+0x244>)
 8000ffa:	705a      	strb	r2, [r3, #1]

        	PWMBaseB.i8[0] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2101      	movs	r1, #1
 8001000:	4834      	ldr	r0, [pc, #208]	; (80010d4 <DecodeCmd+0x230>)
 8001002:	f000 fadb 	bl	80015bc <GetByteFromRx>
 8001006:	4603      	mov	r3, r0
 8001008:	b25a      	sxtb	r2, r3
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <DecodeCmd+0x248>)
 800100c:	701a      	strb	r2, [r3, #0]
        	PWMBaseB.i8[1] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2101      	movs	r1, #1
 8001012:	4830      	ldr	r0, [pc, #192]	; (80010d4 <DecodeCmd+0x230>)
 8001014:	f000 fad2 	bl	80015bc <GetByteFromRx>
 8001018:	4603      	mov	r3, r0
 800101a:	b25a      	sxtb	r2, r3
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <DecodeCmd+0x248>)
 800101e:	705a      	strb	r2, [r3, #1]

			RespMotor = 1;
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <DecodeCmd+0x21c>)
 8001022:	7813      	ldrb	r3, [r2, #0]
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	7013      	strb	r3, [r2, #0]

        	if(!espConnected){
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <DecodeCmd+0x21c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d13c      	bne.n	80010b2 <DecodeCmd+0x20e>
                PutHeaderOnTx(&TXUSB, 0xA1, 2);
 8001038:	2202      	movs	r2, #2
 800103a:	21a1      	movs	r1, #161	; 0xa1
 800103c:	4823      	ldr	r0, [pc, #140]	; (80010cc <DecodeCmd+0x228>)
 800103e:	f000 fb68 	bl	8001712 <PutHeaderOnTx>
    			PutByteOnTx(&TXUSB, 0x0D);
 8001042:	210d      	movs	r1, #13
 8001044:	4821      	ldr	r0, [pc, #132]	; (80010cc <DecodeCmd+0x228>)
 8001046:	f000 fb19 	bl	800167c <PutByteOnTx>
    			PutcksOnTx(&TXUSB);
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <DecodeCmd+0x228>)
 800104c:	f000 fbf8 	bl	8001840 <PutcksOnTx>
            }

        break;
 8001050:	e02f      	b.n	80010b2 <DecodeCmd+0x20e>

        case 0xA2:
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <DecodeCmd+0x24c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <DecodeCmd+0x24c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <DecodeCmd+0x24c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <DecodeCmd+0x24c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
		  Start = 0;
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <DecodeCmd+0x224>)
 8001074:	7813      	ldrb	r3, [r2, #0]
 8001076:	f36f 03c3 	bfc	r3, #3, #1
 800107a:	7013      	strb	r3, [r2, #0]
        break;
 800107c:	e01c      	b.n	80010b8 <DecodeCmd+0x214>

        case 0xA3:
		  Start = 1;
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <DecodeCmd+0x224>)
 8001080:	7813      	ldrb	r3, [r2, #0]
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	7013      	strb	r3, [r2, #0]
		break;
 8001088:	e016      	b.n	80010b8 <DecodeCmd+0x214>

        /*
         * Comando para enviar aviso de error
         */
        default:
			if(!espConnected){
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <DecodeCmd+0x21c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <DecodeCmd+0x212>
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xFF, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	21ff      	movs	r1, #255	; 0xff
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <DecodeCmd+0x228>)
 800109e:	f000 fb38 	bl	8001712 <PutHeaderOnTx>
	            PutcksOnTx((_Tx *)&TXUSB);
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <DecodeCmd+0x228>)
 80010a4:	f000 fbcc 	bl	8001840 <PutcksOnTx>
			}
        break;
 80010a8:	e005      	b.n	80010b6 <DecodeCmd+0x212>
		break;
 80010aa:	bf00      	nop
 80010ac:	e004      	b.n	80010b8 <DecodeCmd+0x214>
        break;
 80010ae:	bf00      	nop
 80010b0:	e002      	b.n	80010b8 <DecodeCmd+0x214>
        break;
 80010b2:	bf00      	nop
 80010b4:	e000      	b.n	80010b8 <DecodeCmd+0x214>
        break;
 80010b6:	bf00      	nop
    }
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200008f8 	.word	0x200008f8
 80010c4:	200008fe 	.word	0x200008fe
 80010c8:	20000770 	.word	0x20000770
 80010cc:	20000718 	.word	0x20000718
 80010d0:	2000094c 	.word	0x2000094c
 80010d4:	20000558 	.word	0x20000558
 80010d8:	20000d2a 	.word	0x20000d2a
 80010dc:	200008ac 	.word	0x200008ac
 80010e0:	20000cc1 	.word	0x20000cc1
 80010e4:	200005c4 	.word	0x200005c4
 80010e8:	200004c8 	.word	0x200004c8
 80010ec:	20000534 	.word	0x20000534
 80010f0:	200004ec 	.word	0x200004ec

080010f4 <PutCIPSENDOnTx>:

void PutCIPSENDOnTx(const char * CantDatos){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	PutStrOnTx((_Tx *)&TXUSART1, CIPSEND);
 80010fc:	4918      	ldr	r1, [pc, #96]	; (8001160 <PutCIPSENDOnTx+0x6c>)
 80010fe:	4819      	ldr	r0, [pc, #100]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001100:	f000 fa8f 	bl	8001622 <PutStrOnTx>
	PutStrOnTx((_Tx *)&TXUSART1, CantDatos);
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4817      	ldr	r0, [pc, #92]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001108:	f000 fa8b 	bl	8001622 <PutStrOnTx>
	TXUSART1.Buff[TXUSART1.iw++] = '\r';
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <PutCIPSENDOnTx+0x70>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	1c59      	adds	r1, r3, #1
 8001116:	b2c8      	uxtb	r0, r1
 8001118:	4912      	ldr	r1, [pc, #72]	; (8001164 <PutCIPSENDOnTx+0x70>)
 800111a:	7108      	strb	r0, [r1, #4]
 800111c:	4413      	add	r3, r2
 800111e:	220d      	movs	r2, #13
 8001120:	701a      	strb	r2, [r3, #0]
	TXUSART1.iw &= TXUSART1.maskSize;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001124:	791a      	ldrb	r2, [r3, #4]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001128:	7a1b      	ldrb	r3, [r3, #8]
 800112a:	4013      	ands	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001130:	711a      	strb	r2, [r3, #4]
	TXUSART1.Buff[TXUSART1.iw++] = '\n';
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	b2c8      	uxtb	r0, r1
 800113e:	4909      	ldr	r1, [pc, #36]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001140:	7108      	strb	r0, [r1, #4]
 8001142:	4413      	add	r3, r2
 8001144:	220a      	movs	r2, #10
 8001146:	701a      	strb	r2, [r3, #0]
	TXUSART1.iw &= TXUSART1.maskSize;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <PutCIPSENDOnTx+0x70>)
 800114a:	791a      	ldrb	r2, [r3, #4]
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <PutCIPSENDOnTx+0x70>)
 800114e:	7a1b      	ldrb	r3, [r3, #8]
 8001150:	4013      	ands	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <PutCIPSENDOnTx+0x70>)
 8001156:	711a      	strb	r2, [r3, #4]
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800c104 	.word	0x0800c104
 8001164:	20000d1c 	.word	0x20000d1c

08001168 <SendUDPData>:

void SendUDPData(){
 8001168:	b598      	push	{r3, r4, r7, lr}
 800116a:	af00      	add	r7, sp, #0
	switch(Data){
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <SendUDPData+0x40>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b03      	cmp	r3, #3
 8001172:	f200 81e5 	bhi.w	8001540 <SendUDPData+0x3d8>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <SendUDPData+0x14>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	080011b5 	.word	0x080011b5
 8001184:	080014f7 	.word	0x080014f7
 8001188:	08001511 	.word	0x08001511
		case 0:
			PutCIPSENDOnTx("42");
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <SendUDPData+0x44>)
 800118e:	f7ff ffb1 	bl	80010f4 <PutCIPSENDOnTx>
			Countms = 20;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <SendUDPData+0x48>)
 8001194:	2214      	movs	r2, #20
 8001196:	801a      	strh	r2, [r3, #0]
			Data++;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <SendUDPData+0x40>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b01      	ldr	r3, [pc, #4]	; (80011a8 <SendUDPData+0x40>)
 80011a2:	701a      	strb	r2, [r3, #0]
		break;
 80011a4:	e1cc      	b.n	8001540 <SendUDPData+0x3d8>
 80011a6:	bf00      	nop
 80011a8:	200008fe 	.word	0x200008fe
 80011ac:	0800c028 	.word	0x0800c028
 80011b0:	200004ea 	.word	0x200004ea

		case 1:
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xA8, 35);
 80011b4:	2223      	movs	r2, #35	; 0x23
 80011b6:	21a8      	movs	r1, #168	; 0xa8
 80011b8:	489b      	ldr	r0, [pc, #620]	; (8001428 <SendUDPData+0x2c0>)
 80011ba:	f000 faaa 	bl	8001712 <PutHeaderOnTx>

			PutBuffOnTx((_Tx *)&TXUSART1, (uint8_t *)bufADC, 16);
 80011be:	2210      	movs	r2, #16
 80011c0:	499a      	ldr	r1, [pc, #616]	; (800142c <SendUDPData+0x2c4>)
 80011c2:	4899      	ldr	r0, [pc, #612]	; (8001428 <SendUDPData+0x2c0>)
 80011c4:	f000 fa78 	bl	80016b8 <PutBuffOnTx>

			TXUSART1.Buff[TXUSART1.iw++] = error.i8[0];
 80011c8:	4b99      	ldr	r3, [pc, #612]	; (8001430 <SendUDPData+0x2c8>)
 80011ca:	f993 0000 	ldrsb.w	r0, [r3]
 80011ce:	4b96      	ldr	r3, [pc, #600]	; (8001428 <SendUDPData+0x2c0>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b95      	ldr	r3, [pc, #596]	; (8001428 <SendUDPData+0x2c0>)
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	1c59      	adds	r1, r3, #1
 80011d8:	b2cc      	uxtb	r4, r1
 80011da:	4993      	ldr	r1, [pc, #588]	; (8001428 <SendUDPData+0x2c0>)
 80011dc:	710c      	strb	r4, [r1, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	b2c2      	uxtb	r2, r0
 80011e2:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 80011e4:	4b90      	ldr	r3, [pc, #576]	; (8001428 <SendUDPData+0x2c0>)
 80011e6:	791a      	ldrb	r2, [r3, #4]
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <SendUDPData+0x2c0>)
 80011ea:	7a1b      	ldrb	r3, [r3, #8]
 80011ec:	4013      	ands	r3, r2
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b8d      	ldr	r3, [pc, #564]	; (8001428 <SendUDPData+0x2c0>)
 80011f2:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = error.i8[1];
 80011f4:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <SendUDPData+0x2c8>)
 80011f6:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80011fa:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <SendUDPData+0x2c0>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <SendUDPData+0x2c0>)
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	b2cc      	uxtb	r4, r1
 8001206:	4988      	ldr	r1, [pc, #544]	; (8001428 <SendUDPData+0x2c0>)
 8001208:	710c      	strb	r4, [r1, #4]
 800120a:	4413      	add	r3, r2
 800120c:	b2c2      	uxtb	r2, r0
 800120e:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001210:	4b85      	ldr	r3, [pc, #532]	; (8001428 <SendUDPData+0x2c0>)
 8001212:	791a      	ldrb	r2, [r3, #4]
 8001214:	4b84      	ldr	r3, [pc, #528]	; (8001428 <SendUDPData+0x2c0>)
 8001216:	7a1b      	ldrb	r3, [r3, #8]
 8001218:	4013      	ands	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b82      	ldr	r3, [pc, #520]	; (8001428 <SendUDPData+0x2c0>)
 800121e:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = PWMA.i8[0];
 8001220:	4b84      	ldr	r3, [pc, #528]	; (8001434 <SendUDPData+0x2cc>)
 8001222:	f993 0000 	ldrsb.w	r0, [r3]
 8001226:	4b80      	ldr	r3, [pc, #512]	; (8001428 <SendUDPData+0x2c0>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b7f      	ldr	r3, [pc, #508]	; (8001428 <SendUDPData+0x2c0>)
 800122c:	791b      	ldrb	r3, [r3, #4]
 800122e:	1c59      	adds	r1, r3, #1
 8001230:	b2cc      	uxtb	r4, r1
 8001232:	497d      	ldr	r1, [pc, #500]	; (8001428 <SendUDPData+0x2c0>)
 8001234:	710c      	strb	r4, [r1, #4]
 8001236:	4413      	add	r3, r2
 8001238:	b2c2      	uxtb	r2, r0
 800123a:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 800123c:	4b7a      	ldr	r3, [pc, #488]	; (8001428 <SendUDPData+0x2c0>)
 800123e:	791a      	ldrb	r2, [r3, #4]
 8001240:	4b79      	ldr	r3, [pc, #484]	; (8001428 <SendUDPData+0x2c0>)
 8001242:	7a1b      	ldrb	r3, [r3, #8]
 8001244:	4013      	ands	r3, r2
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b77      	ldr	r3, [pc, #476]	; (8001428 <SendUDPData+0x2c0>)
 800124a:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = PWMA.i8[1];
 800124c:	4b79      	ldr	r3, [pc, #484]	; (8001434 <SendUDPData+0x2cc>)
 800124e:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001252:	4b75      	ldr	r3, [pc, #468]	; (8001428 <SendUDPData+0x2c0>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b74      	ldr	r3, [pc, #464]	; (8001428 <SendUDPData+0x2c0>)
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	1c59      	adds	r1, r3, #1
 800125c:	b2cc      	uxtb	r4, r1
 800125e:	4972      	ldr	r1, [pc, #456]	; (8001428 <SendUDPData+0x2c0>)
 8001260:	710c      	strb	r4, [r1, #4]
 8001262:	4413      	add	r3, r2
 8001264:	b2c2      	uxtb	r2, r0
 8001266:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001268:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <SendUDPData+0x2c0>)
 800126a:	791a      	ldrb	r2, [r3, #4]
 800126c:	4b6e      	ldr	r3, [pc, #440]	; (8001428 <SendUDPData+0x2c0>)
 800126e:	7a1b      	ldrb	r3, [r3, #8]
 8001270:	4013      	ands	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <SendUDPData+0x2c0>)
 8001276:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = PWMB.i8[0];
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <SendUDPData+0x2d0>)
 800127a:	f993 0000 	ldrsb.w	r0, [r3]
 800127e:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <SendUDPData+0x2c0>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <SendUDPData+0x2c0>)
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	1c59      	adds	r1, r3, #1
 8001288:	b2cc      	uxtb	r4, r1
 800128a:	4967      	ldr	r1, [pc, #412]	; (8001428 <SendUDPData+0x2c0>)
 800128c:	710c      	strb	r4, [r1, #4]
 800128e:	4413      	add	r3, r2
 8001290:	b2c2      	uxtb	r2, r0
 8001292:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001294:	4b64      	ldr	r3, [pc, #400]	; (8001428 <SendUDPData+0x2c0>)
 8001296:	791a      	ldrb	r2, [r3, #4]
 8001298:	4b63      	ldr	r3, [pc, #396]	; (8001428 <SendUDPData+0x2c0>)
 800129a:	7a1b      	ldrb	r3, [r3, #8]
 800129c:	4013      	ands	r3, r2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <SendUDPData+0x2c0>)
 80012a2:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = PWMB.i8[1];
 80012a4:	4b64      	ldr	r3, [pc, #400]	; (8001438 <SendUDPData+0x2d0>)
 80012a6:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80012aa:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <SendUDPData+0x2c0>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <SendUDPData+0x2c0>)
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	1c59      	adds	r1, r3, #1
 80012b4:	b2cc      	uxtb	r4, r1
 80012b6:	495c      	ldr	r1, [pc, #368]	; (8001428 <SendUDPData+0x2c0>)
 80012b8:	710c      	strb	r4, [r1, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2c2      	uxtb	r2, r0
 80012be:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <SendUDPData+0x2c0>)
 80012c2:	791a      	ldrb	r2, [r3, #4]
 80012c4:	4b58      	ldr	r3, [pc, #352]	; (8001428 <SendUDPData+0x2c0>)
 80012c6:	7a1b      	ldrb	r3, [r3, #8]
 80012c8:	4013      	ands	r3, r2
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b56      	ldr	r3, [pc, #344]	; (8001428 <SendUDPData+0x2c0>)
 80012ce:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = PWM_A.i8[0];
 80012d0:	4b5a      	ldr	r3, [pc, #360]	; (800143c <SendUDPData+0x2d4>)
 80012d2:	f993 0000 	ldrsb.w	r0, [r3]
 80012d6:	4b54      	ldr	r3, [pc, #336]	; (8001428 <SendUDPData+0x2c0>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <SendUDPData+0x2c0>)
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	1c59      	adds	r1, r3, #1
 80012e0:	b2cc      	uxtb	r4, r1
 80012e2:	4951      	ldr	r1, [pc, #324]	; (8001428 <SendUDPData+0x2c0>)
 80012e4:	710c      	strb	r4, [r1, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	b2c2      	uxtb	r2, r0
 80012ea:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 80012ec:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <SendUDPData+0x2c0>)
 80012ee:	791a      	ldrb	r2, [r3, #4]
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <SendUDPData+0x2c0>)
 80012f2:	7a1b      	ldrb	r3, [r3, #8]
 80012f4:	4013      	ands	r3, r2
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <SendUDPData+0x2c0>)
 80012fa:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = PWM_A.i8[1];
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <SendUDPData+0x2d4>)
 80012fe:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <SendUDPData+0x2c0>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <SendUDPData+0x2c0>)
 8001308:	791b      	ldrb	r3, [r3, #4]
 800130a:	1c59      	adds	r1, r3, #1
 800130c:	b2cc      	uxtb	r4, r1
 800130e:	4946      	ldr	r1, [pc, #280]	; (8001428 <SendUDPData+0x2c0>)
 8001310:	710c      	strb	r4, [r1, #4]
 8001312:	4413      	add	r3, r2
 8001314:	b2c2      	uxtb	r2, r0
 8001316:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001318:	4b43      	ldr	r3, [pc, #268]	; (8001428 <SendUDPData+0x2c0>)
 800131a:	791a      	ldrb	r2, [r3, #4]
 800131c:	4b42      	ldr	r3, [pc, #264]	; (8001428 <SendUDPData+0x2c0>)
 800131e:	7a1b      	ldrb	r3, [r3, #8]
 8001320:	4013      	ands	r3, r2
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <SendUDPData+0x2c0>)
 8001326:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = PWM_B.i8[0];
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <SendUDPData+0x2d8>)
 800132a:	f993 0000 	ldrsb.w	r0, [r3]
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <SendUDPData+0x2c0>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <SendUDPData+0x2c0>)
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	1c59      	adds	r1, r3, #1
 8001338:	b2cc      	uxtb	r4, r1
 800133a:	493b      	ldr	r1, [pc, #236]	; (8001428 <SendUDPData+0x2c0>)
 800133c:	710c      	strb	r4, [r1, #4]
 800133e:	4413      	add	r3, r2
 8001340:	b2c2      	uxtb	r2, r0
 8001342:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <SendUDPData+0x2c0>)
 8001346:	791a      	ldrb	r2, [r3, #4]
 8001348:	4b37      	ldr	r3, [pc, #220]	; (8001428 <SendUDPData+0x2c0>)
 800134a:	7a1b      	ldrb	r3, [r3, #8]
 800134c:	4013      	ands	r3, r2
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <SendUDPData+0x2c0>)
 8001352:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = PWM_B.i8[1];
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <SendUDPData+0x2d8>)
 8001356:	f993 0001 	ldrsb.w	r0, [r3, #1]
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <SendUDPData+0x2c0>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <SendUDPData+0x2c0>)
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	1c59      	adds	r1, r3, #1
 8001364:	b2cc      	uxtb	r4, r1
 8001366:	4930      	ldr	r1, [pc, #192]	; (8001428 <SendUDPData+0x2c0>)
 8001368:	710c      	strb	r4, [r1, #4]
 800136a:	4413      	add	r3, r2
 800136c:	b2c2      	uxtb	r2, r0
 800136e:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <SendUDPData+0x2c0>)
 8001372:	791a      	ldrb	r2, [r3, #4]
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <SendUDPData+0x2c0>)
 8001376:	7a1b      	ldrb	r3, [r3, #8]
 8001378:	4013      	ands	r3, r2
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <SendUDPData+0x2c0>)
 800137e:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = PWMBaseA.i8[0];
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <SendUDPData+0x2dc>)
 8001382:	f993 0000 	ldrsb.w	r0, [r3]
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <SendUDPData+0x2c0>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <SendUDPData+0x2c0>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	b2cc      	uxtb	r4, r1
 8001392:	4925      	ldr	r1, [pc, #148]	; (8001428 <SendUDPData+0x2c0>)
 8001394:	710c      	strb	r4, [r1, #4]
 8001396:	4413      	add	r3, r2
 8001398:	b2c2      	uxtb	r2, r0
 800139a:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <SendUDPData+0x2c0>)
 800139e:	791a      	ldrb	r2, [r3, #4]
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <SendUDPData+0x2c0>)
 80013a2:	7a1b      	ldrb	r3, [r3, #8]
 80013a4:	4013      	ands	r3, r2
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <SendUDPData+0x2c0>)
 80013aa:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = PWMBaseA.i8[1];
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <SendUDPData+0x2dc>)
 80013ae:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <SendUDPData+0x2c0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <SendUDPData+0x2c0>)
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	1c59      	adds	r1, r3, #1
 80013bc:	b2cc      	uxtb	r4, r1
 80013be:	491a      	ldr	r1, [pc, #104]	; (8001428 <SendUDPData+0x2c0>)
 80013c0:	710c      	strb	r4, [r1, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2c2      	uxtb	r2, r0
 80013c6:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <SendUDPData+0x2c0>)
 80013ca:	791a      	ldrb	r2, [r3, #4]
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <SendUDPData+0x2c0>)
 80013ce:	7a1b      	ldrb	r3, [r3, #8]
 80013d0:	4013      	ands	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <SendUDPData+0x2c0>)
 80013d6:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = PWMBaseB.i8[0];
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <SendUDPData+0x2e0>)
 80013da:	f993 0000 	ldrsb.w	r0, [r3]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <SendUDPData+0x2c0>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <SendUDPData+0x2c0>)
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	1c59      	adds	r1, r3, #1
 80013e8:	b2cc      	uxtb	r4, r1
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <SendUDPData+0x2c0>)
 80013ec:	710c      	strb	r4, [r1, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	b2c2      	uxtb	r2, r0
 80013f2:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <SendUDPData+0x2c0>)
 80013f6:	791a      	ldrb	r2, [r3, #4]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <SendUDPData+0x2c0>)
 80013fa:	7a1b      	ldrb	r3, [r3, #8]
 80013fc:	4013      	ands	r3, r2
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <SendUDPData+0x2c0>)
 8001402:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = PWMBaseB.i8[1];
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <SendUDPData+0x2e0>)
 8001406:	f993 0001 	ldrsb.w	r0, [r3, #1]
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <SendUDPData+0x2c0>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SendUDPData+0x2c0>)
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	1c59      	adds	r1, r3, #1
 8001414:	b2cc      	uxtb	r4, r1
 8001416:	4904      	ldr	r1, [pc, #16]	; (8001428 <SendUDPData+0x2c0>)
 8001418:	710c      	strb	r4, [r1, #4]
 800141a:	4413      	add	r3, r2
 800141c:	b2c2      	uxtb	r2, r0
 800141e:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <SendUDPData+0x2c0>)
 8001422:	791a      	ldrb	r2, [r3, #4]
 8001424:	e012      	b.n	800144c <SendUDPData+0x2e4>
 8001426:	bf00      	nop
 8001428:	20000d1c 	.word	0x20000d1c
 800142c:	2000094c 	.word	0x2000094c
 8001430:	20000b94 	.word	0x20000b94
 8001434:	20000cfc 	.word	0x20000cfc
 8001438:	20000d2c 	.word	0x20000d2c
 800143c:	20000cc4 	.word	0x20000cc4
 8001440:	20000b74 	.word	0x20000b74
 8001444:	200004c8 	.word	0x200004c8
 8001448:	20000534 	.word	0x20000534
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <SendUDPData+0x3dc>)
 800144e:	7a1b      	ldrb	r3, [r3, #8]
 8001450:	4013      	ands	r3, r2
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <SendUDPData+0x3dc>)
 8001456:	711a      	strb	r2, [r3, #4]

			TXUSART1.Buff[TXUSART1.iw++] = ProporcionalMA.i8[0];
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <SendUDPData+0x3e0>)
 800145a:	f993 0000 	ldrsb.w	r0, [r3]
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <SendUDPData+0x3dc>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <SendUDPData+0x3dc>)
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	1c59      	adds	r1, r3, #1
 8001468:	b2cc      	uxtb	r4, r1
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <SendUDPData+0x3dc>)
 800146c:	710c      	strb	r4, [r1, #4]
 800146e:	4413      	add	r3, r2
 8001470:	b2c2      	uxtb	r2, r0
 8001472:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <SendUDPData+0x3dc>)
 8001476:	791a      	ldrb	r2, [r3, #4]
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <SendUDPData+0x3dc>)
 800147a:	7a1b      	ldrb	r3, [r3, #8]
 800147c:	4013      	ands	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <SendUDPData+0x3dc>)
 8001482:	711a      	strb	r2, [r3, #4]
			TXUSART1.Buff[TXUSART1.iw++] = ProporcionalMA.i8[1];
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <SendUDPData+0x3e0>)
 8001486:	f993 0001 	ldrsb.w	r0, [r3, #1]
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <SendUDPData+0x3dc>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <SendUDPData+0x3dc>)
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	b2cc      	uxtb	r4, r1
 8001496:	492b      	ldr	r1, [pc, #172]	; (8001544 <SendUDPData+0x3dc>)
 8001498:	710c      	strb	r4, [r1, #4]
 800149a:	4413      	add	r3, r2
 800149c:	b2c2      	uxtb	r2, r0
 800149e:	701a      	strb	r2, [r3, #0]
			TXUSART1.iw &= TXUSART1.maskSize;
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <SendUDPData+0x3dc>)
 80014a2:	791a      	ldrb	r2, [r3, #4]
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <SendUDPData+0x3dc>)
 80014a6:	7a1b      	ldrb	r3, [r3, #8]
 80014a8:	4013      	ands	r3, r2
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <SendUDPData+0x3dc>)
 80014ae:	711a      	strb	r2, [r3, #4]

			PutByteOnTx((_Tx *)&TXUSART1, 0xF0);
 80014b0:	21f0      	movs	r1, #240	; 0xf0
 80014b2:	4824      	ldr	r0, [pc, #144]	; (8001544 <SendUDPData+0x3dc>)
 80014b4:	f000 f8e2 	bl	800167c <PutByteOnTx>
			PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 80014b8:	210d      	movs	r1, #13
 80014ba:	4822      	ldr	r0, [pc, #136]	; (8001544 <SendUDPData+0x3dc>)
 80014bc:	f000 f8de 	bl	800167c <PutByteOnTx>

			PutcksOnTx((_Tx *)&TXUSART1);
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <SendUDPData+0x3dc>)
 80014c2:	f000 f9bd 	bl	8001840 <PutcksOnTx>

			if(RespMotor){
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <SendUDPData+0x3e4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <SendUDPData+0x380>
				Data++;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <SendUDPData+0x3e8>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <SendUDPData+0x3e8>)
 80014de:	701a      	strb	r2, [r3, #0]
				Countms = 30;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <SendUDPData+0x3ec>)
 80014e2:	221e      	movs	r2, #30
 80014e4:	801a      	strh	r2, [r3, #0]
			}
			else{
				Countms = 180;
				Data=0;
			}
		break;
 80014e6:	e02b      	b.n	8001540 <SendUDPData+0x3d8>
				Countms = 180;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <SendUDPData+0x3ec>)
 80014ea:	22b4      	movs	r2, #180	; 0xb4
 80014ec:	801a      	strh	r2, [r3, #0]
				Data=0;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <SendUDPData+0x3e8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
		break;
 80014f4:	e024      	b.n	8001540 <SendUDPData+0x3d8>

		case 2:
			PutCIPSENDOnTx("9");
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <SendUDPData+0x3f0>)
 80014f8:	f7ff fdfc 	bl	80010f4 <PutCIPSENDOnTx>
			Countms = 30;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <SendUDPData+0x3ec>)
 80014fe:	221e      	movs	r2, #30
 8001500:	801a      	strh	r2, [r3, #0]
			Data++;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <SendUDPData+0x3e8>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <SendUDPData+0x3e8>)
 800150c:	701a      	strb	r2, [r3, #0]
		break;
 800150e:	e017      	b.n	8001540 <SendUDPData+0x3d8>

		case 3:
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xA1, 2);
 8001510:	2202      	movs	r2, #2
 8001512:	21a1      	movs	r1, #161	; 0xa1
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <SendUDPData+0x3dc>)
 8001516:	f000 f8fc 	bl	8001712 <PutHeaderOnTx>
			PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 800151a:	210d      	movs	r1, #13
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <SendUDPData+0x3dc>)
 800151e:	f000 f8ad 	bl	800167c <PutByteOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 8001522:	4808      	ldr	r0, [pc, #32]	; (8001544 <SendUDPData+0x3dc>)
 8001524:	f000 f98c 	bl	8001840 <PutcksOnTx>
			Countms = 120;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <SendUDPData+0x3ec>)
 800152a:	2278      	movs	r2, #120	; 0x78
 800152c:	801a      	strh	r2, [r3, #0]
			RespMotor = 0;
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <SendUDPData+0x3e4>)
 8001530:	7813      	ldrb	r3, [r2, #0]
 8001532:	f36f 1304 	bfc	r3, #4, #1
 8001536:	7013      	strb	r3, [r2, #0]
			Data = 0;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SendUDPData+0x3e8>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		break;
 800153e:	bf00      	nop

	}
}
 8001540:	bf00      	nop
 8001542:	bd98      	pop	{r3, r4, r7, pc}
 8001544:	20000d1c 	.word	0x20000d1c
 8001548:	20000b4c 	.word	0x20000b4c
 800154c:	200008f8 	.word	0x200008f8
 8001550:	200008fe 	.word	0x200008fe
 8001554:	200004ea 	.word	0x200004ea
 8001558:	0800c02c 	.word	0x0800c02c

0800155c <ConnectPC>:


void ConnectPC(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	switch(Data){
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <ConnectPC+0x50>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <ConnectPC+0x12>
 8001568:	2b01      	cmp	r3, #1
 800156a:	d00d      	beq.n	8001588 <ConnectPC+0x2c>
			PutcksOnTx((_Tx *)&TXUSART1);
			Countms = 780;
			Data = 0;
		break;
	}
}
 800156c:	e01c      	b.n	80015a8 <ConnectPC+0x4c>
			PutCIPSENDOnTx("8");
 800156e:	4810      	ldr	r0, [pc, #64]	; (80015b0 <ConnectPC+0x54>)
 8001570:	f7ff fdc0 	bl	80010f4 <PutCIPSENDOnTx>
			Countms = 20;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <ConnectPC+0x58>)
 8001576:	2214      	movs	r2, #20
 8001578:	801a      	strh	r2, [r3, #0]
			Data++;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <ConnectPC+0x50>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <ConnectPC+0x50>)
 8001584:	701a      	strb	r2, [r3, #0]
		break;
 8001586:	e00f      	b.n	80015a8 <ConnectPC+0x4c>
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xA7, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	21a7      	movs	r1, #167	; 0xa7
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <ConnectPC+0x5c>)
 800158e:	f000 f8c0 	bl	8001712 <PutHeaderOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <ConnectPC+0x5c>)
 8001594:	f000 f954 	bl	8001840 <PutcksOnTx>
			Countms = 780;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <ConnectPC+0x58>)
 800159a:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800159e:	801a      	strh	r2, [r3, #0]
			Data = 0;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <ConnectPC+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
		break;
 80015a6:	bf00      	nop
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200008fe 	.word	0x200008fe
 80015b0:	0800c030 	.word	0x0800c030
 80015b4:	200004ea 	.word	0x200004ea
 80015b8:	20000d1c 	.word	0x20000d1c

080015bc <GetByteFromRx>:

uint8_t GetByteFromRx(_Rx *RX, int8_t pre, int8_t pos){
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
 80015c8:	4613      	mov	r3, r2
 80015ca:	70bb      	strb	r3, [r7, #2]
    uint8_t aux;

    RX->iData += pre;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7b5a      	ldrb	r2, [r3, #13]
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	4413      	add	r3, r2
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	735a      	strb	r2, [r3, #13]
    RX->iData &= RX->maskSize;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b5a      	ldrb	r2, [r3, #13]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7b9b      	ldrb	r3, [r3, #14]
 80015e2:	4013      	ands	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	735a      	strb	r2, [r3, #13]
    aux = RX->Buff[RX->iData];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	7b52      	ldrb	r2, [r2, #13]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	73fb      	strb	r3, [r7, #15]
    RX->iData += pos;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7b5a      	ldrb	r2, [r3, #13]
 80015fc:	78bb      	ldrb	r3, [r7, #2]
 80015fe:	4413      	add	r3, r2
 8001600:	b2da      	uxtb	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	735a      	strb	r2, [r3, #13]
    RX->iData &= RX->maskSize;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7b5a      	ldrb	r2, [r3, #13]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7b9b      	ldrb	r3, [r3, #14]
 800160e:	4013      	ands	r3, r2
 8001610:	b2da      	uxtb	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	735a      	strb	r2, [r3, #13]

    return aux;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <PutStrOnTx>:

void PutStrOnTx(_Tx *TX, const char *str)
{
 8001622:	b490      	push	{r4, r7}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

    while(str[i]) {
 8001630:	e018      	b.n	8001664 <PutStrOnTx+0x42>
        TX->Buff[TX->iw++] = str[i++];
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	73fa      	strb	r2, [r7, #15]
 8001638:	461a      	mov	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	441a      	add	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	791b      	ldrb	r3, [r3, #4]
 8001646:	1c58      	adds	r0, r3, #1
 8001648:	b2c4      	uxtb	r4, r0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	7104      	strb	r4, [r0, #4]
 800164e:	440b      	add	r3, r1
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	791a      	ldrb	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7a1b      	ldrb	r3, [r3, #8]
 800165c:	4013      	ands	r3, r2
 800165e:	b2da      	uxtb	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	711a      	strb	r2, [r3, #4]
    while(str[i]) {
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e0      	bne.n	8001632 <PutStrOnTx+0x10>
    }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bc90      	pop	{r4, r7}
 800167a:	4770      	bx	lr

0800167c <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	791b      	ldrb	r3, [r3, #4]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	b2c8      	uxtb	r0, r1
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	7108      	strb	r0, [r1, #4]
 8001698:	4413      	add	r3, r2
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	791a      	ldrb	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7a1b      	ldrb	r3, [r3, #8]
 80016a6:	4013      	ands	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	711a      	strb	r2, [r3, #4]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <PutBuffOnTx>:

void PutBuffOnTx(_Tx *TX, uint8_t *buf, uint8_t length)
{
 80016b8:	b490      	push	{r4, r7}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0; i<length; i++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
 80016ca:	e018      	b.n	80016fe <PutBuffOnTx+0x46>

    	TX->Buff[TX->iw++] = buf[i];
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	441a      	add	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	1c58      	adds	r0, r3, #1
 80016dc:	b2c4      	uxtb	r4, r0
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	7104      	strb	r4, [r0, #4]
 80016e2:	440b      	add	r3, r1
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]
    	TX->iw &= TX->maskSize;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	791a      	ldrb	r2, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	7a1b      	ldrb	r3, [r3, #8]
 80016f0:	4013      	ands	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	711a      	strb	r2, [r3, #4]
    for(i=0; i<length; i++) {
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	3301      	adds	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
 80016fe:	7dfa      	ldrb	r2, [r7, #23]
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3e2      	bcc.n	80016cc <PutBuffOnTx+0x14>
    }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bc90      	pop	{r4, r7}
 8001710:	4770      	bx	lr

08001712 <PutHeaderOnTx>:

void PutHeaderOnTx(_Tx *TX, uint8_t cmd, uint8_t CantDatos)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	4613      	mov	r3, r2
 8001720:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	791b      	ldrb	r3, [r3, #4]
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	b2c8      	uxtb	r0, r1
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	7108      	strb	r0, [r1, #4]
 8001732:	4413      	add	r3, r2
 8001734:	2255      	movs	r2, #85	; 0x55
 8001736:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	791a      	ldrb	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7a1b      	ldrb	r3, [r3, #8]
 8001740:	4013      	ands	r3, r2
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	791b      	ldrb	r3, [r3, #4]
 8001750:	1c59      	adds	r1, r3, #1
 8001752:	b2c8      	uxtb	r0, r1
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	7108      	strb	r0, [r1, #4]
 8001758:	4413      	add	r3, r2
 800175a:	224e      	movs	r2, #78	; 0x4e
 800175c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	791a      	ldrb	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a1b      	ldrb	r3, [r3, #8]
 8001766:	4013      	ands	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	b2c8      	uxtb	r0, r1
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	7108      	strb	r0, [r1, #4]
 800177e:	4413      	add	r3, r2
 8001780:	2245      	movs	r2, #69	; 0x45
 8001782:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	791a      	ldrb	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	4013      	ands	r3, r2
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	1c59      	adds	r1, r3, #1
 800179e:	b2c8      	uxtb	r0, r1
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	7108      	strb	r0, [r1, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	2252      	movs	r2, #82	; 0x52
 80017a8:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	791a      	ldrb	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7a1b      	ldrb	r3, [r3, #8]
 80017b2:	4013      	ands	r3, r2
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	711a      	strb	r2, [r3, #4]
    //lcmd cantidad de datos: id+payload+cks
    TX->length = CantDatos;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	78ba      	ldrb	r2, [r7, #2]
 80017be:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = CantDatos + 1;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	791b      	ldrb	r3, [r3, #4]
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	b2c8      	uxtb	r0, r1
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	7108      	strb	r0, [r1, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	78ba      	ldrb	r2, [r7, #2]
 80017d4:	3201      	adds	r2, #1
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	791a      	ldrb	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7a1b      	ldrb	r3, [r3, #8]
 80017e2:	4013      	ands	r3, r2
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	1c59      	adds	r1, r3, #1
 80017f4:	b2c8      	uxtb	r0, r1
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	7108      	strb	r0, [r1, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	223a      	movs	r2, #58	; 0x3a
 80017fe:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791a      	ldrb	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7a1b      	ldrb	r3, [r3, #8]
 8001808:	4013      	ands	r3, r2
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = cmd;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	1c59      	adds	r1, r3, #1
 800181a:	b2c8      	uxtb	r0, r1
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	7108      	strb	r0, [r1, #4]
 8001820:	4413      	add	r3, r2
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	791a      	ldrb	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a1b      	ldrb	r3, [r3, #8]
 800182e:	4013      	ands	r3, r2
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	711a      	strb	r2, [r3, #4]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <PutcksOnTx>:

void PutcksOnTx(_Tx *TX)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	799b      	ldrb	r3, [r3, #6]
 8001850:	3306      	adds	r3, #6
 8001852:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	791a      	ldrb	r2, [r3, #4]
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7a1a      	ldrb	r2, [r3, #8]
 8001862:	7bbb      	ldrb	r3, [r7, #14]
 8001864:	4013      	ands	r3, r2
 8001866:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 8001868:	e00e      	b.n	8001888 <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	1c59      	adds	r1, r3, #1
 8001872:	73b9      	strb	r1, [r7, #14]
 8001874:	4413      	add	r3, r2
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4053      	eors	r3, r2
 800187c:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7a1a      	ldrb	r2, [r3, #8]
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	4013      	ands	r3, r2
 8001886:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	791b      	ldrb	r3, [r3, #4]
 800188c:	7bba      	ldrb	r2, [r7, #14]
 800188e:	429a      	cmp	r2, r3
 8001890:	d1eb      	bne.n	800186a <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	1c59      	adds	r1, r3, #1
 800189c:	b2c8      	uxtb	r0, r1
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	7108      	strb	r0, [r1, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	791a      	ldrb	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7a1b      	ldrb	r3, [r3, #8]
 80018b0:	4013      	ands	r3, r2
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	711a      	strb	r2, [r3, #4]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f001 f808 	bl	80028dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018cc:	f000 fb02 	bl	8001ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d0:	f000 fd5c 	bl	800238c <MX_GPIO_Init>
  MX_TIM4_Init();
 80018d4:	f000 fc7a 	bl	80021cc <MX_TIM4_Init>
  MX_I2C2_Init();
 80018d8:	f000 fbfc 	bl	80020d4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80018dc:	f000 fd0e 	bl	80022fc <MX_USART1_UART_Init>
  MX_DMA_Init();
 80018e0:	f000 fd36 	bl	8002350 <MX_DMA_Init>
  MX_ADC1_Init();
 80018e4:	f000 fb54 	bl	8001f90 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80018e8:	f009 feb0 	bl	800b64c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80018ec:	f000 fc20 	bl	8002130 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 80018f0:	48ac      	ldr	r0, [pc, #688]	; (8001ba4 <main+0x2e0>)
 80018f2:	f009 ff9b 	bl	800b82c <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 80018f6:	48ac      	ldr	r0, [pc, #688]	; (8001ba8 <main+0x2e4>)
 80018f8:	f004 fcb6 	bl	8006268 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80018fc:	48ab      	ldr	r0, [pc, #684]	; (8001bac <main+0x2e8>)
 80018fe:	f004 fcb3 	bl	8006268 <HAL_TIM_Base_Start_IT>
  //Enable ESP8266
  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);	//Enable ESP8266
 8001902:	2201      	movs	r2, #1
 8001904:	2120      	movs	r1, #32
 8001906:	48aa      	ldr	r0, [pc, #680]	; (8001bb0 <main+0x2ec>)
 8001908:	f002 f953 	bl	8003bb2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);	//Reset ESP8266
 800190c:	2201      	movs	r2, #1
 800190e:	2110      	movs	r1, #16
 8001910:	48a7      	ldr	r0, [pc, #668]	; (8001bb0 <main+0x2ec>)
 8001912:	f002 f94e 	bl	8003bb2 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001916:	2100      	movs	r1, #0
 8001918:	48a3      	ldr	r0, [pc, #652]	; (8001ba8 <main+0x2e4>)
 800191a:	f004 fd4f 	bl	80063bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800191e:	2104      	movs	r1, #4
 8001920:	48a1      	ldr	r0, [pc, #644]	; (8001ba8 <main+0x2e4>)
 8001922:	f004 fd4b 	bl	80063bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001926:	2108      	movs	r1, #8
 8001928:	489f      	ldr	r0, [pc, #636]	; (8001ba8 <main+0x2e4>)
 800192a:	f004 fd47 	bl	80063bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800192e:	210c      	movs	r1, #12
 8001930:	489d      	ldr	r0, [pc, #628]	; (8001ba8 <main+0x2e4>)
 8001932:	f004 fd43 	bl	80063bc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001936:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <main+0x2e4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800193e:	4b9a      	ldr	r3, [pc, #616]	; (8001ba8 <main+0x2e4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001946:	4b98      	ldr	r3, [pc, #608]	; (8001ba8 <main+0x2e4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800194e:	4b96      	ldr	r3, [pc, #600]	; (8001ba8 <main+0x2e4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
/***********************************************************************************/
/************************** Inicializacion de contadores ***************************/
/***********************************************************************************/
  Count100ms = 100;
 8001956:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <main+0x2f0>)
 8001958:	2264      	movs	r2, #100	; 0x64
 800195a:	801a      	strh	r2, [r3, #0]
  Countms = 0;
 800195c:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <main+0x2f4>)
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
  Count5ms = 0;
 8001962:	4b96      	ldr	r3, [pc, #600]	; (8001bbc <main+0x2f8>)
 8001964:	2200      	movs	r2, #0
 8001966:	801a      	strh	r2, [r3, #0]
  Count500ms = 5;
 8001968:	4b95      	ldr	r3, [pc, #596]	; (8001bc0 <main+0x2fc>)
 800196a:	2205      	movs	r2, #5
 800196c:	801a      	strh	r2, [r3, #0]
  DecodeTimeOut = 60;
 800196e:	4b95      	ldr	r3, [pc, #596]	; (8001bc4 <main+0x300>)
 8001970:	223c      	movs	r2, #60	; 0x3c
 8001972:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/*************************** Inicializacion de variables USB ***********************/
/***********************************************************************************/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 8001974:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <main+0x304>)
 8001976:	4a95      	ldr	r2, [pc, #596]	; (8001bcc <main+0x308>)
 8001978:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 800197a:	4b93      	ldr	r3, [pc, #588]	; (8001bc8 <main+0x304>)
 800197c:	2200      	movs	r2, #0
 800197e:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 8001980:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <main+0x304>)
 8001982:	2200      	movs	r2, #0
 8001984:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 8001986:	4b90      	ldr	r3, [pc, #576]	; (8001bc8 <main+0x304>)
 8001988:	2200      	movs	r2, #0
 800198a:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 255;
 800198c:	4b8e      	ldr	r3, [pc, #568]	; (8001bc8 <main+0x304>)
 800198e:	22ff      	movs	r2, #255	; 0xff
 8001990:	739a      	strb	r2, [r3, #14]
  RXUSB.ISCMD = 0;
 8001992:	4b8d      	ldr	r3, [pc, #564]	; (8001bc8 <main+0x304>)
 8001994:	2200      	movs	r2, #0
 8001996:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 8001998:	4b8d      	ldr	r3, [pc, #564]	; (8001bd0 <main+0x30c>)
 800199a:	4a8e      	ldr	r2, [pc, #568]	; (8001bd4 <main+0x310>)
 800199c:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 800199e:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <main+0x30c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 80019a4:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <main+0x30c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 255;
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <main+0x30c>)
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	721a      	strb	r2, [r3, #8]
  TXUSB.maskBuf = 255;
 80019b0:	4b87      	ldr	r3, [pc, #540]	; (8001bd0 <main+0x30c>)
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	725a      	strb	r2, [r3, #9]
/***********************************************************************************/

/***********************************************************************************/
/********************** InicializaciÃ³n de  ESP8266 ************************/
/***********************************************************************************/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <main+0x314>)
 80019b8:	4a88      	ldr	r2, [pc, #544]	; (8001bdc <main+0x318>)
 80019ba:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 80019bc:	4b86      	ldr	r3, [pc, #536]	; (8001bd8 <main+0x314>)
 80019be:	2200      	movs	r2, #0
 80019c0:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 80019c2:	4b85      	ldr	r3, [pc, #532]	; (8001bd8 <main+0x314>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 80019c8:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <main+0x314>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 255;
 80019ce:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <main+0x314>)
 80019d0:	22ff      	movs	r2, #255	; 0xff
 80019d2:	739a      	strb	r2, [r3, #14]
  RXUSART1.ISCMD = 0;
 80019d4:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <main+0x314>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	719a      	strb	r2, [r3, #6]

  TXUSART1.Buff = txUSART1Buff;
 80019da:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <main+0x31c>)
 80019dc:	4a81      	ldr	r2, [pc, #516]	; (8001be4 <main+0x320>)
 80019de:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 80019e0:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <main+0x31c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 80019e6:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <main+0x31c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 255;
 80019ec:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <main+0x31c>)
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	721a      	strb	r2, [r3, #8]
  TXUSART1.maskBuf = 255;
 80019f2:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <main+0x31c>)
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	725a      	strb	r2, [r3, #9]

  IndiceError = 0;
 80019f8:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <main+0x324>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
  IndiceIPD = 0;
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <main+0x328>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]

  /*Bits de control*/
  DecodeIPD = 0;
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <main+0x32c>)
 8001a06:	7813      	ldrb	r3, [r2, #0]
 8001a08:	f36f 1386 	bfc	r3, #6, #1
 8001a0c:	7013      	strb	r3, [r2, #0]
  DecodeCIPSEND = 0;
 8001a0e:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <main+0x330>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
  DecodeHeaderESP = 0;
 8001a14:	4a76      	ldr	r2, [pc, #472]	; (8001bf0 <main+0x32c>)
 8001a16:	7813      	ldrb	r3, [r2, #0]
 8001a18:	f36f 03c3 	bfc	r3, #3, #1
 8001a1c:	7013      	strb	r3, [r2, #0]
  ESPReadyToRecyb = 0;
 8001a1e:	4a74      	ldr	r2, [pc, #464]	; (8001bf0 <main+0x32c>)
 8001a20:	7813      	ldrb	r3, [r2, #0]
 8001a22:	f36f 1345 	bfc	r3, #5, #1
 8001a26:	7013      	strb	r3, [r2, #0]
  SendADC = 0;
 8001a28:	4a73      	ldr	r2, [pc, #460]	; (8001bf8 <main+0x334>)
 8001a2a:	7813      	ldrb	r3, [r2, #0]
 8001a2c:	f36f 0382 	bfc	r3, #2, #1
 8001a30:	7013      	strb	r3, [r2, #0]
  ResetESP = 1;
 8001a32:	4a71      	ldr	r2, [pc, #452]	; (8001bf8 <main+0x334>)
 8001a34:	7813      	ldrb	r3, [r2, #0]
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	7013      	strb	r3, [r2, #0]
  Estado = 0;
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <main+0x338>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
  Indice = 0;
 8001a42:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <main+0x33c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  SentDataESP = 0;
 8001a48:	4a6b      	ldr	r2, [pc, #428]	; (8001bf8 <main+0x334>)
 8001a4a:	7813      	ldrb	r3, [r2, #0]
 8001a4c:	f36f 0341 	bfc	r3, #1, #1
 8001a50:	7013      	strb	r3, [r2, #0]
  RespMotor = 0;
 8001a52:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <main+0x32c>)
 8001a54:	7813      	ldrb	r3, [r2, #0]
 8001a56:	f36f 1304 	bfc	r3, #4, #1
 8001a5a:	7013      	strb	r3, [r2, #0]
  SendAlive = 0;
 8001a5c:	4a64      	ldr	r2, [pc, #400]	; (8001bf0 <main+0x32c>)
 8001a5e:	7813      	ldrb	r3, [r2, #0]
 8001a60:	f36f 0382 	bfc	r3, #2, #1
 8001a64:	7013      	strb	r3, [r2, #0]
  PCConnected = 0;
 8001a66:	4a62      	ldr	r2, [pc, #392]	; (8001bf0 <main+0x32c>)
 8001a68:	7813      	ldrb	r3, [r2, #0]
 8001a6a:	f36f 0341 	bfc	r3, #1, #1
 8001a6e:	7013      	strb	r3, [r2, #0]
  Start = 0;
 8001a70:	4a61      	ldr	r2, [pc, #388]	; (8001bf8 <main+0x334>)
 8001a72:	7813      	ldrb	r3, [r2, #0]
 8001a74:	f36f 03c3 	bfc	r3, #3, #1
 8001a78:	7013      	strb	r3, [r2, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************ Inicializacion de variables ADC **************************/
/***********************************************************************************/
  iAdc = 0;
 8001a7a:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <main+0x340>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  FirtScan=1;
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <main+0x344>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]


/***********************************************************************************/
/***************** Inicializacion de variables error cuadratico ********************/
/***********************************************************************************/
  posMINCenter = 0;
 8001a86:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <main+0x348>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
  posMINDerecha = 0;
 8001a8c:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <main+0x34c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
  posMINIzquierda = 0;
 8001a92:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <main+0x350>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  sensorValue = 0;
 8001a98:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <main+0x354>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	801a      	strh	r2, [r3, #0]
  error.i8[0] = 0;
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <main+0x358>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************* InicializaciÃ³n de variables PID *************************/
/***********************************************************************************/
  KpMA = KiMA = KdMA = KpMB = KiMB = KdMB = 0;
 8001aa4:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <main+0x35c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <main+0x35c>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <main+0x360>)
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <main+0x360>)
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <main+0x364>)
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <main+0x364>)
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <main+0x368>)
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <main+0x368>)
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	; (8001c30 <main+0x36c>)
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <main+0x36c>)
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <main+0x370>)
 8001ad0:	701a      	strb	r2, [r3, #0]
  IntegralMA = DerivativoMA = ProporcionalMB = IntegralMB = DerivativoMB = 0;
 8001ad2:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <main+0x374>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	801a      	strh	r2, [r3, #0]
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <main+0x374>)
 8001ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <main+0x378>)
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <main+0x378>)
 8001ae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <main+0x37c>)
 8001aea:	801a      	strh	r2, [r3, #0]
 8001aec:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <main+0x37c>)
 8001aee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001af2:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <main+0x380>)
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <main+0x380>)
 8001af8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001afc:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <main+0x384>)
 8001afe:	801a      	strh	r2, [r3, #0]
  ProporcionalMA.i16[0] = 0;
 8001b00:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <main+0x388>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
  PWMA.i16[0] = 0;
 8001b06:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <main+0x38c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
  PWMB.i16[0] = 0;
 8001b0c:	4b51      	ldr	r3, [pc, #324]	; (8001c54 <main+0x390>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]
  PWM_A.i16[0] = 0;
 8001b12:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <main+0x394>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
  PWM_B.i16[0] = 0;
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <main+0x398>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
  PWMBaseA.i16[0] = 0;
 8001b1e:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <main+0x39c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	801a      	strh	r2, [r3, #0]
  PWMBaseB.i16[0] = 0;
 8001b24:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <main+0x3a0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED de estado - Parpadea cada 100ms
	  if(On100ms){
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <main+0x3a4>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <main+0x298>
		  On100ms = 0;
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <main+0x3a4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 8001b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3e:	484b      	ldr	r0, [pc, #300]	; (8001c6c <main+0x3a8>)
 8001b40:	f002 f84f 	bl	8003be2 <HAL_GPIO_TogglePin>

		  //Utilizado como delay para no capturar basura de la ESP8266 al iniciarla
		  if(DecodeTimeOut > 0){
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <main+0x300>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <main+0x298>
			  DecodeTimeOut--;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <main+0x300>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <main+0x300>)
 8001b5a:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  if((espConnected) && (!DecodeHeaderESP) && (!RXUSART1.ISCMD) && (!Countms)){
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <main+0x32c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8084 	beq.w	8001c74 <main+0x3b0>
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <main+0x32c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d17c      	bne.n	8001c74 <main+0x3b0>
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <main+0x314>)
 8001b7c:	799b      	ldrb	r3, [r3, #6]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d177      	bne.n	8001c74 <main+0x3b0>
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <main+0x2f4>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d172      	bne.n	8001c74 <main+0x3b0>
		  if(PCConnected)SendUDPData();
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <main+0x32c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d069      	beq.n	8001c70 <main+0x3ac>
 8001b9c:	f7ff fae4 	bl	8001168 <SendUDPData>
 8001ba0:	e068      	b.n	8001c74 <main+0x3b0>
 8001ba2:	bf00      	nop
 8001ba4:	08000c4d 	.word	0x08000c4d
 8001ba8:	200004ec 	.word	0x200004ec
 8001bac:	20000728 	.word	0x20000728
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	20000bb4 	.word	0x20000bb4
 8001bb8:	200004ea 	.word	0x200004ea
 8001bbc:	20000772 	.word	0x20000772
 8001bc0:	20000714 	.word	0x20000714
 8001bc4:	2000056c 	.word	0x2000056c
 8001bc8:	20000ce8 	.word	0x20000ce8
 8001bcc:	200005ec 	.word	0x200005ec
 8001bd0:	20000718 	.word	0x20000718
 8001bd4:	200007ac 	.word	0x200007ac
 8001bd8:	20000558 	.word	0x20000558
 8001bdc:	2000019c 	.word	0x2000019c
 8001be0:	20000d1c 	.word	0x20000d1c
 8001be4:	20000bb8 	.word	0x20000bb8
 8001be8:	200007a8 	.word	0x200007a8
 8001bec:	20000b6c 	.word	0x20000b6c
 8001bf0:	200008f8 	.word	0x200008f8
 8001bf4:	200005c5 	.word	0x200005c5
 8001bf8:	20000770 	.word	0x20000770
 8001bfc:	200007a9 	.word	0x200007a9
 8001c00:	200008f9 	.word	0x200008f9
 8001c04:	20000771 	.word	0x20000771
 8001c08:	20000198 	.word	0x20000198
 8001c0c:	20000774 	.word	0x20000774
 8001c10:	20000724 	.word	0x20000724
 8001c14:	20000d6c 	.word	0x20000d6c
 8001c18:	20000cbc 	.word	0x20000cbc
 8001c1c:	20000b94 	.word	0x20000b94
 8001c20:	200005c4 	.word	0x200005c4
 8001c24:	20000b70 	.word	0x20000b70
 8001c28:	20000cc1 	.word	0x20000cc1
 8001c2c:	200008ac 	.word	0x200008ac
 8001c30:	20000775 	.word	0x20000775
 8001c34:	20000d2a 	.word	0x20000d2a
 8001c38:	200008f4 	.word	0x200008f4
 8001c3c:	20000b6e 	.word	0x20000b6e
 8001c40:	20000d28 	.word	0x20000d28
 8001c44:	20000948 	.word	0x20000948
 8001c48:	2000070c 	.word	0x2000070c
 8001c4c:	20000b4c 	.word	0x20000b4c
 8001c50:	20000cfc 	.word	0x20000cfc
 8001c54:	20000d2c 	.word	0x20000d2c
 8001c58:	20000cc4 	.word	0x20000cc4
 8001c5c:	20000b74 	.word	0x20000b74
 8001c60:	200004c8 	.word	0x200004c8
 8001c64:	20000534 	.word	0x20000534
 8001c68:	200005c6 	.word	0x200005c6
 8001c6c:	40011000 	.word	0x40011000
		  else ConnectPC();
 8001c70:	f7ff fc74 	bl	800155c <ConnectPC>

	  }

	  if((Start) && (!Count5ms)){
 8001c74:	4b89      	ldr	r3, [pc, #548]	; (8001e9c <main+0x5d8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <main+0x3d6>
 8001c82:	4b87      	ldr	r3, [pc, #540]	; (8001ea0 <main+0x5dc>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <main+0x3d6>
		  ErrorCuadratico();
 8001c8c:	f7fe fb50 	bl	8000330 <ErrorCuadratico>
		  PID();
 8001c90:	f7fe fa5c 	bl	800014c <PID>
		  Count5ms=10;
 8001c94:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <main+0x5dc>)
 8001c96:	220a      	movs	r2, #10
 8001c98:	801a      	strh	r2, [r3, #0]
	  }

	  //Recepcion por USB - Decodifica header
	  if(RXUSB.iw != RXUSB.ir) {
 8001c9a:	4b82      	ldr	r3, [pc, #520]	; (8001ea4 <main+0x5e0>)
 8001c9c:	791b      	ldrb	r3, [r3, #4]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <main+0x5e0>)
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d002      	beq.n	8001cb0 <main+0x3ec>
		  DecodeHeader((_Rx *)&RXUSB);
 8001caa:	487e      	ldr	r0, [pc, #504]	; (8001ea4 <main+0x5e0>)
 8001cac:	f7fe fff6 	bl	8000c9c <DecodeHeader>
	  }
	  //Recepcion por USB - Decodifica comando
	  if(RXUSB.ISCMD) {
 8001cb0:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <main+0x5e0>)
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <main+0x3fe>
		  DecodeCmd((_Rx *)&RXUSB, (_Tx *)&TXUSB);
 8001cba:	497b      	ldr	r1, [pc, #492]	; (8001ea8 <main+0x5e4>)
 8001cbc:	4879      	ldr	r0, [pc, #484]	; (8001ea4 <main+0x5e0>)
 8001cbe:	f7ff f8f1 	bl	8000ea4 <DecodeCmd>
	  }
	  //Transmision por USB
	  if(TXUSB.iw != TXUSB.ir) {
 8001cc2:	4b79      	ldr	r3, [pc, #484]	; (8001ea8 <main+0x5e4>)
 8001cc4:	791a      	ldrb	r2, [r3, #4]
 8001cc6:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <main+0x5e4>)
 8001cc8:	795b      	ldrb	r3, [r3, #5]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d042      	beq.n	8001d54 <main+0x490>
		  if(TXUSB.iw > TXUSB.ir){
 8001cce:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <main+0x5e4>)
 8001cd0:	791a      	ldrb	r2, [r3, #4]
 8001cd2:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <main+0x5e4>)
 8001cd4:	795b      	ldrb	r3, [r3, #5]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d917      	bls.n	8001d0a <main+0x446>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <main+0x5e4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a72      	ldr	r2, [pc, #456]	; (8001ea8 <main+0x5e4>)
 8001ce0:	7952      	ldrb	r2, [r2, #5]
 8001ce2:	1898      	adds	r0, r3, r2
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <main+0x5e4>)
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <main+0x5e4>)
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f009 fd73 	bl	800b7e0 <CDC_Transmit_FS>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d121      	bne.n	8001d44 <main+0x480>
				  TXUSB.ir=TXUSB.iw;
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <main+0x5e4>)
 8001d02:	791a      	ldrb	r2, [r3, #4]
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <main+0x5e4>)
 8001d06:	715a      	strb	r2, [r3, #5]
 8001d08:	e01c      	b.n	8001d44 <main+0x480>
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <main+0x5e4>)
 8001d0c:	7a5b      	ldrb	r3, [r3, #9]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <main+0x5e4>)
 8001d12:	795b      	ldrb	r3, [r3, #5]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <main+0x5e8>)
 8001d20:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 8001d22:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <main+0x5e4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a60      	ldr	r2, [pc, #384]	; (8001ea8 <main+0x5e4>)
 8001d28:	7952      	ldrb	r2, [r2, #5]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <main+0x5e8>)
 8001d2e:	8812      	ldrh	r2, [r2, #0]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f009 fd54 	bl	800b7e0 <CDC_Transmit_FS>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <main+0x480>
				  TXUSB.ir = 0;
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <main+0x5e4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 8001d44:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <main+0x5e4>)
 8001d46:	795a      	ldrb	r2, [r3, #5]
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <main+0x5e4>)
 8001d4a:	7a1b      	ldrb	r3, [r3, #8]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <main+0x5e4>)
 8001d52:	715a      	strb	r2, [r3, #5]
	  }

	  //Primera inicializacion de ESP8266 y Reset
	  if((!DecodeTimeOut) && (ResetESP) && (!ESPReadyToRecyb)){
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <main+0x5ec>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11a      	bne.n	8001d94 <main+0x4d0>
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <main+0x5d8>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <main+0x4d0>
 8001d6c:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <main+0x5f0>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <main+0x4d0>
		  InitEsp((_Rx *)&RXUSART1);
 8001d7a:	484f      	ldr	r0, [pc, #316]	; (8001eb8 <main+0x5f4>)
 8001d7c:	f7fe fc2c 	bl	80005d8 <InitEsp>
		  //Interrupcion para recibir datos desde ESP8266
		  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 8001d80:	2201      	movs	r2, #1
 8001d82:	494e      	ldr	r1, [pc, #312]	; (8001ebc <main+0x5f8>)
 8001d84:	484e      	ldr	r0, [pc, #312]	; (8001ec0 <main+0x5fc>)
 8001d86:	f005 f9ca 	bl	800711e <HAL_UART_Receive_IT>
		  ResetESP = 0;
 8001d8a:	4a44      	ldr	r2, [pc, #272]	; (8001e9c <main+0x5d8>)
 8001d8c:	7813      	ldrb	r3, [r2, #0]
 8001d8e:	f36f 0300 	bfc	r3, #0, #1
 8001d92:	7013      	strb	r3, [r2, #0]
	  }

	  //Continua con los casos para iniciar
	  if((!espConnected) && (!ESPReadyToRecyb) && (!ResetESP) && (!DecodeTimeOut)){
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <main+0x5f0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d115      	bne.n	8001dce <main+0x50a>
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <main+0x5f0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10e      	bne.n	8001dce <main+0x50a>
 8001db0:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <main+0x5d8>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <main+0x50a>
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <main+0x5ec>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <main+0x50a>
		  InitEsp((_Rx *)&RXUSART1);
 8001dc8:	483b      	ldr	r0, [pc, #236]	; (8001eb8 <main+0x5f4>)
 8001dca:	f7fe fc05 	bl	80005d8 <InitEsp>
	  }

	  //Recepcion por ESP8266 - Decodifica comandos provenientes de ESP8266
	  if(RXUSART1.iw != RXUSART1.ir){
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <main+0x5f4>)
 8001dd0:	791b      	ldrb	r3, [r3, #4]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <main+0x5f4>)
 8001dd6:	795b      	ldrb	r3, [r3, #5]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d002      	beq.n	8001de4 <main+0x520>
		  DecodeESP((_Rx *)&RXUSART1);
 8001dde:	4836      	ldr	r0, [pc, #216]	; (8001eb8 <main+0x5f4>)
 8001de0:	f7fe fcc4 	bl	800076c <DecodeESP>
	  }
	  //Si la decodificacion resulta de un dato proveniente de PC, se decodifica header
	  if(DecodeHeaderESP){
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <main+0x5f0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <main+0x534>
		  DecodeHeader((_Rx *)&RXUSART1);
 8001df2:	4831      	ldr	r0, [pc, #196]	; (8001eb8 <main+0x5f4>)
 8001df4:	f7fe ff52 	bl	8000c9c <DecodeHeader>

	  }
	  //Recepcion por ESP8266 - Decodifica comando
	  if(RXUSART1.ISCMD) {
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <main+0x5f4>)
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <main+0x546>
		  DecodeCmd((_Rx *)&RXUSART1, (_Tx *)&TXUSART1);
 8001e02:	4930      	ldr	r1, [pc, #192]	; (8001ec4 <main+0x600>)
 8001e04:	482c      	ldr	r0, [pc, #176]	; (8001eb8 <main+0x5f4>)
 8001e06:	f7ff f84d 	bl	8000ea4 <DecodeCmd>

	  }

	  //Transmision por ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <main+0x600>)
 8001e0c:	791a      	ldrb	r2, [r3, #4]
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <main+0x600>)
 8001e10:	795b      	ldrb	r3, [r3, #5]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d012      	beq.n	8001e3c <main+0x578>
		  if((huart1.Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE){
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <main+0x5fc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d10b      	bne.n	8001e3c <main+0x578>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <main+0x600>)
 8001e26:	795b      	ldrb	r3, [r3, #5]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	b2d1      	uxtb	r1, r2
 8001e2c:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <main+0x600>)
 8001e2e:	7151      	strb	r1, [r2, #5]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <main+0x604>)
 8001e34:	5c9a      	ldrb	r2, [r3, r2]
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <main+0x5fc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
		  }
	  }

	  //Reset ESPE8266
	  if((HAL_GPIO_ReadPin(GPIOB, RESET_ESP_Pin) == GPIO_PIN_RESET) && (!DecodeTimeOut) && (ResetESP) && (ESPReadyToRecyb)){
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	4823      	ldr	r0, [pc, #140]	; (8001ecc <main+0x608>)
 8001e40:	f001 fea0 	bl	8003b84 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f47f ae6f 	bne.w	8001b2a <main+0x266>
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <main+0x5ec>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f47f ae69 	bne.w	8001b2a <main+0x266>
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <main+0x5d8>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f43f ae61 	beq.w	8001b2a <main+0x266>
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <main+0x5f0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f43f ae59 	beq.w	8001b2a <main+0x266>
		  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4813      	ldr	r0, [pc, #76]	; (8001ecc <main+0x608>)
 8001e7e:	f001 fe98 	bl	8003bb2 <HAL_GPIO_WritePin>
		  DecodeTimeOut = 1;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <main+0x5ec>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	801a      	strh	r2, [r3, #0]
		  ESPReadyToRecyb = 0;
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <main+0x5f0>)
 8001e8a:	7813      	ldrb	r3, [r2, #0]
 8001e8c:	f36f 1345 	bfc	r3, #5, #1
 8001e90:	7013      	strb	r3, [r2, #0]
		  Estado = 2;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <main+0x60c>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
	  if(On100ms){
 8001e98:	e647      	b.n	8001b2a <main+0x266>
 8001e9a:	bf00      	nop
 8001e9c:	20000770 	.word	0x20000770
 8001ea0:	20000772 	.word	0x20000772
 8001ea4:	20000ce8 	.word	0x20000ce8
 8001ea8:	20000718 	.word	0x20000718
 8001eac:	200005c8 	.word	0x200005c8
 8001eb0:	2000056c 	.word	0x2000056c
 8001eb4:	200008f8 	.word	0x200008f8
 8001eb8:	20000558 	.word	0x20000558
 8001ebc:	2000019c 	.word	0x2000019c
 8001ec0:	200008b0 	.word	0x200008b0
 8001ec4:	20000d1c 	.word	0x20000d1c
 8001ec8:	20000bb8 	.word	0x20000bb8
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	200007a9 	.word	0x200007a9

08001ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b094      	sub	sp, #80	; 0x50
 8001ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ede:	2228      	movs	r2, #40	; 0x28
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00a f88c 	bl	800c000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f12:	2301      	movs	r3, #1
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f16:	2302      	movs	r3, #2
 8001f18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fc7c 	bl	8005828 <HAL_RCC_OscConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f36:	f000 faa1 	bl	800247c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2102      	movs	r1, #2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fee6 	bl	8005d28 <HAL_RCC_ClockConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f62:	f000 fa8b 	bl	800247c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001f66:	2312      	movs	r3, #18
 8001f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 f870 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001f82:	f000 fa7b 	bl	800247c <Error_Handler>
  }
}
 8001f86:	bf00      	nop
 8001f88:	3750      	adds	r7, #80	; 0x50
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fa2:	4a4b      	ldr	r2, [pc, #300]	; (80020d0 <MX_ADC1_Init+0x140>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fb4:	4b45      	ldr	r3, [pc, #276]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fbc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc2:	4b42      	ldr	r3, [pc, #264]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001fc8:	4b40      	ldr	r3, [pc, #256]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fca:	2208      	movs	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fce:	483f      	ldr	r0, [pc, #252]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001fd0:	f000 fce6 	bl	80029a0 <HAL_ADC_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001fda:	f000 fa4f 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4837      	ldr	r0, [pc, #220]	; (80020cc <MX_ADC1_Init+0x13c>)
 8001ff0:	f000 fe9e 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ffa:	f000 fa3f 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002002:	2302      	movs	r3, #2
 8002004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4830      	ldr	r0, [pc, #192]	; (80020cc <MX_ADC1_Init+0x13c>)
 800200c:	f000 fe90 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002016:	f000 fa31 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800201a:	2302      	movs	r3, #2
 800201c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800201e:	2303      	movs	r3, #3
 8002020:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4829      	ldr	r0, [pc, #164]	; (80020cc <MX_ADC1_Init+0x13c>)
 8002028:	f000 fe82 	bl	8002d30 <HAL_ADC_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002032:	f000 fa23 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002036:	2303      	movs	r3, #3
 8002038:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800203a:	2304      	movs	r3, #4
 800203c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4822      	ldr	r0, [pc, #136]	; (80020cc <MX_ADC1_Init+0x13c>)
 8002044:	f000 fe74 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800204e:	f000 fa15 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002052:	2304      	movs	r3, #4
 8002054:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002056:	2305      	movs	r3, #5
 8002058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	481b      	ldr	r0, [pc, #108]	; (80020cc <MX_ADC1_Init+0x13c>)
 8002060:	f000 fe66 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800206a:	f000 fa07 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800206e:	2305      	movs	r3, #5
 8002070:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002072:	2306      	movs	r3, #6
 8002074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4814      	ldr	r0, [pc, #80]	; (80020cc <MX_ADC1_Init+0x13c>)
 800207c:	f000 fe58 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002086:	f000 f9f9 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800208a:	2306      	movs	r3, #6
 800208c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800208e:	2307      	movs	r3, #7
 8002090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	480d      	ldr	r0, [pc, #52]	; (80020cc <MX_ADC1_Init+0x13c>)
 8002098:	f000 fe4a 	bl	8002d30 <HAL_ADC_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80020a2:	f000 f9eb 	bl	800247c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020a6:	2307      	movs	r3, #7
 80020a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80020aa:	2308      	movs	r3, #8
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4806      	ldr	r0, [pc, #24]	; (80020cc <MX_ADC1_Init+0x13c>)
 80020b4:	f000 fe3c 	bl	8002d30 <HAL_ADC_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80020be:	f000 f9dd 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000778 	.word	0x20000778
 80020d0:	40012400 	.word	0x40012400

080020d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_I2C2_Init+0x50>)
 80020da:	4a13      	ldr	r2, [pc, #76]	; (8002128 <MX_I2C2_Init+0x54>)
 80020dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_I2C2_Init+0x50>)
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_I2C2_Init+0x58>)
 80020e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_I2C2_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_I2C2_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_I2C2_Init+0x50>)
 80020f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <MX_I2C2_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_I2C2_Init+0x50>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <MX_I2C2_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_I2C2_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_I2C2_Init+0x50>)
 8002112:	f001 fd7f 	bl	8003c14 <HAL_I2C_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800211c:	f000 f9ae 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000570 	.word	0x20000570
 8002128:	40005800 	.word	0x40005800
 800212c:	000186a0 	.word	0x000186a0

08002130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <MX_TIM3_Init+0x94>)
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <MX_TIM3_Init+0x98>)
 8002150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002154:	2207      	movs	r2, #7
 8002156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM3_Init+0x94>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002160:	f244 6250 	movw	r2, #18000	; 0x4650
 8002164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM3_Init+0x94>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002174:	f004 f828 	bl	80061c8 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800217e:	f000 f97d 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002190:	f004 fb7c 	bl	800688c <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800219a:	f000 f96f 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a6:	463b      	mov	r3, r7
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_TIM3_Init+0x94>)
 80021ac:	f004 fefa 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021b6:	f000 f961 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000728 	.word	0x20000728
 80021c8:	40000400 	.word	0x40000400

080021cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	; 0x38
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	f107 0320 	add.w	r3, r7, #32
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <MX_TIM4_Init+0x128>)
 80021fe:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <MX_TIM4_Init+0x12c>)
 8002200:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8002202:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002204:	2207      	movs	r2, #7
 8002206:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <MX_TIM4_Init+0x128>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002210:	f242 3228 	movw	r2, #9000	; 0x2328
 8002214:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <MX_TIM4_Init+0x128>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002222:	4834      	ldr	r0, [pc, #208]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002224:	f003 ffd0 	bl	80061c8 <HAL_TIM_Base_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800222e:	f000 f925 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	4619      	mov	r1, r3
 800223e:	482d      	ldr	r0, [pc, #180]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002240:	f004 fb24 	bl	800688c <HAL_TIM_ConfigClockSource>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800224a:	f000 f917 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800224e:	4829      	ldr	r0, [pc, #164]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002250:	f004 f85c 	bl	800630c <HAL_TIM_PWM_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800225a:	f000 f90f 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002266:	f107 0320 	add.w	r3, r7, #32
 800226a:	4619      	mov	r1, r3
 800226c:	4821      	ldr	r0, [pc, #132]	; (80022f4 <MX_TIM4_Init+0x128>)
 800226e:	f004 fe99 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002278:	f000 f900 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <MX_TIM4_Init+0x128>)
 8002294:	f004 fa3c 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800229e:	f000 f8ed 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2204      	movs	r2, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4812      	ldr	r0, [pc, #72]	; (80022f4 <MX_TIM4_Init+0x128>)
 80022aa:	f004 fa31 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80022b4:	f000 f8e2 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2208      	movs	r2, #8
 80022bc:	4619      	mov	r1, r3
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_TIM4_Init+0x128>)
 80022c0:	f004 fa26 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80022ca:	f000 f8d7 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	220c      	movs	r2, #12
 80022d2:	4619      	mov	r1, r3
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <MX_TIM4_Init+0x128>)
 80022d6:	f004 fa1b 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80022e0:	f000 f8cc 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <MX_TIM4_Init+0x128>)
 80022e6:	f000 f9eb 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 80022ea:	bf00      	nop
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200004ec 	.word	0x200004ec
 80022f8:	40000800 	.word	0x40000800

080022fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_USART1_UART_Init+0x50>)
 8002304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002334:	f004 fea6 	bl	8007084 <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800233e:	f000 f89d 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200008b0 	.word	0x200008b0
 800234c:	40013800 	.word	0x40013800

08002350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_DMA_Init+0x38>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <MX_DMA_Init+0x38>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6153      	str	r3, [r2, #20]
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <MX_DMA_Init+0x38>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	200b      	movs	r0, #11
 8002374:	f000 ffad 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002378:	200b      	movs	r0, #11
 800237a:	f000 ffc6 	bl	800330a <HAL_NVIC_EnableIRQ>

}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000

0800238c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <MX_GPIO_Init+0xe0>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <MX_GPIO_Init+0xe0>)
 80023a6:	f043 0310 	orr.w	r3, r3, #16
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b2f      	ldr	r3, [pc, #188]	; (800246c <MX_GPIO_Init+0xe0>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <MX_GPIO_Init+0xe0>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a2b      	ldr	r2, [pc, #172]	; (800246c <MX_GPIO_Init+0xe0>)
 80023be:	f043 0320 	orr.w	r3, r3, #32
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <MX_GPIO_Init+0xe0>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <MX_GPIO_Init+0xe0>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <MX_GPIO_Init+0xe0>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <MX_GPIO_Init+0xe0>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <MX_GPIO_Init+0xe0>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <MX_GPIO_Init+0xe0>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <MX_GPIO_Init+0xe0>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8002400:	2200      	movs	r2, #0
 8002402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002406:	481a      	ldr	r0, [pc, #104]	; (8002470 <MX_GPIO_Init+0xe4>)
 8002408:	f001 fbd3 	bl	8003bb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin|ENABLE_ESP_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2130      	movs	r1, #48	; 0x30
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <MX_GPIO_Init+0xe8>)
 8002412:	f001 fbce 	bl	8003bb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8002416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2302      	movs	r3, #2
 8002426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4619      	mov	r1, r3
 800242e:	4810      	ldr	r0, [pc, #64]	; (8002470 <MX_GPIO_Init+0xe4>)
 8002430:	f001 fa24 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002434:	23ff      	movs	r3, #255	; 0xff
 8002436:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002438:	2303      	movs	r3, #3
 800243a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4619      	mov	r1, r3
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_GPIO_Init+0xec>)
 8002444:	f001 fa1a 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_ESP_Pin ENABLE_ESP_Pin */
  GPIO_InitStruct.Pin = RESET_ESP_Pin|ENABLE_ESP_Pin;
 8002448:	2330      	movs	r3, #48	; 0x30
 800244a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2302      	movs	r3, #2
 8002456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4619      	mov	r1, r3
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_GPIO_Init+0xe8>)
 8002460:	f001 fa0c 	bl	800387c <HAL_GPIO_Init>

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	40011000 	.word	0x40011000
 8002474:	40010c00 	.word	0x40010c00
 8002478:	40010800 	.word	0x40010800

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	e7fe      	b.n	8002484 <Error_Handler+0x8>
	...

08002488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_MspInit+0x5c>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <HAL_MspInit+0x5c>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6193      	str	r3, [r2, #24]
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_MspInit+0x5c>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_MspInit+0x5c>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_MspInit+0x5c>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_MspInit+0x5c>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_MspInit+0x60>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_MspInit+0x60>)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40010000 	.word	0x40010000

080024ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <HAL_ADC_MspInit+0xbc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d149      	bne.n	80025a0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_ADC_MspInit+0xc0>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_ADC_MspInit+0xc0>)
 8002512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002516:	6193      	str	r3, [r2, #24]
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_ADC_MspInit+0xc0>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_ADC_MspInit+0xc0>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_ADC_MspInit+0xc0>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_ADC_MspInit+0xc0>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800253c:	23ff      	movs	r3, #255	; 0xff
 800253e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002540:	2303      	movs	r3, #3
 8002542:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4619      	mov	r1, r3
 800254a:	4819      	ldr	r0, [pc, #100]	; (80025b0 <HAL_ADC_MspInit+0xc4>)
 800254c:	f001 f996 	bl	800387c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_ADC_MspInit+0xcc>)
 8002554:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 800256a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002576:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002580:	2200      	movs	r2, #0
 8002582:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002586:	f000 fedb 	bl	8003340 <HAL_DMA_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002590:	f7ff ff74 	bl	800247c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 8002598:	621a      	str	r2, [r3, #32]
 800259a:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_ADC_MspInit+0xc8>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025a0:	bf00      	nop
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40012400 	.word	0x40012400
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	20000904 	.word	0x20000904
 80025b8:	40020008 	.word	0x40020008

080025bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a16      	ldr	r2, [pc, #88]	; (8002630 <HAL_I2C_MspInit+0x74>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d124      	bne.n	8002626 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_I2C_MspInit+0x78>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <HAL_I2C_MspInit+0x78>)
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_I2C_MspInit+0x78>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025fa:	2312      	movs	r3, #18
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4619      	mov	r1, r3
 8002608:	480b      	ldr	r0, [pc, #44]	; (8002638 <HAL_I2C_MspInit+0x7c>)
 800260a:	f001 f937 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_I2C_MspInit+0x78>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_I2C_MspInit+0x78>)
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002618:	61d3      	str	r3, [r2, #28]
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_I2C_MspInit+0x78>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002626:	bf00      	nop
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40005800 	.word	0x40005800
 8002634:	40021000 	.word	0x40021000
 8002638:	40010c00 	.word	0x40010c00

0800263c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <HAL_TIM_Base_MspInit+0x78>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d114      	bne.n	8002678 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_TIM_Base_MspInit+0x7c>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	201d      	movs	r0, #29
 800266c:	f000 fe31 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002670:	201d      	movs	r0, #29
 8002672:	f000 fe4a 	bl	800330a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002676:	e018      	b.n	80026aa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_TIM_Base_MspInit+0x80>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d113      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	201e      	movs	r0, #30
 80026a0:	f000 fe17 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026a4:	201e      	movs	r0, #30
 80026a6:	f000 fe30 	bl	800330a <HAL_NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40000800 	.word	0x40000800

080026c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0x5c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d118      	bne.n	8002712 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_TIM_MspPostInit+0x60>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <HAL_TIM_MspPostInit+0x60>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_TIM_MspPostInit+0x60>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2302      	movs	r3, #2
 8002704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <HAL_TIM_MspPostInit+0x64>)
 800270e:	f001 f8b5 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40000800 	.word	0x40000800
 8002720:	40021000 	.word	0x40021000
 8002724:	40010c00 	.word	0x40010c00

08002728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_UART_MspInit+0x9c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d139      	bne.n	80027bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002748:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_UART_MspInit+0xa0>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_UART_MspInit+0xa0>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_UART_MspInit+0xa0>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_UART_MspInit+0xa0>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_UART_MspInit+0xa0>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_UART_MspInit+0xa0>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800277c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	4619      	mov	r1, r3
 800278c:	480f      	ldr	r0, [pc, #60]	; (80027cc <HAL_UART_MspInit+0xa4>)
 800278e:	f001 f875 	bl	800387c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4619      	mov	r1, r3
 80027a6:	4809      	ldr	r0, [pc, #36]	; (80027cc <HAL_UART_MspInit+0xa4>)
 80027a8:	f001 f868 	bl	800387c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	2025      	movs	r0, #37	; 0x25
 80027b2:	f000 fd8e 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027b6:	2025      	movs	r0, #37	; 0x25
 80027b8:	f000 fda7 	bl	800330a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010800 	.word	0x40010800

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <NMI_Handler+0x4>

080027d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler+0x4>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <UsageFault_Handler+0x4>

080027ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002816:	f000 f8a7 	bl	8002968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <DMA1_Channel1_IRQHandler+0x10>)
 8002826:	f000 fef5 	bl	8003614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000904 	.word	0x20000904

08002834 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800283a:	f001 fc60 	bl	80040fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000163c 	.word	0x2000163c

08002848 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <TIM3_IRQHandler+0x10>)
 800284e:	f003 fe57 	bl	8006500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000728 	.word	0x20000728

0800285c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <TIM4_IRQHandler+0x10>)
 8002862:	f003 fe4d 	bl	8006500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200004ec 	.word	0x200004ec

08002870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <USART1_IRQHandler+0x10>)
 8002876:	f004 fced 	bl	8007254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200008b0 	.word	0x200008b0

08002884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002892:	490d      	ldr	r1, [pc, #52]	; (80028c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002898:	e002      	b.n	80028a0 <LoopCopyDataInit>

0800289a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800289c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289e:	3304      	adds	r3, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a4:	d3f9      	bcc.n	800289a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ac:	e001      	b.n	80028b2 <LoopFillZerobss>

080028ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b0:	3204      	adds	r2, #4

080028b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b4:	d3fb      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028b6:	f7ff ffe5 	bl	8002884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ba:	f009 fb7d 	bl	800bfb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028be:	f7ff f801 	bl	80018c4 <main>
  bx lr
 80028c2:	4770      	bx	lr
  ldr r0, =_sdata
 80028c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80028cc:	0800c264 	.word	0x0800c264
  ldr r2, =_sbss
 80028d0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80028d4:	20001928 	.word	0x20001928

080028d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028d8:	e7fe      	b.n	80028d8 <ADC1_2_IRQHandler>
	...

080028dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_Init+0x28>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_Init+0x28>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ec:	2003      	movs	r0, #3
 80028ee:	f000 fce5 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028f2:	200f      	movs	r0, #15
 80028f4:	f000 f808 	bl	8002908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f8:	f7ff fdc6 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40022000 	.word	0x40022000

08002908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_InitTick+0x54>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_InitTick+0x58>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4619      	mov	r1, r3
 800291a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fcfd 	bl	8003326 <HAL_SYSTICK_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e00e      	b.n	8002954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b0f      	cmp	r3, #15
 800293a:	d80a      	bhi.n	8002952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800293c:	2200      	movs	r2, #0
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f000 fcc5 	bl	80032d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002948:	4a06      	ldr	r2, [pc, #24]	; (8002964 <HAL_InitTick+0x5c>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000000 	.word	0x20000000
 8002960:	20000008 	.word	0x20000008
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_IncTick+0x1c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_IncTick+0x20>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4413      	add	r3, r2
 8002978:	4a03      	ldr	r2, [pc, #12]	; (8002988 <HAL_IncTick+0x20>)
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000008 	.word	0x20000008
 8002988:	20000d74 	.word	0x20000d74

0800298c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_GetTick+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000d74 	.word	0x20000d74

080029a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0be      	b.n	8002b40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fd84 	bl	80024ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 faf5 	bl	8002fd4 <ADC_ConversionStop_Disable>
 80029ea:	4603      	mov	r3, r0
 80029ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8099 	bne.w	8002b2e <HAL_ADC_Init+0x18e>
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 8095 	bne.w	8002b2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a0c:	f023 0302 	bic.w	r3, r3, #2
 8002a10:	f043 0202 	orr.w	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7b1b      	ldrb	r3, [r3, #12]
 8002a26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_Init+0xa2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_ADC_Init+0xa8>
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a46:	e000      	b.n	8002a4a <HAL_ADC_Init+0xaa>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7d1b      	ldrb	r3, [r3, #20]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d119      	bne.n	8002a8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7b1b      	ldrb	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	035a      	lsls	r2, r3, #13
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e00b      	b.n	8002a8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_ADC_Init+0x1a8>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abc:	d003      	beq.n	8002ac6 <HAL_ADC_Init+0x126>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	051b      	lsls	r3, r3, #20
 8002ace:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_ADC_Init+0x1ac>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b0a:	e018      	b.n	8002b3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f023 0312 	bic.w	r3, r3, #18
 8002b14:	f043 0210 	orr.w	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b2c:	e007      	b.n	8002b3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	ffe1f7fd 	.word	0xffe1f7fd
 8002b4c:	ff1f0efe 	.word	0xff1f0efe

08002b50 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a64      	ldr	r2, [pc, #400]	; (8002cf8 <HAL_ADC_Start_DMA+0x1a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_Start_DMA+0x24>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <HAL_ADC_Start_DMA+0x1ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d106      	bne.n	8002b82 <HAL_ADC_Start_DMA+0x32>
 8002b74:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_ADC_Start_DMA+0x1a8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 80b3 	bne.w	8002ce8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_Start_DMA+0x40>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0ae      	b.n	8002cee <HAL_ADC_Start_DMA+0x19e>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f9c1 	bl	8002f20 <ADC_Enable>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 809a 	bne.w	8002cde <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a4e      	ldr	r2, [pc, #312]	; (8002cfc <HAL_ADC_Start_DMA+0x1ac>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_Start_DMA+0x84>
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_ADC_Start_DMA+0x1a8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d115      	bne.n	8002c00 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d026      	beq.n	8002c3c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bfe:	e01d      	b.n	8002c3c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <HAL_ADC_Start_DMA+0x1a8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_ADC_Start_DMA+0xd0>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <HAL_ADC_Start_DMA+0x1ac>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10d      	bne.n	8002c3c <HAL_ADC_Start_DMA+0xec>
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_ADC_Start_DMA+0x1a8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	f023 0206 	bic.w	r2, r3, #6
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c54:	e002      	b.n	8002c5c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <HAL_ADC_Start_DMA+0x1b0>)
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_ADC_Start_DMA+0x1b4>)
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_ADC_Start_DMA+0x1b8>)
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0202 	mvn.w	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c94:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a18      	ldr	r0, [r3, #32]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	334c      	adds	r3, #76	; 0x4c
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f000 fba5 	bl	80033f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cb4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cb8:	d108      	bne.n	8002ccc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002cc8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cca:	e00f      	b.n	8002cec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cda:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cdc:	e006      	b.n	8002cec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002ce6:	e001      	b.n	8002cec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40012400 	.word	0x40012400
 8002cfc:	40012800 	.word	0x40012800
 8002d00:	08003057 	.word	0x08003057
 8002d04:	080030d3 	.word	0x080030d3
 8002d08:	080030ef 	.word	0x080030ef

08002d0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x20>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0dc      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1da>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d81c      	bhi.n	8002d9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b05      	subs	r3, #5
 8002d72:	221f      	movs	r2, #31
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	4019      	ands	r1, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b05      	subs	r3, #5
 8002d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
 8002d98:	e03c      	b.n	8002e14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d81c      	bhi.n	8002ddc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	3b23      	subs	r3, #35	; 0x23
 8002db4:	221f      	movs	r2, #31
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	4019      	ands	r1, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b23      	subs	r3, #35	; 0x23
 8002dce:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dda:	e01b      	b.n	8002e14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b41      	subs	r3, #65	; 0x41
 8002dee:	221f      	movs	r2, #31
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4019      	ands	r1, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3b41      	subs	r3, #65	; 0x41
 8002e08:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d91c      	bls.n	8002e56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68d9      	ldr	r1, [r3, #12]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b1e      	subs	r3, #30
 8002e2e:	2207      	movs	r2, #7
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	4019      	ands	r1, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6898      	ldr	r0, [r3, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	3b1e      	subs	r3, #30
 8002e48:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	e019      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6919      	ldr	r1, [r3, #16]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	2207      	movs	r2, #7
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	4019      	ands	r1, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6898      	ldr	r0, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d003      	beq.n	8002e9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e96:	2b11      	cmp	r3, #17
 8002e98:	d132      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_ADC_ConfigChannel+0x1e4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d125      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d126      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ec0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d11a      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_ADC_ConfigChannel+0x1ec>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	0c9a      	lsrs	r2, r3, #18
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ee0:	e002      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f9      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x1b2>
 8002eee:	e007      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012400 	.word	0x40012400
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d040      	beq.n	8002fc0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <ADC_Enable+0xac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <ADC_Enable+0xb0>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f5c:	e002      	b.n	8002f64 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f9      	bne.n	8002f5e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f6a:	f7ff fd0f 	bl	800298c <HAL_GetTick>
 8002f6e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f70:	e01f      	b.n	8002fb2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f72:	f7ff fd0b 	bl	800298c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d918      	bls.n	8002fb2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d011      	beq.n	8002fb2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d1d8      	bne.n	8002f72 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	431bde83 	.word	0x431bde83

08002fd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d12e      	bne.n	800304c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ffe:	f7ff fcc5 	bl	800298c <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003004:	e01b      	b.n	800303e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003006:	f7ff fcc1 	bl	800298c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d914      	bls.n	800303e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10d      	bne.n	800303e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d0dc      	beq.n	8003006 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800306c:	2b00      	cmp	r3, #0
 800306e:	d127      	bne.n	80030c0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003086:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800308a:	d115      	bne.n	80030b8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003090:	2b00      	cmp	r3, #0
 8003092:	d111      	bne.n	80030b8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7fd fdad 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030be:	e004      	b.n	80030ca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fe13 	bl	8002d0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fe02 	bl	8002d1e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003140:	4013      	ands	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800314c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003156:	4a04      	ldr	r2, [pc, #16]	; (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60d3      	str	r3, [r2, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <__NVIC_GetPriorityGrouping+0x18>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 0307 	and.w	r3, r3, #7
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	db0b      	blt.n	80031b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4906      	ldr	r1, [pc, #24]	; (80031bc <__NVIC_EnableIRQ+0x34>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2001      	movs	r0, #1
 80031aa:	fa00 f202 	lsl.w	r2, r0, r2
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100

080031c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	6039      	str	r1, [r7, #0]
 80031ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	db0a      	blt.n	80031ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	490c      	ldr	r1, [pc, #48]	; (800320c <__NVIC_SetPriority+0x4c>)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	440b      	add	r3, r1
 80031e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e8:	e00a      	b.n	8003200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4908      	ldr	r1, [pc, #32]	; (8003210 <__NVIC_SetPriority+0x50>)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	3b04      	subs	r3, #4
 80031f8:	0112      	lsls	r2, r2, #4
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	440b      	add	r3, r1
 80031fe:	761a      	strb	r2, [r3, #24]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000e100 	.word	0xe000e100
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f1c3 0307 	rsb	r3, r3, #7
 800322e:	2b04      	cmp	r3, #4
 8003230:	bf28      	it	cs
 8003232:	2304      	movcs	r3, #4
 8003234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3304      	adds	r3, #4
 800323a:	2b06      	cmp	r3, #6
 800323c:	d902      	bls.n	8003244 <NVIC_EncodePriority+0x30>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3b03      	subs	r3, #3
 8003242:	e000      	b.n	8003246 <NVIC_EncodePriority+0x32>
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	401a      	ands	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800325c:	f04f 31ff 	mov.w	r1, #4294967295
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43d9      	mvns	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	4313      	orrs	r3, r2
         );
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d301      	bcc.n	800328e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <SysTick_Config+0x40>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003296:	210f      	movs	r1, #15
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f7ff ff90 	bl	80031c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <SysTick_Config+0x40>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SysTick_Config+0x40>)
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff2d 	bl	8003124 <__NVIC_SetPriorityGrouping>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e4:	f7ff ff42 	bl	800316c <__NVIC_GetPriorityGrouping>
 80032e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff ff90 	bl	8003214 <NVIC_EncodePriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff5f 	bl	80031c0 <__NVIC_SetPriority>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff35 	bl	8003188 <__NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffa2 	bl	8003278 <SysTick_Config>
 8003334:	4603      	mov	r3, r0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e043      	b.n	80033de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_DMA_Init+0xa8>)
 800335e:	4413      	add	r3, r2
 8003360:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_DMA_Init+0xac>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	009a      	lsls	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_DMA_Init+0xb0>)
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800338a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800338e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	bffdfff8 	.word	0xbffdfff8
 80033ec:	cccccccd 	.word	0xcccccccd
 80033f0:	40020000 	.word	0x40020000

080033f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_DMA_Start_IT+0x20>
 8003410:	2302      	movs	r3, #2
 8003412:	e04a      	b.n	80034aa <HAL_DMA_Start_IT+0xb6>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003422:	2b01      	cmp	r3, #1
 8003424:	d13a      	bne.n	800349c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f9e8 	bl	8003820 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 020e 	orr.w	r2, r2, #14
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e00f      	b.n	800348a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0204 	bic.w	r2, r2, #4
 8003478:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 020a 	orr.w	r2, r2, #10
 8003488:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e005      	b.n	80034a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d008      	beq.n	80034da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e020      	b.n	800351c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 020e 	bic.w	r2, r2, #14
 80034e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
	...

08003528 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800353a:	2b02      	cmp	r3, #2
 800353c:	d005      	beq.n	800354a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2204      	movs	r2, #4
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e051      	b.n	80035ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 020e 	bic.w	r2, r2, #14
 8003558:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_DMA_Abort_IT+0xd0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d029      	beq.n	80035c8 <HAL_DMA_Abort_IT+0xa0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a20      	ldr	r2, [pc, #128]	; (80035fc <HAL_DMA_Abort_IT+0xd4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d022      	beq.n	80035c4 <HAL_DMA_Abort_IT+0x9c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_DMA_Abort_IT+0xd8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d01a      	beq.n	80035be <HAL_DMA_Abort_IT+0x96>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_DMA_Abort_IT+0xdc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d012      	beq.n	80035b8 <HAL_DMA_Abort_IT+0x90>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_DMA_Abort_IT+0xe0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00a      	beq.n	80035b2 <HAL_DMA_Abort_IT+0x8a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_DMA_Abort_IT+0xe4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d102      	bne.n	80035ac <HAL_DMA_Abort_IT+0x84>
 80035a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035aa:	e00e      	b.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 80035ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b0:	e00b      	b.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 80035b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b6:	e008      	b.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 80035b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035bc:	e005      	b.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 80035be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c2:	e002      	b.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 80035c4:	2310      	movs	r3, #16
 80035c6:	e000      	b.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 80035c8:	2301      	movs	r3, #1
 80035ca:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_DMA_Abort_IT+0xe8>)
 80035cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
    } 
  }
  return status;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40020008 	.word	0x40020008
 80035fc:	4002001c 	.word	0x4002001c
 8003600:	40020030 	.word	0x40020030
 8003604:	40020044 	.word	0x40020044
 8003608:	40020058 	.word	0x40020058
 800360c:	4002006c 	.word	0x4002006c
 8003610:	40020000 	.word	0x40020000

08003614 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2204      	movs	r2, #4
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d04f      	beq.n	80036dc <HAL_DMA_IRQHandler+0xc8>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04a      	beq.n	80036dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d107      	bne.n	8003664 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a66      	ldr	r2, [pc, #408]	; (8003804 <HAL_DMA_IRQHandler+0x1f0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d029      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xae>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_DMA_IRQHandler+0x1f4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_IRQHandler+0xaa>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a63      	ldr	r2, [pc, #396]	; (800380c <HAL_DMA_IRQHandler+0x1f8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01a      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xa4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a62      	ldr	r2, [pc, #392]	; (8003810 <HAL_DMA_IRQHandler+0x1fc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x9e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a60      	ldr	r2, [pc, #384]	; (8003814 <HAL_DMA_IRQHandler+0x200>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00a      	beq.n	80036ac <HAL_DMA_IRQHandler+0x98>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_DMA_IRQHandler+0x204>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d102      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x92>
 80036a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036a4:	e00e      	b.n	80036c4 <HAL_DMA_IRQHandler+0xb0>
 80036a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036aa:	e00b      	b.n	80036c4 <HAL_DMA_IRQHandler+0xb0>
 80036ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036b0:	e008      	b.n	80036c4 <HAL_DMA_IRQHandler+0xb0>
 80036b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036b6:	e005      	b.n	80036c4 <HAL_DMA_IRQHandler+0xb0>
 80036b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036bc:	e002      	b.n	80036c4 <HAL_DMA_IRQHandler+0xb0>
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	e000      	b.n	80036c4 <HAL_DMA_IRQHandler+0xb0>
 80036c2:	2304      	movs	r3, #4
 80036c4:	4a55      	ldr	r2, [pc, #340]	; (800381c <HAL_DMA_IRQHandler+0x208>)
 80036c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8094 	beq.w	80037fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036da:	e08e      	b.n	80037fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2202      	movs	r2, #2
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d056      	beq.n	800379a <HAL_DMA_IRQHandler+0x186>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d051      	beq.n	800379a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10b      	bne.n	800371c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 020a 	bic.w	r2, r2, #10
 8003712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a38      	ldr	r2, [pc, #224]	; (8003804 <HAL_DMA_IRQHandler+0x1f0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d029      	beq.n	800377a <HAL_DMA_IRQHandler+0x166>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a37      	ldr	r2, [pc, #220]	; (8003808 <HAL_DMA_IRQHandler+0x1f4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_DMA_IRQHandler+0x162>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a35      	ldr	r2, [pc, #212]	; (800380c <HAL_DMA_IRQHandler+0x1f8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01a      	beq.n	8003770 <HAL_DMA_IRQHandler+0x15c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a34      	ldr	r2, [pc, #208]	; (8003810 <HAL_DMA_IRQHandler+0x1fc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d012      	beq.n	800376a <HAL_DMA_IRQHandler+0x156>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a32      	ldr	r2, [pc, #200]	; (8003814 <HAL_DMA_IRQHandler+0x200>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00a      	beq.n	8003764 <HAL_DMA_IRQHandler+0x150>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a31      	ldr	r2, [pc, #196]	; (8003818 <HAL_DMA_IRQHandler+0x204>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d102      	bne.n	800375e <HAL_DMA_IRQHandler+0x14a>
 8003758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800375c:	e00e      	b.n	800377c <HAL_DMA_IRQHandler+0x168>
 800375e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003762:	e00b      	b.n	800377c <HAL_DMA_IRQHandler+0x168>
 8003764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003768:	e008      	b.n	800377c <HAL_DMA_IRQHandler+0x168>
 800376a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800376e:	e005      	b.n	800377c <HAL_DMA_IRQHandler+0x168>
 8003770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003774:	e002      	b.n	800377c <HAL_DMA_IRQHandler+0x168>
 8003776:	2320      	movs	r3, #32
 8003778:	e000      	b.n	800377c <HAL_DMA_IRQHandler+0x168>
 800377a:	2302      	movs	r3, #2
 800377c:	4a27      	ldr	r2, [pc, #156]	; (800381c <HAL_DMA_IRQHandler+0x208>)
 800377e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d034      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003798:	e02f      	b.n	80037fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2208      	movs	r2, #8
 80037a0:	409a      	lsls	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d028      	beq.n	80037fc <HAL_DMA_IRQHandler+0x1e8>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d023      	beq.n	80037fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 020e 	bic.w	r2, r2, #14
 80037c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f202 	lsl.w	r2, r1, r2
 80037d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
    }
  }
  return;
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
}
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40020008 	.word	0x40020008
 8003808:	4002001c 	.word	0x4002001c
 800380c:	40020030 	.word	0x40020030
 8003810:	40020044 	.word	0x40020044
 8003814:	40020058 	.word	0x40020058
 8003818:	4002006c 	.word	0x4002006c
 800381c:	40020000 	.word	0x40020000

08003820 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d108      	bne.n	8003860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800385e:	e007      	b.n	8003870 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
	...

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b08b      	sub	sp, #44	; 0x2c
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388e:	e169      	b.n	8003b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003890:	2201      	movs	r2, #1
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8158 	bne.w	8003b5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a9a      	ldr	r2, [pc, #616]	; (8003b1c <HAL_GPIO_Init+0x2a0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d05e      	beq.n	8003976 <HAL_GPIO_Init+0xfa>
 80038b8:	4a98      	ldr	r2, [pc, #608]	; (8003b1c <HAL_GPIO_Init+0x2a0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d875      	bhi.n	80039aa <HAL_GPIO_Init+0x12e>
 80038be:	4a98      	ldr	r2, [pc, #608]	; (8003b20 <HAL_GPIO_Init+0x2a4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d058      	beq.n	8003976 <HAL_GPIO_Init+0xfa>
 80038c4:	4a96      	ldr	r2, [pc, #600]	; (8003b20 <HAL_GPIO_Init+0x2a4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d86f      	bhi.n	80039aa <HAL_GPIO_Init+0x12e>
 80038ca:	4a96      	ldr	r2, [pc, #600]	; (8003b24 <HAL_GPIO_Init+0x2a8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d052      	beq.n	8003976 <HAL_GPIO_Init+0xfa>
 80038d0:	4a94      	ldr	r2, [pc, #592]	; (8003b24 <HAL_GPIO_Init+0x2a8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d869      	bhi.n	80039aa <HAL_GPIO_Init+0x12e>
 80038d6:	4a94      	ldr	r2, [pc, #592]	; (8003b28 <HAL_GPIO_Init+0x2ac>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d04c      	beq.n	8003976 <HAL_GPIO_Init+0xfa>
 80038dc:	4a92      	ldr	r2, [pc, #584]	; (8003b28 <HAL_GPIO_Init+0x2ac>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d863      	bhi.n	80039aa <HAL_GPIO_Init+0x12e>
 80038e2:	4a92      	ldr	r2, [pc, #584]	; (8003b2c <HAL_GPIO_Init+0x2b0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d046      	beq.n	8003976 <HAL_GPIO_Init+0xfa>
 80038e8:	4a90      	ldr	r2, [pc, #576]	; (8003b2c <HAL_GPIO_Init+0x2b0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d85d      	bhi.n	80039aa <HAL_GPIO_Init+0x12e>
 80038ee:	2b12      	cmp	r3, #18
 80038f0:	d82a      	bhi.n	8003948 <HAL_GPIO_Init+0xcc>
 80038f2:	2b12      	cmp	r3, #18
 80038f4:	d859      	bhi.n	80039aa <HAL_GPIO_Init+0x12e>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <HAL_GPIO_Init+0x80>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003977 	.word	0x08003977
 8003900:	08003951 	.word	0x08003951
 8003904:	08003963 	.word	0x08003963
 8003908:	080039a5 	.word	0x080039a5
 800390c:	080039ab 	.word	0x080039ab
 8003910:	080039ab 	.word	0x080039ab
 8003914:	080039ab 	.word	0x080039ab
 8003918:	080039ab 	.word	0x080039ab
 800391c:	080039ab 	.word	0x080039ab
 8003920:	080039ab 	.word	0x080039ab
 8003924:	080039ab 	.word	0x080039ab
 8003928:	080039ab 	.word	0x080039ab
 800392c:	080039ab 	.word	0x080039ab
 8003930:	080039ab 	.word	0x080039ab
 8003934:	080039ab 	.word	0x080039ab
 8003938:	080039ab 	.word	0x080039ab
 800393c:	080039ab 	.word	0x080039ab
 8003940:	08003959 	.word	0x08003959
 8003944:	0800396d 	.word	0x0800396d
 8003948:	4a79      	ldr	r2, [pc, #484]	; (8003b30 <HAL_GPIO_Init+0x2b4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800394e:	e02c      	b.n	80039aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	623b      	str	r3, [r7, #32]
          break;
 8003956:	e029      	b.n	80039ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	3304      	adds	r3, #4
 800395e:	623b      	str	r3, [r7, #32]
          break;
 8003960:	e024      	b.n	80039ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	3308      	adds	r3, #8
 8003968:	623b      	str	r3, [r7, #32]
          break;
 800396a:	e01f      	b.n	80039ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	330c      	adds	r3, #12
 8003972:	623b      	str	r3, [r7, #32]
          break;
 8003974:	e01a      	b.n	80039ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800397e:	2304      	movs	r3, #4
 8003980:	623b      	str	r3, [r7, #32]
          break;
 8003982:	e013      	b.n	80039ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800398c:	2308      	movs	r3, #8
 800398e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	611a      	str	r2, [r3, #16]
          break;
 8003996:	e009      	b.n	80039ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003998:	2308      	movs	r3, #8
 800399a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	615a      	str	r2, [r3, #20]
          break;
 80039a2:	e003      	b.n	80039ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039a4:	2300      	movs	r3, #0
 80039a6:	623b      	str	r3, [r7, #32]
          break;
 80039a8:	e000      	b.n	80039ac <HAL_GPIO_Init+0x130>
          break;
 80039aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2bff      	cmp	r3, #255	; 0xff
 80039b0:	d801      	bhi.n	80039b6 <HAL_GPIO_Init+0x13a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	e001      	b.n	80039ba <HAL_GPIO_Init+0x13e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2bff      	cmp	r3, #255	; 0xff
 80039c0:	d802      	bhi.n	80039c8 <HAL_GPIO_Init+0x14c>
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	e002      	b.n	80039ce <HAL_GPIO_Init+0x152>
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	3b08      	subs	r3, #8
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	210f      	movs	r1, #15
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	6a39      	ldr	r1, [r7, #32]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80b1 	beq.w	8003b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039fc:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <HAL_GPIO_Init+0x2b8>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4a4c      	ldr	r2, [pc, #304]	; (8003b34 <HAL_GPIO_Init+0x2b8>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6193      	str	r3, [r2, #24]
 8003a08:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_GPIO_Init+0x2b8>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a14:	4a48      	ldr	r2, [pc, #288]	; (8003b38 <HAL_GPIO_Init+0x2bc>)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a40      	ldr	r2, [pc, #256]	; (8003b3c <HAL_GPIO_Init+0x2c0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_GPIO_Init+0x1ec>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3f      	ldr	r2, [pc, #252]	; (8003b40 <HAL_GPIO_Init+0x2c4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00d      	beq.n	8003a64 <HAL_GPIO_Init+0x1e8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <HAL_GPIO_Init+0x2c8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <HAL_GPIO_Init+0x1e4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3d      	ldr	r2, [pc, #244]	; (8003b48 <HAL_GPIO_Init+0x2cc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_GPIO_Init+0x1e0>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e004      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e002      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	f002 0203 	and.w	r2, r2, #3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4093      	lsls	r3, r2
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a7a:	492f      	ldr	r1, [pc, #188]	; (8003b38 <HAL_GPIO_Init+0x2bc>)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	492c      	ldr	r1, [pc, #176]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	4928      	ldr	r1, [pc, #160]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4922      	ldr	r1, [pc, #136]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	e006      	b.n	8003ad8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	491e      	ldr	r1, [pc, #120]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4918      	ldr	r1, [pc, #96]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	4914      	ldr	r1, [pc, #80]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d021      	beq.n	8003b50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <HAL_GPIO_Init+0x2d0>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60cb      	str	r3, [r1, #12]
 8003b18:	e021      	b.n	8003b5e <HAL_GPIO_Init+0x2e2>
 8003b1a:	bf00      	nop
 8003b1c:	10320000 	.word	0x10320000
 8003b20:	10310000 	.word	0x10310000
 8003b24:	10220000 	.word	0x10220000
 8003b28:	10210000 	.word	0x10210000
 8003b2c:	10120000 	.word	0x10120000
 8003b30:	10110000 	.word	0x10110000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40010800 	.word	0x40010800
 8003b40:	40010c00 	.word	0x40010c00
 8003b44:	40011000 	.word	0x40011000
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	4909      	ldr	r1, [pc, #36]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	3301      	adds	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f47f ae8e 	bne.w	8003890 <HAL_GPIO_Init+0x14>
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	372c      	adds	r7, #44	; 0x2c
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40010400 	.word	0x40010400

08003b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	e001      	b.n	8003ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	807b      	strh	r3, [r7, #2]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc2:	787b      	ldrb	r3, [r7, #1]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bce:	e003      	b.n	8003bd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	041a      	lsls	r2, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	041a      	lsls	r2, r3, #16
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	400b      	ands	r3, r1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e12b      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fe fcbe 	bl	80025bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c78:	f002 f9aa 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a81      	ldr	r2, [pc, #516]	; (8003e88 <HAL_I2C_Init+0x274>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d807      	bhi.n	8003c98 <HAL_I2C_Init+0x84>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a80      	ldr	r2, [pc, #512]	; (8003e8c <HAL_I2C_Init+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e006      	b.n	8003ca6 <HAL_I2C_Init+0x92>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a7d      	ldr	r2, [pc, #500]	; (8003e90 <HAL_I2C_Init+0x27c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf94      	ite	ls
 8003ca0:	2301      	movls	r3, #1
 8003ca2:	2300      	movhi	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0e7      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a78      	ldr	r2, [pc, #480]	; (8003e94 <HAL_I2C_Init+0x280>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0c9b      	lsrs	r3, r3, #18
 8003cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_I2C_Init+0x274>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d802      	bhi.n	8003ce8 <HAL_I2C_Init+0xd4>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	e009      	b.n	8003cfc <HAL_I2C_Init+0xe8>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a69      	ldr	r2, [pc, #420]	; (8003e98 <HAL_I2C_Init+0x284>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	495c      	ldr	r1, [pc, #368]	; (8003e88 <HAL_I2C_Init+0x274>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d819      	bhi.n	8003d50 <HAL_I2C_Init+0x13c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e59      	subs	r1, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d30:	400b      	ands	r3, r1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_I2C_Init+0x138>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e59      	subs	r1, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	e051      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e04f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d111      	bne.n	8003d7c <HAL_I2C_Init+0x168>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e012      	b.n	8003da2 <HAL_I2C_Init+0x18e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	0099      	lsls	r1, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Init+0x196>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <HAL_I2C_Init+0x1bc>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e58      	subs	r0, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	440b      	add	r3, r1
 8003dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	e00f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	6809      	ldr	r1, [r1, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6911      	ldr	r1, [r2, #16]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	000186a0 	.word	0x000186a0
 8003e8c:	001e847f 	.word	0x001e847f
 8003e90:	003d08ff 	.word	0x003d08ff
 8003e94:	431bde83 	.word	0x431bde83
 8003e98:	10624dd3 	.word	0x10624dd3

08003e9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9e:	b08b      	sub	sp, #44	; 0x2c
 8003ea0:	af06      	add	r7, sp, #24
 8003ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0fd      	b.n	80040aa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f007 fdce 	bl	800ba64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2203      	movs	r2, #3
 8003ecc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 fde3 	bl	8007aa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	687e      	ldr	r6, [r7, #4]
 8003ee2:	466d      	mov	r5, sp
 8003ee4:	f106 0410 	add.w	r4, r6, #16
 8003ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	602b      	str	r3, [r5, #0]
 8003ef0:	1d33      	adds	r3, r6, #4
 8003ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef4:	6838      	ldr	r0, [r7, #0]
 8003ef6:	f003 fdad 	bl	8007a54 <USB_CoreInit>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0ce      	b.n	80040aa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f003 fdde 	bl	8007ad4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e04c      	b.n	8003fb8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3301      	adds	r3, #1
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	b298      	uxth	r0, r3
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	440b      	add	r3, r1
 8003f5a:	3336      	adds	r3, #54	; 0x36
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	3303      	adds	r3, #3
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f76:	7bfa      	ldrb	r2, [r7, #15]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	440b      	add	r3, r1
 8003f84:	3338      	adds	r3, #56	; 0x38
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	333c      	adds	r3, #60	; 0x3c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	3340      	adds	r3, #64	; 0x40
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d3ad      	bcc.n	8003f1e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	e044      	b.n	8004052 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	3301      	adds	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	d3b5      	bcc.n	8003fc8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	687e      	ldr	r6, [r7, #4]
 8004064:	466d      	mov	r5, sp
 8004066:	f106 0410 	add.w	r4, r6, #16
 800406a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800406c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	602b      	str	r3, [r5, #0]
 8004072:	1d33      	adds	r3, r6, #4
 8004074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f003 fd38 	bl	8007aec <USB_DevInit>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e00d      	b.n	80040aa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f005 fea9 	bl	8009dfa <USB_DevDisconnect>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_PCD_Start+0x16>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e016      	b.n	80040f6 <HAL_PCD_Start+0x44>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fccd 	bl	8007a74 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80040da:	2101      	movs	r1, #1
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f007 ff34 	bl	800bf4a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f005 fe7d 	bl	8009de6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b088      	sub	sp, #32
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f005 fe7f 	bl	8009e0e <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d102      	bne.n	8004122 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb61 	bl	80047e4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f005 fe71 	bl	8009e0e <USB_ReadInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d112      	bne.n	800415e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414a:	b292      	uxth	r2, r2
 800414c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f007 fd02 	bl	800bb5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004156:	2100      	movs	r1, #0
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f925 	bl	80043a8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f005 fe53 	bl	8009e0e <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004172:	d10b      	bne.n	800418c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004186:	b292      	uxth	r2, r2
 8004188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f005 fe3c 	bl	8009e0e <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	d10b      	bne.n	80041ba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b4:	b292      	uxth	r2, r2
 80041b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f005 fe25 	bl	8009e0e <USB_ReadInterrupts>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d126      	bne.n	800421e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	b292      	uxth	r2, r2
 80041e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0208 	bic.w	r2, r2, #8
 80041fa:	b292      	uxth	r2, r2
 80041fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f007 fce3 	bl	800bbcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004218:	b292      	uxth	r2, r2
 800421a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f005 fdf3 	bl	8009e0e <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	f040 8084 	bne.w	800433e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004236:	2300      	movs	r3, #0
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e011      	b.n	8004260 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	7ffb      	ldrb	r3, [r7, #31]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	7ffb      	ldrb	r3, [r7, #31]
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	b292      	uxth	r2, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	f107 0120 	add.w	r1, r7, #32
 8004254:	440b      	add	r3, r1
 8004256:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	3301      	adds	r3, #1
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	7ffb      	ldrb	r3, [r7, #31]
 8004262:	2b07      	cmp	r3, #7
 8004264:	d9ea      	bls.n	800423c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	b292      	uxth	r2, r2
 800427a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	b292      	uxth	r2, r2
 8004292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004296:	bf00      	nop
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f6      	beq.n	8004298 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	b292      	uxth	r2, r2
 80042be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e010      	b.n	80042ea <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	4611      	mov	r1, r2
 80042d0:	7ffa      	ldrb	r2, [r7, #31]
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	440a      	add	r2, r1
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	f107 0120 	add.w	r1, r7, #32
 80042dc:	440b      	add	r3, r1
 80042de:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80042e2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80042e4:	7ffb      	ldrb	r3, [r7, #31]
 80042e6:	3301      	adds	r3, #1
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	7ffb      	ldrb	r3, [r7, #31]
 80042ec:	2b07      	cmp	r3, #7
 80042ee:	d9eb      	bls.n	80042c8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0208 	orr.w	r2, r2, #8
 8004302:	b292      	uxth	r2, r2
 8004304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431a:	b292      	uxth	r2, r2
 800431c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0204 	orr.w	r2, r2, #4
 8004332:	b292      	uxth	r2, r2
 8004334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f007 fc2d 	bl	800bb98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f005 fd63 	bl	8009e0e <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004352:	d10e      	bne.n	8004372 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800435c:	b29a      	uxth	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004366:	b292      	uxth	r2, r2
 8004368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f007 fbe6 	bl	800bb3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f005 fd49 	bl	8009e0e <USB_ReadInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	d10b      	bne.n	80043a0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800439a:	b292      	uxth	r2, r2
 800439c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80043a0:	bf00      	nop
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_PCD_SetAddress+0x1a>
 80043be:	2302      	movs	r3, #2
 80043c0:	e013      	b.n	80043ea <HAL_PCD_SetAddress+0x42>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f005 fcf0 	bl	8009dc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	4603      	mov	r3, r0
 8004402:	70fb      	strb	r3, [r7, #3]
 8004404:	460b      	mov	r3, r1
 8004406:	803b      	strh	r3, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da0e      	bge.n	8004436 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	705a      	strb	r2, [r3, #1]
 8004434:	e00e      	b.n	8004454 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 0207 	and.w	r2, r3, #7
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004460:	883a      	ldrh	r2, [r7, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	78ba      	ldrb	r2, [r7, #2]
 800446a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800447e:	78bb      	ldrb	r3, [r7, #2]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d102      	bne.n	800448a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_PCD_EP_Open+0xa6>
 8004494:	2302      	movs	r3, #2
 8004496:	e00e      	b.n	80044b6 <HAL_PCD_EP_Open+0xc4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f003 fb40 	bl	8007b2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80044b4:	7afb      	ldrb	r3, [r7, #11]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	da0e      	bge.n	80044f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	705a      	strb	r2, [r3, #1]
 80044ee:	e00e      	b.n	800450e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_PCD_EP_Close+0x6a>
 8004524:	2302      	movs	r3, #2
 8004526:	e00e      	b.n	8004546 <HAL_PCD_EP_Close+0x88>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68f9      	ldr	r1, [r7, #12]
 8004536:	4618      	mov	r0, r3
 8004538:	f003 fe62 	bl	8008200 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	460b      	mov	r3, r1
 800455c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	f003 0207 	and.w	r2, r3, #7
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	b2da      	uxtb	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800459a:	7afb      	ldrb	r3, [r7, #11]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f004 f814 	bl	80085d8 <USB_EPStartXfer>
 80045b0:	e005      	b.n	80045be <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f004 f80d 	bl	80085d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	460b      	mov	r3, r1
 8004604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2201      	movs	r2, #1
 8004640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	b2da      	uxtb	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	4618      	mov	r0, r3
 8004660:	f003 ffba 	bl	80085d8 <USB_EPStartXfer>
 8004664:	e005      	b.n	8004672 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6979      	ldr	r1, [r7, #20]
 800466c:	4618      	mov	r0, r3
 800466e:	f003 ffb3 	bl	80085d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	f003 0207 	and.w	r2, r3, #7
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	d901      	bls.n	800469a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e04c      	b.n	8004734 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0e      	bge.n	80046c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	705a      	strb	r2, [r3, #1]
 80046be:	e00c      	b.n	80046da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_PCD_EP_SetStall+0x7e>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e01c      	b.n	8004734 <HAL_PCD_EP_SetStall+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	4618      	mov	r0, r3
 800470a:	f005 fa5c 	bl	8009bc6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f005 fb81 	bl	8009e2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d901      	bls.n	800475a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e040      	b.n	80047dc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800475a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800475e:	2b00      	cmp	r3, #0
 8004760:	da0e      	bge.n	8004780 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	705a      	strb	r2, [r3, #1]
 800477e:	e00e      	b.n	800479e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	f003 0207 	and.w	r2, r3, #7
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_PCD_EP_ClrStall+0x82>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e00e      	b.n	80047dc <HAL_PCD_EP_ClrStall+0xa0>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f005 fa4a 	bl	8009c66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	; 0x38
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047ec:	e2ec      	b.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80047f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004804:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8161 	bne.w	8004ad0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800480e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d152      	bne.n	80048be <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	81fb      	strh	r3, [r7, #14]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	89fb      	ldrh	r3, [r7, #14]
 8004830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004838:	b29b      	uxth	r3, r3
 800483a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3328      	adds	r3, #40	; 0x28
 8004840:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	3302      	adds	r3, #2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	441a      	add	r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800487c:	2100      	movs	r1, #0
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f007 f943 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 829b 	beq.w	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 8296 	bne.w	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b292      	uxth	r2, r2
 80048b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80048bc:	e284      	b.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d034      	beq.n	8004942 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	3306      	adds	r3, #6
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004916:	b29b      	uxth	r3, r3
 8004918:	f005 fad8 	bl	8009ecc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29a      	uxth	r2, r3
 8004924:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004928:	4013      	ands	r3, r2
 800492a:	823b      	strh	r3, [r7, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	8a3a      	ldrh	r2, [r7, #16]
 8004932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004936:	b292      	uxth	r2, r2
 8004938:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f007 f8b8 	bl	800bab0 <HAL_PCD_SetupStageCallback>
 8004940:	e242      	b.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004942:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004946:	2b00      	cmp	r3, #0
 8004948:	f280 823e 	bge.w	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004958:	4013      	ands	r3, r2
 800495a:	83bb      	strh	r3, [r7, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	8bba      	ldrh	r2, [r7, #28]
 8004962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004966:	b292      	uxth	r2, r2
 8004968:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	3306      	adds	r3, #6
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d019      	beq.n	80049d2 <PCD_EP_ISR_Handler+0x1ee>
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d015      	beq.n	80049d2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	6959      	ldr	r1, [r3, #20]
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f005 fa88 	bl	8009ecc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	441a      	add	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049ca:	2100      	movs	r1, #0
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f007 f881 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 81f2 	bne.w	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	4413      	add	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d112      	bne.n	8004a32 <PCD_EP_ISR_Handler+0x24e>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	e02f      	b.n	8004a92 <PCD_EP_ISR_Handler+0x2ae>
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b3e      	cmp	r3, #62	; 0x3e
 8004a38:	d813      	bhi.n	8004a62 <PCD_EP_ISR_Handler+0x27e>
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	633b      	str	r3, [r7, #48]	; 0x30
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <PCD_EP_ISR_Handler+0x270>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	3301      	adds	r3, #1
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e017      	b.n	8004a92 <PCD_EP_ISR_Handler+0x2ae>
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <PCD_EP_ISR_Handler+0x298>
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	827b      	strh	r3, [r7, #18]
 8004aa4:	8a7b      	ldrh	r3, [r7, #18]
 8004aa6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004aaa:	827b      	strh	r3, [r7, #18]
 8004aac:	8a7b      	ldrh	r3, [r7, #18]
 8004aae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ab2:	827b      	strh	r3, [r7, #18]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	8a7b      	ldrh	r3, [r7, #18]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
 8004ace:	e17b      	b.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ae2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f280 80ea 	bge.w	8004cc0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b02:	4013      	ands	r3, r2
 8004b04:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d122      	bne.n	8004b82 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3306      	adds	r3, #6
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b64:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8087 	beq.w	8004c7c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	6959      	ldr	r1, [r3, #20]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	88da      	ldrh	r2, [r3, #6]
 8004b7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b7c:	f005 f9a6 	bl	8009ecc <USB_ReadPMA>
 8004b80:	e07c      	b.n	8004c7c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	78db      	ldrb	r3, [r3, #3]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d108      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f927 	bl	8004de4 <HAL_PCD_EP_DB_Receive>
 8004b96:	4603      	mov	r3, r0
 8004b98:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b9a:	e06f      	b.n	8004c7c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d021      	beq.n	8004c3a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3302      	adds	r3, #2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d02a      	beq.n	8004c7c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	6959      	ldr	r1, [r3, #20]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	891a      	ldrh	r2, [r3, #8]
 8004c32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c34:	f005 f94a 	bl	8009ecc <USB_ReadPMA>
 8004c38:	e020      	b.n	8004c7c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3306      	adds	r3, #6
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c62:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004c64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	895a      	ldrh	r2, [r3, #10]
 8004c76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c78:	f005 f928 	bl	8009ecc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c82:	441a      	add	r2, r3
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c8e:	441a      	add	r2, r3
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <PCD_EP_ISR_Handler+0x4c2>
 8004c9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d206      	bcs.n	8004cb4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f006 ff11 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
 8004cb2:	e005      	b.n	8004cc0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 fc8c 	bl	80085d8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004cc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d07e      	beq.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004cca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf8:	843b      	strh	r3, [r7, #32]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	441a      	add	r2, r3
 8004d08:	8c3b      	ldrh	r3, [r7, #32]
 8004d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	78db      	ldrb	r3, [r3, #3]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d00c      	beq.n	8004d38 <PCD_EP_ISR_Handler+0x554>
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	78db      	ldrb	r3, [r3, #3]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d146      	bne.n	8004dbc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004d2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d141      	bne.n	8004dbc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d60:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	8bfb      	ldrh	r3, [r7, #30]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d906      	bls.n	8004d7a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	8bfb      	ldrh	r3, [r7, #30]
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	619a      	str	r2, [r3, #24]
 8004d78:	e002      	b.n	8004d80 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f006 febb 	bl	800bb0a <HAL_PCD_DataInStageCallback>
 8004d94:	e018      	b.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	8bfb      	ldrh	r3, [r7, #30]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	8bfb      	ldrh	r3, [r7, #30]
 8004da8:	441a      	add	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db4:	4618      	mov	r0, r3
 8004db6:	f003 fc0f 	bl	80085d8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004dba:	e005      	b.n	8004dc8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004dbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f91b 	bl	8004ffe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	b21b      	sxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f6ff ad0a 	blt.w	80047ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3738      	adds	r7, #56	; 0x38
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d07e      	beq.n	8004efa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4413      	add	r3, r2
 8004e10:	3302      	adds	r3, #2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	8b7b      	ldrh	r3, [r7, #26]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d306      	bcc.n	8004e3e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	8b7b      	ldrh	r3, [r7, #26]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	619a      	str	r2, [r3, #24]
 8004e3c:	e002      	b.n	8004e44 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d123      	bne.n	8004e94 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	833b      	strh	r3, [r7, #24]
 8004e68:	8b3b      	ldrh	r3, [r7, #24]
 8004e6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e6e:	833b      	strh	r3, [r7, #24]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	8b3b      	ldrh	r3, [r7, #24]
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01f      	beq.n	8004ede <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	82fb      	strh	r3, [r7, #22]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8afb      	ldrh	r3, [r7, #22]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ede:	8b7b      	ldrh	r3, [r7, #26]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8087 	beq.w	8004ff4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6959      	ldr	r1, [r3, #20]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	891a      	ldrh	r2, [r3, #8]
 8004ef2:	8b7b      	ldrh	r3, [r7, #26]
 8004ef4:	f004 ffea 	bl	8009ecc <USB_ReadPMA>
 8004ef8:	e07c      	b.n	8004ff4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3306      	adds	r3, #6
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	8b7b      	ldrh	r3, [r7, #26]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d306      	bcc.n	8004f3c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	8b7b      	ldrh	r3, [r7, #26]
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	619a      	str	r2, [r3, #24]
 8004f3a:	e002      	b.n	8004f42 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d123      	bne.n	8004f92 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	83fb      	strh	r3, [r7, #30]
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f6c:	83fb      	strh	r3, [r7, #30]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	8bfb      	ldrh	r3, [r7, #30]
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11f      	bne.n	8004fdc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	83bb      	strh	r3, [r7, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	8bbb      	ldrh	r3, [r7, #28]
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fdc:	8b7b      	ldrh	r3, [r7, #26]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	895a      	ldrh	r2, [r3, #10]
 8004fee:	8b7b      	ldrh	r3, [r7, #26]
 8004ff0:	f004 ff6c 	bl	8009ecc <USB_ReadPMA>
    }
  }

  return count;
 8004ff4:	8b7b      	ldrh	r3, [r7, #26]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b0a2      	sub	sp, #136	; 0x88
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 81c7 	beq.w	80053a6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	3302      	adds	r3, #2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005040:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	699a      	ldr	r2, [r3, #24]
 8005048:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800504c:	429a      	cmp	r2, r3
 800504e:	d907      	bls.n	8005060 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005058:	1ad2      	subs	r2, r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	619a      	str	r2, [r3, #24]
 800505e:	e002      	b.n	8005066 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 80b9 	bne.w	80051e2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d126      	bne.n	80050c6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	4413      	add	r3, r2
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	011a      	lsls	r2, r3, #4
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	4413      	add	r3, r2
 800509a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050be:	b29a      	uxth	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e01a      	b.n	80050fc <HAL_PCD_EP_DB_Transmit+0xfe>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d116      	bne.n	80050fc <HAL_PCD_EP_DB_Transmit+0xfe>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	4413      	add	r3, r2
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	011a      	lsls	r2, r3, #4
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	4413      	add	r3, r2
 80050f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	2200      	movs	r2, #0
 80050fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	623b      	str	r3, [r7, #32]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d126      	bne.n	8005158 <HAL_PCD_EP_DB_Transmit+0x15a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005118:	b29b      	uxth	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	4413      	add	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	011a      	lsls	r2, r3, #4
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	4413      	add	r3, r2
 800512c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800513c:	b29a      	uxth	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29a      	uxth	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	e017      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d113      	bne.n	8005188 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	4413      	add	r3, r2
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	011a      	lsls	r2, r3, #4
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	4413      	add	r3, r2
 800517c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2200      	movs	r2, #0
 8005186:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f006 fcbb 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 82d4 	beq.w	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	827b      	strh	r3, [r7, #18]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	8a7b      	ldrh	r3, [r7, #18]
 80051cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051dc:	b29b      	uxth	r3, r3
 80051de:	8013      	strh	r3, [r2, #0]
 80051e0:	e2b2      	b.n	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d021      	beq.n	8005230 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005236:	2b01      	cmp	r3, #1
 8005238:	f040 8286 	bne.w	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005244:	441a      	add	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005252:	441a      	add	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d309      	bcc.n	8005278 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	621a      	str	r2, [r3, #32]
 8005276:	e015      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d107      	bne.n	8005290 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005284:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800528e:	e009      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d155      	bne.n	8005358 <HAL_PCD_EP_DB_Transmit+0x35a>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	4413      	add	r3, r2
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
 80052d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d112      	bne.n	8005300 <HAL_PCD_EP_DB_Transmit+0x302>
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e047      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x392>
 8005300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005302:	2b3e      	cmp	r3, #62	; 0x3e
 8005304:	d811      	bhi.n	800532a <HAL_PCD_EP_DB_Transmit+0x32c>
 8005306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
 800530c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_PCD_EP_DB_Transmit+0x31e>
 8005316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005318:	3301      	adds	r3, #1
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	b29b      	uxth	r3, r3
 8005320:	029b      	lsls	r3, r3, #10
 8005322:	b29a      	uxth	r2, r3
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e032      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x392>
 800532a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_PCD_EP_DB_Transmit+0x342>
 800533a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533c:	3b01      	subs	r3, #1
 800533e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005342:	b29b      	uxth	r3, r3
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	b29b      	uxth	r3, r3
 8005348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005350:	b29a      	uxth	r2, r3
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e01b      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x392>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d117      	bne.n	8005390 <HAL_PCD_EP_DB_Transmit+0x392>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	643b      	str	r3, [r7, #64]	; 0x40
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005374:	4413      	add	r3, r2
 8005376:	643b      	str	r3, [r7, #64]	; 0x40
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	011a      	lsls	r2, r3, #4
 800537e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005380:	4413      	add	r3, r2
 8005382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800538a:	b29a      	uxth	r2, r3
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6959      	ldr	r1, [r3, #20]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	891a      	ldrh	r2, [r3, #8]
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f004 fd4f 	bl	8009e42 <USB_WritePMA>
 80053a4:	e1d0      	b.n	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	3306      	adds	r3, #6
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053da:	429a      	cmp	r2, r3
 80053dc:	d307      	bcc.n	80053ee <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	619a      	str	r2, [r3, #24]
 80053ec:	e002      	b.n	80053f4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f040 80c4 	bne.w	8005586 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d126      	bne.n	8005454 <HAL_PCD_EP_DB_Transmit+0x456>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	4413      	add	r3, r2
 800541c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005426:	4413      	add	r3, r2
 8005428:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800542c:	66bb      	str	r3, [r7, #104]	; 0x68
 800542e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005438:	b29a      	uxth	r2, r3
 800543a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544c:	b29a      	uxth	r2, r3
 800544e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e01a      	b.n	800548a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d116      	bne.n	800548a <HAL_PCD_EP_DB_Transmit+0x48c>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	677b      	str	r3, [r7, #116]	; 0x74
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005470:	4413      	add	r3, r2
 8005472:	677b      	str	r3, [r7, #116]	; 0x74
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	011a      	lsls	r2, r3, #4
 800547a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547c:	4413      	add	r3, r2
 800547e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005482:	673b      	str	r3, [r7, #112]	; 0x70
 8005484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005486:	2200      	movs	r2, #0
 8005488:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d12f      	bne.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054b0:	4413      	add	r3, r2
 80054b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	011a      	lsls	r2, r3, #4
 80054bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c0:	4413      	add	r3, r2
 80054c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e017      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x52a>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d113      	bne.n	8005528 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550e:	4413      	add	r3, r2
 8005510:	67bb      	str	r3, [r7, #120]	; 0x78
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	011a      	lsls	r2, r3, #4
 8005518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551a:	4413      	add	r3, r2
 800551c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005520:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005524:	2200      	movs	r2, #0
 8005526:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f006 faeb 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 8104 	bne.w	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]
 8005584:	e0e0      	b.n	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d121      	bne.n	80055d4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80055c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055da:	2b01      	cmp	r3, #1
 80055dc:	f040 80b4 	bne.w	8005748 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055e8:	441a      	add	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055f6:	441a      	add	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6a1a      	ldr	r2, [r3, #32]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	429a      	cmp	r2, r3
 8005606:	d309      	bcc.n	800561c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005614:	1ad2      	subs	r2, r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	621a      	str	r2, [r3, #32]
 800561a:	e015      	b.n	8005648 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005624:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005628:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005632:	e009      	b.n	8005648 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	667b      	str	r3, [r7, #100]	; 0x64
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d155      	bne.n	8005702 <HAL_PCD_EP_DB_Transmit+0x704>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566a:	4413      	add	r3, r2
 800566c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005676:	4413      	add	r3, r2
 8005678:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800567c:	65bb      	str	r3, [r7, #88]	; 0x58
 800567e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005680:	2b00      	cmp	r3, #0
 8005682:	d112      	bne.n	80056aa <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800568e:	b29a      	uxth	r2, r3
 8005690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e044      	b.n	8005734 <HAL_PCD_EP_DB_Transmit+0x736>
 80056aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ac:	2b3e      	cmp	r3, #62	; 0x3e
 80056ae:	d811      	bhi.n	80056d4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80056b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	657b      	str	r3, [r7, #84]	; 0x54
 80056b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80056c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c2:	3301      	adds	r3, #1
 80056c4:	657b      	str	r3, [r7, #84]	; 0x54
 80056c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e02f      	b.n	8005734 <HAL_PCD_EP_DB_Transmit+0x736>
 80056d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	657b      	str	r3, [r7, #84]	; 0x54
 80056da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <HAL_PCD_EP_DB_Transmit+0x6ec>
 80056e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e6:	3b01      	subs	r3, #1
 80056e8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	e018      	b.n	8005734 <HAL_PCD_EP_DB_Transmit+0x736>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d114      	bne.n	8005734 <HAL_PCD_EP_DB_Transmit+0x736>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005712:	b29b      	uxth	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005718:	4413      	add	r3, r2
 800571a:	667b      	str	r3, [r7, #100]	; 0x64
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	011a      	lsls	r2, r3, #4
 8005722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005724:	4413      	add	r3, r2
 8005726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800572a:	663b      	str	r3, [r7, #96]	; 0x60
 800572c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572e:	b29a      	uxth	r2, r3
 8005730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005732:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6959      	ldr	r1, [r3, #20]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	895a      	ldrh	r2, [r3, #10]
 8005740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	f004 fb7d 	bl	8009e42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005762:	823b      	strh	r3, [r7, #16]
 8005764:	8a3b      	ldrh	r3, [r7, #16]
 8005766:	f083 0310 	eor.w	r3, r3, #16
 800576a:	823b      	strh	r3, [r7, #16]
 800576c:	8a3b      	ldrh	r3, [r7, #16]
 800576e:	f083 0320 	eor.w	r3, r3, #32
 8005772:	823b      	strh	r3, [r7, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	8a3b      	ldrh	r3, [r7, #16]
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3788      	adds	r7, #136	; 0x88
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b087      	sub	sp, #28
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	607b      	str	r3, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	817b      	strh	r3, [r7, #10]
 80057b0:	4613      	mov	r3, r2
 80057b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80057b4:	897b      	ldrh	r3, [r7, #10]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00b      	beq.n	80057d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c0:	897b      	ldrh	r3, [r7, #10]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e009      	b.n	80057ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057d8:	897a      	ldrh	r2, [r7, #10]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057ec:	893b      	ldrh	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d107      	bne.n	8005802 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	80da      	strh	r2, [r3, #6]
 8005800:	e00b      	b.n	800581a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2201      	movs	r2, #1
 8005806:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	b29a      	uxth	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0c1b      	lsrs	r3, r3, #16
 8005814:	b29a      	uxth	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e26c      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8087 	beq.w	8005956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005848:	4b92      	ldr	r3, [pc, #584]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 030c 	and.w	r3, r3, #12
 8005850:	2b04      	cmp	r3, #4
 8005852:	d00c      	beq.n	800586e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005854:	4b8f      	ldr	r3, [pc, #572]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b08      	cmp	r3, #8
 800585e:	d112      	bne.n	8005886 <HAL_RCC_OscConfig+0x5e>
 8005860:	4b8c      	ldr	r3, [pc, #560]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586c:	d10b      	bne.n	8005886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586e:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d06c      	beq.n	8005954 <HAL_RCC_OscConfig+0x12c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d168      	bne.n	8005954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e246      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588e:	d106      	bne.n	800589e <HAL_RCC_OscConfig+0x76>
 8005890:	4b80      	ldr	r3, [pc, #512]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a7f      	ldr	r2, [pc, #508]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	e02e      	b.n	80058fc <HAL_RCC_OscConfig+0xd4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x98>
 80058a6:	4b7b      	ldr	r3, [pc, #492]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a7a      	ldr	r2, [pc, #488]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	4b78      	ldr	r3, [pc, #480]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a77      	ldr	r2, [pc, #476]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e01d      	b.n	80058fc <HAL_RCC_OscConfig+0xd4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0xbc>
 80058ca:	4b72      	ldr	r3, [pc, #456]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a71      	ldr	r2, [pc, #452]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4b6f      	ldr	r3, [pc, #444]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6e      	ldr	r2, [pc, #440]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e00b      	b.n	80058fc <HAL_RCC_OscConfig+0xd4>
 80058e4:	4b6b      	ldr	r3, [pc, #428]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6a      	ldr	r2, [pc, #424]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b68      	ldr	r3, [pc, #416]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a67      	ldr	r2, [pc, #412]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fd f842 	bl	800298c <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800590c:	f7fd f83e 	bl	800298c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e1fa      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b5d      	ldr	r3, [pc, #372]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0xe4>
 800592a:	e014      	b.n	8005956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fd f82e 	bl	800298c <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005934:	f7fd f82a 	bl	800298c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1e6      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	4b53      	ldr	r3, [pc, #332]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x10c>
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d063      	beq.n	8005a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005962:	4b4c      	ldr	r3, [pc, #304]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800596e:	4b49      	ldr	r3, [pc, #292]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b08      	cmp	r3, #8
 8005978:	d11c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x18c>
 800597a:	4b46      	ldr	r3, [pc, #280]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005986:	4b43      	ldr	r3, [pc, #268]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCC_OscConfig+0x176>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e1ba      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	4b3d      	ldr	r3, [pc, #244]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4939      	ldr	r1, [pc, #228]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b2:	e03a      	b.n	8005a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d020      	beq.n	80059fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059bc:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <HAL_RCC_OscConfig+0x270>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fc ffe3 	bl	800298c <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fc ffdf 	bl	800298c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e19b      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e8:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4927      	ldr	r1, [pc, #156]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
 80059fc:	e015      	b.n	8005a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <HAL_RCC_OscConfig+0x270>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a04:	f7fc ffc2 	bl	800298c <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0c:	f7fc ffbe 	bl	800298c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e17a      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d03a      	beq.n	8005aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d019      	beq.n	8005a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3e:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a44:	f7fc ffa2 	bl	800298c <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4c:	f7fc ff9e 	bl	800298c <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e15a      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <HAL_RCC_OscConfig+0x26c>)
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	f000 fad8 	bl	8006020 <RCC_Delay>
 8005a70:	e01c      	b.n	8005aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a72:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a78:	f7fc ff88 	bl	800298c <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a7e:	e00f      	b.n	8005aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a80:	f7fc ff84 	bl	800298c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d908      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e140      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
 8005a92:	bf00      	nop
 8005a94:	40021000 	.word	0x40021000
 8005a98:	42420000 	.word	0x42420000
 8005a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa0:	4b9e      	ldr	r3, [pc, #632]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e9      	bne.n	8005a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80a6 	beq.w	8005c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005abe:	4b97      	ldr	r3, [pc, #604]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10d      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aca:	4b94      	ldr	r3, [pc, #592]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4a93      	ldr	r2, [pc, #588]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	61d3      	str	r3, [r2, #28]
 8005ad6:	4b91      	ldr	r3, [pc, #580]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae6:	4b8e      	ldr	r3, [pc, #568]	; (8005d20 <HAL_RCC_OscConfig+0x4f8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d118      	bne.n	8005b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005af2:	4b8b      	ldr	r3, [pc, #556]	; (8005d20 <HAL_RCC_OscConfig+0x4f8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a8a      	ldr	r2, [pc, #552]	; (8005d20 <HAL_RCC_OscConfig+0x4f8>)
 8005af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afe:	f7fc ff45 	bl	800298c <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b06:	f7fc ff41 	bl	800298c <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b64      	cmp	r3, #100	; 0x64
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0fd      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b18:	4b81      	ldr	r3, [pc, #516]	; (8005d20 <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0f0      	beq.n	8005b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d106      	bne.n	8005b3a <HAL_RCC_OscConfig+0x312>
 8005b2c:	4b7b      	ldr	r3, [pc, #492]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	4a7a      	ldr	r2, [pc, #488]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b32:	f043 0301 	orr.w	r3, r3, #1
 8005b36:	6213      	str	r3, [r2, #32]
 8005b38:	e02d      	b.n	8005b96 <HAL_RCC_OscConfig+0x36e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCC_OscConfig+0x334>
 8005b42:	4b76      	ldr	r3, [pc, #472]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	4a75      	ldr	r2, [pc, #468]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	6213      	str	r3, [r2, #32]
 8005b4e:	4b73      	ldr	r3, [pc, #460]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	4a72      	ldr	r2, [pc, #456]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	6213      	str	r3, [r2, #32]
 8005b5a:	e01c      	b.n	8005b96 <HAL_RCC_OscConfig+0x36e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d10c      	bne.n	8005b7e <HAL_RCC_OscConfig+0x356>
 8005b64:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	4a6c      	ldr	r2, [pc, #432]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b6a:	f043 0304 	orr.w	r3, r3, #4
 8005b6e:	6213      	str	r3, [r2, #32]
 8005b70:	4b6a      	ldr	r3, [pc, #424]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	4a69      	ldr	r2, [pc, #420]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	6213      	str	r3, [r2, #32]
 8005b7c:	e00b      	b.n	8005b96 <HAL_RCC_OscConfig+0x36e>
 8005b7e:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	4a66      	ldr	r2, [pc, #408]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	6213      	str	r3, [r2, #32]
 8005b8a:	4b64      	ldr	r3, [pc, #400]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005b90:	f023 0304 	bic.w	r3, r3, #4
 8005b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d015      	beq.n	8005bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9e:	f7fc fef5 	bl	800298c <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba4:	e00a      	b.n	8005bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba6:	f7fc fef1 	bl	800298c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0ab      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbc:	4b57      	ldr	r3, [pc, #348]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ee      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x37e>
 8005bc8:	e014      	b.n	8005bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bca:	f7fc fedf 	bl	800298c <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd0:	e00a      	b.n	8005be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd2:	f7fc fedb 	bl	800298c <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e095      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be8:	4b4c      	ldr	r3, [pc, #304]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1ee      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d105      	bne.n	8005c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfa:	4b48      	ldr	r3, [pc, #288]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4a47      	ldr	r2, [pc, #284]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8081 	beq.w	8005d12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c10:	4b42      	ldr	r3, [pc, #264]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 030c 	and.w	r3, r3, #12
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d061      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d146      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c24:	4b3f      	ldr	r3, [pc, #252]	; (8005d24 <HAL_RCC_OscConfig+0x4fc>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2a:	f7fc feaf 	bl	800298c <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c32:	f7fc feab 	bl	800298c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e067      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c58:	d108      	bne.n	8005c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c5a:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	492d      	ldr	r1, [pc, #180]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6c:	4b2b      	ldr	r3, [pc, #172]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a19      	ldr	r1, [r3, #32]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	4927      	ldr	r1, [pc, #156]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c84:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <HAL_RCC_OscConfig+0x4fc>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8a:	f7fc fe7f 	bl	800298c <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c92:	f7fc fe7b 	bl	800298c <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e037      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x46a>
 8005cb0:	e02f      	b.n	8005d12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <HAL_RCC_OscConfig+0x4fc>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fc fe68 	bl	800298c <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fc fe64 	bl	800298c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e020      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x498>
 8005cde:	e018      	b.n	8005d12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e013      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <HAL_RCC_OscConfig+0x4f4>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d106      	bne.n	8005d0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	40007000 	.word	0x40007000
 8005d24:	42420060 	.word	0x42420060

08005d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0d0      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d910      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b67      	ldr	r3, [pc, #412]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	4965      	ldr	r1, [pc, #404]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b63      	ldr	r3, [pc, #396]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0b8      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d020      	beq.n	8005dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d84:	4b59      	ldr	r3, [pc, #356]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a58      	ldr	r2, [pc, #352]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d9c:	4b53      	ldr	r3, [pc, #332]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a52      	ldr	r2, [pc, #328]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da8:	4b50      	ldr	r3, [pc, #320]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	494d      	ldr	r1, [pc, #308]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d040      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d107      	bne.n	8005dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dce:	4b47      	ldr	r3, [pc, #284]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d115      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e07f      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e073      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df6:	4b3d      	ldr	r3, [pc, #244]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06b      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b39      	ldr	r3, [pc, #228]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4936      	ldr	r1, [pc, #216]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e18:	f7fc fdb8 	bl	800298c <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fc fdb4 	bl	800298c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e053      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 020c 	and.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1eb      	bne.n	8005e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e48:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d210      	bcs.n	8005e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 0207 	bic.w	r2, r3, #7
 8005e5e:	4922      	ldr	r1, [pc, #136]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e66:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d001      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e032      	b.n	8005ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4916      	ldr	r1, [pc, #88]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	490e      	ldr	r1, [pc, #56]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eb6:	f000 f821 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	490a      	ldr	r1, [pc, #40]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec8:	5ccb      	ldrb	r3, [r1, r3]
 8005eca:	fa22 f303 	lsr.w	r3, r2, r3
 8005ece:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8005ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fc fd16 	bl	8002908 <HAL_InitTick>

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40022000 	.word	0x40022000
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	0800c244 	.word	0x0800c244
 8005ef4:	20000000 	.word	0x20000000
 8005ef8:	20000004 	.word	0x20000004

08005efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005efc:	b490      	push	{r4, r7}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f02:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f04:	1d3c      	adds	r4, r7, #4
 8005f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f0c:	f240 2301 	movw	r3, #513	; 0x201
 8005f10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f26:	4b22      	ldr	r3, [pc, #136]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d002      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x40>
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d003      	beq.n	8005f42 <HAL_RCC_GetSysClockFreq+0x46>
 8005f3a:	e02d      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f3e:	623b      	str	r3, [r7, #32]
      break;
 8005f40:	e02d      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	0c9b      	lsrs	r3, r3, #18
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f4e:	4413      	add	r3, r2
 8005f50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d013      	beq.n	8005f88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	0c5b      	lsrs	r3, r3, #17
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f6e:	4413      	add	r3, r2
 8005f70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4a0e      	ldr	r2, [pc, #56]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f7a:	fb02 f203 	mul.w	r2, r2, r3
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	e004      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4a0b      	ldr	r2, [pc, #44]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f8c:	fb02 f303 	mul.w	r3, r2, r3
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	623b      	str	r3, [r7, #32]
      break;
 8005f96:	e002      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f9a:	623b      	str	r3, [r7, #32]
      break;
 8005f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	; 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc90      	pop	{r4, r7}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	0800c034 	.word	0x0800c034
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	007a1200 	.word	0x007a1200
 8005fb8:	003d0900 	.word	0x003d0900

08005fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc0:	4b02      	ldr	r3, [pc, #8]	; (8005fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	20000000 	.word	0x20000000

08005fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fd4:	f7ff fff2 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	0800c254 	.word	0x0800c254

08005ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ffc:	f7ff ffde 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	0adb      	lsrs	r3, r3, #11
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4903      	ldr	r1, [pc, #12]	; (800601c <HAL_RCC_GetPCLK2Freq+0x24>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40021000 	.word	0x40021000
 800601c:	0800c254 	.word	0x0800c254

08006020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <RCC_Delay+0x34>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <RCC_Delay+0x38>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	0a5b      	lsrs	r3, r3, #9
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800603c:	bf00      	nop
  }
  while (Delay --);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1e5a      	subs	r2, r3, #1
 8006042:	60fa      	str	r2, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f9      	bne.n	800603c <RCC_Delay+0x1c>
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	20000000 	.word	0x20000000
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d07d      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800607c:	4b4f      	ldr	r3, [pc, #316]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4a4b      	ldr	r2, [pc, #300]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	61d3      	str	r3, [r2, #28]
 8006094:	4b49      	ldr	r3, [pc, #292]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d118      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a42      	ldr	r2, [pc, #264]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060bc:	f7fc fc66 	bl	800298c <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c2:	e008      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fc fc62 	bl	800298c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	; 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e06d      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d6:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02e      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d027      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006100:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006108:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800610a:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006110:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006116:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fc fc31 	bl	800298c <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612c:	e00a      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc fc2d 	bl	800298c <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e036      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4917      	ldr	r1, [pc, #92]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	4313      	orrs	r3, r2
 8006160:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	490b      	ldr	r1, [pc, #44]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4904      	ldr	r1, [pc, #16]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40007000 	.word	0x40007000
 80061c4:	42420440 	.word	0x42420440

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e041      	b.n	800625e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fc fa24 	bl	800263c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 fc28 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e03a      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_TIM_Base_Start_IT+0x98>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d009      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <HAL_TIM_Base_Start_IT+0x9c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_TIM_Base_Start_IT+0xa0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d111      	bne.n	80062e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d010      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	e007      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800

0800630c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e041      	b.n	80063a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f839 	bl	80063aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f000 fb86 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <HAL_TIM_PWM_Start+0x24>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e022      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d109      	bne.n	80063fa <HAL_TIM_PWM_Start+0x3e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	e015      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d109      	bne.n	8006414 <HAL_TIM_PWM_Start+0x58>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e008      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e05e      	b.n	80064ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0x82>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800643c:	e013      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0x92>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xa2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800645c:	e003      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fd74 	bl	8006f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <HAL_TIM_PWM_Start+0x138>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d107      	bne.n	800648e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIM_PWM_Start+0x138>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIM_PWM_Start+0xfa>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d009      	beq.n	80064b6 <HAL_TIM_PWM_Start+0xfa>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a14      	ldr	r2, [pc, #80]	; (80064f8 <HAL_TIM_PWM_Start+0x13c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIM_PWM_Start+0xfa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <HAL_TIM_PWM_Start+0x140>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d111      	bne.n	80064da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b06      	cmp	r3, #6
 80064c6:	d010      	beq.n	80064ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	e007      	b.n	80064ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800

08006500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d122      	bne.n	800655c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d11b      	bne.n	800655c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0202 	mvn.w	r2, #2
 800652c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa6f 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 8006548:	e005      	b.n	8006556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa62 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa71 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b04      	cmp	r3, #4
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b04      	cmp	r3, #4
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0204 	mvn.w	r2, #4
 8006580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa45 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa38 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa47 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0208 	mvn.w	r2, #8
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2204      	movs	r2, #4
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa1b 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa0e 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fa1d 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d122      	bne.n	8006658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0210 	mvn.w	r2, #16
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2208      	movs	r2, #8
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9f1 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9e4 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9f3 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10e      	bne.n	8006684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d107      	bne.n	8006684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0201 	mvn.w	r2, #1
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fa f80e 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b80      	cmp	r3, #128	; 0x80
 8006690:	d10e      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669c:	2b80      	cmp	r3, #128	; 0x80
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fce1 	bl	8007072 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d10e      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9b7 	bl	8006a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0220 	mvn.w	r2, #32
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fcac 	bl	8007060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006726:	2302      	movs	r3, #2
 8006728:	e0ac      	b.n	8006884 <HAL_TIM_PWM_ConfigChannel+0x174>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b0c      	cmp	r3, #12
 8006736:	f200 809f 	bhi.w	8006878 <HAL_TIM_PWM_ConfigChannel+0x168>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006775 	.word	0x08006775
 8006744:	08006879 	.word	0x08006879
 8006748:	08006879 	.word	0x08006879
 800674c:	08006879 	.word	0x08006879
 8006750:	080067b5 	.word	0x080067b5
 8006754:	08006879 	.word	0x08006879
 8006758:	08006879 	.word	0x08006879
 800675c:	08006879 	.word	0x08006879
 8006760:	080067f7 	.word	0x080067f7
 8006764:	08006879 	.word	0x08006879
 8006768:	08006879 	.word	0x08006879
 800676c:	08006879 	.word	0x08006879
 8006770:	08006837 	.word	0x08006837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f9d0 	bl	8006b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0204 	bic.w	r2, r2, #4
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
      break;
 80067b2:	e062      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fa16 	bl	8006bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6999      	ldr	r1, [r3, #24]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	619a      	str	r2, [r3, #24]
      break;
 80067f4:	e041      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fa5f 	bl	8006cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0208 	orr.w	r2, r2, #8
 8006810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0204 	bic.w	r2, r2, #4
 8006820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	61da      	str	r2, [r3, #28]
      break;
 8006834:	e021      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 faa9 	bl	8006d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69d9      	ldr	r1, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	021a      	lsls	r2, r3, #8
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	61da      	str	r2, [r3, #28]
      break;
 8006876:	e000      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_TIM_ConfigClockSource+0x18>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0b3      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x180>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068dc:	d03e      	beq.n	800695c <HAL_TIM_ConfigClockSource+0xd0>
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	f200 8087 	bhi.w	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	f000 8085 	beq.w	80069f8 <HAL_TIM_ConfigClockSource+0x16c>
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	d87f      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 80068f4:	2b70      	cmp	r3, #112	; 0x70
 80068f6:	d01a      	beq.n	800692e <HAL_TIM_ConfigClockSource+0xa2>
 80068f8:	2b70      	cmp	r3, #112	; 0x70
 80068fa:	d87b      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 80068fc:	2b60      	cmp	r3, #96	; 0x60
 80068fe:	d050      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x116>
 8006900:	2b60      	cmp	r3, #96	; 0x60
 8006902:	d877      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 8006904:	2b50      	cmp	r3, #80	; 0x50
 8006906:	d03c      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xf6>
 8006908:	2b50      	cmp	r3, #80	; 0x50
 800690a:	d873      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d058      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x136>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d86f      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d064      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d86b      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d060      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d867      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05c      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
 8006928:	2b10      	cmp	r3, #16
 800692a:	d05a      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800692c:	e062      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f000 faee 	bl	8006f1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006950:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	609a      	str	r2, [r3, #8]
      break;
 800695a:	e04e      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6899      	ldr	r1, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f000 fad7 	bl	8006f1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800697e:	609a      	str	r2, [r3, #8]
      break;
 8006980:	e03b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	461a      	mov	r2, r3
 8006990:	f000 fa4e 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2150      	movs	r1, #80	; 0x50
 800699a:	4618      	mov	r0, r3
 800699c:	f000 faa5 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 80069a0:	e02b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fa6c 	bl	8006e8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2160      	movs	r1, #96	; 0x60
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa95 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 80069c0:	e01b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fa2e 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2140      	movs	r1, #64	; 0x40
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fa85 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 80069e0:	e00b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f000 fa7c 	bl	8006eea <TIM_ITRx_SetConfig>
        break;
 80069f2:	e002      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <TIM_Base_SetConfig+0xb8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0x30>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0x30>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <TIM_Base_SetConfig+0xbc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0x30>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <TIM_Base_SetConfig+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d108      	bne.n	8006a9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <TIM_Base_SetConfig+0xb8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_Base_SetConfig+0x62>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d007      	beq.n	8006abe <TIM_Base_SetConfig+0x62>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <TIM_Base_SetConfig+0xbc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_Base_SetConfig+0x62>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <TIM_Base_SetConfig+0xc0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a07      	ldr	r2, [pc, #28]	; (8006b14 <TIM_Base_SetConfig+0xb8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d103      	bne.n	8006b04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	615a      	str	r2, [r3, #20]
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800

08006b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 0302 	bic.w	r3, r3, #2
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <TIM_OC1_SetConfig+0xc8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d10c      	bne.n	8006b96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0308 	bic.w	r3, r3, #8
 8006b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 0304 	bic.w	r3, r3, #4
 8006b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <TIM_OC1_SetConfig+0xc8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	621a      	str	r2, [r3, #32]
}
 8006bdc:	bf00      	nop
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00

08006bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0210 	bic.w	r2, r3, #16
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <TIM_OC2_SetConfig+0xd0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10d      	bne.n	8006c68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <TIM_OC2_SetConfig+0xd0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d113      	bne.n	8006c98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00

08006cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <TIM_OC3_SetConfig+0xd0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d10d      	bne.n	8006d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <TIM_OC3_SetConfig+0xd0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d113      	bne.n	8006d6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	621a      	str	r2, [r3, #32]
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40012c00 	.word	0x40012c00

08006d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	031b      	lsls	r3, r3, #12
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <TIM_OC4_SetConfig+0x98>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d109      	bne.n	8006e08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	019b      	lsls	r3, r3, #6
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	40012c00 	.word	0x40012c00

08006e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 030a 	bic.w	r3, r3, #10
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr

08006e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f023 0210 	bic.w	r2, r3, #16
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	031b      	lsls	r3, r3, #12
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f043 0307 	orr.w	r3, r3, #7
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	021a      	lsls	r2, r3, #8
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2201      	movs	r2, #1
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	401a      	ands	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	fa01 f303 	lsl.w	r3, r1, r3
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e046      	b.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007008:	d009      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a12      	ldr	r2, [pc, #72]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a10      	ldr	r2, [pc, #64]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d10c      	bne.n	8007038 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	4313      	orrs	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800

08007060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr

08007072 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr

08007084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e03f      	b.n	8007116 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fb fb3c 	bl	8002728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2224      	movs	r2, #36	; 0x24
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fc35 	bl	8007938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	4613      	mov	r3, r2
 800712a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b20      	cmp	r3, #32
 8007136:	d11d      	bne.n	8007174 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_UART_Receive_IT+0x26>
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e016      	b.n	8007176 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_UART_Receive_IT+0x38>
 8007152:	2302      	movs	r3, #2
 8007154:	e00f      	b.n	8007176 <HAL_UART_Receive_IT+0x58>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	461a      	mov	r2, r3
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa42 	bl	80075f4 <UART_Start_Receive_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	e000      	b.n	8007176 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007196:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d107      	bne.n	80071c0 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0210 	bic.w	r2, r2, #16
 80071be:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02d      	beq.n	800722a <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695a      	ldr	r2, [r3, #20]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071dc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	4a19      	ldr	r2, [pc, #100]	; (8007250 <HAL_UART_AbortReceive_IT+0xd0>)
 80071ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fc f998 	bl	8003528 <HAL_DMA_Abort_IT>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d022      	beq.n	8007244 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	e01a      	b.n	8007244 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f9d2 	bl	80075cc <HAL_UART_AbortReceiveCpltCallback>
 8007228:	e00c      	b.n	8007244 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f9c4 	bl	80075cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	080076e7 	.word	0x080076e7

08007254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08a      	sub	sp, #40	; 0x28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_UART_IRQHandler+0x52>
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 faa0 	bl	80077e4 <UART_Receive_IT>
      return;
 80072a4:	e17b      	b.n	800759e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80b1 	beq.w	8007410 <HAL_UART_IRQHandler+0x1bc>
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <HAL_UART_IRQHandler+0x70>
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 80a6 	beq.w	8007410 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_UART_IRQHandler+0x90>
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	f043 0201 	orr.w	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_UART_IRQHandler+0xb0>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	f043 0202 	orr.w	r2, r3, #2
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_UART_IRQHandler+0xd0>
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	f043 0204 	orr.w	r2, r3, #4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00f      	beq.n	800734e <HAL_UART_IRQHandler+0xfa>
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <HAL_UART_IRQHandler+0xee>
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f043 0208 	orr.w	r2, r3, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 811e 	beq.w	8007594 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <HAL_UART_IRQHandler+0x11e>
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa39 	bl	80077e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <HAL_UART_IRQHandler+0x146>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d031      	beq.n	80073fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f963 	bl	8007666 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d023      	beq.n	80073f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695a      	ldr	r2, [r3, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d013      	beq.n	80073ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	4a76      	ldr	r2, [pc, #472]	; (80075a4 <HAL_UART_IRQHandler+0x350>)
 80073cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fc f8a8 	bl	8003528 <HAL_DMA_Abort_IT>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d016      	beq.n	800740c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073e8:	4610      	mov	r0, r2
 80073ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ec:	e00e      	b.n	800740c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f8e3 	bl	80075ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	e00a      	b.n	800740c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f8df 	bl	80075ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fc:	e006      	b.n	800740c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8db 	bl	80075ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800740a:	e0c3      	b.n	8007594 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	bf00      	nop
    return;
 800740e:	e0c1      	b.n	8007594 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	2b01      	cmp	r3, #1
 8007416:	f040 80a1 	bne.w	800755c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 809b 	beq.w	800755c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8095 	beq.w	800755c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d04e      	beq.n	80074f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007460:	8a3b      	ldrh	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8098 	beq.w	8007598 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800746c:	8a3a      	ldrh	r2, [r7, #16]
 800746e:	429a      	cmp	r2, r3
 8007470:	f080 8092 	bcs.w	8007598 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8a3a      	ldrh	r2, [r7, #16]
 8007478:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	2b20      	cmp	r3, #32
 8007482:	d02b      	beq.n	80074dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007492:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695a      	ldr	r2, [r3, #20]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0201 	bic.w	r2, r2, #1
 80074a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0210 	bic.w	r2, r2, #16
 80074d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fb ffeb 	bl	80034b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f876 	bl	80075de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80074f2:	e051      	b.n	8007598 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d047      	beq.n	800759c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800750c:	8a7b      	ldrh	r3, [r7, #18]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d044      	beq.n	800759c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007520:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0210 	bic.w	r2, r2, #16
 800754e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007550:	8a7b      	ldrh	r3, [r7, #18]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f842 	bl	80075de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800755a:	e01f      	b.n	800759c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <HAL_UART_IRQHandler+0x324>
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f8d0 	bl	8007716 <UART_Transmit_IT>
    return;
 8007576:	e012      	b.n	800759e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00d      	beq.n	800759e <HAL_UART_IRQHandler+0x34a>
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f911 	bl	80077b4 <UART_EndTransmit_IT>
    return;
 8007592:	e004      	b.n	800759e <HAL_UART_IRQHandler+0x34a>
    return;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_UART_IRQHandler+0x34a>
      return;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_UART_IRQHandler+0x34a>
      return;
 800759c:	bf00      	nop
  }
}
 800759e:	3728      	adds	r7, #40	; 0x28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	080076bf 	.word	0x080076bf

080075a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	88fa      	ldrh	r2, [r7, #6]
 800760c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2222      	movs	r2, #34	; 0x22
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007638:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0220 	orr.w	r2, r2, #32
 8007658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800767c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	695a      	ldr	r2, [r3, #20]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0210 	bic.w	r2, r2, #16
 80076a4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff6e 	bl	80075ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff ff5f 	bl	80075cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b21      	cmp	r3, #33	; 0x21
 8007728:	d13e      	bne.n	80077a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007732:	d114      	bne.n	800775e <UART_Transmit_IT+0x48>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d110      	bne.n	800775e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	1c9a      	adds	r2, r3, #2
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]
 800775c:	e008      	b.n	8007770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6211      	str	r1, [r2, #32]
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4619      	mov	r1, r3
 800777e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10f      	bne.n	80077a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	e000      	b.n	80077aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077a8:	2302      	movs	r3, #2
  }
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr

080077b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fee7 	bl	80075a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b22      	cmp	r3, #34	; 0x22
 80077f6:	f040 8099 	bne.w	800792c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007802:	d117      	bne.n	8007834 <UART_Receive_IT+0x50>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d113      	bne.n	8007834 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	b29a      	uxth	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	629a      	str	r2, [r3, #40]	; 0x28
 8007832:	e026      	b.n	8007882 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007846:	d007      	beq.n	8007858 <UART_Receive_IT+0x74>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <UART_Receive_IT+0x82>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b2da      	uxtb	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e008      	b.n	8007878 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007872:	b2da      	uxtb	r2, r3
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29b      	uxth	r3, r3
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4619      	mov	r1, r3
 8007890:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007892:	2b00      	cmp	r3, #0
 8007894:	d148      	bne.n	8007928 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0220 	bic.w	r2, r2, #32
 80078a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d123      	bne.n	800791e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0210 	bic.w	r2, r2, #16
 80078ea:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d10a      	bne.n	8007910 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078fa:	2300      	movs	r3, #0
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fe61 	bl	80075de <HAL_UARTEx_RxEventCallback>
 800791c:	e002      	b.n	8007924 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7f9 f952 	bl	8000bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	e002      	b.n	800792e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	e000      	b.n	800792e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007972:	f023 030c 	bic.w	r3, r3, #12
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	430b      	orrs	r3, r1
 800797e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <UART_SetConfig+0x114>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d103      	bne.n	80079a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fe fb2a 	bl	8005ff8 <HAL_RCC_GetPCLK2Freq>
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	e002      	b.n	80079ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079a8:	f7fe fb12 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 80079ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009a      	lsls	r2, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <UART_SetConfig+0x118>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	0119      	lsls	r1, r3, #4
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009a      	lsls	r2, r3, #2
 80079d8:	441a      	add	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e4:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <UART_SetConfig+0x118>)
 80079e6:	fba3 0302 	umull	r0, r3, r3, r2
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2064      	movs	r0, #100	; 0x64
 80079ee:	fb00 f303 	mul.w	r3, r0, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	3332      	adds	r3, #50	; 0x32
 80079f8:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <UART_SetConfig+0x118>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a04:	4419      	add	r1, r3
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009a      	lsls	r2, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <UART_SetConfig+0x118>)
 8007a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	2064      	movs	r0, #100	; 0x64
 8007a26:	fb00 f303 	mul.w	r3, r0, r3
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	3332      	adds	r3, #50	; 0x32
 8007a30:	4a07      	ldr	r2, [pc, #28]	; (8007a50 <UART_SetConfig+0x118>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	f003 020f 	and.w	r2, r3, #15
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	440a      	add	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40013800 	.word	0x40013800
 8007a50:	51eb851f 	.word	0x51eb851f

08007a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a54:	b084      	sub	sp, #16
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	f107 0014 	add.w	r0, r7, #20
 8007a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	b004      	add	sp, #16
 8007a72:	4770      	bx	lr

08007a74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007a88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr

08007aa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007aa8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007aac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	4013      	ands	r3, r2
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr

08007ad4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007aec:	b084      	sub	sp, #16
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	f107 0014 	add.w	r0, r7, #20
 8007afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	b004      	add	sp, #16
 8007b2a:	4770      	bx	lr

08007b2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b09b      	sub	sp, #108	; 0x6c
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	78db      	ldrb	r3, [r3, #3]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d81f      	bhi.n	8007b9e <USB_ActivateEndpoint+0x72>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <USB_ActivateEndpoint+0x38>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b75 	.word	0x08007b75
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007ba7 	.word	0x08007ba7
 8007b70:	08007b83 	.word	0x08007b83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007b80:	e012      	b.n	8007ba8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007b8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007b8e:	e00b      	b.n	8007ba8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007b9c:	e004      	b.n	8007ba8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007ba4:	e000      	b.n	8007ba8 <USB_ActivateEndpoint+0x7c>
      break;
 8007ba6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	7b1b      	ldrb	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 8149 	bne.w	8007eac <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8084 	beq.w	8007d2c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	4413      	add	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	011a      	lsls	r2, r3, #4
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	88db      	ldrh	r3, [r3, #6]
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	81fb      	strh	r3, [r7, #14]
 8007c66:	89fb      	ldrh	r3, [r7, #14]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01b      	beq.n	8007ca8 <USB_ActivateEndpoint+0x17c>
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	81bb      	strh	r3, [r7, #12]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	441a      	add	r2, r3
 8007c92:	89bb      	ldrh	r3, [r7, #12]
 8007c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d020      	beq.n	8007cf2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc6:	813b      	strh	r3, [r7, #8]
 8007cc8:	893b      	ldrh	r3, [r7, #8]
 8007cca:	f083 0320 	eor.w	r3, r3, #32
 8007cce:	813b      	strh	r3, [r7, #8]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	893b      	ldrh	r3, [r7, #8]
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
 8007cf0:	e27f      	b.n	80081f2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	817b      	strh	r3, [r7, #10]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	441a      	add	r2, r3
 8007d14:	897b      	ldrh	r3, [r7, #10]
 8007d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8013      	strh	r3, [r2, #0]
 8007d2a:	e262      	b.n	80081f2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	4413      	add	r3, r2
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	011a      	lsls	r2, r3, #4
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	88db      	ldrh	r3, [r3, #6]
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	4413      	add	r3, r2
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	011a      	lsls	r2, r3, #4
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d82:	623b      	str	r3, [r7, #32]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d112      	bne.n	8007db2 <USB_ActivateEndpoint+0x286>
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e02f      	b.n	8007e12 <USB_ActivateEndpoint+0x2e6>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b3e      	cmp	r3, #62	; 0x3e
 8007db8:	d813      	bhi.n	8007de2 <USB_ActivateEndpoint+0x2b6>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <USB_ActivateEndpoint+0x2a8>
 8007dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	663b      	str	r3, [r7, #96]	; 0x60
 8007dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	e017      	b.n	8007e12 <USB_ActivateEndpoint+0x2e6>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	663b      	str	r3, [r7, #96]	; 0x60
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 031f 	and.w	r3, r3, #31
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <USB_ActivateEndpoint+0x2d0>
 8007df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8007dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	029b      	lsls	r3, r3, #10
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	83fb      	strh	r3, [r7, #30]
 8007e20:	8bfb      	ldrh	r3, [r7, #30]
 8007e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01b      	beq.n	8007e62 <USB_ActivateEndpoint+0x336>
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e40:	83bb      	strh	r3, [r7, #28]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	8bbb      	ldrh	r3, [r7, #28]
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e78:	837b      	strh	r3, [r7, #26]
 8007e7a:	8b7b      	ldrh	r3, [r7, #26]
 8007e7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e80:	837b      	strh	r3, [r7, #26]
 8007e82:	8b7b      	ldrh	r3, [r7, #26]
 8007e84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e88:	837b      	strh	r3, [r7, #26]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	441a      	add	r2, r3
 8007e94:	8b7b      	ldrh	r3, [r7, #26]
 8007e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	8013      	strh	r3, [r2, #0]
 8007eaa:	e1a2      	b.n	80081f2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	441a      	add	r2, r3
 8007ed0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007edc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ef8:	4413      	add	r3, r2
 8007efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	011a      	lsls	r2, r3, #4
 8007f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	891b      	ldrh	r3, [r3, #8]
 8007f10:	085b      	lsrs	r3, r3, #1
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	653b      	str	r3, [r7, #80]	; 0x50
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f2c:	4413      	add	r3, r2
 8007f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	011a      	lsls	r2, r3, #4
 8007f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	895b      	ldrh	r3, [r3, #10]
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 8091 	bne.w	800807c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007f68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01b      	beq.n	8007faa <USB_ActivateEndpoint+0x47e>
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f88:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007fb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01b      	beq.n	8007ffa <USB_ActivateEndpoint+0x4ce>
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	441a      	add	r2, r3
 8007fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800800c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008010:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008012:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008014:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008018:	86bb      	strh	r3, [r7, #52]	; 0x34
 800801a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800801c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008020:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	441a      	add	r2, r3
 800802c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008058:	867b      	strh	r3, [r7, #50]	; 0x32
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008076:	b29b      	uxth	r3, r3
 8008078:	8013      	strh	r3, [r2, #0]
 800807a:	e0ba      	b.n	80081f2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800808c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01d      	beq.n	80080d4 <USB_ActivateEndpoint+0x5a8>
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80080c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80080e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01d      	beq.n	800812c <USB_ActivateEndpoint+0x600>
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	441a      	add	r2, r3
 8008114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008124:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008128:	b29b      	uxth	r3, r3
 800812a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	78db      	ldrb	r3, [r3, #3]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d024      	beq.n	800817e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800814e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008152:	f083 0320 	eor.w	r3, r3, #32
 8008156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]
 800817c:	e01d      	b.n	80081ba <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80081f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	376c      	adds	r7, #108	; 0x6c
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008200:	b480      	push	{r7}
 8008202:	b08d      	sub	sp, #52	; 0x34
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	7b1b      	ldrb	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 808e 	bne.w	8008330 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d044      	beq.n	80082a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	81bb      	strh	r3, [r7, #12]
 800822a:	89bb      	ldrh	r3, [r7, #12]
 800822c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01b      	beq.n	800826c <USB_DeactivateEndpoint+0x6c>
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824a:	817b      	strh	r3, [r7, #10]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	441a      	add	r2, r3
 8008256:	897b      	ldrh	r3, [r7, #10]
 8008258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008268:	b29b      	uxth	r3, r3
 800826a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	b29b      	uxth	r3, r3
 800827a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008282:	813b      	strh	r3, [r7, #8]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	441a      	add	r2, r3
 800828e:	893b      	ldrh	r3, [r7, #8]
 8008290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	8013      	strh	r3, [r2, #0]
 80082a4:	e192      	b.n	80085cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	827b      	strh	r3, [r7, #18]
 80082b4:	8a7b      	ldrh	r3, [r7, #18]
 80082b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01b      	beq.n	80082f6 <USB_DeactivateEndpoint+0xf6>
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d4:	823b      	strh	r3, [r7, #16]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	8a3b      	ldrh	r3, [r7, #16]
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830c:	81fb      	strh	r3, [r7, #14]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	89fb      	ldrh	r3, [r7, #14]
 800831a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832a:	b29b      	uxth	r3, r3
 800832c:	8013      	strh	r3, [r2, #0]
 800832e:	e14d      	b.n	80085cc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 80a5 	bne.w	8008484 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	843b      	strh	r3, [r7, #32]
 8008348:	8c3b      	ldrh	r3, [r7, #32]
 800834a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <USB_DeactivateEndpoint+0x18a>
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008368:	83fb      	strh	r3, [r7, #30]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	441a      	add	r2, r3
 8008374:	8bfb      	ldrh	r3, [r7, #30]
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	83bb      	strh	r3, [r7, #28]
 8008398:	8bbb      	ldrh	r3, [r7, #28]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01b      	beq.n	80083da <USB_DeactivateEndpoint+0x1da>
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b8:	837b      	strh	r3, [r7, #26]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	8b7b      	ldrh	r3, [r7, #26]
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f0:	833b      	strh	r3, [r7, #24]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	441a      	add	r2, r3
 80083fc:	8b3b      	ldrh	r3, [r7, #24]
 80083fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800840e:	b29b      	uxth	r3, r3
 8008410:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008428:	82fb      	strh	r3, [r7, #22]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	441a      	add	r2, r3
 8008434:	8afb      	ldrh	r3, [r7, #22]
 8008436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008460:	82bb      	strh	r3, [r7, #20]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	441a      	add	r2, r3
 800846c:	8abb      	ldrh	r3, [r7, #20]
 800846e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847e:	b29b      	uxth	r3, r3
 8008480:	8013      	strh	r3, [r2, #0]
 8008482:	e0a3      	b.n	80085cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01b      	beq.n	80084d4 <USB_DeactivateEndpoint+0x2d4>
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80084c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80084e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01b      	beq.n	8008524 <USB_DeactivateEndpoint+0x324>
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008502:	853b      	strh	r3, [r7, #40]	; 0x28
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	441a      	add	r2, r3
 800850e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008520:	b29b      	uxth	r3, r3
 8008522:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	441a      	add	r2, r3
 8008546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	b29b      	uxth	r3, r3
 800855a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008572:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	441a      	add	r2, r3
 800857e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008590:	b29b      	uxth	r3, r3
 8008592:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	441a      	add	r2, r3
 80085b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3734      	adds	r7, #52	; 0x34
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr

080085d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b0cc      	sub	sp, #304	; 0x130
 80085dc:	af00      	add	r7, sp, #0
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	6018      	str	r0, [r3, #0]
 80085e2:	463b      	mov	r3, r7
 80085e4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085e6:	463b      	mov	r3, r7
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	f040 872e 	bne.w	800944e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80085f2:	463b      	mov	r3, r7
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	463b      	mov	r3, r7
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d905      	bls.n	800860e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008602:	463b      	mov	r3, r7
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800860c:	e004      	b.n	8008618 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800860e:	463b      	mov	r3, r7
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008618:	463b      	mov	r3, r7
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	7b1b      	ldrb	r3, [r3, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d134      	bne.n	800868c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008622:	463b      	mov	r3, r7
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6959      	ldr	r1, [r3, #20]
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	88da      	ldrh	r2, [r3, #6]
 800862e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008632:	b29b      	uxth	r3, r3
 8008634:	1d38      	adds	r0, r7, #4
 8008636:	6800      	ldr	r0, [r0, #0]
 8008638:	f001 fc03 	bl	8009e42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800863c:	f107 0310 	add.w	r3, r7, #16
 8008640:	1d3a      	adds	r2, r7, #4
 8008642:	6812      	ldr	r2, [r2, #0]
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	1d3b      	adds	r3, r7, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800864e:	b29b      	uxth	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	f107 0310 	add.w	r3, r7, #16
 8008656:	f107 0210 	add.w	r2, r7, #16
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	440a      	add	r2, r1
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	463b      	mov	r3, r7
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	011a      	lsls	r2, r3, #4
 8008668:	f107 0310 	add.w	r3, r7, #16
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4413      	add	r3, r2
 8008670:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008674:	f107 030c 	add.w	r3, r7, #12
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867e:	b29a      	uxth	r2, r3
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	f000 beac 	b.w	80093e4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800868c:	463b      	mov	r3, r7
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	78db      	ldrb	r3, [r3, #3]
 8008692:	2b02      	cmp	r3, #2
 8008694:	f040 838c 	bne.w	8008db0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008698:	463b      	mov	r3, r7
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a1a      	ldr	r2, [r3, #32]
 800869e:	463b      	mov	r3, r7
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	f240 8330 	bls.w	8008d0a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80086aa:	1d3b      	adds	r3, r7, #4
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	463b      	mov	r3, r7
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80086c8:	1d3b      	adds	r3, r7, #4
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	463b      	mov	r3, r7
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80086ee:	463b      	mov	r3, r7
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f8:	1ad2      	subs	r2, r2, r3
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008700:	1d3b      	adds	r3, r7, #4
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	463b      	mov	r3, r7
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 819e 	beq.w	8008a58 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800871c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008720:	1d3a      	adds	r2, r7, #4
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	463b      	mov	r3, r7
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d17a      	bne.n	8008826 <USB_EPStartXfer+0x24e>
 8008730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008734:	1d3a      	adds	r2, r7, #4
 8008736:	6812      	ldr	r2, [r2, #0]
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	1d3b      	adds	r3, r7, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008742:	b29b      	uxth	r3, r3
 8008744:	4619      	mov	r1, r3
 8008746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800874a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	440a      	add	r2, r1
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	463b      	mov	r3, r7
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	011a      	lsls	r2, r3, #4
 800875c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4413      	add	r3, r2
 8008764:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11a      	bne.n	80087ac <USB_EPStartXfer+0x1d4>
 8008776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008784:	b29a      	uxth	r2, r3
 8008786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	801a      	strh	r2, [r3, #0]
 800878e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	801a      	strh	r2, [r3, #0]
 80087aa:	e062      	b.n	8008872 <USB_EPStartXfer+0x29a>
 80087ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b0:	2b3e      	cmp	r3, #62	; 0x3e
 80087b2:	d819      	bhi.n	80087e8 <USB_EPStartXfer+0x210>
 80087b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80087be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <USB_EPStartXfer+0x1fc>
 80087ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ce:	3301      	adds	r3, #1
 80087d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80087d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d8:	b29b      	uxth	r3, r3
 80087da:	029b      	lsls	r3, r3, #10
 80087dc:	b29a      	uxth	r2, r3
 80087de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	801a      	strh	r2, [r3, #0]
 80087e6:	e044      	b.n	8008872 <USB_EPStartXfer+0x29a>
 80087e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80087f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f6:	f003 031f 	and.w	r3, r3, #31
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <USB_EPStartXfer+0x230>
 80087fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008802:	3b01      	subs	r3, #1
 8008804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800880c:	b29b      	uxth	r3, r3
 800880e:	029b      	lsls	r3, r3, #10
 8008810:	b29b      	uxth	r3, r3
 8008812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800881a:	b29a      	uxth	r2, r3
 800881c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	e025      	b.n	8008872 <USB_EPStartXfer+0x29a>
 8008826:	463b      	mov	r3, r7
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d120      	bne.n	8008872 <USB_EPStartXfer+0x29a>
 8008830:	1d3b      	adds	r3, r7, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008838:	b29b      	uxth	r3, r3
 800883a:	4619      	mov	r1, r3
 800883c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008840:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	440a      	add	r2, r1
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	463b      	mov	r3, r7
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	011a      	lsls	r2, r3, #4
 8008852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4413      	add	r3, r2
 800885a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800885e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008868:	b29a      	uxth	r2, r3
 800886a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008872:	463b      	mov	r3, r7
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	895b      	ldrh	r3, [r3, #10]
 8008878:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800887c:	463b      	mov	r3, r7
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6959      	ldr	r1, [r3, #20]
 8008882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008886:	b29b      	uxth	r3, r3
 8008888:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800888c:	1d38      	adds	r0, r7, #4
 800888e:	6800      	ldr	r0, [r0, #0]
 8008890:	f001 fad7 	bl	8009e42 <USB_WritePMA>
            ep->xfer_buff += len;
 8008894:	463b      	mov	r3, r7
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889e:	441a      	add	r2, r3
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088a6:	463b      	mov	r3, r7
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6a1a      	ldr	r2, [r3, #32]
 80088ac:	463b      	mov	r3, r7
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d909      	bls.n	80088ca <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80088b6:	463b      	mov	r3, r7
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6a1a      	ldr	r2, [r3, #32]
 80088bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c0:	1ad2      	subs	r2, r2, r3
 80088c2:	463b      	mov	r3, r7
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	621a      	str	r2, [r3, #32]
 80088c8:	e008      	b.n	80088dc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80088d4:	463b      	mov	r3, r7
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088dc:	463b      	mov	r3, r7
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d17a      	bne.n	80089dc <USB_EPStartXfer+0x404>
 80088e6:	f107 0318 	add.w	r3, r7, #24
 80088ea:	1d3a      	adds	r2, r7, #4
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	1d3b      	adds	r3, r7, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	4619      	mov	r1, r3
 80088fc:	f107 0318 	add.w	r3, r7, #24
 8008900:	f107 0218 	add.w	r2, r7, #24
 8008904:	6812      	ldr	r2, [r2, #0]
 8008906:	440a      	add	r2, r1
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	463b      	mov	r3, r7
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	011a      	lsls	r2, r3, #4
 8008912:	f107 0318 	add.w	r3, r7, #24
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4413      	add	r3, r2
 800891a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800891e:	f107 0314 	add.w	r3, r7, #20
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d11a      	bne.n	8008962 <USB_EPStartXfer+0x38a>
 800892c:	f107 0314 	add.w	r3, r7, #20
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800893a:	b29a      	uxth	r2, r3
 800893c:	f107 0314 	add.w	r3, r7, #20
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	801a      	strh	r2, [r3, #0]
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008956:	b29a      	uxth	r2, r3
 8008958:	f107 0314 	add.w	r3, r7, #20
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e067      	b.n	8008a32 <USB_EPStartXfer+0x45a>
 8008962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008966:	2b3e      	cmp	r3, #62	; 0x3e
 8008968:	d819      	bhi.n	800899e <USB_EPStartXfer+0x3c6>
 800896a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <USB_EPStartXfer+0x3b2>
 8008980:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008984:	3301      	adds	r3, #1
 8008986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800898a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800898e:	b29b      	uxth	r3, r3
 8008990:	029b      	lsls	r3, r3, #10
 8008992:	b29a      	uxth	r2, r3
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e049      	b.n	8008a32 <USB_EPStartXfer+0x45a>
 800899e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80089a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ac:	f003 031f 	and.w	r3, r3, #31
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <USB_EPStartXfer+0x3e6>
 80089b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80089b8:	3b01      	subs	r3, #1
 80089ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80089be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	029b      	lsls	r3, r3, #10
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f107 0314 	add.w	r3, r7, #20
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	801a      	strh	r2, [r3, #0]
 80089da:	e02a      	b.n	8008a32 <USB_EPStartXfer+0x45a>
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d125      	bne.n	8008a32 <USB_EPStartXfer+0x45a>
 80089e6:	f107 0320 	add.w	r3, r7, #32
 80089ea:	1d3a      	adds	r2, r7, #4
 80089ec:	6812      	ldr	r2, [r2, #0]
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	1d3b      	adds	r3, r7, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4619      	mov	r1, r3
 80089fc:	f107 0320 	add.w	r3, r7, #32
 8008a00:	f107 0220 	add.w	r2, r7, #32
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	440a      	add	r2, r1
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	011a      	lsls	r2, r3, #4
 8008a12:	f107 0320 	add.w	r3, r7, #32
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008a1e:	f107 031c 	add.w	r3, r7, #28
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	f107 031c 	add.w	r3, r7, #28
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a32:	463b      	mov	r3, r7
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	891b      	ldrh	r3, [r3, #8]
 8008a38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6959      	ldr	r1, [r3, #20]
 8008a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a4c:	1d38      	adds	r0, r7, #4
 8008a4e:	6800      	ldr	r0, [r0, #0]
 8008a50:	f001 f9f7 	bl	8009e42 <USB_WritePMA>
 8008a54:	f000 bcc6 	b.w	80093e4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a58:	463b      	mov	r3, r7
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d164      	bne.n	8008b2c <USB_EPStartXfer+0x554>
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a68:	1d3b      	adds	r3, r7, #4
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a76:	4413      	add	r3, r2
 8008a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	011a      	lsls	r2, r3, #4
 8008a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a84:	4413      	add	r3, r2
 8008a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d112      	bne.n	8008aba <USB_EPStartXfer+0x4e2>
 8008a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e057      	b.n	8008b6a <USB_EPStartXfer+0x592>
 8008aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abe:	2b3e      	cmp	r3, #62	; 0x3e
 8008ac0:	d817      	bhi.n	8008af2 <USB_EPStartXfer+0x51a>
 8008ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac6:	085b      	lsrs	r3, r3, #1
 8008ac8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <USB_EPStartXfer+0x50a>
 8008ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008adc:	3301      	adds	r3, #1
 8008ade:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ae2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	029b      	lsls	r3, r3, #10
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aee:	801a      	strh	r2, [r3, #0]
 8008af0:	e03b      	b.n	8008b6a <USB_EPStartXfer+0x592>
 8008af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d104      	bne.n	8008b12 <USB_EPStartXfer+0x53a>
 8008b08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	029b      	lsls	r3, r3, #10
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e01e      	b.n	8008b6a <USB_EPStartXfer+0x592>
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d119      	bne.n	8008b6a <USB_EPStartXfer+0x592>
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b3c:	1d3b      	adds	r3, r7, #4
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4a:	4413      	add	r3, r2
 8008b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b4e:	463b      	mov	r3, r7
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	011a      	lsls	r2, r3, #4
 8008b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b58:	4413      	add	r3, r2
 8008b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	891b      	ldrh	r3, [r3, #8]
 8008b70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b74:	463b      	mov	r3, r7
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6959      	ldr	r1, [r3, #20]
 8008b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b84:	1d38      	adds	r0, r7, #4
 8008b86:	6800      	ldr	r0, [r0, #0]
 8008b88:	f001 f95b 	bl	8009e42 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b96:	441a      	add	r2, r3
 8008b98:	463b      	mov	r3, r7
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6a1a      	ldr	r2, [r3, #32]
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d909      	bls.n	8008bc2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008bae:	463b      	mov	r3, r7
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6a1a      	ldr	r2, [r3, #32]
 8008bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb8:	1ad2      	subs	r2, r2, r3
 8008bba:	463b      	mov	r3, r7
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	621a      	str	r2, [r3, #32]
 8008bc0:	e008      	b.n	8008bd4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008bcc:	463b      	mov	r3, r7
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bd4:	1d3b      	adds	r3, r7, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8008bda:	463b      	mov	r3, r7
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d164      	bne.n	8008cae <USB_EPStartXfer+0x6d6>
 8008be4:	1d3b      	adds	r3, r7, #4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	4413      	add	r3, r2
 8008bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bfc:	463b      	mov	r3, r7
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	011a      	lsls	r2, r3, #4
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	4413      	add	r3, r2
 8008c08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d112      	bne.n	8008c3c <USB_EPStartXfer+0x664>
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c24:	801a      	strh	r2, [r3, #0]
 8008c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	e054      	b.n	8008ce6 <USB_EPStartXfer+0x70e>
 8008c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c40:	2b3e      	cmp	r3, #62	; 0x3e
 8008c42:	d817      	bhi.n	8008c74 <USB_EPStartXfer+0x69c>
 8008c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c48:	085b      	lsrs	r3, r3, #1
 8008c4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <USB_EPStartXfer+0x68c>
 8008c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c5e:	3301      	adds	r3, #1
 8008c60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	029b      	lsls	r3, r3, #10
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	e038      	b.n	8008ce6 <USB_EPStartXfer+0x70e>
 8008c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <USB_EPStartXfer+0x6bc>
 8008c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	029b      	lsls	r3, r3, #10
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	801a      	strh	r2, [r3, #0]
 8008cac:	e01b      	b.n	8008ce6 <USB_EPStartXfer+0x70e>
 8008cae:	463b      	mov	r3, r7
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d116      	bne.n	8008ce6 <USB_EPStartXfer+0x70e>
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc6:	4413      	add	r3, r2
 8008cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cca:	463b      	mov	r3, r7
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	011a      	lsls	r2, r3, #4
 8008cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	895b      	ldrh	r3, [r3, #10]
 8008cec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6959      	ldr	r1, [r3, #20]
 8008cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d00:	1d38      	adds	r0, r7, #4
 8008d02:	6800      	ldr	r0, [r0, #0]
 8008d04:	f001 f89d 	bl	8009e42 <USB_WritePMA>
 8008d08:	e36c      	b.n	80093e4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	463b      	mov	r3, r7
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	441a      	add	r2, r3
 8008d40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d5e:	1d3b      	adds	r3, r7, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d6c:	4413      	add	r3, r2
 8008d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d70:	463b      	mov	r3, r7
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	011a      	lsls	r2, r3, #4
 8008d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	891b      	ldrh	r3, [r3, #8]
 8008d92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d96:	463b      	mov	r3, r7
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6959      	ldr	r1, [r3, #20]
 8008d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008da6:	1d38      	adds	r0, r7, #4
 8008da8:	6800      	ldr	r0, [r0, #0]
 8008daa:	f001 f84a 	bl	8009e42 <USB_WritePMA>
 8008dae:	e319      	b.n	80093e4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008db0:	1d3b      	adds	r3, r7, #4
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	463b      	mov	r3, r7
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dca:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008dce:	1d3b      	adds	r3, r7, #4
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	441a      	add	r2, r3
 8008ddc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008df4:	463b      	mov	r3, r7
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6a1a      	ldr	r2, [r3, #32]
 8008dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	463b      	mov	r3, r7
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e06:	1d3b      	adds	r3, r7, #4
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8162 	beq.w	80090e6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e22:	1d3b      	adds	r3, r7, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d164      	bne.n	8008efe <USB_EPStartXfer+0x926>
 8008e34:	1d3b      	adds	r3, r7, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e3a:	1d3b      	adds	r3, r7, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e48:	4413      	add	r3, r2
 8008e4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	011a      	lsls	r2, r3, #4
 8008e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e56:	4413      	add	r3, r2
 8008e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e5c:	677b      	str	r3, [r7, #116]	; 0x74
 8008e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d112      	bne.n	8008e8c <USB_EPStartXfer+0x8b4>
 8008e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e88:	801a      	strh	r2, [r3, #0]
 8008e8a:	e057      	b.n	8008f3c <USB_EPStartXfer+0x964>
 8008e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e90:	2b3e      	cmp	r3, #62	; 0x3e
 8008e92:	d817      	bhi.n	8008ec4 <USB_EPStartXfer+0x8ec>
 8008e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <USB_EPStartXfer+0x8dc>
 8008eaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008eb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	029b      	lsls	r3, r3, #10
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec0:	801a      	strh	r2, [r3, #0]
 8008ec2:	e03b      	b.n	8008f3c <USB_EPStartXfer+0x964>
 8008ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <USB_EPStartXfer+0x90c>
 8008eda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	029b      	lsls	r3, r3, #10
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	e01e      	b.n	8008f3c <USB_EPStartXfer+0x964>
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d119      	bne.n	8008f3c <USB_EPStartXfer+0x964>
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f18:	4413      	add	r3, r2
 8008f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f1e:	463b      	mov	r3, r7
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	011a      	lsls	r2, r3, #4
 8008f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	895b      	ldrh	r3, [r3, #10]
 8008f42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f46:	463b      	mov	r3, r7
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6959      	ldr	r1, [r3, #20]
 8008f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f56:	1d38      	adds	r0, r7, #4
 8008f58:	6800      	ldr	r0, [r0, #0]
 8008f5a:	f000 ff72 	bl	8009e42 <USB_WritePMA>
          ep->xfer_buff += len;
 8008f5e:	463b      	mov	r3, r7
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f68:	441a      	add	r2, r3
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008f70:	463b      	mov	r3, r7
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	463b      	mov	r3, r7
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d909      	bls.n	8008f94 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008f80:	463b      	mov	r3, r7
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6a1a      	ldr	r2, [r3, #32]
 8008f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	621a      	str	r2, [r3, #32]
 8008f92:	e008      	b.n	8008fa6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008f94:	463b      	mov	r3, r7
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 821a 	beq.w	80093e4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fb0:	463b      	mov	r3, r7
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d164      	bne.n	8009084 <USB_EPStartXfer+0xaac>
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fc0:	1d3b      	adds	r3, r7, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fce:	4413      	add	r3, r2
 8008fd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	011a      	lsls	r2, r3, #4
 8008fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fdc:	4413      	add	r3, r2
 8008fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8008fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d112      	bne.n	8009012 <USB_EPStartXfer+0xa3a>
 8008fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900a:	b29a      	uxth	r2, r3
 800900c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800900e:	801a      	strh	r2, [r3, #0]
 8009010:	e057      	b.n	80090c2 <USB_EPStartXfer+0xaea>
 8009012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009016:	2b3e      	cmp	r3, #62	; 0x3e
 8009018:	d817      	bhi.n	800904a <USB_EPStartXfer+0xa72>
 800901a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <USB_EPStartXfer+0xa62>
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009034:	3301      	adds	r3, #1
 8009036:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903e:	b29b      	uxth	r3, r3
 8009040:	029b      	lsls	r3, r3, #10
 8009042:	b29a      	uxth	r2, r3
 8009044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	e03b      	b.n	80090c2 <USB_EPStartXfer+0xaea>
 800904a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <USB_EPStartXfer+0xa92>
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009064:	3b01      	subs	r3, #1
 8009066:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906e:	b29b      	uxth	r3, r3
 8009070:	029b      	lsls	r3, r3, #10
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907c:	b29a      	uxth	r2, r3
 800907e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009080:	801a      	strh	r2, [r3, #0]
 8009082:	e01e      	b.n	80090c2 <USB_EPStartXfer+0xaea>
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d119      	bne.n	80090c2 <USB_EPStartXfer+0xaea>
 800908e:	1d3b      	adds	r3, r7, #4
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	673b      	str	r3, [r7, #112]	; 0x70
 8009094:	1d3b      	adds	r3, r7, #4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800909c:	b29b      	uxth	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090a2:	4413      	add	r3, r2
 80090a4:	673b      	str	r3, [r7, #112]	; 0x70
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	011a      	lsls	r2, r3, #4
 80090ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090bc:	b29a      	uxth	r2, r3
 80090be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090c2:	463b      	mov	r3, r7
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	891b      	ldrh	r3, [r3, #8]
 80090c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090cc:	463b      	mov	r3, r7
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6959      	ldr	r1, [r3, #20]
 80090d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090dc:	1d38      	adds	r0, r7, #4
 80090de:	6800      	ldr	r0, [r0, #0]
 80090e0:	f000 feaf 	bl	8009e42 <USB_WritePMA>
 80090e4:	e17e      	b.n	80093e4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090e6:	463b      	mov	r3, r7
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d16f      	bne.n	80091d0 <USB_EPStartXfer+0xbf8>
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090f8:	1d3b      	adds	r3, r7, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009100:	b29b      	uxth	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009108:	4413      	add	r3, r2
 800910a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800910e:	463b      	mov	r3, r7
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	011a      	lsls	r2, r3, #4
 8009116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800911a:	4413      	add	r3, r2
 800911c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d116      	bne.n	800915a <USB_EPStartXfer+0xb82>
 800912c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009138:	b29a      	uxth	r2, r3
 800913a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	e05f      	b.n	800921a <USB_EPStartXfer+0xc42>
 800915a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915e:	2b3e      	cmp	r3, #62	; 0x3e
 8009160:	d818      	bhi.n	8009194 <USB_EPStartXfer+0xbbc>
 8009162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800916c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <USB_EPStartXfer+0xbaa>
 8009178:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800917c:	3301      	adds	r3, #1
 800917e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009182:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009186:	b29b      	uxth	r3, r3
 8009188:	029b      	lsls	r3, r3, #10
 800918a:	b29a      	uxth	r2, r3
 800918c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009190:	801a      	strh	r2, [r3, #0]
 8009192:	e042      	b.n	800921a <USB_EPStartXfer+0xc42>
 8009194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	f003 031f 	and.w	r3, r3, #31
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <USB_EPStartXfer+0xbdc>
 80091aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80091ae:	3b01      	subs	r3, #1
 80091b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80091b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	029b      	lsls	r3, r3, #10
 80091bc:	b29b      	uxth	r3, r3
 80091be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091cc:	801a      	strh	r2, [r3, #0]
 80091ce:	e024      	b.n	800921a <USB_EPStartXfer+0xc42>
 80091d0:	463b      	mov	r3, r7
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	785b      	ldrb	r3, [r3, #1]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d11f      	bne.n	800921a <USB_EPStartXfer+0xc42>
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091e2:	1d3b      	adds	r3, r7, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091f2:	4413      	add	r3, r2
 80091f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091f8:	463b      	mov	r3, r7
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	011a      	lsls	r2, r3, #4
 8009200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009204:	4413      	add	r3, r2
 8009206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800920a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800920e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009212:	b29a      	uxth	r2, r3
 8009214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009218:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	891b      	ldrh	r3, [r3, #8]
 8009220:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009224:	463b      	mov	r3, r7
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6959      	ldr	r1, [r3, #20]
 800922a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922e:	b29b      	uxth	r3, r3
 8009230:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009234:	1d38      	adds	r0, r7, #4
 8009236:	6800      	ldr	r0, [r0, #0]
 8009238:	f000 fe03 	bl	8009e42 <USB_WritePMA>
          ep->xfer_buff += len;
 800923c:	463b      	mov	r3, r7
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695a      	ldr	r2, [r3, #20]
 8009242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009246:	441a      	add	r2, r3
 8009248:	463b      	mov	r3, r7
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800924e:	463b      	mov	r3, r7
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6a1a      	ldr	r2, [r3, #32]
 8009254:	463b      	mov	r3, r7
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d909      	bls.n	8009272 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800925e:	463b      	mov	r3, r7
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6a1a      	ldr	r2, [r3, #32]
 8009264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009268:	1ad2      	subs	r2, r2, r3
 800926a:	463b      	mov	r3, r7
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	621a      	str	r2, [r3, #32]
 8009270:	e008      	b.n	8009284 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009272:	463b      	mov	r3, r7
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800927c:	463b      	mov	r3, r7
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2200      	movs	r2, #0
 8009282:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80ab 	beq.w	80093e4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800928e:	1d3b      	adds	r3, r7, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009296:	463b      	mov	r3, r7
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d16f      	bne.n	8009380 <USB_EPStartXfer+0xda8>
 80092a0:	1d3b      	adds	r3, r7, #4
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092a8:	1d3b      	adds	r3, r7, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092b8:	4413      	add	r3, r2
 80092ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092be:	463b      	mov	r3, r7
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	011a      	lsls	r2, r3, #4
 80092c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ca:	4413      	add	r3, r2
 80092cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d116      	bne.n	800930a <USB_EPStartXfer+0xd32>
 80092dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092ee:	801a      	strh	r2, [r3, #0]
 80092f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009300:	b29a      	uxth	r2, r3
 8009302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009306:	801a      	strh	r2, [r3, #0]
 8009308:	e05b      	b.n	80093c2 <USB_EPStartXfer+0xdea>
 800930a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930e:	2b3e      	cmp	r3, #62	; 0x3e
 8009310:	d818      	bhi.n	8009344 <USB_EPStartXfer+0xd6c>
 8009312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009316:	085b      	lsrs	r3, r3, #1
 8009318:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800931c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <USB_EPStartXfer+0xd5a>
 8009328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800932c:	3301      	adds	r3, #1
 800932e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009336:	b29b      	uxth	r3, r3
 8009338:	029b      	lsls	r3, r3, #10
 800933a:	b29a      	uxth	r2, r3
 800933c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	e03e      	b.n	80093c2 <USB_EPStartXfer+0xdea>
 8009344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009348:	095b      	lsrs	r3, r3, #5
 800934a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800934e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <USB_EPStartXfer+0xd8c>
 800935a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800935e:	3b01      	subs	r3, #1
 8009360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009368:	b29b      	uxth	r3, r3
 800936a:	029b      	lsls	r3, r3, #10
 800936c:	b29b      	uxth	r3, r3
 800936e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009376:	b29a      	uxth	r2, r3
 8009378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	e020      	b.n	80093c2 <USB_EPStartXfer+0xdea>
 8009380:	463b      	mov	r3, r7
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d11b      	bne.n	80093c2 <USB_EPStartXfer+0xdea>
 800938a:	1d3b      	adds	r3, r7, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009392:	b29b      	uxth	r3, r3
 8009394:	461a      	mov	r2, r3
 8009396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800939a:	4413      	add	r3, r2
 800939c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093a0:	463b      	mov	r3, r7
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	011a      	lsls	r2, r3, #4
 80093a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093ac:	4413      	add	r3, r2
 80093ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	895b      	ldrh	r3, [r3, #10]
 80093c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093cc:	463b      	mov	r3, r7
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6959      	ldr	r1, [r3, #20]
 80093d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093dc:	1d38      	adds	r0, r7, #4
 80093de:	6800      	ldr	r0, [r0, #0]
 80093e0:	f000 fd2f 	bl	8009e42 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093e4:	1d3b      	adds	r3, r7, #4
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	463b      	mov	r3, r7
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f107 020a 	add.w	r2, r7, #10
 80093fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009402:	8013      	strh	r3, [r2, #0]
 8009404:	f107 030a 	add.w	r3, r7, #10
 8009408:	f107 020a 	add.w	r2, r7, #10
 800940c:	8812      	ldrh	r2, [r2, #0]
 800940e:	f082 0210 	eor.w	r2, r2, #16
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	f107 030a 	add.w	r3, r7, #10
 8009418:	f107 020a 	add.w	r2, r7, #10
 800941c:	8812      	ldrh	r2, [r2, #0]
 800941e:	f082 0220 	eor.w	r2, r2, #32
 8009422:	801a      	strh	r2, [r3, #0]
 8009424:	1d3b      	adds	r3, r7, #4
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	463b      	mov	r3, r7
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	441a      	add	r2, r3
 8009432:	f107 030a 	add.w	r3, r7, #10
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800943c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009448:	b29b      	uxth	r3, r3
 800944a:	8013      	strh	r3, [r2, #0]
 800944c:	e3b5      	b.n	8009bba <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800944e:	463b      	mov	r3, r7
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	7b1b      	ldrb	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f040 8090 	bne.w	800957a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800945a:	463b      	mov	r3, r7
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	699a      	ldr	r2, [r3, #24]
 8009460:	463b      	mov	r3, r7
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	429a      	cmp	r2, r3
 8009468:	d90e      	bls.n	8009488 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800946a:	463b      	mov	r3, r7
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009474:	463b      	mov	r3, r7
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699a      	ldr	r2, [r3, #24]
 800947a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800947e:	1ad2      	subs	r2, r2, r3
 8009480:	463b      	mov	r3, r7
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	619a      	str	r2, [r3, #24]
 8009486:	e008      	b.n	800949a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009488:	463b      	mov	r3, r7
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009492:	463b      	mov	r3, r7
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2200      	movs	r2, #0
 8009498:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800949a:	1d3b      	adds	r3, r7, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094a2:	1d3b      	adds	r3, r7, #4
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094b2:	4413      	add	r3, r2
 80094b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094b8:	463b      	mov	r3, r7
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	011a      	lsls	r2, r3, #4
 80094c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094c4:	4413      	add	r3, r2
 80094c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d116      	bne.n	8009504 <USB_EPStartXfer+0xf2c>
 80094d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094e8:	801a      	strh	r2, [r3, #0]
 80094ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009500:	801a      	strh	r2, [r3, #0]
 8009502:	e32c      	b.n	8009b5e <USB_EPStartXfer+0x1586>
 8009504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009508:	2b3e      	cmp	r3, #62	; 0x3e
 800950a:	d818      	bhi.n	800953e <USB_EPStartXfer+0xf66>
 800950c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009510:	085b      	lsrs	r3, r3, #1
 8009512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <USB_EPStartXfer+0xf54>
 8009522:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009526:	3301      	adds	r3, #1
 8009528:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800952c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009530:	b29b      	uxth	r3, r3
 8009532:	029b      	lsls	r3, r3, #10
 8009534:	b29a      	uxth	r2, r3
 8009536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800953a:	801a      	strh	r2, [r3, #0]
 800953c:	e30f      	b.n	8009b5e <USB_EPStartXfer+0x1586>
 800953e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009542:	095b      	lsrs	r3, r3, #5
 8009544:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <USB_EPStartXfer+0xf86>
 8009554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009558:	3b01      	subs	r3, #1
 800955a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800955e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009562:	b29b      	uxth	r3, r3
 8009564:	029b      	lsls	r3, r3, #10
 8009566:	b29b      	uxth	r3, r3
 8009568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009570:	b29a      	uxth	r2, r3
 8009572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009576:	801a      	strh	r2, [r3, #0]
 8009578:	e2f1      	b.n	8009b5e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800957a:	463b      	mov	r3, r7
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	78db      	ldrb	r3, [r3, #3]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f040 818f 	bne.w	80098a4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009586:	463b      	mov	r3, r7
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d175      	bne.n	800967c <USB_EPStartXfer+0x10a4>
 8009590:	1d3b      	adds	r3, r7, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	461a      	mov	r2, r3
 80095a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095a8:	4413      	add	r3, r2
 80095aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095ae:	463b      	mov	r3, r7
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	011a      	lsls	r2, r3, #4
 80095b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095ba:	4413      	add	r3, r2
 80095bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095c4:	463b      	mov	r3, r7
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d116      	bne.n	80095fc <USB_EPStartXfer+0x1024>
 80095ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095da:	b29a      	uxth	r2, r3
 80095dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095f8:	801a      	strh	r2, [r3, #0]
 80095fa:	e065      	b.n	80096c8 <USB_EPStartXfer+0x10f0>
 80095fc:	463b      	mov	r3, r7
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	2b3e      	cmp	r3, #62	; 0x3e
 8009604:	d81a      	bhi.n	800963c <USB_EPStartXfer+0x1064>
 8009606:	463b      	mov	r3, r7
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	085b      	lsrs	r3, r3, #1
 800960e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009612:	463b      	mov	r3, r7
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <USB_EPStartXfer+0x1052>
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009624:	3301      	adds	r3, #1
 8009626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962e:	b29b      	uxth	r3, r3
 8009630:	029b      	lsls	r3, r3, #10
 8009632:	b29a      	uxth	r2, r3
 8009634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	e045      	b.n	80096c8 <USB_EPStartXfer+0x10f0>
 800963c:	463b      	mov	r3, r7
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	095b      	lsrs	r3, r3, #5
 8009644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009648:	463b      	mov	r3, r7
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 031f 	and.w	r3, r3, #31
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <USB_EPStartXfer+0x1088>
 8009656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800965a:	3b01      	subs	r3, #1
 800965c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009664:	b29b      	uxth	r3, r3
 8009666:	029b      	lsls	r3, r3, #10
 8009668:	b29b      	uxth	r3, r3
 800966a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800966e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009672:	b29a      	uxth	r2, r3
 8009674:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009678:	801a      	strh	r2, [r3, #0]
 800967a:	e025      	b.n	80096c8 <USB_EPStartXfer+0x10f0>
 800967c:	463b      	mov	r3, r7
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	785b      	ldrb	r3, [r3, #1]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d120      	bne.n	80096c8 <USB_EPStartXfer+0x10f0>
 8009686:	1d3b      	adds	r3, r7, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800968e:	1d3b      	adds	r3, r7, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009696:	b29b      	uxth	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800969e:	4413      	add	r3, r2
 80096a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096a4:	463b      	mov	r3, r7
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	011a      	lsls	r2, r3, #4
 80096ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096b0:	4413      	add	r3, r2
 80096b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096ba:	463b      	mov	r3, r7
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096d0:	463b      	mov	r3, r7
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d175      	bne.n	80097c6 <USB_EPStartXfer+0x11ee>
 80096da:	1d3b      	adds	r3, r7, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096e2:	1d3b      	adds	r3, r7, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096f2:	4413      	add	r3, r2
 80096f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096f8:	463b      	mov	r3, r7
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	011a      	lsls	r2, r3, #4
 8009700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009704:	4413      	add	r3, r2
 8009706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800970a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800970e:	463b      	mov	r3, r7
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d116      	bne.n	8009746 <USB_EPStartXfer+0x116e>
 8009718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009724:	b29a      	uxth	r2, r3
 8009726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e061      	b.n	800980a <USB_EPStartXfer+0x1232>
 8009746:	463b      	mov	r3, r7
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	2b3e      	cmp	r3, #62	; 0x3e
 800974e:	d81a      	bhi.n	8009786 <USB_EPStartXfer+0x11ae>
 8009750:	463b      	mov	r3, r7
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800975c:	463b      	mov	r3, r7
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d004      	beq.n	8009774 <USB_EPStartXfer+0x119c>
 800976a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800976e:	3301      	adds	r3, #1
 8009770:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009774:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009778:	b29b      	uxth	r3, r3
 800977a:	029b      	lsls	r3, r3, #10
 800977c:	b29a      	uxth	r2, r3
 800977e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e041      	b.n	800980a <USB_EPStartXfer+0x1232>
 8009786:	463b      	mov	r3, r7
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	095b      	lsrs	r3, r3, #5
 800978e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009792:	463b      	mov	r3, r7
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <USB_EPStartXfer+0x11d2>
 80097a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097a4:	3b01      	subs	r3, #1
 80097a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	029b      	lsls	r3, r3, #10
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097bc:	b29a      	uxth	r2, r3
 80097be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097c2:	801a      	strh	r2, [r3, #0]
 80097c4:	e021      	b.n	800980a <USB_EPStartXfer+0x1232>
 80097c6:	463b      	mov	r3, r7
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	785b      	ldrb	r3, [r3, #1]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d11c      	bne.n	800980a <USB_EPStartXfer+0x1232>
 80097d0:	1d3b      	adds	r3, r7, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d8:	b29b      	uxth	r3, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097e0:	4413      	add	r3, r2
 80097e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097e6:	463b      	mov	r3, r7
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	011a      	lsls	r2, r3, #4
 80097ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097f2:	4413      	add	r3, r2
 80097f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097fc:	463b      	mov	r3, r7
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	b29a      	uxth	r2, r3
 8009804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009808:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800980a:	463b      	mov	r3, r7
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 81a4 	beq.w	8009b5e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009816:	1d3b      	adds	r3, r7, #4
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	463b      	mov	r3, r7
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800982a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800982e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <USB_EPStartXfer+0x126a>
 8009836:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800983a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10d      	bne.n	800985e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009842:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800984a:	2b00      	cmp	r3, #0
 800984c:	f040 8187 	bne.w	8009b5e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009850:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 8180 	bne.w	8009b5e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800985e:	1d3b      	adds	r3, r7, #4
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	463b      	mov	r3, r7
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009878:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	463b      	mov	r3, r7
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	441a      	add	r2, r3
 800988a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800988e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800989e:	b29b      	uxth	r3, r3
 80098a0:	8013      	strh	r3, [r2, #0]
 80098a2:	e15c      	b.n	8009b5e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	78db      	ldrb	r3, [r3, #3]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	f040 8155 	bne.w	8009b5a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80098b0:	463b      	mov	r3, r7
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	463b      	mov	r3, r7
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d90e      	bls.n	80098de <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80098c0:	463b      	mov	r3, r7
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80098ca:	463b      	mov	r3, r7
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d4:	1ad2      	subs	r2, r2, r3
 80098d6:	463b      	mov	r3, r7
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	619a      	str	r2, [r3, #24]
 80098dc:	e008      	b.n	80098f0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80098de:	463b      	mov	r3, r7
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80098e8:	463b      	mov	r3, r7
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2200      	movs	r2, #0
 80098ee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80098f0:	463b      	mov	r3, r7
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d16f      	bne.n	80099da <USB_EPStartXfer+0x1402>
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990a:	b29b      	uxth	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009912:	4413      	add	r3, r2
 8009914:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009918:	463b      	mov	r3, r7
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	011a      	lsls	r2, r3, #4
 8009920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009924:	4413      	add	r3, r2
 8009926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800992a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800992e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009932:	2b00      	cmp	r3, #0
 8009934:	d116      	bne.n	8009964 <USB_EPStartXfer+0x138c>
 8009936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009942:	b29a      	uxth	r2, r3
 8009944:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	b29b      	uxth	r3, r3
 8009952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800995a:	b29a      	uxth	r2, r3
 800995c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009960:	801a      	strh	r2, [r3, #0]
 8009962:	e05f      	b.n	8009a24 <USB_EPStartXfer+0x144c>
 8009964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009968:	2b3e      	cmp	r3, #62	; 0x3e
 800996a:	d818      	bhi.n	800999e <USB_EPStartXfer+0x13c6>
 800996c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009970:	085b      	lsrs	r3, r3, #1
 8009972:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <USB_EPStartXfer+0x13b4>
 8009982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009986:	3301      	adds	r3, #1
 8009988:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800998c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009990:	b29b      	uxth	r3, r3
 8009992:	029b      	lsls	r3, r3, #10
 8009994:	b29a      	uxth	r2, r3
 8009996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800999a:	801a      	strh	r2, [r3, #0]
 800999c:	e042      	b.n	8009a24 <USB_EPStartXfer+0x144c>
 800999e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a2:	095b      	lsrs	r3, r3, #5
 80099a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ac:	f003 031f 	and.w	r3, r3, #31
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <USB_EPStartXfer+0x13e6>
 80099b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099b8:	3b01      	subs	r3, #1
 80099ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	029b      	lsls	r3, r3, #10
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	e024      	b.n	8009a24 <USB_EPStartXfer+0x144c>
 80099da:	463b      	mov	r3, r7
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	785b      	ldrb	r3, [r3, #1]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d11f      	bne.n	8009a24 <USB_EPStartXfer+0x144c>
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099ec:	1d3b      	adds	r3, r7, #4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	461a      	mov	r2, r3
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fc:	4413      	add	r3, r2
 80099fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a02:	463b      	mov	r3, r7
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	011a      	lsls	r2, r3, #4
 8009a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0e:	4413      	add	r3, r2
 8009a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	1d3b      	adds	r3, r7, #4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a2c:	463b      	mov	r3, r7
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d16f      	bne.n	8009b16 <USB_EPStartXfer+0x153e>
 8009a36:	1d3b      	adds	r3, r7, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a4e:	4413      	add	r3, r2
 8009a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a54:	463b      	mov	r3, r7
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	011a      	lsls	r2, r3, #4
 8009a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a60:	4413      	add	r3, r2
 8009a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d116      	bne.n	8009aa0 <USB_EPStartXfer+0x14c8>
 8009a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a9c:	801a      	strh	r2, [r3, #0]
 8009a9e:	e05e      	b.n	8009b5e <USB_EPStartXfer+0x1586>
 8009aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8009aa6:	d818      	bhi.n	8009ada <USB_EPStartXfer+0x1502>
 8009aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aac:	085b      	lsrs	r3, r3, #1
 8009aae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <USB_EPStartXfer+0x14f0>
 8009abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ac8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	029b      	lsls	r3, r3, #10
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	e041      	b.n	8009b5e <USB_EPStartXfer+0x1586>
 8009ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ade:	095b      	lsrs	r3, r3, #5
 8009ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae8:	f003 031f 	and.w	r3, r3, #31
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d104      	bne.n	8009afa <USB_EPStartXfer+0x1522>
 8009af0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009af4:	3b01      	subs	r3, #1
 8009af6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	029b      	lsls	r3, r3, #10
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b12:	801a      	strh	r2, [r3, #0]
 8009b14:	e023      	b.n	8009b5e <USB_EPStartXfer+0x1586>
 8009b16:	463b      	mov	r3, r7
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d11e      	bne.n	8009b5e <USB_EPStartXfer+0x1586>
 8009b20:	1d3b      	adds	r3, r7, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b30:	4413      	add	r3, r2
 8009b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b36:	463b      	mov	r3, r7
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	011a      	lsls	r2, r3, #4
 8009b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b42:	4413      	add	r3, r2
 8009b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	e001      	b.n	8009b5e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e02e      	b.n	8009bbc <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b5e:	1d3b      	adds	r3, r7, #4
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	463b      	mov	r3, r7
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b78:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009b7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009b80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b84:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009b88:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009b8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b90:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009b94:	1d3b      	adds	r3, r7, #4
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	463b      	mov	r3, r7
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	441a      	add	r2, r3
 8009ba2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b085      	sub	sp, #20
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d020      	beq.n	8009c1a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bee:	81bb      	strh	r3, [r7, #12]
 8009bf0:	89bb      	ldrh	r3, [r7, #12]
 8009bf2:	f083 0310 	eor.w	r3, r3, #16
 8009bf6:	81bb      	strh	r3, [r7, #12]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	441a      	add	r2, r3
 8009c02:	89bb      	ldrh	r3, [r7, #12]
 8009c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	8013      	strh	r3, [r2, #0]
 8009c18:	e01f      	b.n	8009c5a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c30:	81fb      	strh	r3, [r7, #14]
 8009c32:	89fb      	ldrh	r3, [r7, #14]
 8009c34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c38:	81fb      	strh	r3, [r7, #14]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	441a      	add	r2, r3
 8009c44:	89fb      	ldrh	r3, [r7, #14]
 8009c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bc80      	pop	{r7}
 8009c64:	4770      	bx	lr

08009c66 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	7b1b      	ldrb	r3, [r3, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f040 809d 	bne.w	8009db4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d04c      	beq.n	8009d1c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	823b      	strh	r3, [r7, #16]
 8009c90:	8a3b      	ldrh	r3, [r7, #16]
 8009c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d01b      	beq.n	8009cd2 <USB_EPClearStall+0x6c>
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb0:	81fb      	strh	r3, [r7, #14]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	441a      	add	r2, r3
 8009cbc:	89fb      	ldrh	r3, [r7, #14]
 8009cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	78db      	ldrb	r3, [r3, #3]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d06c      	beq.n	8009db4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf0:	81bb      	strh	r3, [r7, #12]
 8009cf2:	89bb      	ldrh	r3, [r7, #12]
 8009cf4:	f083 0320 	eor.w	r3, r3, #32
 8009cf8:	81bb      	strh	r3, [r7, #12]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	89bb      	ldrh	r3, [r7, #12]
 8009d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	8013      	strh	r3, [r2, #0]
 8009d1a:	e04b      	b.n	8009db4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	82fb      	strh	r3, [r7, #22]
 8009d2a:	8afb      	ldrh	r3, [r7, #22]
 8009d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <USB_EPClearStall+0x106>
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4a:	82bb      	strh	r3, [r7, #20]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	8abb      	ldrh	r3, [r7, #20]
 8009d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d82:	827b      	strh	r3, [r7, #18]
 8009d84:	8a7b      	ldrh	r3, [r7, #18]
 8009d86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d8a:	827b      	strh	r3, [r7, #18]
 8009d8c:	8a7b      	ldrh	r3, [r7, #18]
 8009d8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d92:	827b      	strh	r3, [r7, #18]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	8a7b      	ldrh	r3, [r7, #18]
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr

08009dc0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d103      	bne.n	8009dda <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2280      	movs	r2, #128	; 0x80
 8009dd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr

08009de6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr

08009dfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bc80      	pop	{r7}
 8009e0c:	4770      	bx	lr

08009e0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009e20:	68fb      	ldr	r3, [r7, #12]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc80      	pop	{r7}
 8009e2a:	4770      	bx	lr

08009e2c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr

08009e42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b08d      	sub	sp, #52	; 0x34
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	461a      	mov	r2, r3
 8009e50:	460b      	mov	r3, r1
 8009e52:	80fb      	strh	r3, [r7, #6]
 8009e54:	4613      	mov	r3, r2
 8009e56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009e58:	88bb      	ldrh	r3, [r7, #4]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	085b      	lsrs	r3, r3, #1
 8009e5e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	005a      	lsls	r2, r3, #1
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e74:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7a:	e01e      	b.n	8009eba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	3301      	adds	r3, #1
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	021b      	lsls	r3, r3, #8
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	3302      	adds	r3, #2
 8009eac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1dd      	bne.n	8009e7c <USB_WritePMA+0x3a>
  }
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	3734      	adds	r7, #52	; 0x34
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bc80      	pop	{r7}
 8009eca:	4770      	bx	lr

08009ecc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b08b      	sub	sp, #44	; 0x2c
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	461a      	mov	r2, r3
 8009eda:	460b      	mov	r3, r1
 8009edc:	80fb      	strh	r3, [r7, #6]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ee2:	88bb      	ldrh	r3, [r7, #4]
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ef2:	88fb      	ldrh	r3, [r7, #6]
 8009ef4:	005a      	lsls	r2, r3, #1
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009efe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
 8009f04:	e01b      	b.n	8009f3e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	3302      	adds	r3, #2
 8009f12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	0a1b      	lsrs	r3, r3, #8
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	3302      	adds	r3, #2
 8009f36:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e0      	bne.n	8009f06 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009f44:	88bb      	ldrh	r3, [r7, #4]
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d007      	beq.n	8009f60 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	701a      	strb	r2, [r3, #0]
  }
}
 8009f60:	bf00      	nop
 8009f62:	372c      	adds	r7, #44	; 0x2c
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bc80      	pop	{r7}
 8009f68:	4770      	bx	lr

08009f6a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	460b      	mov	r3, r1
 8009f74:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7c1b      	ldrb	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d115      	bne.n	8009fae <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f86:	2202      	movs	r2, #2
 8009f88:	2181      	movs	r1, #129	; 0x81
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fea1 	bl	800bcd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 fe97 	bl	800bcd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009fac:	e012      	b.n	8009fd4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009fae:	2340      	movs	r3, #64	; 0x40
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	2181      	movs	r1, #129	; 0x81
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 fe8c 	bl	800bcd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009fc0:	2340      	movs	r3, #64	; 0x40
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f001 fe83 	bl	800bcd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009fd4:	2308      	movs	r3, #8
 8009fd6:	2203      	movs	r2, #3
 8009fd8:	2182      	movs	r1, #130	; 0x82
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fe79 	bl	800bcd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fe6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009fea:	f001 ff99 	bl	800bf20 <USBD_static_malloc>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a000:	2301      	movs	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
 800a004:	e026      	b.n	800a054 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2200      	movs	r2, #0
 800a024:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7c1b      	ldrb	r3, [r3, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a03a:	2101      	movs	r1, #1
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 ff39 	bl	800beb4 <USBD_LL_PrepareReceive>
 800a042:	e007      	b.n	800a054 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a04a:	2340      	movs	r3, #64	; 0x40
 800a04c:	2101      	movs	r1, #1
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f001 ff30 	bl	800beb4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a06e:	2181      	movs	r1, #129	; 0x81
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fe54 	bl	800bd1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a07c:	2101      	movs	r1, #1
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fe4d 	bl	800bd1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a08c:	2182      	movs	r1, #130	; 0x82
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 fe45 	bl	800bd1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00e      	beq.n	800a0c2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 ff3f 	bl	800bf38 <USBD_static_free>
    pdev->pClassData = NULL;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0dc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d039      	beq.n	800a16a <USBD_CDC_Setup+0x9e>
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d17f      	bne.n	800a1fa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	88db      	ldrh	r3, [r3, #6]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d029      	beq.n	800a156 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	b25b      	sxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da11      	bge.n	800a130 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a118:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	88d2      	ldrh	r2, [r2, #6]
 800a11e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a120:	6939      	ldr	r1, [r7, #16]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	88db      	ldrh	r3, [r3, #6]
 800a126:	461a      	mov	r2, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 fa0a 	bl	800b542 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a12e:	e06b      	b.n	800a208 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	785a      	ldrb	r2, [r3, #1]
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	88db      	ldrh	r3, [r3, #6]
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a146:	6939      	ldr	r1, [r7, #16]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	88db      	ldrh	r3, [r3, #6]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 fa25 	bl	800b59e <USBD_CtlPrepareRx>
      break;
 800a154:	e058      	b.n	800a208 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	7850      	ldrb	r0, [r2, #1]
 800a162:	2200      	movs	r2, #0
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	4798      	blx	r3
      break;
 800a168:	e04e      	b.n	800a208 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	2b0b      	cmp	r3, #11
 800a170:	d02e      	beq.n	800a1d0 <USBD_CDC_Setup+0x104>
 800a172:	2b0b      	cmp	r3, #11
 800a174:	dc38      	bgt.n	800a1e8 <USBD_CDC_Setup+0x11c>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <USBD_CDC_Setup+0xb4>
 800a17a:	2b0a      	cmp	r3, #10
 800a17c:	d014      	beq.n	800a1a8 <USBD_CDC_Setup+0xdc>
 800a17e:	e033      	b.n	800a1e8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a186:	2b03      	cmp	r3, #3
 800a188:	d107      	bne.n	800a19a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	2202      	movs	r2, #2
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 f9d5 	bl	800b542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a198:	e02e      	b.n	800a1f8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 f966 	bl	800b46e <USBD_CtlError>
            ret = USBD_FAIL;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a1a6:	e027      	b.n	800a1f8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d107      	bne.n	800a1c2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a1b2:	f107 030f 	add.w	r3, r7, #15
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 f9c1 	bl	800b542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1c0:	e01a      	b.n	800a1f8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 f952 	bl	800b46e <USBD_CtlError>
            ret = USBD_FAIL;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a1ce:	e013      	b.n	800a1f8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d00d      	beq.n	800a1f6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 f946 	bl	800b46e <USBD_CtlError>
            ret = USBD_FAIL;
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a1e6:	e006      	b.n	800a1f6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 f93f 	bl	800b46e <USBD_CtlError>
          ret = USBD_FAIL;
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	75fb      	strb	r3, [r7, #23]
          break;
 800a1f4:	e000      	b.n	800a1f8 <USBD_CDC_Setup+0x12c>
          break;
 800a1f6:	bf00      	nop
      }
      break;
 800a1f8:	e006      	b.n	800a208 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f936 	bl	800b46e <USBD_CtlError>
      ret = USBD_FAIL;
 800a202:	2302      	movs	r3, #2
 800a204:	75fb      	strb	r3, [r7, #23]
      break;
 800a206:	bf00      	nop
  }

  return ret;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a224:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a22c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a234:	2b00      	cmp	r3, #0
 800a236:	d03a      	beq.n	800a2ae <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	331c      	adds	r3, #28
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d029      	beq.n	800a2a2 <USBD_CDC_DataIn+0x90>
 800a24e:	78fa      	ldrb	r2, [r7, #3]
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	440b      	add	r3, r1
 800a25c:	331c      	adds	r3, #28
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	78f9      	ldrb	r1, [r7, #3]
 800a262:	68b8      	ldr	r0, [r7, #8]
 800a264:	460b      	mov	r3, r1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	440b      	add	r3, r1
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	4403      	add	r3, r0
 800a26e:	3338      	adds	r3, #56	; 0x38
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	fbb2 f1f3 	udiv	r1, r2, r3
 800a276:	fb03 f301 	mul.w	r3, r3, r1
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d110      	bne.n	800a2a2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a280:	78fa      	ldrb	r2, [r7, #3]
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	331c      	adds	r3, #28
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a294:	78f9      	ldrb	r1, [r7, #3]
 800a296:	2300      	movs	r3, #0
 800a298:	2200      	movs	r2, #0
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 fde7 	bl	800be6e <USBD_LL_Transmit>
 800a2a0:	e003      	b.n	800a2aa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e000      	b.n	800a2b0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a2ae:	2302      	movs	r3, #2
  }
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 fe12 	bl	800befa <USBD_LL_GetRxDataSize>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00d      	beq.n	800a304 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4798      	blx	r3

    return USBD_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	e000      	b.n	800a306 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a304:	2302      	movs	r3, #2
  }
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a31c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a324:	2b00      	cmp	r3, #0
 800a326:	d015      	beq.n	800a354 <USBD_CDC_EP0_RxReady+0x46>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a32e:	2bff      	cmp	r3, #255	; 0xff
 800a330:	d010      	beq.n	800a354 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a340:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a348:	b292      	uxth	r2, r2
 800a34a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	22ff      	movs	r2, #255	; 0xff
 800a350:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2243      	movs	r2, #67	; 0x43
 800a36c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000094 	.word	0x20000094

0800a380 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2243      	movs	r2, #67	; 0x43
 800a38c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a38e:	4b03      	ldr	r3, [pc, #12]	; (800a39c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	20000050 	.word	0x20000050

0800a3a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2243      	movs	r2, #67	; 0x43
 800a3ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a3ae:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	200000d8 	.word	0x200000d8

0800a3c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	220a      	movs	r2, #10
 800a3cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a3ce:	4b03      	ldr	r3, [pc, #12]	; (800a3dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	2000000c 	.word	0x2000000c

0800a3e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	bc80      	pop	{r7}
 800a40a:	4770      	bx	lr

0800a40c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a420:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a42a:	88fa      	ldrh	r2, [r7, #6]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr

0800a43e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a43e:	b480      	push	{r7}
 800a440:	b085      	sub	sp, #20
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	bc80      	pop	{r7}
 800a462:	4770      	bx	lr

0800a464 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01c      	beq.n	800a4b8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a484:	2b00      	cmp	r3, #0
 800a486:	d115      	bne.n	800a4b4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	2181      	movs	r1, #129	; 0x81
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 fcdf 	bl	800be6e <USBD_LL_Transmit>

      return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e002      	b.n	800a4ba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e000      	b.n	800a4ba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a4b8:	2302      	movs	r3, #2
  }
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d017      	beq.n	800a50c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7c1b      	ldrb	r3, [r3, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d109      	bne.n	800a4f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fcdf 	bl	800beb4 <USBD_LL_PrepareReceive>
 800a4f6:	e007      	b.n	800a508 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4fe:	2340      	movs	r3, #64	; 0x40
 800a500:	2101      	movs	r1, #1
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 fcd6 	bl	800beb4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	e000      	b.n	800a50e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a50c:	2302      	movs	r3, #2
  }
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	4613      	mov	r3, r2
 800a522:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a52a:	2302      	movs	r3, #2
 800a52c:	e01a      	b.n	800a564 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	79fa      	ldrb	r2, [r7, #7]
 800a55a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f001 fb43 	bl	800bbe8 <USBD_LL_Init>

  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d006      	beq.n	800a58e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
 800a58c:	e001      	b.n	800a592 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	bc80      	pop	{r7}
 800a59c:	4770      	bx	lr

0800a59e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f001 fb78 	bl	800bc9c <USBD_LL_Start>

  return USBD_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00c      	beq.n	800a5fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	78fa      	ldrb	r2, [r7, #3]
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	4798      	blx	r3
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	78fa      	ldrb	r2, [r7, #3]
 800a61e:	4611      	mov	r1, r2
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	4798      	blx	r3

  return USBD_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fed8 	bl	800b3f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a654:	461a      	mov	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a662:	f003 031f 	and.w	r3, r3, #31
 800a666:	2b02      	cmp	r3, #2
 800a668:	d016      	beq.n	800a698 <USBD_LL_SetupStage+0x6a>
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d81c      	bhi.n	800a6a8 <USBD_LL_SetupStage+0x7a>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <USBD_LL_SetupStage+0x4a>
 800a672:	2b01      	cmp	r3, #1
 800a674:	d008      	beq.n	800a688 <USBD_LL_SetupStage+0x5a>
 800a676:	e017      	b.n	800a6a8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f9cb 	bl	800aa1c <USBD_StdDevReq>
      break;
 800a686:	e01a      	b.n	800a6be <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fa2d 	bl	800aaf0 <USBD_StdItfReq>
      break;
 800a696:	e012      	b.n	800a6be <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fa6d 	bl	800ab80 <USBD_StdEPReq>
      break;
 800a6a6:	e00a      	b.n	800a6be <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a6ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 fb50 	bl	800bd5c <USBD_LL_StallEP>
      break;
 800a6bc:	bf00      	nop
  }

  return USBD_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6d6:	7afb      	ldrb	r3, [r7, #11]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d14b      	bne.n	800a774 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d134      	bne.n	800a758 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d919      	bls.n	800a72e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	1ad2      	subs	r2, r2, r3
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a710:	429a      	cmp	r2, r3
 800a712:	d203      	bcs.n	800a71c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a718:	b29b      	uxth	r3, r3
 800a71a:	e002      	b.n	800a722 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a720:	b29b      	uxth	r3, r3
 800a722:	461a      	mov	r2, r3
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 ff57 	bl	800b5da <USBD_CtlContinueRx>
 800a72c:	e038      	b.n	800a7a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a740:	2b03      	cmp	r3, #3
 800a742:	d105      	bne.n	800a750 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 ff54 	bl	800b5fe <USBD_CtlSendStatus>
 800a756:	e023      	b.n	800a7a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d11e      	bne.n	800a7a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a76a:	2100      	movs	r1, #0
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f001 faf5 	bl	800bd5c <USBD_LL_StallEP>
 800a772:	e015      	b.n	800a7a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00d      	beq.n	800a79c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a786:	2b03      	cmp	r3, #3
 800a788:	d108      	bne.n	800a79c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	7afa      	ldrb	r2, [r7, #11]
 800a794:	4611      	mov	r1, r2
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	4798      	blx	r3
 800a79a:	e001      	b.n	800a7a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a79c:	2302      	movs	r3, #2
 800a79e:	e000      	b.n	800a7a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d17f      	bne.n	800a8be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3314      	adds	r3, #20
 800a7c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d15c      	bne.n	800a888 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d915      	bls.n	800a806 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	1ad2      	subs	r2, r2, r3
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 fec1 	bl	800b57a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f001 fb58 	bl	800beb4 <USBD_LL_PrepareReceive>
 800a804:	e04e      	b.n	800a8a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	6912      	ldr	r2, [r2, #16]
 800a80e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a812:	fb02 f201 	mul.w	r2, r2, r1
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11c      	bne.n	800a856 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	689a      	ldr	r2, [r3, #8]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a824:	429a      	cmp	r2, r3
 800a826:	d316      	bcc.n	800a856 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	689a      	ldr	r2, [r3, #8]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a832:	429a      	cmp	r2, r3
 800a834:	d20f      	bcs.n	800a856 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a836:	2200      	movs	r2, #0
 800a838:	2100      	movs	r1, #0
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 fe9d 	bl	800b57a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a848:	2300      	movs	r3, #0
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f001 fb30 	bl	800beb4 <USBD_LL_PrepareReceive>
 800a854:	e026      	b.n	800a8a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d105      	bne.n	800a878 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a878:	2180      	movs	r1, #128	; 0x80
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f001 fa6e 	bl	800bd5c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fecf 	bl	800b624 <USBD_CtlReceiveStatus>
 800a886:	e00d      	b.n	800a8a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d004      	beq.n	800a89c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d103      	bne.n	800a8a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a89c:	2180      	movs	r1, #128	; 0x80
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f001 fa5c 	bl	800bd5c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d11d      	bne.n	800a8ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff fe81 	bl	800a5b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a8bc:	e015      	b.n	800a8ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00d      	beq.n	800a8e6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d108      	bne.n	800a8e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	7afa      	ldrb	r2, [r7, #11]
 800a8de:	4611      	mov	r1, r2
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	4798      	blx	r3
 800a8e4:	e001      	b.n	800a8ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e000      	b.n	800a8ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 f9e5 	bl	800bcd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2240      	movs	r2, #64	; 0x40
 800a914:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	2200      	movs	r2, #0
 800a91c:	2180      	movs	r1, #128	; 0x80
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 f9d7 	bl	800bcd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2240      	movs	r2, #64	; 0x40
 800a92e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d009      	beq.n	800a96c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6852      	ldr	r2, [r2, #4]
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	4611      	mov	r1, r2
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
  }

  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	78fa      	ldrb	r2, [r7, #3]
 800a986:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	bc80      	pop	{r7}
 800a992:	4770      	bx	lr

0800a994 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2204      	movs	r2, #4
 800a9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bc80      	pop	{r7}
 800a9ba:	4770      	bx	lr

0800a9bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ca:	2b04      	cmp	r3, #4
 800a9cc:	d105      	bne.n	800a9da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bc80      	pop	{r7}
 800a9e4:	4770      	bx	lr

0800a9e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d10b      	bne.n	800aa10 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d005      	beq.n	800aa42 <USBD_StdDevReq+0x26>
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d84f      	bhi.n	800aada <USBD_StdDevReq+0xbe>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d009      	beq.n	800aa52 <USBD_StdDevReq+0x36>
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d14b      	bne.n	800aada <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	4798      	blx	r3
      break;
 800aa50:	e048      	b.n	800aae4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	2b09      	cmp	r3, #9
 800aa58:	d839      	bhi.n	800aace <USBD_StdDevReq+0xb2>
 800aa5a:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <USBD_StdDevReq+0x44>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aab1 	.word	0x0800aab1
 800aa64:	0800aac5 	.word	0x0800aac5
 800aa68:	0800aacf 	.word	0x0800aacf
 800aa6c:	0800aabb 	.word	0x0800aabb
 800aa70:	0800aacf 	.word	0x0800aacf
 800aa74:	0800aa93 	.word	0x0800aa93
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aacf 	.word	0x0800aacf
 800aa80:	0800aaa7 	.word	0x0800aaa7
 800aa84:	0800aa9d 	.word	0x0800aa9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f9dc 	bl	800ae48 <USBD_GetDescriptor>
          break;
 800aa90:	e022      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fb3f 	bl	800b118 <USBD_SetAddress>
          break;
 800aa9a:	e01d      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fb7e 	bl	800b1a0 <USBD_SetConfig>
          break;
 800aaa4:	e018      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fc07 	bl	800b2bc <USBD_GetConfig>
          break;
 800aaae:	e013      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fc37 	bl	800b326 <USBD_GetStatus>
          break;
 800aab8:	e00e      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fc65 	bl	800b38c <USBD_SetFeature>
          break;
 800aac2:	e009      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fc74 	bl	800b3b4 <USBD_ClrFeature>
          break;
 800aacc:	e004      	b.n	800aad8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fccc 	bl	800b46e <USBD_CtlError>
          break;
 800aad6:	bf00      	nop
      }
      break;
 800aad8:	e004      	b.n	800aae4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fcc6 	bl	800b46e <USBD_CtlError>
      break;
 800aae2:	bf00      	nop
  }

  return ret;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop

0800aaf0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab06:	2b40      	cmp	r3, #64	; 0x40
 800ab08:	d005      	beq.n	800ab16 <USBD_StdItfReq+0x26>
 800ab0a:	2b40      	cmp	r3, #64	; 0x40
 800ab0c:	d82e      	bhi.n	800ab6c <USBD_StdItfReq+0x7c>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <USBD_StdItfReq+0x26>
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d12a      	bne.n	800ab6c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d81d      	bhi.n	800ab5e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	889b      	ldrh	r3, [r3, #4]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d813      	bhi.n	800ab54 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	88db      	ldrh	r3, [r3, #6]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d110      	bne.n	800ab68 <USBD_StdItfReq+0x78>
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10d      	bne.n	800ab68 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fd56 	bl	800b5fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab52:	e009      	b.n	800ab68 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fc89 	bl	800b46e <USBD_CtlError>
          break;
 800ab5c:	e004      	b.n	800ab68 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fc84 	bl	800b46e <USBD_CtlError>
          break;
 800ab66:	e000      	b.n	800ab6a <USBD_StdItfReq+0x7a>
          break;
 800ab68:	bf00      	nop
      }
      break;
 800ab6a:	e004      	b.n	800ab76 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fc7d 	bl	800b46e <USBD_CtlError>
      break;
 800ab74:	bf00      	nop
  }

  return USBD_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	889b      	ldrh	r3, [r3, #4]
 800ab92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab9c:	2b40      	cmp	r3, #64	; 0x40
 800ab9e:	d007      	beq.n	800abb0 <USBD_StdEPReq+0x30>
 800aba0:	2b40      	cmp	r3, #64	; 0x40
 800aba2:	f200 8146 	bhi.w	800ae32 <USBD_StdEPReq+0x2b2>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <USBD_StdEPReq+0x40>
 800abaa:	2b20      	cmp	r3, #32
 800abac:	f040 8141 	bne.w	800ae32 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
      break;
 800abbe:	e13d      	b.n	800ae3c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abc8:	2b20      	cmp	r3, #32
 800abca:	d10a      	bne.n	800abe2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]

        return ret;
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	e12d      	b.n	800ae3e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	785b      	ldrb	r3, [r3, #1]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d007      	beq.n	800abfa <USBD_StdEPReq+0x7a>
 800abea:	2b03      	cmp	r3, #3
 800abec:	f300 811b 	bgt.w	800ae26 <USBD_StdEPReq+0x2a6>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d072      	beq.n	800acda <USBD_StdEPReq+0x15a>
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d03a      	beq.n	800ac6e <USBD_StdEPReq+0xee>
 800abf8:	e115      	b.n	800ae26 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d002      	beq.n	800ac0a <USBD_StdEPReq+0x8a>
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d015      	beq.n	800ac34 <USBD_StdEPReq+0xb4>
 800ac08:	e02b      	b.n	800ac62 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00c      	beq.n	800ac2a <USBD_StdEPReq+0xaa>
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b80      	cmp	r3, #128	; 0x80
 800ac14:	d009      	beq.n	800ac2a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 f89e 	bl	800bd5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac20:	2180      	movs	r1, #128	; 0x80
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f001 f89a 	bl	800bd5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac28:	e020      	b.n	800ac6c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fc1e 	bl	800b46e <USBD_CtlError>
              break;
 800ac32:	e01b      	b.n	800ac6c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	885b      	ldrh	r3, [r3, #2]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10e      	bne.n	800ac5a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <USBD_StdEPReq+0xda>
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	2b80      	cmp	r3, #128	; 0x80
 800ac46:	d008      	beq.n	800ac5a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	88db      	ldrh	r3, [r3, #6]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f001 f881 	bl	800bd5c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fccf 	bl	800b5fe <USBD_CtlSendStatus>

              break;
 800ac60:	e004      	b.n	800ac6c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fc02 	bl	800b46e <USBD_CtlError>
              break;
 800ac6a:	bf00      	nop
          }
          break;
 800ac6c:	e0e0      	b.n	800ae30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d002      	beq.n	800ac7e <USBD_StdEPReq+0xfe>
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d015      	beq.n	800aca8 <USBD_StdEPReq+0x128>
 800ac7c:	e026      	b.n	800accc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00c      	beq.n	800ac9e <USBD_StdEPReq+0x11e>
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b80      	cmp	r3, #128	; 0x80
 800ac88:	d009      	beq.n	800ac9e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 f864 	bl	800bd5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac94:	2180      	movs	r1, #128	; 0x80
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 f860 	bl	800bd5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac9c:	e01c      	b.n	800acd8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fbe4 	bl	800b46e <USBD_CtlError>
              break;
 800aca6:	e017      	b.n	800acd8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	885b      	ldrh	r3, [r3, #2]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d112      	bne.n	800acd6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 f86b 	bl	800bd9a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fc9a 	bl	800b5fe <USBD_CtlSendStatus>
              }
              break;
 800acca:	e004      	b.n	800acd6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fbcd 	bl	800b46e <USBD_CtlError>
              break;
 800acd4:	e000      	b.n	800acd8 <USBD_StdEPReq+0x158>
              break;
 800acd6:	bf00      	nop
          }
          break;
 800acd8:	e0aa      	b.n	800ae30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d002      	beq.n	800acea <USBD_StdEPReq+0x16a>
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	d032      	beq.n	800ad4e <USBD_StdEPReq+0x1ce>
 800ace8:	e097      	b.n	800ae1a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d007      	beq.n	800ad00 <USBD_StdEPReq+0x180>
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d004      	beq.n	800ad00 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fbb8 	bl	800b46e <USBD_CtlError>
                break;
 800acfe:	e091      	b.n	800ae24 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	da0b      	bge.n	800ad20 <USBD_StdEPReq+0x1a0>
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
 800ad0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	3310      	adds	r3, #16
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	e00b      	b.n	800ad38 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	4413      	add	r3, r2
 800ad36:	3304      	adds	r3, #4
 800ad38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2202      	movs	r2, #2
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fbfb 	bl	800b542 <USBD_CtlSendData>
              break;
 800ad4c:	e06a      	b.n	800ae24 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da11      	bge.n	800ad7a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	3318      	adds	r3, #24
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d117      	bne.n	800ada0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fb7b 	bl	800b46e <USBD_CtlError>
                  break;
 800ad78:	e054      	b.n	800ae24 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	f003 020f 	and.w	r2, r3, #15
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	440b      	add	r3, r1
 800ad8c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d104      	bne.n	800ada0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fb68 	bl	800b46e <USBD_CtlError>
                  break;
 800ad9e:	e041      	b.n	800ae24 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ada0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da0b      	bge.n	800adc0 <USBD_StdEPReq+0x240>
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
 800adaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	3310      	adds	r3, #16
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	4413      	add	r3, r2
 800adbc:	3304      	adds	r3, #4
 800adbe:	e00b      	b.n	800add8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adc0:	7bbb      	ldrb	r3, [r7, #14]
 800adc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adc6:	4613      	mov	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4413      	add	r3, r2
 800add6:	3304      	adds	r3, #4
 800add8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <USBD_StdEPReq+0x266>
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d103      	bne.n	800adee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	e00e      	b.n	800ae0c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fff0 	bl	800bdd8 <USBD_LL_IsStallEP>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2201      	movs	r2, #1
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e002      	b.n	800ae0c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fb95 	bl	800b542 <USBD_CtlSendData>
              break;
 800ae18:	e004      	b.n	800ae24 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fb26 	bl	800b46e <USBD_CtlError>
              break;
 800ae22:	bf00      	nop
          }
          break;
 800ae24:	e004      	b.n	800ae30 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fb20 	bl	800b46e <USBD_CtlError>
          break;
 800ae2e:	bf00      	nop
      }
      break;
 800ae30:	e004      	b.n	800ae3c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fb1a 	bl	800b46e <USBD_CtlError>
      break;
 800ae3a:	bf00      	nop
  }

  return ret;
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	885b      	ldrh	r3, [r3, #2]
 800ae62:	0a1b      	lsrs	r3, r3, #8
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	2b06      	cmp	r3, #6
 800ae6a:	f200 8128 	bhi.w	800b0be <USBD_GetDescriptor+0x276>
 800ae6e:	a201      	add	r2, pc, #4	; (adr r2, 800ae74 <USBD_GetDescriptor+0x2c>)
 800ae70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae74:	0800ae91 	.word	0x0800ae91
 800ae78:	0800aea9 	.word	0x0800aea9
 800ae7c:	0800aee9 	.word	0x0800aee9
 800ae80:	0800b0bf 	.word	0x0800b0bf
 800ae84:	0800b0bf 	.word	0x0800b0bf
 800ae88:	0800b05f 	.word	0x0800b05f
 800ae8c:	0800b08b 	.word	0x0800b08b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	7c12      	ldrb	r2, [r2, #16]
 800ae9c:	f107 0108 	add.w	r1, r7, #8
 800aea0:	4610      	mov	r0, r2
 800aea2:	4798      	blx	r3
 800aea4:	60f8      	str	r0, [r7, #12]
      break;
 800aea6:	e112      	b.n	800b0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7c1b      	ldrb	r3, [r3, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10d      	bne.n	800aecc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb8:	f107 0208 	add.w	r2, r7, #8
 800aebc:	4610      	mov	r0, r2
 800aebe:	4798      	blx	r3
 800aec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3301      	adds	r3, #1
 800aec6:	2202      	movs	r2, #2
 800aec8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aeca:	e100      	b.n	800b0ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	f107 0208 	add.w	r2, r7, #8
 800aed8:	4610      	mov	r0, r2
 800aeda:	4798      	blx	r3
 800aedc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3301      	adds	r3, #1
 800aee2:	2202      	movs	r2, #2
 800aee4:	701a      	strb	r2, [r3, #0]
      break;
 800aee6:	e0f2      	b.n	800b0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	885b      	ldrh	r3, [r3, #2]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	f200 80ac 	bhi.w	800b04c <USBD_GetDescriptor+0x204>
 800aef4:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <USBD_GetDescriptor+0xb4>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af15 	.word	0x0800af15
 800af00:	0800af49 	.word	0x0800af49
 800af04:	0800af7d 	.word	0x0800af7d
 800af08:	0800afb1 	.word	0x0800afb1
 800af0c:	0800afe5 	.word	0x0800afe5
 800af10:	0800b019 	.word	0x0800b019
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	7c12      	ldrb	r2, [r2, #16]
 800af2c:	f107 0108 	add.w	r1, r7, #8
 800af30:	4610      	mov	r0, r2
 800af32:	4798      	blx	r3
 800af34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af36:	e091      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa97 	bl	800b46e <USBD_CtlError>
            err++;
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	3301      	adds	r3, #1
 800af44:	72fb      	strb	r3, [r7, #11]
          break;
 800af46:	e089      	b.n	800b05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00b      	beq.n	800af6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7c12      	ldrb	r2, [r2, #16]
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af6a:	e077      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fa7d 	bl	800b46e <USBD_CtlError>
            err++;
 800af74:	7afb      	ldrb	r3, [r7, #11]
 800af76:	3301      	adds	r3, #1
 800af78:	72fb      	strb	r3, [r7, #11]
          break;
 800af7a:	e06f      	b.n	800b05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7c12      	ldrb	r2, [r2, #16]
 800af94:	f107 0108 	add.w	r1, r7, #8
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af9e:	e05d      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa63 	bl	800b46e <USBD_CtlError>
            err++;
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	3301      	adds	r3, #1
 800afac:	72fb      	strb	r3, [r7, #11]
          break;
 800afae:	e055      	b.n	800b05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	7c12      	ldrb	r2, [r2, #16]
 800afc8:	f107 0108 	add.w	r1, r7, #8
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
 800afd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afd2:	e043      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa49 	bl	800b46e <USBD_CtlError>
            err++;
 800afdc:	7afb      	ldrb	r3, [r7, #11]
 800afde:	3301      	adds	r3, #1
 800afe0:	72fb      	strb	r3, [r7, #11]
          break;
 800afe2:	e03b      	b.n	800b05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	7c12      	ldrb	r2, [r2, #16]
 800affc:	f107 0108 	add.w	r1, r7, #8
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
 800b004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b006:	e029      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa2f 	bl	800b46e <USBD_CtlError>
            err++;
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	3301      	adds	r3, #1
 800b014:	72fb      	strb	r3, [r7, #11]
          break;
 800b016:	e021      	b.n	800b05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	7c12      	ldrb	r2, [r2, #16]
 800b030:	f107 0108 	add.w	r1, r7, #8
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
 800b038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b03a:	e00f      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fa15 	bl	800b46e <USBD_CtlError>
            err++;
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	3301      	adds	r3, #1
 800b048:	72fb      	strb	r3, [r7, #11]
          break;
 800b04a:	e007      	b.n	800b05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fa0d 	bl	800b46e <USBD_CtlError>
          err++;
 800b054:	7afb      	ldrb	r3, [r7, #11]
 800b056:	3301      	adds	r3, #1
 800b058:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b05a:	e038      	b.n	800b0ce <USBD_GetDescriptor+0x286>
 800b05c:	e037      	b.n	800b0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	7c1b      	ldrb	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06e:	f107 0208 	add.w	r2, r7, #8
 800b072:	4610      	mov	r0, r2
 800b074:	4798      	blx	r3
 800b076:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b078:	e029      	b.n	800b0ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f9f6 	bl	800b46e <USBD_CtlError>
        err++;
 800b082:	7afb      	ldrb	r3, [r7, #11]
 800b084:	3301      	adds	r3, #1
 800b086:	72fb      	strb	r3, [r7, #11]
      break;
 800b088:	e021      	b.n	800b0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7c1b      	ldrb	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10d      	bne.n	800b0ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4798      	blx	r3
 800b0a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	2207      	movs	r2, #7
 800b0aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0ac:	e00f      	b.n	800b0ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f9dc 	bl	800b46e <USBD_CtlError>
        err++;
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b0bc:	e007      	b.n	800b0ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f9d4 	bl	800b46e <USBD_CtlError>
      err++;
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800b0cc:	bf00      	nop
  }

  if (err != 0U)
 800b0ce:	7afb      	ldrb	r3, [r7, #11]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d11c      	bne.n	800b10e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b0d4:	893b      	ldrh	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d011      	beq.n	800b0fe <USBD_GetDescriptor+0x2b6>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	88db      	ldrh	r3, [r3, #6]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00d      	beq.n	800b0fe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	88da      	ldrh	r2, [r3, #6]
 800b0e6:	893b      	ldrh	r3, [r7, #8]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	bf28      	it	cs
 800b0ec:	4613      	movcs	r3, r2
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0f2:	893b      	ldrh	r3, [r7, #8]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	68f9      	ldr	r1, [r7, #12]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa22 	bl	800b542 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	88db      	ldrh	r3, [r3, #6]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d104      	bne.n	800b110 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fa79 	bl	800b5fe <USBD_CtlSendStatus>
 800b10c:	e000      	b.n	800b110 <USBD_GetDescriptor+0x2c8>
    return;
 800b10e:	bf00      	nop
    }
  }
}
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop

0800b118 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	889b      	ldrh	r3, [r3, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d130      	bne.n	800b18c <USBD_SetAddress+0x74>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	88db      	ldrh	r3, [r3, #6]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d12c      	bne.n	800b18c <USBD_SetAddress+0x74>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	885b      	ldrh	r3, [r3, #2]
 800b136:	2b7f      	cmp	r3, #127	; 0x7f
 800b138:	d828      	bhi.n	800b18c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	885b      	ldrh	r3, [r3, #2]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b144:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d104      	bne.n	800b15a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f98b 	bl	800b46e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b158:	e01d      	b.n	800b196 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	7bfa      	ldrb	r2, [r7, #15]
 800b15e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fe62 	bl	800be30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fa46 	bl	800b5fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d004      	beq.n	800b182 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b180:	e009      	b.n	800b196 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18a:	e004      	b.n	800b196 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f96d 	bl	800b46e <USBD_CtlError>
  }
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
	...

0800b1a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	885b      	ldrh	r3, [r3, #2]
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	4b41      	ldr	r3, [pc, #260]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b1b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1b4:	4b40      	ldr	r3, [pc, #256]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d904      	bls.n	800b1c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f955 	bl	800b46e <USBD_CtlError>
 800b1c4:	e075      	b.n	800b2b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d002      	beq.n	800b1d6 <USBD_SetConfig+0x36>
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d023      	beq.n	800b21c <USBD_SetConfig+0x7c>
 800b1d4:	e062      	b.n	800b29c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b1d6:	4b38      	ldr	r3, [pc, #224]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01a      	beq.n	800b214 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b1de:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2203      	movs	r2, #3
 800b1ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1f0:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff f9e7 	bl	800a5ca <USBD_SetClassConfig>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d104      	bne.n	800b20c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f932 	bl	800b46e <USBD_CtlError>
            return;
 800b20a:	e052      	b.n	800b2b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f9f6 	bl	800b5fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b212:	e04e      	b.n	800b2b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f9f2 	bl	800b5fe <USBD_CtlSendStatus>
        break;
 800b21a:	e04a      	b.n	800b2b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b21c:	4b26      	ldr	r3, [pc, #152]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d112      	bne.n	800b24a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b22c:	4b22      	ldr	r3, [pc, #136]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	461a      	mov	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b236:	4b20      	ldr	r3, [pc, #128]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff f9e3 	bl	800a608 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f9db 	bl	800b5fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b248:	e033      	b.n	800b2b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b24a:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d01d      	beq.n	800b294 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff f9d1 	bl	800a608 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b266:	4b14      	ldr	r3, [pc, #80]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b270:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff f9a7 	bl	800a5ca <USBD_SetClassConfig>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d104      	bne.n	800b28c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f8f2 	bl	800b46e <USBD_CtlError>
            return;
 800b28a:	e012      	b.n	800b2b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f9b6 	bl	800b5fe <USBD_CtlSendStatus>
        break;
 800b292:	e00e      	b.n	800b2b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f9b2 	bl	800b5fe <USBD_CtlSendStatus>
        break;
 800b29a:	e00a      	b.n	800b2b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f8e5 	bl	800b46e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b2a4:	4b04      	ldr	r3, [pc, #16]	; (800b2b8 <USBD_SetConfig+0x118>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff f9ac 	bl	800a608 <USBD_ClrClassConfig>
        break;
 800b2b0:	bf00      	nop
    }
  }
}
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	2000029c 	.word	0x2000029c

0800b2bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	88db      	ldrh	r3, [r3, #6]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d004      	beq.n	800b2d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f8cc 	bl	800b46e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2d6:	e022      	b.n	800b31e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	dc02      	bgt.n	800b2e8 <USBD_GetConfig+0x2c>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dc03      	bgt.n	800b2ee <USBD_GetConfig+0x32>
 800b2e6:	e015      	b.n	800b314 <USBD_GetConfig+0x58>
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d00b      	beq.n	800b304 <USBD_GetConfig+0x48>
 800b2ec:	e012      	b.n	800b314 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f920 	bl	800b542 <USBD_CtlSendData>
        break;
 800b302:	e00c      	b.n	800b31e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3304      	adds	r3, #4
 800b308:	2201      	movs	r2, #1
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f918 	bl	800b542 <USBD_CtlSendData>
        break;
 800b312:	e004      	b.n	800b31e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f8a9 	bl	800b46e <USBD_CtlError>
        break;
 800b31c:	bf00      	nop
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b336:	3b01      	subs	r3, #1
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d81e      	bhi.n	800b37a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	88db      	ldrh	r3, [r3, #6]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d004      	beq.n	800b34e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f891 	bl	800b46e <USBD_CtlError>
        break;
 800b34c:	e01a      	b.n	800b384 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f043 0202 	orr.w	r2, r3, #2
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	330c      	adds	r3, #12
 800b36e:	2202      	movs	r2, #2
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f8e5 	bl	800b542 <USBD_CtlSendData>
      break;
 800b378:	e004      	b.n	800b384 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f876 	bl	800b46e <USBD_CtlError>
      break;
 800b382:	bf00      	nop
  }
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	885b      	ldrh	r3, [r3, #2]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d106      	bne.n	800b3ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f929 	bl	800b5fe <USBD_CtlSendStatus>
  }
}
 800b3ac:	bf00      	nop
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d80b      	bhi.n	800b3e2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	885b      	ldrh	r3, [r3, #2]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d10c      	bne.n	800b3ec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f90f 	bl	800b5fe <USBD_CtlSendStatus>
      }
      break;
 800b3e0:	e004      	b.n	800b3ec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f842 	bl	800b46e <USBD_CtlError>
      break;
 800b3ea:	e000      	b.n	800b3ee <USBD_ClrFeature+0x3a>
      break;
 800b3ec:	bf00      	nop
  }
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781a      	ldrb	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	785a      	ldrb	r2, [r3, #1]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	3302      	adds	r3, #2
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	b29a      	uxth	r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	3303      	adds	r3, #3
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	021b      	lsls	r3, r3, #8
 800b422:	b29b      	uxth	r3, r3
 800b424:	4413      	add	r3, r2
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	3304      	adds	r3, #4
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	b29a      	uxth	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	3305      	adds	r3, #5
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	021b      	lsls	r3, r3, #8
 800b43e:	b29b      	uxth	r3, r3
 800b440:	4413      	add	r3, r2
 800b442:	b29a      	uxth	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	3306      	adds	r3, #6
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	3307      	adds	r3, #7
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b29b      	uxth	r3, r3
 800b458:	021b      	lsls	r3, r3, #8
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4413      	add	r3, r2
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	80da      	strh	r2, [r3, #6]

}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr

0800b46e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b478:	2180      	movs	r1, #128	; 0x80
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fc6e 	bl	800bd5c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b480:	2100      	movs	r1, #0
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fc6a 	bl	800bd5c <USBD_LL_StallEP>
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d032      	beq.n	800b50c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f000 f834 	bl	800b514 <USBD_GetLen>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	75fa      	strb	r2, [r7, #23]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	75fa      	strb	r2, [r7, #23]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	2203      	movs	r2, #3
 800b4da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b4dc:	e012      	b.n	800b504 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	60fa      	str	r2, [r7, #12]
 800b4e4:	7dfa      	ldrb	r2, [r7, #23]
 800b4e6:	1c51      	adds	r1, r2, #1
 800b4e8:	75f9      	strb	r1, [r7, #23]
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	440a      	add	r2, r1
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	75fa      	strb	r2, [r7, #23]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4413      	add	r3, r2
 800b500:	2200      	movs	r2, #0
 800b502:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e8      	bne.n	800b4de <USBD_GetString+0x4e>
    }
  }
}
 800b50c:	bf00      	nop
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b520:	e005      	b.n	800b52e <USBD_GetLen+0x1a>
  {
    len++;
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	3301      	adds	r3, #1
 800b526:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3301      	adds	r3, #1
 800b52c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1f5      	bne.n	800b522 <USBD_GetLen+0xe>
  }

  return len;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	4613      	mov	r3, r2
 800b54e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2202      	movs	r2, #2
 800b554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b558:	88fa      	ldrh	r2, [r7, #6]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b55e:	88fa      	ldrh	r2, [r7, #6]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b564:	88fb      	ldrh	r3, [r7, #6]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	2100      	movs	r1, #0
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 fc7f 	bl	800be6e <USBD_LL_Transmit>

  return USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	4613      	mov	r3, r2
 800b586:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	2100      	movs	r1, #0
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 fc6d 	bl	800be6e <USBD_LL_Transmit>

  return USBD_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b5b4:	88fa      	ldrh	r2, [r7, #6]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b5bc:	88fa      	ldrh	r2, [r7, #6]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5c4:	88fb      	ldrh	r3, [r7, #6]
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f000 fc72 	bl	800beb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b084      	sub	sp, #16
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 fc60 	bl	800beb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2204      	movs	r2, #4
 800b60a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b60e:	2300      	movs	r3, #0
 800b610:	2200      	movs	r2, #0
 800b612:	2100      	movs	r1, #0
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fc2a 	bl	800be6e <USBD_LL_Transmit>

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2205      	movs	r2, #5
 800b630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc3a 	bl	800beb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b650:	2200      	movs	r2, #0
 800b652:	4912      	ldr	r1, [pc, #72]	; (800b69c <MX_USB_DEVICE_Init+0x50>)
 800b654:	4812      	ldr	r0, [pc, #72]	; (800b6a0 <MX_USB_DEVICE_Init+0x54>)
 800b656:	f7fe ff5e 	bl	800a516 <USBD_Init>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b660:	f7f6 ff0c 	bl	800247c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b664:	490f      	ldr	r1, [pc, #60]	; (800b6a4 <MX_USB_DEVICE_Init+0x58>)
 800b666:	480e      	ldr	r0, [pc, #56]	; (800b6a0 <MX_USB_DEVICE_Init+0x54>)
 800b668:	f7fe ff80 	bl	800a56c <USBD_RegisterClass>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b672:	f7f6 ff03 	bl	800247c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b676:	490c      	ldr	r1, [pc, #48]	; (800b6a8 <MX_USB_DEVICE_Init+0x5c>)
 800b678:	4809      	ldr	r0, [pc, #36]	; (800b6a0 <MX_USB_DEVICE_Init+0x54>)
 800b67a:	f7fe feb1 	bl	800a3e0 <USBD_CDC_RegisterInterface>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b684:	f7f6 fefa 	bl	800247c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b688:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <MX_USB_DEVICE_Init+0x54>)
 800b68a:	f7fe ff88 	bl	800a59e <USBD_Start>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b694:	f7f6 fef2 	bl	800247c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b698:	bf00      	nop
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	2000012c 	.word	0x2000012c
 800b6a0:	20000d78 	.word	0x20000d78
 800b6a4:	20000018 	.word	0x20000018
 800b6a8:	2000011c 	.word	0x2000011c

0800b6ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4905      	ldr	r1, [pc, #20]	; (800b6c8 <CDC_Init_FS+0x1c>)
 800b6b4:	4805      	ldr	r0, [pc, #20]	; (800b6cc <CDC_Init_FS+0x20>)
 800b6b6:	f7fe fea9 	bl	800a40c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6ba:	4905      	ldr	r1, [pc, #20]	; (800b6d0 <CDC_Init_FS+0x24>)
 800b6bc:	4803      	ldr	r0, [pc, #12]	; (800b6cc <CDC_Init_FS+0x20>)
 800b6be:	f7fe febe 	bl	800a43e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	2000123c 	.word	0x2000123c
 800b6cc:	20000d78 	.word	0x20000d78
 800b6d0:	2000103c 	.word	0x2000103c

0800b6d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bc80      	pop	{r7}
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	6039      	str	r1, [r7, #0]
 800b6ee:	71fb      	strb	r3, [r7, #7]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	2b23      	cmp	r3, #35	; 0x23
 800b6f8:	d84a      	bhi.n	800b790 <CDC_Control_FS+0xac>
 800b6fa:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <CDC_Control_FS+0x1c>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b791 	.word	0x0800b791
 800b704:	0800b791 	.word	0x0800b791
 800b708:	0800b791 	.word	0x0800b791
 800b70c:	0800b791 	.word	0x0800b791
 800b710:	0800b791 	.word	0x0800b791
 800b714:	0800b791 	.word	0x0800b791
 800b718:	0800b791 	.word	0x0800b791
 800b71c:	0800b791 	.word	0x0800b791
 800b720:	0800b791 	.word	0x0800b791
 800b724:	0800b791 	.word	0x0800b791
 800b728:	0800b791 	.word	0x0800b791
 800b72c:	0800b791 	.word	0x0800b791
 800b730:	0800b791 	.word	0x0800b791
 800b734:	0800b791 	.word	0x0800b791
 800b738:	0800b791 	.word	0x0800b791
 800b73c:	0800b791 	.word	0x0800b791
 800b740:	0800b791 	.word	0x0800b791
 800b744:	0800b791 	.word	0x0800b791
 800b748:	0800b791 	.word	0x0800b791
 800b74c:	0800b791 	.word	0x0800b791
 800b750:	0800b791 	.word	0x0800b791
 800b754:	0800b791 	.word	0x0800b791
 800b758:	0800b791 	.word	0x0800b791
 800b75c:	0800b791 	.word	0x0800b791
 800b760:	0800b791 	.word	0x0800b791
 800b764:	0800b791 	.word	0x0800b791
 800b768:	0800b791 	.word	0x0800b791
 800b76c:	0800b791 	.word	0x0800b791
 800b770:	0800b791 	.word	0x0800b791
 800b774:	0800b791 	.word	0x0800b791
 800b778:	0800b791 	.word	0x0800b791
 800b77c:	0800b791 	.word	0x0800b791
 800b780:	0800b791 	.word	0x0800b791
 800b784:	0800b791 	.word	0x0800b791
 800b788:	0800b791 	.word	0x0800b791
 800b78c:	0800b791 	.word	0x0800b791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b790:	bf00      	nop
  }

  return (USBD_OK);
 800b792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	bc80      	pop	{r7}
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop

0800b7a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <CDC_Receive_FS+0x38>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d006      	beq.n	800b7c0 <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800b7b2:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <CDC_Receive_FS+0x38>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	6812      	ldr	r2, [r2, #0]
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	4806      	ldr	r0, [pc, #24]	; (800b7dc <CDC_Receive_FS+0x3c>)
 800b7c4:	f7fe fe3b 	bl	800a43e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7c8:	4804      	ldr	r0, [pc, #16]	; (800b7dc <CDC_Receive_FS+0x3c>)
 800b7ca:	f7fe fe7a 	bl	800a4c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b7ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200002a0 	.word	0x200002a0
 800b7dc:	20000d78 	.word	0x20000d78

0800b7e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b7f0:	4b0d      	ldr	r3, [pc, #52]	; (800b828 <CDC_Transmit_FS+0x48>)
 800b7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b802:	2301      	movs	r3, #1
 800b804:	e00b      	b.n	800b81e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b806:	887b      	ldrh	r3, [r7, #2]
 800b808:	461a      	mov	r2, r3
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4806      	ldr	r0, [pc, #24]	; (800b828 <CDC_Transmit_FS+0x48>)
 800b80e:	f7fe fdfd 	bl	800a40c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b812:	4805      	ldr	r0, [pc, #20]	; (800b828 <CDC_Transmit_FS+0x48>)
 800b814:	f7fe fe26 	bl	800a464 <USBD_CDC_TransmitPacket>
 800b818:	4603      	mov	r3, r0
 800b81a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20000d78 	.word	0x20000d78

0800b82c <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800b834:	4a03      	ldr	r2, [pc, #12]	; (800b844 <CDC_AttachOnUSBData+0x18>)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6013      	str	r3, [r2, #0]
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr
 800b844:	200002a0 	.word	0x200002a0

0800b848 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	6039      	str	r1, [r7, #0]
 800b852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2212      	movs	r2, #18
 800b858:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b85a:	4b03      	ldr	r3, [pc, #12]	; (800b868 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	bc80      	pop	{r7}
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	20000148 	.word	0x20000148

0800b86c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2204      	movs	r2, #4
 800b87c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b87e:	4b03      	ldr	r3, [pc, #12]	; (800b88c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	bc80      	pop	{r7}
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	2000015c 	.word	0x2000015c

0800b890 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	6039      	str	r1, [r7, #0]
 800b89a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4907      	ldr	r1, [pc, #28]	; (800b8c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8a6:	4808      	ldr	r0, [pc, #32]	; (800b8c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8a8:	f7ff fdf2 	bl	800b490 <USBD_GetString>
 800b8ac:	e004      	b.n	800b8b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	4904      	ldr	r1, [pc, #16]	; (800b8c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8b2:	4805      	ldr	r0, [pc, #20]	; (800b8c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8b4:	f7ff fdec 	bl	800b490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	2000143c 	.word	0x2000143c
 800b8c8:	0800c044 	.word	0x0800c044

0800b8cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	4904      	ldr	r1, [pc, #16]	; (800b8ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b8dc:	4804      	ldr	r0, [pc, #16]	; (800b8f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8de:	f7ff fdd7 	bl	800b490 <USBD_GetString>
  return USBD_StrDesc;
 800b8e2:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2000143c 	.word	0x2000143c
 800b8f0:	0800c05c 	.word	0x0800c05c

0800b8f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	221a      	movs	r2, #26
 800b904:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b906:	f000 f843 	bl	800b990 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b90a:	4b02      	ldr	r3, [pc, #8]	; (800b914 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	20000160 	.word	0x20000160

0800b918 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	6039      	str	r1, [r7, #0]
 800b922:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d105      	bne.n	800b936 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	4907      	ldr	r1, [pc, #28]	; (800b94c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b92e:	4808      	ldr	r0, [pc, #32]	; (800b950 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b930:	f7ff fdae 	bl	800b490 <USBD_GetString>
 800b934:	e004      	b.n	800b940 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	4904      	ldr	r1, [pc, #16]	; (800b94c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b93a:	4805      	ldr	r0, [pc, #20]	; (800b950 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b93c:	f7ff fda8 	bl	800b490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b940:	4b02      	ldr	r3, [pc, #8]	; (800b94c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	2000143c 	.word	0x2000143c
 800b950:	0800c070 	.word	0x0800c070

0800b954 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d105      	bne.n	800b972 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	4907      	ldr	r1, [pc, #28]	; (800b988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b96a:	4808      	ldr	r0, [pc, #32]	; (800b98c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b96c:	f7ff fd90 	bl	800b490 <USBD_GetString>
 800b970:	e004      	b.n	800b97c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4904      	ldr	r1, [pc, #16]	; (800b988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b976:	4805      	ldr	r0, [pc, #20]	; (800b98c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b978:	f7ff fd8a 	bl	800b490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b97c:	4b02      	ldr	r3, [pc, #8]	; (800b988 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2000143c 	.word	0x2000143c
 800b98c:	0800c07c 	.word	0x0800c07c

0800b990 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b996:	4b0f      	ldr	r3, [pc, #60]	; (800b9d4 <Get_SerialNum+0x44>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b99c:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <Get_SerialNum+0x48>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9a2:	4b0e      	ldr	r3, [pc, #56]	; (800b9dc <Get_SerialNum+0x4c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d009      	beq.n	800b9ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9b6:	2208      	movs	r2, #8
 800b9b8:	4909      	ldr	r1, [pc, #36]	; (800b9e0 <Get_SerialNum+0x50>)
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f814 	bl	800b9e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9c0:	2204      	movs	r2, #4
 800b9c2:	4908      	ldr	r1, [pc, #32]	; (800b9e4 <Get_SerialNum+0x54>)
 800b9c4:	68b8      	ldr	r0, [r7, #8]
 800b9c6:	f000 f80f 	bl	800b9e8 <IntToUnicode>
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	1ffff7e8 	.word	0x1ffff7e8
 800b9d8:	1ffff7ec 	.word	0x1ffff7ec
 800b9dc:	1ffff7f0 	.word	0x1ffff7f0
 800b9e0:	20000162 	.word	0x20000162
 800b9e4:	20000172 	.word	0x20000172

0800b9e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	75fb      	strb	r3, [r7, #23]
 800b9fe:	e027      	b.n	800ba50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	0f1b      	lsrs	r3, r3, #28
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	d80b      	bhi.n	800ba20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	0f1b      	lsrs	r3, r3, #28
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	4619      	mov	r1, r3
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	440b      	add	r3, r1
 800ba18:	3230      	adds	r2, #48	; 0x30
 800ba1a:	b2d2      	uxtb	r2, r2
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	e00a      	b.n	800ba36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	0f1b      	lsrs	r3, r3, #28
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	440b      	add	r3, r1
 800ba30:	3237      	adds	r2, #55	; 0x37
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	3301      	adds	r3, #1
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	4413      	add	r3, r2
 800ba46:	2200      	movs	r2, #0
 800ba48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	75fb      	strb	r3, [r7, #23]
 800ba50:	7dfa      	ldrb	r2, [r7, #23]
 800ba52:	79fb      	ldrb	r3, [r7, #7]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d3d3      	bcc.n	800ba00 <IntToUnicode+0x18>
  }
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bc80      	pop	{r7}
 800ba62:	4770      	bx	lr

0800ba64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a0d      	ldr	r2, [pc, #52]	; (800baa8 <HAL_PCD_MspInit+0x44>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d113      	bne.n	800ba9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <HAL_PCD_MspInit+0x48>)
 800ba78:	69db      	ldr	r3, [r3, #28]
 800ba7a:	4a0c      	ldr	r2, [pc, #48]	; (800baac <HAL_PCD_MspInit+0x48>)
 800ba7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba80:	61d3      	str	r3, [r2, #28]
 800ba82:	4b0a      	ldr	r3, [pc, #40]	; (800baac <HAL_PCD_MspInit+0x48>)
 800ba84:	69db      	ldr	r3, [r3, #28]
 800ba86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	2014      	movs	r0, #20
 800ba94:	f7f7 fc1d 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ba98:	2014      	movs	r0, #20
 800ba9a:	f7f7 fc36 	bl	800330a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	40005c00 	.word	0x40005c00
 800baac:	40021000 	.word	0x40021000

0800bab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7fe fdb1 	bl	800a62e <USBD_LL_SetupStage>
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	440b      	add	r3, r1
 800baf4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	4619      	mov	r1, r3
 800bafe:	f7fe fde3 	bl	800a6c8 <USBD_LL_DataOutStage>
}
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	6879      	ldr	r1, [r7, #4]
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	440b      	add	r3, r1
 800bb2a:	333c      	adds	r3, #60	; 0x3c
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	78fb      	ldrb	r3, [r7, #3]
 800bb30:	4619      	mov	r1, r3
 800bb32:	f7fe fe3a 	bl	800a7aa <USBD_LL_DataInStage>
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe ff4a 	bl	800a9e6 <USBD_LL_SOF>
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb62:	2301      	movs	r3, #1
 800bb64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d001      	beq.n	800bb72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb6e:	f7f6 fc85 	bl	800247c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bb78:	7bfa      	ldrb	r2, [r7, #15]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe fefa 	bl	800a976 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe feb3 	bl	800a8f4 <USBD_LL_Reset>
}
 800bb8e:	bf00      	nop
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
	...

0800bb98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fef4 	bl	800a994 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d005      	beq.n	800bbc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbb4:	4b04      	ldr	r3, [pc, #16]	; (800bbc8 <HAL_PCD_SuspendCallback+0x30>)
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	4a03      	ldr	r2, [pc, #12]	; (800bbc8 <HAL_PCD_SuspendCallback+0x30>)
 800bbba:	f043 0306 	orr.w	r3, r3, #6
 800bbbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	e000ed00 	.word	0xe000ed00

0800bbcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe feee 	bl	800a9bc <USBD_LL_Resume>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bbf0:	4a28      	ldr	r2, [pc, #160]	; (800bc94 <USBD_LL_Init+0xac>)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a26      	ldr	r2, [pc, #152]	; (800bc94 <USBD_LL_Init+0xac>)
 800bbfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc02:	4a25      	ldr	r2, [pc, #148]	; (800bc98 <USBD_LL_Init+0xb0>)
 800bc04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc06:	4b23      	ldr	r3, [pc, #140]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc08:	2208      	movs	r2, #8
 800bc0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc0c:	4b21      	ldr	r3, [pc, #132]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc0e:	2202      	movs	r2, #2
 800bc10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc12:	4b20      	ldr	r3, [pc, #128]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc18:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc1e:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc24:	481b      	ldr	r0, [pc, #108]	; (800bc94 <USBD_LL_Init+0xac>)
 800bc26:	f7f8 f939 	bl	8003e9c <HAL_PCD_Init>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bc30:	f7f6 fc24 	bl	800247c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc3a:	2318      	movs	r3, #24
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	f7f9 fdaf 	bl	80057a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc4a:	2358      	movs	r3, #88	; 0x58
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2180      	movs	r1, #128	; 0x80
 800bc50:	f7f9 fda7 	bl	80057a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc5a:	23c0      	movs	r3, #192	; 0xc0
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2181      	movs	r1, #129	; 0x81
 800bc60:	f7f9 fd9f 	bl	80057a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2101      	movs	r1, #1
 800bc72:	f7f9 fd96 	bl	80057a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc80:	2200      	movs	r2, #0
 800bc82:	2182      	movs	r1, #130	; 0x82
 800bc84:	f7f9 fd8d 	bl	80057a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	2000163c 	.word	0x2000163c
 800bc98:	40005c00 	.word	0x40005c00

0800bc9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f8 f9fd 	bl	80040b2 <HAL_PCD_Start>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f94e 	bl	800bf60 <USBD_Get_USB_Status>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	4608      	mov	r0, r1
 800bcdc:	4611      	mov	r1, r2
 800bcde:	461a      	mov	r2, r3
 800bce0:	4603      	mov	r3, r0
 800bce2:	70fb      	strb	r3, [r7, #3]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70bb      	strb	r3, [r7, #2]
 800bce8:	4613      	mov	r3, r2
 800bcea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcfa:	78bb      	ldrb	r3, [r7, #2]
 800bcfc:	883a      	ldrh	r2, [r7, #0]
 800bcfe:	78f9      	ldrb	r1, [r7, #3]
 800bd00:	f7f8 fb77 	bl	80043f2 <HAL_PCD_EP_Open>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f000 f928 	bl	800bf60 <USBD_Get_USB_Status>
 800bd10:	4603      	mov	r3, r0
 800bd12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd14:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd38:	78fa      	ldrb	r2, [r7, #3]
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7f8 fbbe 	bl	80044be <HAL_PCD_EP_Close>
 800bd42:	4603      	mov	r3, r0
 800bd44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 f909 	bl	800bf60 <USBD_Get_USB_Status>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd76:	78fa      	ldrb	r2, [r7, #3]
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7f8 fc7e 	bl	800467c <HAL_PCD_EP_SetStall>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f8ea 	bl	800bf60 <USBD_Get_USB_Status>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdb4:	78fa      	ldrb	r2, [r7, #3]
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7f8 fcbf 	bl	800473c <HAL_PCD_EP_ClrStall>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f8cb 	bl	800bf60 <USBD_Get_USB_Status>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	da0c      	bge.n	800be0e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdf4:	78fb      	ldrb	r3, [r7, #3]
 800bdf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	1c5a      	adds	r2, r3, #1
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	440b      	add	r3, r1
 800be08:	3302      	adds	r3, #2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	e00b      	b.n	800be26 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be0e:	78fb      	ldrb	r3, [r7, #3]
 800be10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be14:	68f9      	ldr	r1, [r7, #12]
 800be16:	4613      	mov	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	00db      	lsls	r3, r3, #3
 800be1e:	440b      	add	r3, r1
 800be20:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800be24:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be26:	4618      	mov	r0, r3
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be4a:	78fa      	ldrb	r2, [r7, #3]
 800be4c:	4611      	mov	r1, r2
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f8 faaa 	bl	80043a8 <HAL_PCD_SetAddress>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f880 	bl	800bf60 <USBD_Get_USB_Status>
 800be60:	4603      	mov	r3, r0
 800be62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be64:	7bbb      	ldrb	r3, [r7, #14]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b086      	sub	sp, #24
 800be72:	af00      	add	r7, sp, #0
 800be74:	60f8      	str	r0, [r7, #12]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	461a      	mov	r2, r3
 800be7a:	460b      	mov	r3, r1
 800be7c:	72fb      	strb	r3, [r7, #11]
 800be7e:	4613      	mov	r3, r2
 800be80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be90:	893b      	ldrh	r3, [r7, #8]
 800be92:	7af9      	ldrb	r1, [r7, #11]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	f7f8 fbae 	bl	80045f6 <HAL_PCD_EP_Transmit>
 800be9a:	4603      	mov	r3, r0
 800be9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 f85d 	bl	800bf60 <USBD_Get_USB_Status>
 800bea6:	4603      	mov	r3, r0
 800bea8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800beaa:	7dbb      	ldrb	r3, [r7, #22]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	607a      	str	r2, [r7, #4]
 800bebe:	461a      	mov	r2, r3
 800bec0:	460b      	mov	r3, r1
 800bec2:	72fb      	strb	r3, [r7, #11]
 800bec4:	4613      	mov	r3, r2
 800bec6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bed6:	893b      	ldrh	r3, [r7, #8]
 800bed8:	7af9      	ldrb	r1, [r7, #11]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	f7f8 fb37 	bl	800454e <HAL_PCD_EP_Receive>
 800bee0:	4603      	mov	r3, r0
 800bee2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f83a 	bl	800bf60 <USBD_Get_USB_Status>
 800beec:	4603      	mov	r3, r0
 800beee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bef0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	460b      	mov	r3, r1
 800bf04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf0c:	78fa      	ldrb	r2, [r7, #3]
 800bf0e:	4611      	mov	r1, r2
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7f8 fb59 	bl	80045c8 <HAL_PCD_EP_GetRxCount>
 800bf16:	4603      	mov	r3, r0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf28:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <USBD_static_malloc+0x14>)
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr
 800bf34:	200002a4 	.word	0x200002a4

0800bf38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]

}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr

0800bf4a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	460b      	mov	r3, r1
 800bf54:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bc80      	pop	{r7}
 800bf5e:	4770      	bx	lr

0800bf60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d817      	bhi.n	800bfa4 <USBD_Get_USB_Status+0x44>
 800bf74:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <USBD_Get_USB_Status+0x1c>)
 800bf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7a:	bf00      	nop
 800bf7c:	0800bf8d 	.word	0x0800bf8d
 800bf80:	0800bf93 	.word	0x0800bf93
 800bf84:	0800bf99 	.word	0x0800bf99
 800bf88:	0800bf9f 	.word	0x0800bf9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf90:	e00b      	b.n	800bfaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf92:	2302      	movs	r3, #2
 800bf94:	73fb      	strb	r3, [r7, #15]
    break;
 800bf96:	e008      	b.n	800bfaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf9c:	e005      	b.n	800bfaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa2:	e002      	b.n	800bfaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa8:	bf00      	nop
  }
  return usb_status;
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop

0800bfb8 <__libc_init_array>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	2600      	movs	r6, #0
 800bfbc:	4d0c      	ldr	r5, [pc, #48]	; (800bff0 <__libc_init_array+0x38>)
 800bfbe:	4c0d      	ldr	r4, [pc, #52]	; (800bff4 <__libc_init_array+0x3c>)
 800bfc0:	1b64      	subs	r4, r4, r5
 800bfc2:	10a4      	asrs	r4, r4, #2
 800bfc4:	42a6      	cmp	r6, r4
 800bfc6:	d109      	bne.n	800bfdc <__libc_init_array+0x24>
 800bfc8:	f000 f822 	bl	800c010 <_init>
 800bfcc:	2600      	movs	r6, #0
 800bfce:	4d0a      	ldr	r5, [pc, #40]	; (800bff8 <__libc_init_array+0x40>)
 800bfd0:	4c0a      	ldr	r4, [pc, #40]	; (800bffc <__libc_init_array+0x44>)
 800bfd2:	1b64      	subs	r4, r4, r5
 800bfd4:	10a4      	asrs	r4, r4, #2
 800bfd6:	42a6      	cmp	r6, r4
 800bfd8:	d105      	bne.n	800bfe6 <__libc_init_array+0x2e>
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe0:	4798      	blx	r3
 800bfe2:	3601      	adds	r6, #1
 800bfe4:	e7ee      	b.n	800bfc4 <__libc_init_array+0xc>
 800bfe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfea:	4798      	blx	r3
 800bfec:	3601      	adds	r6, #1
 800bfee:	e7f2      	b.n	800bfd6 <__libc_init_array+0x1e>
 800bff0:	0800c25c 	.word	0x0800c25c
 800bff4:	0800c25c 	.word	0x0800c25c
 800bff8:	0800c25c 	.word	0x0800c25c
 800bffc:	0800c260 	.word	0x0800c260

0800c000 <memset>:
 800c000:	4603      	mov	r3, r0
 800c002:	4402      	add	r2, r0
 800c004:	4293      	cmp	r3, r2
 800c006:	d100      	bne.n	800c00a <memset+0xa>
 800c008:	4770      	bx	lr
 800c00a:	f803 1b01 	strb.w	r1, [r3], #1
 800c00e:	e7f9      	b.n	800c004 <memset+0x4>

0800c010 <_init>:
 800c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c012:	bf00      	nop
 800c014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c016:	bc08      	pop	{r3}
 800c018:	469e      	mov	lr, r3
 800c01a:	4770      	bx	lr

0800c01c <_fini>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr
