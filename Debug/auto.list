
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800bd14  0800bd14  0001bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf04  0800bf04  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf04  0800bf04  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf04  0800bf04  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf08  0800bf08  0001bf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bf0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ac  2000017c  0800c088  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001828  0800c088  00021828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5f9  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8a  00000000  00000000  0003e79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00042528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00043c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bded  00000000  00000000  000451a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce1a  00000000  00000000  00060f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097990  00000000  00000000  0007ddaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011573f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  00115794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bcfc 	.word	0x0800bcfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800bcfc 	.word	0x0800bcfc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <InitEsp>:
		error=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
	}
/***********************************************************************************/
}

void InitEsp(_Rx *RXUSART1){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	switch(Estado){
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <InitEsp+0xa0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d83a      	bhi.n	800058a <InitEsp+0x86>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <InitEsp+0x18>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000531 	.word	0x08000531
 8000520:	08000543 	.word	0x08000543
 8000524:	08000555 	.word	0x08000555
 8000528:	08000567 	.word	0x08000567
 800052c:	08000579 	.word	0x08000579
		case 0:
			PutStrOnTx((_Tx *)&TXUSART1,AT); //Envio comando AT para ver si responde el ESP
 8000530:	491d      	ldr	r1, [pc, #116]	; (80005a8 <InitEsp+0xa4>)
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <InitEsp+0xa8>)
 8000534:	f000 ff94 	bl	8001460 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,AT);    // Depuracion por USB
 8000538:	491b      	ldr	r1, [pc, #108]	; (80005a8 <InitEsp+0xa4>)
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <InitEsp+0xac>)
 800053c:	f000 ff90 	bl	8001460 <PutStrOnTx>
		break;
 8000540:	e023      	b.n	800058a <InitEsp+0x86>

		case 1:
			PutStrOnTx((_Tx *)&TXUSART1,CWMODE); //Envio comando CWMODE
 8000542:	491c      	ldr	r1, [pc, #112]	; (80005b4 <InitEsp+0xb0>)
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <InitEsp+0xa8>)
 8000546:	f000 ff8b 	bl	8001460 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWMODE);    // Depuracion por USB
 800054a:	491a      	ldr	r1, [pc, #104]	; (80005b4 <InitEsp+0xb0>)
 800054c:	4818      	ldr	r0, [pc, #96]	; (80005b0 <InitEsp+0xac>)
 800054e:	f000 ff87 	bl	8001460 <PutStrOnTx>

		break;
 8000552:	e01a      	b.n	800058a <InitEsp+0x86>

		case 2:
			PutStrOnTx((_Tx *)&TXUSART1,CWJAP_); //Envio comando CWJAP con los datos de la red
 8000554:	4918      	ldr	r1, [pc, #96]	; (80005b8 <InitEsp+0xb4>)
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <InitEsp+0xa8>)
 8000558:	f000 ff82 	bl	8001460 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWJAP_);    // Depuracion por USB
 800055c:	4916      	ldr	r1, [pc, #88]	; (80005b8 <InitEsp+0xb4>)
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <InitEsp+0xac>)
 8000560:	f000 ff7e 	bl	8001460 <PutStrOnTx>

		break;
 8000564:	e011      	b.n	800058a <InitEsp+0x86>
//			PutStrOnTx((_Tx *)&TXUSB,CIFSR);    // Depuracion por USB
//
//		break;

		case 3:
			PutStrOnTx((_Tx *)&TXUSART1,CIPMUX);
 8000566:	4915      	ldr	r1, [pc, #84]	; (80005bc <InitEsp+0xb8>)
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <InitEsp+0xa8>)
 800056a:	f000 ff79 	bl	8001460 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPMUX);    // Depuracion por USB
 800056e:	4913      	ldr	r1, [pc, #76]	; (80005bc <InitEsp+0xb8>)
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <InitEsp+0xac>)
 8000572:	f000 ff75 	bl	8001460 <PutStrOnTx>

		break;
 8000576:	e008      	b.n	800058a <InitEsp+0x86>

		case 4:
			PutStrOnTx((_Tx *)&TXUSART1,CIPSTART);
 8000578:	4911      	ldr	r1, [pc, #68]	; (80005c0 <InitEsp+0xbc>)
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <InitEsp+0xa8>)
 800057c:	f000 ff70 	bl	8001460 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPSTART);    // Depuracion por USB
 8000580:	490f      	ldr	r1, [pc, #60]	; (80005c0 <InitEsp+0xbc>)
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <InitEsp+0xac>)
 8000584:	f000 ff6c 	bl	8001460 <PutStrOnTx>

		break;
 8000588:	bf00      	nop
	}
	DecodeTimeOut = 4;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <InitEsp+0xc0>)
 800058c:	2204      	movs	r2, #4
 800058e:	801a      	strh	r2, [r3, #0]
	ESPReadyToRecyb = 1;
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <InitEsp+0xc4>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0320 	orr.w	r3, r3, #32
 8000598:	7013      	strb	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000764 	.word	0x20000764
 80005a8:	0800bd74 	.word	0x0800bd74
 80005ac:	20000c40 	.word	0x20000c40
 80005b0:	200006d8 	.word	0x200006d8
 80005b4:	0800bdf0 	.word	0x0800bdf0
 80005b8:	0800bd7c 	.word	0x0800bd7c
 80005bc:	0800bda4 	.word	0x0800bda4
 80005c0:	0800bdb4 	.word	0x0800bdb4
 80005c4:	2000052c 	.word	0x2000052c
 80005c8:	200008b0 	.word	0x200008b0

080005cc <Reset>:

void Reset(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	espConnected = 0;
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <Reset+0x3c>)
 80005d2:	7813      	ldrb	r3, [r2, #0]
 80005d4:	f36f 0300 	bfc	r3, #0, #1
 80005d8:	7013      	strb	r3, [r2, #0]
	ESPReadyToRecyb = 1;
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <Reset+0x3c>)
 80005dc:	7813      	ldrb	r3, [r2, #0]
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	7013      	strb	r3, [r2, #0]
	ResetESP = 1;
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <Reset+0x40>)
 80005e6:	7813      	ldrb	r3, [r2, #0]
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	7013      	strb	r3, [r2, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <Reset+0x44>)
 80005f0:	f006 fc3c 	bl	8006e6c <HAL_UART_AbortReceive_IT>
	HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_RESET);//Reset ESP8266
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <Reset+0x48>)
 80005fa:	f003 f950 	bl	800389e <HAL_GPIO_WritePin>
	DecodeTimeOut = 20;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <Reset+0x4c>)
 8000600:	2214      	movs	r2, #20
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200008b0 	.word	0x200008b0
 800060c:	20000730 	.word	0x20000730
 8000610:	2000086c 	.word	0x2000086c
 8000614:	40010c00 	.word	0x40010c00
 8000618:	2000052c 	.word	0x2000052c

0800061c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
/***************** Contadores para control del flujo de tiempo ********************/
/*
 * Instancia cada 1ms
 *
 */
	if(htim->Instance == TIM4){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d125      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
		Count100ms--;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800063a:	801a      	strh	r2, [r3, #0]

		if(!Count100ms){
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x36>
			Count100ms = 100;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000648:	2264      	movs	r2, #100	; 0x64
 800064a:	801a      	strh	r2, [r3, #0]
			On100ms = 1;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 800064e:	2201      	movs	r2, #1
 8000650:	801a      	strh	r2, [r3, #0]
		}

		if(RXUSB.header) {
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000654:	79db      	ldrb	r3, [r3, #7]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00e      	beq.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
			RXUSB.timeout--;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800065e:	7bdb      	ldrb	r3, [r3, #15]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000668:	73da      	strb	r2, [r3, #15]
			if(!RXUSB.timeout)
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800066c:	7bdb      	ldrb	r3, [r3, #15]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
				RXUSB.header = 0;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	71da      	strb	r2, [r3, #7]
/************************* Incio lectura analogica por DMA *************************/
/*
 * Instancia cada 500us
 *
 */
	if(htim->Instance == TIM3){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10a      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800068e:	4413      	add	r3, r2
 8000690:	2208      	movs	r2, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000696:	f002 f8d1 	bl	800283c <HAL_ADC_Start_DMA>
	}
/***********************************************************************************/

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40000800 	.word	0x40000800
 80006a8:	20000b10 	.word	0x20000b10
 80006ac:	20000586 	.word	0x20000586
 80006b0:	20000c2c 	.word	0x20000c2c
 80006b4:	40000400 	.word	0x40000400
 80006b8:	20000731 	.word	0x20000731
 80006bc:	20000900 	.word	0x20000900
 80006c0:	20000734 	.word	0x20000734

080006c4 <DecodeESP>:

void DecodeESP(_Rx *RXUSART1){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

//	if(RXUSART1->Buff[RXUSART1->ir] > 128){
//		Reset();
//	}

	if((espConnected) && (!DecodeHeaderESP)){
 80006cc:	4ba1      	ldr	r3, [pc, #644]	; (8000954 <DecodeESP+0x290>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8082 	beq.w	80007e0 <DecodeESP+0x11c>
 80006dc:	4b9d      	ldr	r3, [pc, #628]	; (8000954 <DecodeESP+0x290>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d17a      	bne.n	80007e0 <DecodeESP+0x11c>
		//Decodifica \r\n+IPD,
		if((RXUSART1->Buff[RXUSART1->ir] == IPD[IndiceIPD]) && (IndiceIPD < 7)){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	7952      	ldrb	r2, [r2, #5]
 80006f2:	4413      	add	r3, r2
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	4b98      	ldr	r3, [pc, #608]	; (8000958 <DecodeESP+0x294>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4b97      	ldr	r3, [pc, #604]	; (800095c <DecodeESP+0x298>)
 80006fe:	5c5b      	ldrb	r3, [r3, r1]
 8000700:	429a      	cmp	r2, r3
 8000702:	d116      	bne.n	8000732 <DecodeESP+0x6e>
 8000704:	4b94      	ldr	r3, [pc, #592]	; (8000958 <DecodeESP+0x294>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d812      	bhi.n	8000732 <DecodeESP+0x6e>
			IndiceIPD++;
 800070c:	4b92      	ldr	r3, [pc, #584]	; (8000958 <DecodeESP+0x294>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b90      	ldr	r3, [pc, #576]	; (8000958 <DecodeESP+0x294>)
 8000716:	701a      	strb	r2, [r3, #0]
			if(IndiceIPD == 7){
 8000718:	4b8f      	ldr	r3, [pc, #572]	; (8000958 <DecodeESP+0x294>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b07      	cmp	r3, #7
 800071e:	d11b      	bne.n	8000758 <DecodeESP+0x94>
				DecodeIPD = 1;
 8000720:	4a8c      	ldr	r2, [pc, #560]	; (8000954 <DecodeESP+0x290>)
 8000722:	7813      	ldrb	r3, [r2, #0]
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	7013      	strb	r3, [r2, #0]
				IndiceIPD = 0;
 800072a:	4b8b      	ldr	r3, [pc, #556]	; (8000958 <DecodeESP+0x294>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
			if(IndiceIPD == 7){
 8000730:	e012      	b.n	8000758 <DecodeESP+0x94>
			}
		}
		else{
			if((IndiceIPD > 0) && (!DecodeIPD)){
 8000732:	4b89      	ldr	r3, [pc, #548]	; (8000958 <DecodeESP+0x294>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00e      	beq.n	8000758 <DecodeESP+0x94>
 800073a:	4b86      	ldr	r3, [pc, #536]	; (8000954 <DecodeESP+0x290>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d107      	bne.n	8000758 <DecodeESP+0x94>
				IndiceIPD = 0;
 8000748:	4b83      	ldr	r3, [pc, #524]	; (8000958 <DecodeESP+0x294>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
				RXUSART1->ir = RXUSART1->iw;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791a      	ldrb	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	715a      	strb	r2, [r3, #5]
				return;
 8000756:	e1ae      	b.n	8000ab6 <DecodeESP+0x3f2>
			}
		}

		if(DecodeIPD){
 8000758:	4b7e      	ldr	r3, [pc, #504]	; (8000954 <DecodeESP+0x290>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d012      	beq.n	800078c <DecodeESP+0xc8>
			if(RXUSART1->Buff[RXUSART1->ir]==':'){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	7952      	ldrb	r2, [r2, #5]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b3a      	cmp	r3, #58	; 0x3a
 8000774:	d10a      	bne.n	800078c <DecodeESP+0xc8>
				DecodeHeaderESP = 1;
 8000776:	4a77      	ldr	r2, [pc, #476]	; (8000954 <DecodeESP+0x290>)
 8000778:	7813      	ldrb	r3, [r2, #0]
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	7013      	strb	r3, [r2, #0]
				DecodeIPD = 0;
 8000780:	4a74      	ldr	r2, [pc, #464]	; (8000954 <DecodeESP+0x290>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	f36f 1386 	bfc	r3, #6, #1
 8000788:	7013      	strb	r3, [r2, #0]
				return;
 800078a:	e194      	b.n	8000ab6 <DecodeESP+0x3f2>
			}
		}

		//Decodifica WIFI DISCONNECT\r\n
		if(RXUSART1->Buff[RXUSART1->ir] == WIFI_DISCONNECT[IndiceDisconnect]){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	7952      	ldrb	r2, [r2, #5]
 8000794:	4413      	add	r3, r2
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <DecodeESP+0x29c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4b71      	ldr	r3, [pc, #452]	; (8000964 <DecodeESP+0x2a0>)
 80007a0:	5c5b      	ldrb	r3, [r3, r1]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d10f      	bne.n	80007c6 <DecodeESP+0x102>
			IndiceDisconnect++;
 80007a6:	4b6e      	ldr	r3, [pc, #440]	; (8000960 <DecodeESP+0x29c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b6c      	ldr	r3, [pc, #432]	; (8000960 <DecodeESP+0x29c>)
 80007b0:	701a      	strb	r2, [r3, #0]
			if(IndiceDisconnect == 17){
 80007b2:	4b6b      	ldr	r3, [pc, #428]	; (8000960 <DecodeESP+0x29c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b11      	cmp	r3, #17
 80007b8:	d10c      	bne.n	80007d4 <DecodeESP+0x110>
				IndiceDisconnect=0;
 80007ba:	4b69      	ldr	r3, [pc, #420]	; (8000960 <DecodeESP+0x29c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
				Reset();
 80007c0:	f7ff ff04 	bl	80005cc <Reset>
 80007c4:	e006      	b.n	80007d4 <DecodeESP+0x110>
			}
		}
		else{
			if(IndiceDisconnect > 0){
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <DecodeESP+0x29c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <DecodeESP+0x110>
				IndiceDisconnect = 0;
 80007ce:	4b64      	ldr	r3, [pc, #400]	; (8000960 <DecodeESP+0x29c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
			}
		}
		RXUSART1->ir++;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	715a      	strb	r2, [r3, #5]
	}

	//Decodifica inicializacion de ESP8266
	if((!espConnected) && (!DecodeTimeOut)){
 80007e0:	4b5c      	ldr	r3, [pc, #368]	; (8000954 <DecodeESP+0x290>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f040 8163 	bne.w	8000ab6 <DecodeESP+0x3f2>
 80007f0:	4b5d      	ldr	r3, [pc, #372]	; (8000968 <DecodeESP+0x2a4>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f040 815d 	bne.w	8000ab6 <DecodeESP+0x3f2>
		switch(Estado){
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <DecodeESP+0x2a8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b04      	cmp	r3, #4
 8000802:	f200 8158 	bhi.w	8000ab6 <DecodeESP+0x3f2>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <DecodeESP+0x148>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	08000821 	.word	0x08000821
 8000810:	0800088f 	.word	0x0800088f
 8000814:	08000901 	.word	0x08000901
 8000818:	0800099f 	.word	0x0800099f
 800081c:	08000a19 	.word	0x08000a19
			case 0:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_AT[Indice]){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	7952      	ldrb	r2, [r2, #5]
 8000828:	4413      	add	r3, r2
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	4b50      	ldr	r3, [pc, #320]	; (8000970 <DecodeESP+0x2ac>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4b50      	ldr	r3, [pc, #320]	; (8000974 <DecodeESP+0x2b0>)
 8000834:	5c5b      	ldrb	r3, [r3, r1]
 8000836:	429a      	cmp	r2, r3
 8000838:	d11c      	bne.n	8000874 <DecodeESP+0x1b0>
					Indice ++;
 800083a:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <DecodeESP+0x2ac>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b4b      	ldr	r3, [pc, #300]	; (8000970 <DecodeESP+0x2ac>)
 8000844:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	3301      	adds	r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	715a      	strb	r2, [r3, #5]
					if(Indice == 10){
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <DecodeESP+0x2ac>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b0a      	cmp	r3, #10
 8000858:	f040 8124 	bne.w	8000aa4 <DecodeESP+0x3e0>
						Indice = 0;
 800085c:	4b44      	ldr	r3, [pc, #272]	; (8000970 <DecodeESP+0x2ac>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
						Estado = 1;
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <DecodeESP+0x2a8>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000868:	4a3a      	ldr	r2, [pc, #232]	; (8000954 <DecodeESP+0x290>)
 800086a:	7813      	ldrb	r3, [r2, #0]
 800086c:	f36f 1345 	bfc	r3, #5, #1
 8000870:	7013      	strb	r3, [r2, #0]
				else{
					RXUSART1->ir = RXUSART1->iw;
					Indice = 0;
					ESPReadyToRecyb = 0;
				}
			break;
 8000872:	e117      	b.n	8000aa4 <DecodeESP+0x3e0>
					RXUSART1->ir = RXUSART1->iw;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791a      	ldrb	r2, [r3, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	715a      	strb	r2, [r3, #5]
					Indice = 0;
 800087c:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <DecodeESP+0x2ac>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
					ESPReadyToRecyb = 0;
 8000882:	4a34      	ldr	r2, [pc, #208]	; (8000954 <DecodeESP+0x290>)
 8000884:	7813      	ldrb	r3, [r2, #0]
 8000886:	f36f 1345 	bfc	r3, #5, #1
 800088a:	7013      	strb	r3, [r2, #0]
			break;
 800088c:	e10a      	b.n	8000aa4 <DecodeESP+0x3e0>

			case 1:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWMODE[Indice]){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	7952      	ldrb	r2, [r2, #5]
 8000896:	4413      	add	r3, r2
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <DecodeESP+0x2ac>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	4b35      	ldr	r3, [pc, #212]	; (8000978 <DecodeESP+0x2b4>)
 80008a2:	5c5b      	ldrb	r3, [r3, r1]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d11c      	bne.n	80008e2 <DecodeESP+0x21e>
					Indice++;
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <DecodeESP+0x2ac>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <DecodeESP+0x2ac>)
 80008b2:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	715a      	strb	r2, [r3, #5]
					if(Indice==19){
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <DecodeESP+0x2ac>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b13      	cmp	r3, #19
 80008c6:	f040 80ef 	bne.w	8000aa8 <DecodeESP+0x3e4>
						Indice=0;
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <DecodeESP+0x2ac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
						Estado = 2;
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <DecodeESP+0x2a8>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <DecodeESP+0x290>)
 80008d8:	7813      	ldrb	r3, [r2, #0]
 80008da:	f36f 1345 	bfc	r3, #5, #1
 80008de:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 80008e0:	e0e2      	b.n	8000aa8 <DecodeESP+0x3e4>
					if(Indice>0){
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <DecodeESP+0x2ac>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <DecodeESP+0x234>
						RXUSART1->ir = RXUSART1->iw;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791a      	ldrb	r2, [r3, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	715a      	strb	r2, [r3, #5]
						Indice=0;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <DecodeESP+0x2ac>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <DecodeESP+0x2a8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
			break;
 80008fe:	e0d3      	b.n	8000aa8 <DecodeESP+0x3e4>

			case 2:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWJAP_[Indice]){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	7952      	ldrb	r2, [r2, #5]
 8000908:	4413      	add	r3, r2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <DecodeESP+0x2ac>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <DecodeESP+0x2b8>)
 8000914:	5c5b      	ldrb	r3, [r3, r1]
 8000916:	429a      	cmp	r2, r3
 8000918:	d132      	bne.n	8000980 <DecodeESP+0x2bc>
					Indice++;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <DecodeESP+0x2ac>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <DecodeESP+0x2ac>)
 8000924:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	715a      	strb	r2, [r3, #5]
					if(Indice==LONG_ANS_CWJAP_){
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <DecodeESP+0x2ac>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b58      	cmp	r3, #88	; 0x58
 8000938:	f040 80b8 	bne.w	8000aac <DecodeESP+0x3e8>
						Indice = 0;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <DecodeESP+0x2ac>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
						Estado = 3;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <DecodeESP+0x2a8>)
 8000944:	2203      	movs	r2, #3
 8000946:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000948:	4a02      	ldr	r2, [pc, #8]	; (8000954 <DecodeESP+0x290>)
 800094a:	7813      	ldrb	r3, [r2, #0]
 800094c:	f36f 1345 	bfc	r3, #5, #1
 8000950:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 8000952:	e0ab      	b.n	8000aac <DecodeESP+0x3e8>
 8000954:	200008b0 	.word	0x200008b0
 8000958:	20000b00 	.word	0x20000b00
 800095c:	0800bee4 	.word	0x0800bee4
 8000960:	20000c22 	.word	0x20000c22
 8000964:	0800bed0 	.word	0x0800bed0
 8000968:	2000052c 	.word	0x2000052c
 800096c:	20000764 	.word	0x20000764
 8000970:	200008b1 	.word	0x200008b1
 8000974:	0800bec4 	.word	0x0800bec4
 8000978:	0800be00 	.word	0x0800be00
 800097c:	0800be14 	.word	0x0800be14
					if(Indice>0){
 8000980:	4b4e      	ldr	r3, [pc, #312]	; (8000abc <DecodeESP+0x3f8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <DecodeESP+0x2d2>
						RXUSART1->ir = RXUSART1->iw;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	791a      	ldrb	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	715a      	strb	r2, [r3, #5]
						Indice=0;
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <DecodeESP+0x3f8>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <DecodeESP+0x3fc>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
			break;
 800099c:	e086      	b.n	8000aac <DecodeESP+0x3e8>

			case 3:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPMUX[Indice]){
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	7952      	ldrb	r2, [r2, #5]
 80009a6:	4413      	add	r3, r2
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <DecodeESP+0x3f8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <DecodeESP+0x400>)
 80009b2:	5c5b      	ldrb	r3, [r3, r1]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d11b      	bne.n	80009f0 <DecodeESP+0x32c>
						Indice++;
 80009b8:	4b40      	ldr	r3, [pc, #256]	; (8000abc <DecodeESP+0x3f8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <DecodeESP+0x3f8>)
 80009c2:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	715a      	strb	r2, [r3, #5]
						if(Indice == 19){
 80009d0:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <DecodeESP+0x3f8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b13      	cmp	r3, #19
 80009d6:	d16b      	bne.n	8000ab0 <DecodeESP+0x3ec>
							Indice = 0;
 80009d8:	4b38      	ldr	r3, [pc, #224]	; (8000abc <DecodeESP+0x3f8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
							Estado = 4;
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <DecodeESP+0x3fc>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	701a      	strb	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 80009e4:	4a38      	ldr	r2, [pc, #224]	; (8000ac8 <DecodeESP+0x404>)
 80009e6:	7813      	ldrb	r3, [r2, #0]
 80009e8:	f36f 1345 	bfc	r3, #5, #1
 80009ec:	7013      	strb	r3, [r2, #0]
							Indice = 0;
						}
						Estado = 0;
						ESPReadyToRecyb = 0;
					}
			break;
 80009ee:	e05f      	b.n	8000ab0 <DecodeESP+0x3ec>
						if(Indice>0){
 80009f0:	4b32      	ldr	r3, [pc, #200]	; (8000abc <DecodeESP+0x3f8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <DecodeESP+0x342>
							RXUSART1->ir = RXUSART1->iw;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	791a      	ldrb	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <DecodeESP+0x3f8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
						Estado = 0;
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <DecodeESP+0x3fc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000a0c:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <DecodeESP+0x404>)
 8000a0e:	7813      	ldrb	r3, [r2, #0]
 8000a10:	f36f 1345 	bfc	r3, #5, #1
 8000a14:	7013      	strb	r3, [r2, #0]
			break;
 8000a16:	e04b      	b.n	8000ab0 <DecodeESP+0x3ec>

			case 4:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPSTART[Indice]){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	7952      	ldrb	r2, [r2, #5]
 8000a20:	4413      	add	r3, r2
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <DecodeESP+0x3f8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <DecodeESP+0x408>)
 8000a2c:	5c5b      	ldrb	r3, [r3, r1]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d11e      	bne.n	8000a70 <DecodeESP+0x3ac>
						Indice++;
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <DecodeESP+0x3f8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <DecodeESP+0x3f8>)
 8000a3c:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	715a      	strb	r2, [r3, #5]
						if(Indice == 62){
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <DecodeESP+0x3f8>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8000a50:	d130      	bne.n	8000ab4 <DecodeESP+0x3f0>
							Indice = 0;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <DecodeESP+0x3f8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <DecodeESP+0x404>)
 8000a5a:	7813      	ldrb	r3, [r2, #0]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <DecodeESP+0x3fc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
							Count3000ms = 7;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <DecodeESP+0x40c>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	801a      	strh	r2, [r3, #0]
							Estado = 0;
							Count3000ms = 7;
						}
						Estado = 0;
					}
			break;
 8000a6e:	e021      	b.n	8000ab4 <DecodeESP+0x3f0>
						if(Indice>0){
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <DecodeESP+0x3f8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d011      	beq.n	8000a9c <DecodeESP+0x3d8>
							RXUSART1->ir = RXUSART1->iw;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	791a      	ldrb	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <DecodeESP+0x3f8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <DecodeESP+0x404>)
 8000a88:	7813      	ldrb	r3, [r2, #0]
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <DecodeESP+0x3fc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
							Count3000ms = 7;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <DecodeESP+0x40c>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	801a      	strh	r2, [r3, #0]
						Estado = 0;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <DecodeESP+0x3fc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
			break;
 8000aa2:	e007      	b.n	8000ab4 <DecodeESP+0x3f0>
			break;
 8000aa4:	bf00      	nop
 8000aa6:	e006      	b.n	8000ab6 <DecodeESP+0x3f2>
			break;
 8000aa8:	bf00      	nop
 8000aaa:	e004      	b.n	8000ab6 <DecodeESP+0x3f2>
			break;
 8000aac:	bf00      	nop
 8000aae:	e002      	b.n	8000ab6 <DecodeESP+0x3f2>
			break;
 8000ab0:	bf00      	nop
 8000ab2:	e000      	b.n	8000ab6 <DecodeESP+0x3f2>
			break;
 8000ab4:	bf00      	nop
		}
	}
}
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200008b1 	.word	0x200008b1
 8000ac0:	20000764 	.word	0x20000764
 8000ac4:	0800be70 	.word	0x0800be70
 8000ac8:	200008b0 	.word	0x200008b0
 8000acc:	0800be84 	.word	0x0800be84
 8000ad0:	200004c6 	.word	0x200004c6

08000ad4 <HAL_UART_RxCpltCallback>:
//			break;
//		}
//	}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_UART_RxCpltCallback+0x60>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d121      	bne.n	8000b2a <HAL_UART_RxCpltCallback+0x56>
		TXUSB.Buff[TXUSB.iw++] = rxUSART1Buff[RXUSART1.iw];
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_UART_RxCpltCallback+0x68>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_RxCpltCallback+0x68>)
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	b2cc      	uxtb	r4, r1
 8000afa:	4910      	ldr	r1, [pc, #64]	; (8000b3c <HAL_UART_RxCpltCallback+0x68>)
 8000afc:	710c      	strb	r4, [r1, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_UART_RxCpltCallback+0x6c>)
 8000b02:	5c12      	ldrb	r2, [r2, r0]
 8000b04:	701a      	strb	r2, [r3, #0]
		RXUSART1.iw++;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000b08:	791b      	ldrb	r3, [r3, #4]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000b12:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_UART_RxCpltCallback+0x6c>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x70>)
 8000b26:	f006 f970 	bl	8006e0a <HAL_UART_Receive_IT>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40013800 	.word	0x40013800
 8000b38:	20000518 	.word	0x20000518
 8000b3c:	200006d8 	.word	0x200006d8
 8000b40:	2000019c 	.word	0x2000019c
 8000b44:	2000086c 	.word	0x2000086c

08000b48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	// Incrento indice del buffer
	iAdc++;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b5c:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d102      	bne.n	8000b6e <HAL_ADC_ConvCpltCallback+0x26>
		iAdc = 0;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	}
	ADC();
 8000b6e:	f000 f807 	bl	8000b80 <ADC>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000731 	.word	0x20000731

08000b80 <ADC>:
void ADC(){
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	volatile uint8_t c;

/***********************************************************************************/
/********************* Media movil de las 3 primeras lecturas **********************/
	if(FirtScan){
 8000b86:	4baf      	ldr	r3, [pc, #700]	; (8000e44 <ADC+0x2c4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d07a      	beq.n	8000c84 <ADC+0x104>
		switch(iAdc){
 8000b8e:	4bae      	ldr	r3, [pc, #696]	; (8000e48 <ADC+0x2c8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d002      	beq.n	8000b9e <ADC+0x1e>
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d033      	beq.n	8000c04 <ADC+0x84>
				}
				FirtScan = 0;
			break;

			default:
			break;
 8000b9c:	e14d      	b.n	8000e3a <ADC+0x2ba>
				for(c=0;c<8;c++){
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	e02a      	b.n	8000bfa <ADC+0x7a>
					bufADC[1][c]=round((bufADC[0][c]+bufADC[1][c]) / 2 );
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4ba8      	ldr	r3, [pc, #672]	; (8000e4c <ADC+0x2cc>)
 8000bac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4aa4      	ldr	r2, [pc, #656]	; (8000e4c <ADC+0x2cc>)
 8000bba:	3308      	adds	r3, #8
 8000bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	0fda      	lsrs	r2, r3, #31
 8000bc6:	4413      	add	r3, r2
 8000bc8:	105b      	asrs	r3, r3, #1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fc10 	bl	80003f0 <__aeabi_i2d>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	79f9      	ldrb	r1, [r7, #7]
 8000bd6:	b2c9      	uxtb	r1, r1
 8000bd8:	460c      	mov	r4, r1
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f7ff fc71 	bl	80004c4 <__aeabi_d2uiz>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b299      	uxth	r1, r3
 8000be6:	4a99      	ldr	r2, [pc, #612]	; (8000e4c <ADC+0x2cc>)
 8000be8:	f104 0308 	add.w	r3, r4, #8
 8000bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d9d0      	bls.n	8000ba4 <ADC+0x24>
			break;
 8000c02:	e11a      	b.n	8000e3a <ADC+0x2ba>
				for(c=0;c<8;c++){
 8000c04:	2300      	movs	r3, #0
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	e034      	b.n	8000c74 <ADC+0xf4>
					bufADC[2][c]=round((bufADC[0][c]+bufADC[1][c]+bufADC[2][c]) / 3);
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b8e      	ldr	r3, [pc, #568]	; (8000e4c <ADC+0x2cc>)
 8000c12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4a8b      	ldr	r2, [pc, #556]	; (8000e4c <ADC+0x2cc>)
 8000c20:	3308      	adds	r3, #8
 8000c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	440b      	add	r3, r1
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	4987      	ldr	r1, [pc, #540]	; (8000e4c <ADC+0x2cc>)
 8000c30:	3210      	adds	r2, #16
 8000c32:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c36:	b292      	uxth	r2, r2
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a85      	ldr	r2, [pc, #532]	; (8000e50 <ADC+0x2d0>)
 8000c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbd3 	bl	80003f0 <__aeabi_i2d>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	79f9      	ldrb	r1, [r7, #7]
 8000c50:	b2c9      	uxtb	r1, r1
 8000c52:	460c      	mov	r4, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f7ff fc34 	bl	80004c4 <__aeabi_d2uiz>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b299      	uxth	r1, r3
 8000c60:	4a7a      	ldr	r2, [pc, #488]	; (8000e4c <ADC+0x2cc>)
 8000c62:	f104 0310 	add.w	r3, r4, #16
 8000c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b07      	cmp	r3, #7
 8000c7a:	d9c6      	bls.n	8000c0a <ADC+0x8a>
				FirtScan = 0;
 8000c7c:	4b71      	ldr	r3, [pc, #452]	; (8000e44 <ADC+0x2c4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e0da      	b.n	8000e3a <ADC+0x2ba>
	}

/***********************************************************************************/
/********************* Media movil de las siguientes lecturas **********************/
	else{
		if(iAdc >= 0 && iAdc <= 1){
 8000c84:	4b70      	ldr	r3, [pc, #448]	; (8000e48 <ADC+0x2c8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4b6f      	ldr	r3, [pc, #444]	; (8000e48 <ADC+0x2c8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f200 8081 	bhi.w	8000d96 <ADC+0x216>
			// Cruce por 0 y 1 donde se toman dos valores anteriores para hacer la media
			switch(iAdc){
 8000c94:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <ADC+0x2c8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <ADC+0x124>
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d03b      	beq.n	8000d1a <ADC+0x19a>
 8000ca2:	e0ca      	b.n	8000e3a <ADC+0x2ba>
				case 0:
					for(c = 0; c<8; c++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	e032      	b.n	8000d10 <ADC+0x190>
						bufADC[0][c]=round(( bufADC[0][c]+bufADC[31][c]+bufADC[30][c]) / 3) ;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b66      	ldr	r3, [pc, #408]	; (8000e4c <ADC+0x2cc>)
 8000cb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4a63      	ldr	r2, [pc, #396]	; (8000e4c <ADC+0x2cc>)
 8000cc0:	33f8      	adds	r3, #248	; 0xf8
 8000cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	440b      	add	r3, r1
 8000cca:	79fa      	ldrb	r2, [r7, #7]
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	495f      	ldr	r1, [pc, #380]	; (8000e4c <ADC+0x2cc>)
 8000cd0:	32f0      	adds	r2, #240	; 0xf0
 8000cd2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a5d      	ldr	r2, [pc, #372]	; (8000e50 <ADC+0x2d0>)
 8000cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce0:	17db      	asrs	r3, r3, #31
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb83 	bl	80003f0 <__aeabi_i2d>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	79f9      	ldrb	r1, [r7, #7]
 8000cf0:	b2c9      	uxtb	r1, r1
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fbe4 	bl	80004c4 <__aeabi_d2uiz>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <ADC+0x2cc>)
 8000d02:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					for(c = 0; c<8; c++){
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	d9c8      	bls.n	8000caa <ADC+0x12a>
					}
				break;
 8000d18:	e03c      	b.n	8000d94 <ADC+0x214>
				case 1:
					for(c = 0; c<8; c++){
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	e034      	b.n	8000d8a <ADC+0x20a>
						bufADC[1][c]=round((bufADC[0][c]+bufADC[1][c]+bufADC[31][c]) / 3);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <ADC+0x2cc>)
 8000d28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4a45      	ldr	r2, [pc, #276]	; (8000e4c <ADC+0x2cc>)
 8000d36:	3308      	adds	r3, #8
 8000d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	440b      	add	r3, r1
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	4941      	ldr	r1, [pc, #260]	; (8000e4c <ADC+0x2cc>)
 8000d46:	32f8      	adds	r2, #248	; 0xf8
 8000d48:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a3f      	ldr	r2, [pc, #252]	; (8000e50 <ADC+0x2d0>)
 8000d52:	fb82 1203 	smull	r1, r2, r2, r3
 8000d56:	17db      	asrs	r3, r3, #31
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fb48 	bl	80003f0 <__aeabi_i2d>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	79f9      	ldrb	r1, [r7, #7]
 8000d66:	b2c9      	uxtb	r1, r1
 8000d68:	460c      	mov	r4, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff fba9 	bl	80004c4 <__aeabi_d2uiz>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b299      	uxth	r1, r3
 8000d76:	4a35      	ldr	r2, [pc, #212]	; (8000e4c <ADC+0x2cc>)
 8000d78:	f104 0308 	add.w	r3, r4, #8
 8000d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(c = 0; c<8; c++){
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	d9c6      	bls.n	8000d20 <ADC+0x1a0>
					}
				break;
 8000d92:	bf00      	nop
			switch(iAdc){
 8000d94:	e051      	b.n	8000e3a <ADC+0x2ba>
			}
		}
		else{
			// Cálculo comprendido entre bufADC[2] y bufADC[31]
			for(c = 0; c<8; c++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e049      	b.n	8000e30 <ADC+0x2b0>
				bufADC[iAdc][c] = round((bufADC[iAdc-2][c] + bufADC[iAdc-1][c] + bufADC[iAdc][c])/3);
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <ADC+0x2c8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	3b02      	subs	r3, #2
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <ADC+0x2cc>)
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <ADC+0x2c8>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <ADC+0x2cc>)
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4403      	add	r3, r0
 8000dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <ADC+0x2c8>)
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	79f9      	ldrb	r1, [r7, #7]
 8000ddc:	b2c9      	uxtb	r1, r1
 8000dde:	4608      	mov	r0, r1
 8000de0:	491a      	ldr	r1, [pc, #104]	; (8000e4c <ADC+0x2cc>)
 8000de2:	00d2      	lsls	r2, r2, #3
 8000de4:	4402      	add	r2, r0
 8000de6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dea:	b292      	uxth	r2, r2
 8000dec:	4413      	add	r3, r2
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <ADC+0x2d0>)
 8000df0:	fb82 1203 	smull	r1, r2, r2, r3
 8000df4:	17db      	asrs	r3, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff faf9 	bl	80003f0 <__aeabi_i2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4911      	ldr	r1, [pc, #68]	; (8000e48 <ADC+0x2c8>)
 8000e04:	7809      	ldrb	r1, [r1, #0]
 8000e06:	b2c9      	uxtb	r1, r1
 8000e08:	460d      	mov	r5, r1
 8000e0a:	79f9      	ldrb	r1, [r7, #7]
 8000e0c:	b2c9      	uxtb	r1, r1
 8000e0e:	460c      	mov	r4, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fb56 	bl	80004c4 <__aeabi_d2uiz>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <ADC+0x2cc>)
 8000e1e:	00eb      	lsls	r3, r5, #3
 8000e20:	4423      	add	r3, r4
 8000e22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(c = 0; c<8; c++){
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	d9b1      	bls.n	8000d9c <ADC+0x21c>
			}
		}
	}
/***********************************************************************************/
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bdb0      	pop	{r4, r5, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000198 	.word	0x20000198
 8000e48:	20000731 	.word	0x20000731
 8000e4c:	20000900 	.word	0x20000900
 8000e50:	55555556 	.word	0x55555556

08000e54 <MyCallBackOnUSBData>:
void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e010      	b.n	8000e86 <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	441a      	add	r2, r3
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MyCallBackOnUSBData+0x48>)
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	1c59      	adds	r1, r3, #1
 8000e72:	b2c8      	uxtb	r0, r1
 8000e74:	4909      	ldr	r1, [pc, #36]	; (8000e9c <MyCallBackOnUSBData+0x48>)
 8000e76:	7108      	strb	r0, [r1, #4]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MyCallBackOnUSBData+0x4c>)
 8000e7e:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3ea      	bcc.n	8000e64 <MyCallBackOnUSBData+0x10>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000c2c 	.word	0x20000c2c
 8000ea0:	200005b0 	.word	0x200005b0

08000ea4 <GetByteFromRx>:

uint8_t GetByteFromRx(_Rx *RX, int8_t pre, int8_t pos){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	70bb      	strb	r3, [r7, #2]
    uint8_t aux;

    RX->iData += pre;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b5a      	ldrb	r2, [r3, #13]
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	735a      	strb	r2, [r3, #13]
    RX->iData &= RX->maskSize;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7b5a      	ldrb	r2, [r3, #13]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	735a      	strb	r2, [r3, #13]
    aux = RX->Buff[RX->iData];
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	7b52      	ldrb	r2, [r2, #13]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	73fb      	strb	r3, [r7, #15]
    RX->iData += pos;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7b5a      	ldrb	r2, [r3, #13]
 8000ee4:	78bb      	ldrb	r3, [r7, #2]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	735a      	strb	r2, [r3, #13]
    RX->iData &= RX->maskSize;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7b5a      	ldrb	r2, [r3, #13]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7b9b      	ldrb	r3, [r3, #14]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	735a      	strb	r2, [r3, #13]

    return aux;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
	...

08000f0c <DecodeHeader>:

void DecodeHeader(_Rx *RX)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	791b      	ldrb	r3, [r3, #4]
 8000f18:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 8000f1a:	e0ed      	b.n	80010f8 <DecodeHeader+0x1ec>
        switch(RX->header) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	79db      	ldrb	r3, [r3, #7]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	f200 80c7 	bhi.w	80010b4 <DecodeHeader+0x1a8>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <DecodeHeader+0x20>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000f49 	.word	0x08000f49
 8000f30:	08000f69 	.word	0x08000f69
 8000f34:	08000f95 	.word	0x08000f95
 8000f38:	08000fc1 	.word	0x08000fc1
 8000f3c:	08000fed 	.word	0x08000fed
 8000f40:	08001005 	.word	0x08001005
 8000f44:	0800105b 	.word	0x0800105b
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	7952      	ldrb	r2, [r2, #5]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b55      	cmp	r3, #85	; 0x55
 8000f56:	f040 80b6 	bne.w	80010c6 <DecodeHeader+0x1ba>
                    RX->header = 1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2205      	movs	r2, #5
 8000f64:	73da      	strb	r2, [r3, #15]
                }
                break;
 8000f66:	e0ae      	b.n	80010c6 <DecodeHeader+0x1ba>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	7952      	ldrb	r2, [r2, #5]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b4e      	cmp	r3, #78	; 0x4e
 8000f76:	d103      	bne.n	8000f80 <DecodeHeader+0x74>
                    RX->header = 2;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000f7e:	e0a5      	b.n	80010cc <DecodeHeader+0x1c0>
                    RX->header = 0;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	795b      	ldrb	r3, [r3, #5]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	715a      	strb	r2, [r3, #5]
                break;
 8000f92:	e09b      	b.n	80010cc <DecodeHeader+0x1c0>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	7952      	ldrb	r2, [r2, #5]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b45      	cmp	r3, #69	; 0x45
 8000fa2:	d103      	bne.n	8000fac <DecodeHeader+0xa0>
                    RX->header = 3;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000faa:	e08f      	b.n	80010cc <DecodeHeader+0x1c0>
                    RX->header = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	795b      	ldrb	r3, [r3, #5]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	715a      	strb	r2, [r3, #5]
                break;
 8000fbe:	e085      	b.n	80010cc <DecodeHeader+0x1c0>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	7952      	ldrb	r2, [r2, #5]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b52      	cmp	r3, #82	; 0x52
 8000fce:	d103      	bne.n	8000fd8 <DecodeHeader+0xcc>
                    RX->header = 4;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000fd6:	e079      	b.n	80010cc <DecodeHeader+0x1c0>
                    RX->header = 0 ;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	795b      	ldrb	r3, [r3, #5]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	715a      	strb	r2, [r3, #5]
                break;
 8000fea:	e06f      	b.n	80010cc <DecodeHeader+0x1c0>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	7952      	ldrb	r2, [r2, #5]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2205      	movs	r2, #5
 8001000:	71da      	strb	r2, [r3, #7]
                break;
 8001002:	e063      	b.n	80010cc <DecodeHeader+0x1c0>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7952      	ldrb	r2, [r2, #5]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b3a      	cmp	r3, #58	; 0x3a
 8001012:	d118      	bne.n	8001046 <DecodeHeader+0x13a>
                    RX->header = 6;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2206      	movs	r2, #6
 8001018:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	3301      	adds	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	735a      	strb	r2, [r3, #13]
                    RX->iData &= RX->maskSize;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b5a      	ldrb	r2, [r3, #13]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b9b      	ldrb	r3, [r3, #14]
 800102e:	4013      	ands	r3, r2
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	735a      	strb	r2, [r3, #13]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7adb      	ldrb	r3, [r3, #11]
 800103a:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 800103e:	b2da      	uxtb	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8001044:	e042      	b.n	80010cc <DecodeHeader+0x1c0>
                    RX->header = 0 ;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	795b      	ldrb	r3, [r3, #5]
 8001050:	3b01      	subs	r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	715a      	strb	r2, [r3, #5]
                break;
 8001058:	e038      	b.n	80010cc <DecodeHeader+0x1c0>
            case 6:
                RX->nbytes--;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7adb      	ldrb	r3, [r3, #11]
 800105e:	3b01      	subs	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7adb      	ldrb	r3, [r3, #11]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00c      	beq.n	8001088 <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7a5a      	ldrb	r2, [r3, #9]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	7949      	ldrb	r1, [r1, #5]
 800107a:	440b      	add	r3, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4053      	eors	r3, r2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	725a      	strb	r2, [r3, #9]
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                        DecodeHeaderESP = 0;
                    }
                }
                break;
 8001086:	e020      	b.n	80010ca <DecodeHeader+0x1be>
                    RX->header = 0 ;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7a5a      	ldrb	r2, [r3, #9]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	7949      	ldrb	r1, [r1, #5]
 800109a:	440b      	add	r3, r1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d113      	bne.n	80010ca <DecodeHeader+0x1be>
                        RX->ISCMD = 1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	719a      	strb	r2, [r3, #6]
                        DecodeHeaderESP = 0;
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <DecodeHeader+0x204>)
 80010aa:	7813      	ldrb	r3, [r2, #0]
 80010ac:	f36f 03c3 	bfc	r3, #3, #1
 80010b0:	7013      	strb	r3, [r2, #0]
                break;
 80010b2:	e00a      	b.n	80010ca <DecodeHeader+0x1be>

            default:
                RX->header = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	71da      	strb	r2, [r3, #7]
                DecodeHeaderESP = 0;
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <DecodeHeader+0x204>)
 80010bc:	7813      	ldrb	r3, [r2, #0]
 80010be:	f36f 03c3 	bfc	r3, #3, #1
 80010c2:	7013      	strb	r3, [r2, #0]
                break;
 80010c4:	e002      	b.n	80010cc <DecodeHeader+0x1c0>
                break;
 80010c6:	bf00      	nop
 80010c8:	e000      	b.n	80010cc <DecodeHeader+0x1c0>
                break;
 80010ca:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	795a      	ldrb	r2, [r3, #5]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7b9b      	ldrb	r3, [r3, #14]
 80010d4:	4013      	ands	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;                                                // Enmascaro el indice de lectura - Cuando llega a 63 se pone en 0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	795a      	ldrb	r2, [r3, #5]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7b9b      	ldrb	r3, [r3, #14]
 80010f0:	4013      	ands	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	795b      	ldrb	r3, [r3, #5]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	429a      	cmp	r2, r3
 8001100:	f47f af0c 	bne.w	8000f1c <DecodeHeader+0x10>
    }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200008b0 	.word	0x200008b0

08001114 <DecodeCmd>:

void DecodeCmd(_Rx *RX, _Tx *TX){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    RX->ISCMD = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	719a      	strb	r2, [r3, #6]

    switch(RX->Buff[RX->iData]){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	7b52      	ldrb	r2, [r2, #13]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2ba1      	cmp	r3, #161	; 0xa1
 8001132:	d01c      	beq.n	800116e <DecodeCmd+0x5a>
 8001134:	2bf0      	cmp	r3, #240	; 0xf0
 8001136:	f040 80ac 	bne.w	8001292 <DecodeCmd+0x17e>

    	/*
         * Comando para enviar alive
         */
        case 0xF0:                                                              //Alive
			if(espConnected){
 800113a:	4b58      	ldr	r3, [pc, #352]	; (800129c <DecodeCmd+0x188>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <DecodeCmd+0x40>
				SendAlive = 1;
 8001148:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <DecodeCmd+0x18c>)
 800114a:	7813      	ldrb	r3, [r2, #0]
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	7013      	strb	r3, [r2, #0]
			else{
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xF0, 2);
	            PutByteOnTx((_Tx *)&TXUSB, 0x0D);
	            PutcksOnTx((_Tx *)&TXUSB);
			}
		break;
 8001152:	e09e      	b.n	8001292 <DecodeCmd+0x17e>
	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xF0, 2);
 8001154:	2202      	movs	r2, #2
 8001156:	21f0      	movs	r1, #240	; 0xf0
 8001158:	4852      	ldr	r0, [pc, #328]	; (80012a4 <DecodeCmd+0x190>)
 800115a:	f000 f9cc 	bl	80014f6 <PutHeaderOnTx>
	            PutByteOnTx((_Tx *)&TXUSB, 0x0D);
 800115e:	210d      	movs	r1, #13
 8001160:	4850      	ldr	r0, [pc, #320]	; (80012a4 <DecodeCmd+0x190>)
 8001162:	f000 f9aa 	bl	80014ba <PutByteOnTx>
	            PutcksOnTx((_Tx *)&TXUSB);
 8001166:	484f      	ldr	r0, [pc, #316]	; (80012a4 <DecodeCmd+0x190>)
 8001168:	f000 fa5c 	bl	8001624 <PutcksOnTx>
		break;
 800116c:	e091      	b.n	8001292 <DecodeCmd+0x17e>
////        	M1Power = PWMAMIN + (45*M1Power);
////        	M2Power = PWMBMIN + (20*M2Power);
//			PutByteOnTx(&TXUSB, M1Power);
//			PutByteOnTx(&TXUSB, M2Power);
//			PutStrOnTx(&TXUSB, "---");
        	M1Power.u8[0] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2101      	movs	r1, #1
 8001172:	484d      	ldr	r0, [pc, #308]	; (80012a8 <DecodeCmd+0x194>)
 8001174:	f7ff fe96 	bl	8000ea4 <GetByteFromRx>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <DecodeCmd+0x198>)
 800117e:	701a      	strb	r2, [r3, #0]
        	M1Power.u8[1] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	4848      	ldr	r0, [pc, #288]	; (80012a8 <DecodeCmd+0x194>)
 8001186:	f7ff fe8d 	bl	8000ea4 <GetByteFromRx>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <DecodeCmd+0x198>)
 8001190:	705a      	strb	r2, [r3, #1]
        	M1Power.u8[2] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2101      	movs	r1, #1
 8001196:	4844      	ldr	r0, [pc, #272]	; (80012a8 <DecodeCmd+0x194>)
 8001198:	f7ff fe84 	bl	8000ea4 <GetByteFromRx>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b42      	ldr	r3, [pc, #264]	; (80012ac <DecodeCmd+0x198>)
 80011a2:	709a      	strb	r2, [r3, #2]
        	M1Power.u8[3] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2101      	movs	r1, #1
 80011a8:	483f      	ldr	r0, [pc, #252]	; (80012a8 <DecodeCmd+0x194>)
 80011aa:	f7ff fe7b 	bl	8000ea4 <GetByteFromRx>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <DecodeCmd+0x198>)
 80011b4:	70da      	strb	r2, [r3, #3]
			//M1Power = PWMAMIN + (45*w.i32);
        	M2Power.u8[0] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	483b      	ldr	r0, [pc, #236]	; (80012a8 <DecodeCmd+0x194>)
 80011bc:	f7ff fe72 	bl	8000ea4 <GetByteFromRx>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <DecodeCmd+0x19c>)
 80011c6:	701a      	strb	r2, [r3, #0]
        	M2Power.u8[1] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	4836      	ldr	r0, [pc, #216]	; (80012a8 <DecodeCmd+0x194>)
 80011ce:	f7ff fe69 	bl	8000ea4 <GetByteFromRx>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <DecodeCmd+0x19c>)
 80011d8:	705a      	strb	r2, [r3, #1]
        	M2Power.u8[2] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2101      	movs	r1, #1
 80011de:	4832      	ldr	r0, [pc, #200]	; (80012a8 <DecodeCmd+0x194>)
 80011e0:	f7ff fe60 	bl	8000ea4 <GetByteFromRx>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <DecodeCmd+0x19c>)
 80011ea:	709a      	strb	r2, [r3, #2]
        	M2Power.u8[3] = GetByteFromRx((_Rx *)&RXUSART1, 1, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	482d      	ldr	r0, [pc, #180]	; (80012a8 <DecodeCmd+0x194>)
 80011f2:	f7ff fe57 	bl	8000ea4 <GetByteFromRx>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <DecodeCmd+0x19c>)
 80011fc:	70da      	strb	r2, [r3, #3]
            //M2Power = PWMBMIN + (20*w.i32);

            if(M1Power.u32 > 0){
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <DecodeCmd+0x198>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <DecodeCmd+0xfe>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,M1Power.u32);
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <DecodeCmd+0x1a0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a28      	ldr	r2, [pc, #160]	; (80012ac <DecodeCmd+0x198>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
 8001210:	e004      	b.n	800121c <DecodeCmd+0x108>
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,M1Power.u32);
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <DecodeCmd+0x1a0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <DecodeCmd+0x198>)
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
			}

            if(M2Power.u32 > 0){
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <DecodeCmd+0x19c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <DecodeCmd+0x11c>
    			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,M2Power.u32);
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <DecodeCmd+0x1a0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <DecodeCmd+0x19c>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
 800122e:	e004      	b.n	800123a <DecodeCmd+0x126>
            }
            else{
    			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,M2Power.u32);
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <DecodeCmd+0x1a0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <DecodeCmd+0x19c>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c
            }

			PutStrOnTx(&TXUSB, "---");
 800123a:	491f      	ldr	r1, [pc, #124]	; (80012b8 <DecodeCmd+0x1a4>)
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <DecodeCmd+0x190>)
 800123e:	f000 f90f 	bl	8001460 <PutStrOnTx>
			PutByteOnTx(&TXUSB, M1Power.u32);
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <DecodeCmd+0x198>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4619      	mov	r1, r3
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <DecodeCmd+0x190>)
 800124c:	f000 f935 	bl	80014ba <PutByteOnTx>
			PutByteOnTx(&TXUSB, M2Power.u32);
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <DecodeCmd+0x19c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <DecodeCmd+0x190>)
 800125a:	f000 f92e 	bl	80014ba <PutByteOnTx>

            if(espConnected){
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <DecodeCmd+0x188>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <DecodeCmd+0x164>
                RespMotor = 1;
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <DecodeCmd+0x18c>)
 800126e:	7813      	ldrb	r3, [r2, #0]
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	7013      	strb	r3, [r2, #0]
                PutHeaderOnTx(&TXUSB, 0xA1, 2);
    			PutByteOnTx(&TXUSB, 0x0D);
    			PutcksOnTx(&TXUSB);
            }

        break;
 8001276:	e00b      	b.n	8001290 <DecodeCmd+0x17c>
                PutHeaderOnTx(&TXUSB, 0xA1, 2);
 8001278:	2202      	movs	r2, #2
 800127a:	21a1      	movs	r1, #161	; 0xa1
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <DecodeCmd+0x190>)
 800127e:	f000 f93a 	bl	80014f6 <PutHeaderOnTx>
    			PutByteOnTx(&TXUSB, 0x0D);
 8001282:	210d      	movs	r1, #13
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <DecodeCmd+0x190>)
 8001286:	f000 f918 	bl	80014ba <PutByteOnTx>
    			PutcksOnTx(&TXUSB);
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <DecodeCmd+0x190>)
 800128c:	f000 f9ca 	bl	8001624 <PutcksOnTx>
        break;
 8001290:	bf00      	nop
//	        	PutHeaderOnTx((_Tx *)&TXUSB, 0xFF, 1);
//	            PutcksOnTx((_Tx *)&TXUSB);
//			}
//        break;
    }
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200008b0 	.word	0x200008b0
 80012a0:	20000730 	.word	0x20000730
 80012a4:	200006d8 	.word	0x200006d8
 80012a8:	20000518 	.word	0x20000518
 80012ac:	20000c4c 	.word	0x20000c4c
 80012b0:	200006b0 	.word	0x200006b0
 80012b4:	200004cc 	.word	0x200004cc
 80012b8:	0800bd14 	.word	0x0800bd14

080012bc <PutCIPSENDOnTx>:

void PutCIPSENDOnTx(const char * CantDatos){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	PutStrOnTx((_Tx *)&TXUSART1, CIPSEND);
 80012c4:	4918      	ldr	r1, [pc, #96]	; (8001328 <PutCIPSENDOnTx+0x6c>)
 80012c6:	4819      	ldr	r0, [pc, #100]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012c8:	f000 f8ca 	bl	8001460 <PutStrOnTx>
	PutStrOnTx((_Tx *)&TXUSART1, CantDatos);
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012d0:	f000 f8c6 	bl	8001460 <PutStrOnTx>
	TXUSART1.Buff[TXUSART1.iw++] = '\r';
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012da:	791b      	ldrb	r3, [r3, #4]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	b2c8      	uxtb	r0, r1
 80012e0:	4912      	ldr	r1, [pc, #72]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012e2:	7108      	strb	r0, [r1, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	220d      	movs	r2, #13
 80012e8:	701a      	strb	r2, [r3, #0]
	TXUSART1.iw &= TXUSART1.maskSize;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012ec:	791a      	ldrb	r2, [r3, #4]
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	4013      	ands	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012f8:	711a      	strb	r2, [r3, #4]
	TXUSART1.Buff[TXUSART1.iw++] = '\n';
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <PutCIPSENDOnTx+0x70>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <PutCIPSENDOnTx+0x70>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	b2c8      	uxtb	r0, r1
 8001306:	4909      	ldr	r1, [pc, #36]	; (800132c <PutCIPSENDOnTx+0x70>)
 8001308:	7108      	strb	r0, [r1, #4]
 800130a:	4413      	add	r3, r2
 800130c:	220a      	movs	r2, #10
 800130e:	701a      	strb	r2, [r3, #0]
	TXUSART1.iw &= TXUSART1.maskSize;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <PutCIPSENDOnTx+0x70>)
 8001312:	791a      	ldrb	r2, [r3, #4]
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <PutCIPSENDOnTx+0x70>)
 8001316:	7a1b      	ldrb	r3, [r3, #8]
 8001318:	4013      	ands	r3, r2
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <PutCIPSENDOnTx+0x70>)
 800131e:	711a      	strb	r2, [r3, #4]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0800bde4 	.word	0x0800bde4
 800132c:	20000c40 	.word	0x20000c40

08001330 <SendUDPData>:

void SendUDPData(){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	switch(Data){
 8001334:	4b45      	ldr	r3, [pc, #276]	; (800144c <SendUDPData+0x11c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <SendUDPData+0x12>
 800133c:	2b01      	cmp	r3, #1
 800133e:	d031      	beq.n	80013a4 <SendUDPData+0x74>
					SendAlive = 0;
				}
			}
		break;
	}
}
 8001340:	e082      	b.n	8001448 <SendUDPData+0x118>
			if(RespMotor || SendAlive){
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <SendUDPData+0x120>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <SendUDPData+0x2e>
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <SendUDPData+0x120>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d071      	beq.n	8001442 <SendUDPData+0x112>
				PutCIPSENDOnTx("9");
 800135e:	483d      	ldr	r0, [pc, #244]	; (8001454 <SendUDPData+0x124>)
 8001360:	f7ff ffac 	bl	80012bc <PutCIPSENDOnTx>
				Data++;
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <SendUDPData+0x11c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <SendUDPData+0x11c>)
 800136e:	701a      	strb	r2, [r3, #0]
				if(RespMotor){
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <SendUDPData+0x120>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <SendUDPData+0x5e>
					Count200ms = 3;
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <SendUDPData+0x128>)
 8001380:	2203      	movs	r2, #3
 8001382:	801a      	strh	r2, [r3, #0]
					SendAlive = 0;
 8001384:	4a32      	ldr	r2, [pc, #200]	; (8001450 <SendUDPData+0x120>)
 8001386:	7813      	ldrb	r3, [r2, #0]
 8001388:	f36f 1304 	bfc	r3, #4, #1
 800138c:	7013      	strb	r3, [r2, #0]
				if(SendAlive) Count200ms = 3;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <SendUDPData+0x120>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d052      	beq.n	8001442 <SendUDPData+0x112>
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <SendUDPData+0x128>)
 800139e:	2203      	movs	r2, #3
 80013a0:	801a      	strh	r2, [r3, #0]
		break;
 80013a2:	e04e      	b.n	8001442 <SendUDPData+0x112>
			if(RespMotor){
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <SendUDPData+0x120>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <SendUDPData+0x8c>
				PutHeaderOnTx((_Tx *)&TXUSART1, 0xA1, 2);
 80013b2:	2202      	movs	r2, #2
 80013b4:	21a1      	movs	r1, #161	; 0xa1
 80013b6:	4829      	ldr	r0, [pc, #164]	; (800145c <SendUDPData+0x12c>)
 80013b8:	f000 f89d 	bl	80014f6 <PutHeaderOnTx>
			if(SendAlive){
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <SendUDPData+0x120>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <SendUDPData+0xa4>
				PutHeaderOnTx((_Tx *)&TXUSART1, 0xF0, 2);
 80013ca:	2202      	movs	r2, #2
 80013cc:	21f0      	movs	r1, #240	; 0xf0
 80013ce:	4823      	ldr	r0, [pc, #140]	; (800145c <SendUDPData+0x12c>)
 80013d0:	f000 f891 	bl	80014f6 <PutHeaderOnTx>
			if(RespMotor || SendAlive){
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <SendUDPData+0x120>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <SendUDPData+0xc0>
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <SendUDPData+0x120>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d02a      	beq.n	8001446 <SendUDPData+0x116>
				PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 80013f0:	210d      	movs	r1, #13
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <SendUDPData+0x12c>)
 80013f4:	f000 f861 	bl	80014ba <PutByteOnTx>
				PutcksOnTx((_Tx *)&TXUSART1);
 80013f8:	4818      	ldr	r0, [pc, #96]	; (800145c <SendUDPData+0x12c>)
 80013fa:	f000 f913 	bl	8001624 <PutcksOnTx>
				Data = 0;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <SendUDPData+0x11c>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
				if(RespMotor){
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <SendUDPData+0x120>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <SendUDPData+0xf2>
					RespMotor = 0;
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <SendUDPData+0x120>)
 8001414:	7813      	ldrb	r3, [r2, #0]
 8001416:	f36f 03c3 	bfc	r3, #3, #1
 800141a:	7013      	strb	r3, [r2, #0]
					Count200ms = 3;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <SendUDPData+0x128>)
 800141e:	2203      	movs	r2, #3
 8001420:	801a      	strh	r2, [r3, #0]
				if(SendAlive){
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <SendUDPData+0x120>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00a      	beq.n	8001446 <SendUDPData+0x116>
					Count200ms = 3;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <SendUDPData+0x128>)
 8001432:	2203      	movs	r2, #3
 8001434:	801a      	strh	r2, [r3, #0]
					SendAlive = 0;
 8001436:	4a06      	ldr	r2, [pc, #24]	; (8001450 <SendUDPData+0x120>)
 8001438:	7813      	ldrb	r3, [r2, #0]
 800143a:	f36f 1304 	bfc	r3, #4, #1
 800143e:	7013      	strb	r3, [r2, #0]
		break;
 8001440:	e001      	b.n	8001446 <SendUDPData+0x116>
		break;
 8001442:	bf00      	nop
 8001444:	e000      	b.n	8001448 <SendUDPData+0x118>
		break;
 8001446:	bf00      	nop
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200008b8 	.word	0x200008b8
 8001450:	20000730 	.word	0x20000730
 8001454:	0800bd18 	.word	0x0800bd18
 8001458:	20000b02 	.word	0x20000b02
 800145c:	20000c40 	.word	0x20000c40

08001460 <PutStrOnTx>:


void PutStrOnTx(_Tx *TX, const char *str)
{
 8001460:	b490      	push	{r4, r7}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]

    while(str[i]) {
 800146e:	e018      	b.n	80014a2 <PutStrOnTx+0x42>
        TX->Buff[TX->iw++] = str[i++];
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	73fa      	strb	r2, [r7, #15]
 8001476:	461a      	mov	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	441a      	add	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	1c58      	adds	r0, r3, #1
 8001486:	b2c4      	uxtb	r4, r0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	7104      	strb	r4, [r0, #4]
 800148c:	440b      	add	r3, r1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	791a      	ldrb	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7a1b      	ldrb	r3, [r3, #8]
 800149a:	4013      	ands	r3, r2
 800149c:	b2da      	uxtb	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	711a      	strb	r2, [r3, #4]
    while(str[i]) {
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1e0      	bne.n	8001470 <PutStrOnTx+0x10>
    }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc90      	pop	{r4, r7}
 80014b8:	4770      	bx	lr

080014ba <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	1c59      	adds	r1, r3, #1
 80014d0:	b2c8      	uxtb	r0, r1
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7108      	strb	r0, [r1, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	791a      	ldrb	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7a1b      	ldrb	r3, [r3, #8]
 80014e4:	4013      	ands	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	711a      	strb	r2, [r3, #4]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <PutHeaderOnTx>:
    	TX->iw &= TX->maskSize;
    }
}

void PutHeaderOnTx(_Tx *TX, uint8_t cmd, uint8_t CantDatos)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	1c59      	adds	r1, r3, #1
 8001510:	b2c8      	uxtb	r0, r1
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	7108      	strb	r0, [r1, #4]
 8001516:	4413      	add	r3, r2
 8001518:	2255      	movs	r2, #85	; 0x55
 800151a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	791a      	ldrb	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7a1b      	ldrb	r3, [r3, #8]
 8001524:	4013      	ands	r3, r2
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	791b      	ldrb	r3, [r3, #4]
 8001534:	1c59      	adds	r1, r3, #1
 8001536:	b2c8      	uxtb	r0, r1
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	7108      	strb	r0, [r1, #4]
 800153c:	4413      	add	r3, r2
 800153e:	224e      	movs	r2, #78	; 0x4e
 8001540:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	791a      	ldrb	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7a1b      	ldrb	r3, [r3, #8]
 800154a:	4013      	ands	r3, r2
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	791b      	ldrb	r3, [r3, #4]
 800155a:	1c59      	adds	r1, r3, #1
 800155c:	b2c8      	uxtb	r0, r1
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	7108      	strb	r0, [r1, #4]
 8001562:	4413      	add	r3, r2
 8001564:	2245      	movs	r2, #69	; 0x45
 8001566:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791a      	ldrb	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7a1b      	ldrb	r3, [r3, #8]
 8001570:	4013      	ands	r3, r2
 8001572:	b2da      	uxtb	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	1c59      	adds	r1, r3, #1
 8001582:	b2c8      	uxtb	r0, r1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	7108      	strb	r0, [r1, #4]
 8001588:	4413      	add	r3, r2
 800158a:	2252      	movs	r2, #82	; 0x52
 800158c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	791a      	ldrb	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7a1b      	ldrb	r3, [r3, #8]
 8001596:	4013      	ands	r3, r2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	711a      	strb	r2, [r3, #4]
    //lcmd cantidad de datos: id+payload+cks
    TX->length = CantDatos;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	78ba      	ldrb	r2, [r7, #2]
 80015a2:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = CantDatos + 1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	1c59      	adds	r1, r3, #1
 80015ae:	b2c8      	uxtb	r0, r1
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	7108      	strb	r0, [r1, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	78ba      	ldrb	r2, [r7, #2]
 80015b8:	3201      	adds	r2, #1
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	791a      	ldrb	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7a1b      	ldrb	r3, [r3, #8]
 80015c6:	4013      	ands	r3, r2
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	791b      	ldrb	r3, [r3, #4]
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	b2c8      	uxtb	r0, r1
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	7108      	strb	r0, [r1, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	223a      	movs	r2, #58	; 0x3a
 80015e2:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	791a      	ldrb	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7a1b      	ldrb	r3, [r3, #8]
 80015ec:	4013      	ands	r3, r2
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = cmd;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	1c59      	adds	r1, r3, #1
 80015fe:	b2c8      	uxtb	r0, r1
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	7108      	strb	r0, [r1, #4]
 8001604:	4413      	add	r3, r2
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	791a      	ldrb	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7a1b      	ldrb	r3, [r3, #8]
 8001612:	4013      	ands	r3, r2
 8001614:	b2da      	uxtb	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	711a      	strb	r2, [r3, #4]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <PutcksOnTx>:

void PutcksOnTx(_Tx *TX)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	799b      	ldrb	r3, [r3, #6]
 8001634:	3306      	adds	r3, #6
 8001636:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	791a      	ldrb	r2, [r3, #4]
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a1a      	ldrb	r2, [r3, #8]
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	4013      	ands	r3, r2
 800164a:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 800164c:	e00e      	b.n	800166c <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	1c59      	adds	r1, r3, #1
 8001656:	73b9      	strb	r1, [r7, #14]
 8001658:	4413      	add	r3, r2
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4053      	eors	r3, r2
 8001660:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7a1a      	ldrb	r2, [r3, #8]
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	4013      	ands	r3, r2
 800166a:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	7bba      	ldrb	r2, [r7, #14]
 8001672:	429a      	cmp	r2, r3
 8001674:	d1eb      	bne.n	800164e <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	1c59      	adds	r1, r3, #1
 8001680:	b2c8      	uxtb	r0, r1
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	7108      	strb	r0, [r1, #4]
 8001686:	4413      	add	r3, r2
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	791a      	ldrb	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7a1b      	ldrb	r3, [r3, #8]
 8001694:	4013      	ands	r3, r2
 8001696:	b2da      	uxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	711a      	strb	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f000 ff8c 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 fa86 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 fce0 	bl	8002078 <MX_GPIO_Init>
  MX_TIM4_Init();
 80016b8:	f000 fbfe 	bl	8001eb8 <MX_TIM4_Init>
  MX_I2C2_Init();
 80016bc:	f000 fb80 	bl	8001dc0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80016c0:	f000 fc92 	bl	8001fe8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80016c4:	f000 fcba 	bl	800203c <MX_DMA_Init>
  MX_ADC1_Init();
 80016c8:	f000 fad8 	bl	8001c7c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80016cc:	f009 fe34 	bl	800b338 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80016d0:	f000 fba4 	bl	8001e1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 80016d4:	48a9      	ldr	r0, [pc, #676]	; (800197c <main+0x2d4>)
 80016d6:	f009 ff1f 	bl	800b518 <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 80016da:	48a9      	ldr	r0, [pc, #676]	; (8001980 <main+0x2d8>)
 80016dc:	f004 fc3a 	bl	8005f54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80016e0:	48a8      	ldr	r0, [pc, #672]	; (8001984 <main+0x2dc>)
 80016e2:	f004 fc37 	bl	8005f54 <HAL_TIM_Base_Start_IT>
  //Enable ESP8266
  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);	//Enable ESP8266
 80016e6:	2201      	movs	r2, #1
 80016e8:	2120      	movs	r1, #32
 80016ea:	48a7      	ldr	r0, [pc, #668]	; (8001988 <main+0x2e0>)
 80016ec:	f002 f8d7 	bl	800389e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);	//Reset ESP8266
 80016f0:	2201      	movs	r2, #1
 80016f2:	2110      	movs	r1, #16
 80016f4:	48a4      	ldr	r0, [pc, #656]	; (8001988 <main+0x2e0>)
 80016f6:	f002 f8d2 	bl	800389e <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016fa:	2100      	movs	r1, #0
 80016fc:	48a0      	ldr	r0, [pc, #640]	; (8001980 <main+0x2d8>)
 80016fe:	f004 fcd3 	bl	80060a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001702:	2104      	movs	r1, #4
 8001704:	489e      	ldr	r0, [pc, #632]	; (8001980 <main+0x2d8>)
 8001706:	f004 fccf 	bl	80060a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800170a:	2108      	movs	r1, #8
 800170c:	489c      	ldr	r0, [pc, #624]	; (8001980 <main+0x2d8>)
 800170e:	f004 fccb 	bl	80060a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001712:	210c      	movs	r1, #12
 8001714:	489a      	ldr	r0, [pc, #616]	; (8001980 <main+0x2d8>)
 8001716:	f004 fcc7 	bl	80060a8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800171a:	4b99      	ldr	r3, [pc, #612]	; (8001980 <main+0x2d8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001722:	4b97      	ldr	r3, [pc, #604]	; (8001980 <main+0x2d8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800172a:	4b95      	ldr	r3, [pc, #596]	; (8001980 <main+0x2d8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001732:	4b93      	ldr	r3, [pc, #588]	; (8001980 <main+0x2d8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
/***********************************************************************************/
/************************** Inicializacion de contadores ***************************/
/***********************************************************************************/
  Count100ms = 100;
 800173a:	4b94      	ldr	r3, [pc, #592]	; (800198c <main+0x2e4>)
 800173c:	2264      	movs	r2, #100	; 0x64
 800173e:	801a      	strh	r2, [r3, #0]
  Count200ms = 0;
 8001740:	4b93      	ldr	r3, [pc, #588]	; (8001990 <main+0x2e8>)
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]
  Count3000ms = 0;
 8001746:	4b93      	ldr	r3, [pc, #588]	; (8001994 <main+0x2ec>)
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
  Count500ms = 5;
 800174c:	4b92      	ldr	r3, [pc, #584]	; (8001998 <main+0x2f0>)
 800174e:	2205      	movs	r2, #5
 8001750:	801a      	strh	r2, [r3, #0]
  DecodeTimeOut = 60;
 8001752:	4b92      	ldr	r3, [pc, #584]	; (800199c <main+0x2f4>)
 8001754:	223c      	movs	r2, #60	; 0x3c
 8001756:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/*************************** Inicializacion de variables USB ***********************/
/***********************************************************************************/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 8001758:	4b91      	ldr	r3, [pc, #580]	; (80019a0 <main+0x2f8>)
 800175a:	4a92      	ldr	r2, [pc, #584]	; (80019a4 <main+0x2fc>)
 800175c:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 800175e:	4b90      	ldr	r3, [pc, #576]	; (80019a0 <main+0x2f8>)
 8001760:	2200      	movs	r2, #0
 8001762:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 8001764:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <main+0x2f8>)
 8001766:	2200      	movs	r2, #0
 8001768:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 800176a:	4b8d      	ldr	r3, [pc, #564]	; (80019a0 <main+0x2f8>)
 800176c:	2200      	movs	r2, #0
 800176e:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 255;
 8001770:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <main+0x2f8>)
 8001772:	22ff      	movs	r2, #255	; 0xff
 8001774:	739a      	strb	r2, [r3, #14]
  RXUSB.ISCMD = 0;
 8001776:	4b8a      	ldr	r3, [pc, #552]	; (80019a0 <main+0x2f8>)
 8001778:	2200      	movs	r2, #0
 800177a:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 800177c:	4b8a      	ldr	r3, [pc, #552]	; (80019a8 <main+0x300>)
 800177e:	4a8b      	ldr	r2, [pc, #556]	; (80019ac <main+0x304>)
 8001780:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 8001782:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <main+0x300>)
 8001784:	2200      	movs	r2, #0
 8001786:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 8001788:	4b87      	ldr	r3, [pc, #540]	; (80019a8 <main+0x300>)
 800178a:	2200      	movs	r2, #0
 800178c:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 255;
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <main+0x300>)
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	721a      	strb	r2, [r3, #8]
  TXUSB.maskBuf = 255;
 8001794:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <main+0x300>)
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	725a      	strb	r2, [r3, #9]
/***********************************************************************************/

/***********************************************************************************/
/********************** Inicialización de  ESP8266 ************************/
/***********************************************************************************/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <main+0x308>)
 800179c:	4a85      	ldr	r2, [pc, #532]	; (80019b4 <main+0x30c>)
 800179e:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 80017a0:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <main+0x308>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <main+0x308>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <main+0x308>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 255;
 80017b2:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <main+0x308>)
 80017b4:	22ff      	movs	r2, #255	; 0xff
 80017b6:	739a      	strb	r2, [r3, #14]
  RXUSART1.ISCMD = 0;
 80017b8:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <main+0x308>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	719a      	strb	r2, [r3, #6]

  TXUSART1.Buff = txUSART1Buff;
 80017be:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <main+0x310>)
 80017c0:	4a7e      	ldr	r2, [pc, #504]	; (80019bc <main+0x314>)
 80017c2:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 80017c4:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <main+0x310>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <main+0x310>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 255;
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <main+0x310>)
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	721a      	strb	r2, [r3, #8]
  TXUSART1.maskBuf = 255;
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <main+0x310>)
 80017d8:	22ff      	movs	r2, #255	; 0xff
 80017da:	725a      	strb	r2, [r3, #9]

  /*Bits de control*/
  DecodeIPD = 0;
 80017dc:	4a78      	ldr	r2, [pc, #480]	; (80019c0 <main+0x318>)
 80017de:	7813      	ldrb	r3, [r2, #0]
 80017e0:	f36f 1386 	bfc	r3, #6, #1
 80017e4:	7013      	strb	r3, [r2, #0]
  DecodeCIPSEND = 0;
 80017e6:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <main+0x31c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
  DecodeHeaderESP = 0;
 80017ec:	4a74      	ldr	r2, [pc, #464]	; (80019c0 <main+0x318>)
 80017ee:	7813      	ldrb	r3, [r2, #0]
 80017f0:	f36f 03c3 	bfc	r3, #3, #1
 80017f4:	7013      	strb	r3, [r2, #0]
  ESPReadyToRecyb = 0;
 80017f6:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <main+0x318>)
 80017f8:	7813      	ldrb	r3, [r2, #0]
 80017fa:	f36f 1345 	bfc	r3, #5, #1
 80017fe:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND0xF0 = 0;
 8001800:	4a6f      	ldr	r2, [pc, #444]	; (80019c0 <main+0x318>)
 8001802:	7813      	ldrb	r3, [r2, #0]
 8001804:	f36f 13c7 	bfc	r3, #7, #1
 8001808:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND0xA0 = 0;
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <main+0x320>)
 800180c:	7813      	ldrb	r3, [r2, #0]
 800180e:	f36f 0382 	bfc	r3, #2, #1
 8001812:	7013      	strb	r3, [r2, #0]
  ResetESP = 1;
 8001814:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <main+0x320>)
 8001816:	7813      	ldrb	r3, [r2, #0]
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	7013      	strb	r3, [r2, #0]
  Estado = 0;
 800181e:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <main+0x324>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
  Indice = 0;
 8001824:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <main+0x328>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
  SentDataESP = 0;
 800182a:	4a67      	ldr	r2, [pc, #412]	; (80019c8 <main+0x320>)
 800182c:	7813      	ldrb	r3, [r2, #0]
 800182e:	f36f 0341 	bfc	r3, #1, #1
 8001832:	7013      	strb	r3, [r2, #0]
  RespMotor = 0;
 8001834:	4a64      	ldr	r2, [pc, #400]	; (80019c8 <main+0x320>)
 8001836:	7813      	ldrb	r3, [r2, #0]
 8001838:	f36f 03c3 	bfc	r3, #3, #1
 800183c:	7013      	strb	r3, [r2, #0]
  SendAlive = 1;
 800183e:	4a62      	ldr	r2, [pc, #392]	; (80019c8 <main+0x320>)
 8001840:	7813      	ldrb	r3, [r2, #0]
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	7013      	strb	r3, [r2, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************ Inicializacion de variables ADC **************************/
/***********************************************************************************/
  iAdc = 0;
 8001848:	4b62      	ldr	r3, [pc, #392]	; (80019d4 <main+0x32c>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
  FirtScan=1;
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <main+0x330>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]


/***********************************************************************************/
/***************** Inicializacion de variables error cuadratico ********************/
/***********************************************************************************/
  posMINCenter = 0;
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <main+0x334>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
  posMINDerecha = 0;
 800185a:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <main+0x338>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
  posMINIzquierda = 0;
 8001860:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <main+0x33c>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
  sensorValue = 0;
 8001866:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <main+0x340>)
 8001868:	2200      	movs	r2, #0
 800186a:	801a      	strh	r2, [r3, #0]
  error = 0;
 800186c:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <main+0x344>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************* Inicialización de variables PID *************************/
/***********************************************************************************/
  Kp = 0;
 8001872:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <main+0x348>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
  Ki = 0;
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <main+0x34c>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
  Kd = 0;
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <main+0x350>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
  Proporcional = 0;
 8001884:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <main+0x354>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
  Integral = 0;
 800188a:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <main+0x358>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
  Derivativo = 0;
 8001890:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <main+0x35c>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED de estado - Parpadea cada 100ms
	  if(On100ms){
 8001896:	4b5c      	ldr	r3, [pc, #368]	; (8001a08 <main+0x360>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d034      	beq.n	800190a <main+0x262>
		  On100ms = 0;
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <main+0x360>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 80018a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018aa:	4858      	ldr	r0, [pc, #352]	; (8001a0c <main+0x364>)
 80018ac:	f002 f80f 	bl	80038ce <HAL_GPIO_TogglePin>

		  if(espConnected && (!DecodeHeaderESP)){
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <main+0x318>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <main+0x24a>
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <main+0x318>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d112      	bne.n	80018f2 <main+0x24a>
			  if(Count200ms > 0){
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <main+0x2e8>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <main+0x23c>
				  Count200ms--;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <main+0x2e8>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <main+0x2e8>)
 80018e2:	801a      	strh	r2, [r3, #0]
			  }
			  if(!Count200ms){
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <main+0x2e8>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <main+0x24a>
				  SendUDPData();
 80018ee:	f7ff fd1f 	bl	8001330 <SendUDPData>
//				  }
//			  }
		  }

		  //Utilizado como delay para no capturar basura de la ESP8266 al iniciarla
		  if(DecodeTimeOut > 0){
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <main+0x2f4>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <main+0x262>
			  DecodeTimeOut--;
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <main+0x2f4>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <main+0x2f4>)
 8001908:	801a      	strh	r2, [r3, #0]
		  }
	  }


	  //Recepcion por USB - Decodifica header
	  if(RXUSB.iw != RXUSB.ir) {
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <main+0x2f8>)
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <main+0x2f8>)
 8001912:	795b      	ldrb	r3, [r3, #5]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	429a      	cmp	r2, r3
 8001918:	d002      	beq.n	8001920 <main+0x278>
		  DecodeHeader((_Rx *)&RXUSB);
 800191a:	4821      	ldr	r0, [pc, #132]	; (80019a0 <main+0x2f8>)
 800191c:	f7ff faf6 	bl	8000f0c <DecodeHeader>
	  }
	  //Recepcion por USB - Decodifica comando
	  if(RXUSB.ISCMD) {
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <main+0x2f8>)
 8001922:	799b      	ldrb	r3, [r3, #6]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <main+0x28a>
		  DecodeCmd((_Rx *)&RXUSB, (_Tx *)&TXUSB);
 800192a:	491f      	ldr	r1, [pc, #124]	; (80019a8 <main+0x300>)
 800192c:	481c      	ldr	r0, [pc, #112]	; (80019a0 <main+0x2f8>)
 800192e:	f7ff fbf1 	bl	8001114 <DecodeCmd>
	  }
	  //Transmision por USB
	  if(TXUSB.iw != TXUSB.ir) {
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <main+0x300>)
 8001934:	791a      	ldrb	r2, [r3, #4]
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <main+0x300>)
 8001938:	795b      	ldrb	r3, [r3, #5]
 800193a:	429a      	cmp	r2, r3
 800193c:	f000 808d 	beq.w	8001a5a <main+0x3b2>
		  if(TXUSB.iw > TXUSB.ir){
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <main+0x300>)
 8001942:	791a      	ldrb	r2, [r3, #4]
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <main+0x300>)
 8001946:	795b      	ldrb	r3, [r3, #5]
 8001948:	429a      	cmp	r2, r3
 800194a:	d961      	bls.n	8001a10 <main+0x368>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <main+0x300>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <main+0x300>)
 8001952:	7952      	ldrb	r2, [r2, #5]
 8001954:	1898      	adds	r0, r3, r2
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <main+0x300>)
 8001958:	791b      	ldrb	r3, [r3, #4]
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <main+0x300>)
 800195e:	795b      	ldrb	r3, [r3, #5]
 8001960:	b29b      	uxth	r3, r3
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	f009 fdb0 	bl	800b4cc <CDC_Transmit_FS>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d16b      	bne.n	8001a4a <main+0x3a2>
				  TXUSB.ir=TXUSB.iw;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <main+0x300>)
 8001974:	791a      	ldrb	r2, [r3, #4]
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <main+0x300>)
 8001978:	715a      	strb	r2, [r3, #5]
 800197a:	e066      	b.n	8001a4a <main+0x3a2>
 800197c:	08000e55 	.word	0x08000e55
 8001980:	200004cc 	.word	0x200004cc
 8001984:	200006e8 	.word	0x200006e8
 8001988:	40010c00 	.word	0x40010c00
 800198c:	20000b10 	.word	0x20000b10
 8001990:	20000b02 	.word	0x20000b02
 8001994:	200004c6 	.word	0x200004c6
 8001998:	200006d4 	.word	0x200006d4
 800199c:	2000052c 	.word	0x2000052c
 80019a0:	20000c2c 	.word	0x20000c2c
 80019a4:	200005b0 	.word	0x200005b0
 80019a8:	200006d8 	.word	0x200006d8
 80019ac:	2000076c 	.word	0x2000076c
 80019b0:	20000518 	.word	0x20000518
 80019b4:	2000019c 	.word	0x2000019c
 80019b8:	20000c40 	.word	0x20000c40
 80019bc:	20000b14 	.word	0x20000b14
 80019c0:	200008b0 	.word	0x200008b0
 80019c4:	20000584 	.word	0x20000584
 80019c8:	20000730 	.word	0x20000730
 80019cc:	20000764 	.word	0x20000764
 80019d0:	200008b1 	.word	0x200008b1
 80019d4:	20000731 	.word	0x20000731
 80019d8:	20000198 	.word	0x20000198
 80019dc:	20000732 	.word	0x20000732
 80019e0:	200006e4 	.word	0x200006e4
 80019e4:	20000c6c 	.word	0x20000c6c
 80019e8:	20000c18 	.word	0x20000c18
 80019ec:	20000b0c 	.word	0x20000b0c
 80019f0:	20000c23 	.word	0x20000c23
 80019f4:	20000514 	.word	0x20000514
 80019f8:	20000b04 	.word	0x20000b04
 80019fc:	20000c24 	.word	0x20000c24
 8001a00:	20000c1c 	.word	0x20000c1c
 8001a04:	20000588 	.word	0x20000588
 8001a08:	20000586 	.word	0x20000586
 8001a0c:	40011000 	.word	0x40011000
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <main+0x4ec>)
 8001a12:	7a5b      	ldrb	r3, [r3, #9]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <main+0x4ec>)
 8001a18:	795b      	ldrb	r3, [r3, #5]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <main+0x4f0>)
 8001a26:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <main+0x4ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a59      	ldr	r2, [pc, #356]	; (8001b94 <main+0x4ec>)
 8001a2e:	7952      	ldrb	r2, [r2, #5]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <main+0x4f0>)
 8001a34:	8812      	ldrh	r2, [r2, #0]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f009 fd47 	bl	800b4cc <CDC_Transmit_FS>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <main+0x3a2>
				  TXUSB.ir = 0;
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <main+0x4ec>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 8001a4a:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <main+0x4ec>)
 8001a4c:	795a      	ldrb	r2, [r3, #5]
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <main+0x4ec>)
 8001a50:	7a1b      	ldrb	r3, [r3, #8]
 8001a52:	4013      	ands	r3, r2
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <main+0x4ec>)
 8001a58:	715a      	strb	r2, [r3, #5]
	  }

	  //Primera inicializacion de ESP8266 y Reset
	  if((!DecodeTimeOut) && (ResetESP) && (!ESPReadyToRecyb)){
 8001a5a:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <main+0x4f4>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d11a      	bne.n	8001a9a <main+0x3f2>
 8001a64:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <main+0x4f8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <main+0x3f2>
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <main+0x4fc>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10c      	bne.n	8001a9a <main+0x3f2>
		  InitEsp((_Rx *)&RXUSART1);
 8001a80:	4849      	ldr	r0, [pc, #292]	; (8001ba8 <main+0x500>)
 8001a82:	f7fe fd3f 	bl	8000504 <InitEsp>
		  //Interrupcion para recibir datos desde ESP8266
		  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 8001a86:	2201      	movs	r2, #1
 8001a88:	4948      	ldr	r1, [pc, #288]	; (8001bac <main+0x504>)
 8001a8a:	4849      	ldr	r0, [pc, #292]	; (8001bb0 <main+0x508>)
 8001a8c:	f005 f9bd 	bl	8006e0a <HAL_UART_Receive_IT>
		  ResetESP = 0;
 8001a90:	4a43      	ldr	r2, [pc, #268]	; (8001ba0 <main+0x4f8>)
 8001a92:	7813      	ldrb	r3, [r2, #0]
 8001a94:	f36f 0300 	bfc	r3, #0, #1
 8001a98:	7013      	strb	r3, [r2, #0]
	  }

	  //Continua con los casos para iniciar
	  if((!espConnected) && (!ESPReadyToRecyb) && (!ResetESP) && (!DecodeTimeOut)){
 8001a9a:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <main+0x4fc>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d115      	bne.n	8001ad4 <main+0x42c>
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <main+0x4fc>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10e      	bne.n	8001ad4 <main+0x42c>
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <main+0x4f8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <main+0x42c>
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <main+0x4f4>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <main+0x42c>
		  InitEsp((_Rx *)&RXUSART1);
 8001ace:	4836      	ldr	r0, [pc, #216]	; (8001ba8 <main+0x500>)
 8001ad0:	f7fe fd18 	bl	8000504 <InitEsp>
	  }

	  //Recepcion por ESP8266 - Decodifica comandos provenientes de ESP8266
	  if(RXUSART1.iw != RXUSART1.ir){
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <main+0x500>)
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <main+0x500>)
 8001adc:	795b      	ldrb	r3, [r3, #5]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d002      	beq.n	8001aea <main+0x442>
		  DecodeESP((_Rx *)&RXUSART1);
 8001ae4:	4830      	ldr	r0, [pc, #192]	; (8001ba8 <main+0x500>)
 8001ae6:	f7fe fded 	bl	80006c4 <DecodeESP>
	  }
	  //Si la decodificacion resulta de un dato proveniente de PC, se decodifica header
	  if(DecodeHeaderESP){
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <main+0x4fc>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <main+0x456>
		  DecodeHeader((_Rx *)&RXUSART1);
 8001af8:	482b      	ldr	r0, [pc, #172]	; (8001ba8 <main+0x500>)
 8001afa:	f7ff fa07 	bl	8000f0c <DecodeHeader>

	  }
	  //Recepcion por ESP8266 - Decodifica comando
	  if(RXUSART1.ISCMD) {
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <main+0x500>)
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <main+0x468>
		  DecodeCmd((_Rx *)&RXUSART1, (_Tx *)&TXUSART1);
 8001b08:	492a      	ldr	r1, [pc, #168]	; (8001bb4 <main+0x50c>)
 8001b0a:	4827      	ldr	r0, [pc, #156]	; (8001ba8 <main+0x500>)
 8001b0c:	f7ff fb02 	bl	8001114 <DecodeCmd>
	  }

	  //Transmision por ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <main+0x50c>)
 8001b12:	791a      	ldrb	r2, [r3, #4]
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <main+0x50c>)
 8001b16:	795b      	ldrb	r3, [r3, #5]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d012      	beq.n	8001b42 <main+0x49a>
		  if((huart1.Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE){
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <main+0x508>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d10b      	bne.n	8001b42 <main+0x49a>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <main+0x50c>)
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	b2d1      	uxtb	r1, r2
 8001b32:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <main+0x50c>)
 8001b34:	7151      	strb	r1, [r2, #5]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <main+0x510>)
 8001b3a:	5c9a      	ldrb	r2, [r3, r2]
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <main+0x508>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
		  }
	  }

	  //Reset ESPE8266
	  if((HAL_GPIO_ReadPin(GPIOB, RESET_ESP_Pin) == GPIO_PIN_RESET) && (!DecodeTimeOut) && (ResetESP) && (ESPReadyToRecyb)){
 8001b42:	2110      	movs	r1, #16
 8001b44:	481d      	ldr	r0, [pc, #116]	; (8001bbc <main+0x514>)
 8001b46:	f001 fe93 	bl	8003870 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f aea2 	bne.w	8001896 <main+0x1ee>
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <main+0x4f4>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f47f ae9c 	bne.w	8001896 <main+0x1ee>
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <main+0x4f8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f43f ae94 	beq.w	8001896 <main+0x1ee>
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <main+0x4fc>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f43f ae8c 	beq.w	8001896 <main+0x1ee>
		  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2110      	movs	r1, #16
 8001b82:	480e      	ldr	r0, [pc, #56]	; (8001bbc <main+0x514>)
 8001b84:	f001 fe8b 	bl	800389e <HAL_GPIO_WritePin>
		  ResetESP = 1;
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <main+0x4f8>)
 8001b8a:	7813      	ldrb	r3, [r2, #0]
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	7013      	strb	r3, [r2, #0]
	  if(On100ms){
 8001b92:	e680      	b.n	8001896 <main+0x1ee>
 8001b94:	200006d8 	.word	0x200006d8
 8001b98:	2000058c 	.word	0x2000058c
 8001b9c:	2000052c 	.word	0x2000052c
 8001ba0:	20000730 	.word	0x20000730
 8001ba4:	200008b0 	.word	0x200008b0
 8001ba8:	20000518 	.word	0x20000518
 8001bac:	2000019c 	.word	0x2000019c
 8001bb0:	2000086c 	.word	0x2000086c
 8001bb4:	20000c40 	.word	0x20000c40
 8001bb8:	20000b14 	.word	0x20000b14
 8001bbc:	40010c00 	.word	0x40010c00

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b094      	sub	sp, #80	; 0x50
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bca:	2228      	movs	r2, #40	; 0x28
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00a f88c 	bl	800bcec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c02:	2302      	movs	r3, #2
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fc7c 	bl	8005514 <HAL_RCC_OscConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c22:	f000 faa1 	bl	8002168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2102      	movs	r1, #2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fee6 	bl	8005a14 <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c4e:	f000 fa8b 	bl	8002168 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001c52:	2312      	movs	r3, #18
 8001c54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f870 	bl	8005d48 <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001c6e:	f000 fa7b 	bl	8002168 <Error_Handler>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3750      	adds	r7, #80	; 0x50
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <MX_ADC1_Init+0x140>)
 8001c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c92:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ca0:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001ca8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cba:	483f      	ldr	r0, [pc, #252]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001cbc:	f000 fce6 	bl	800268c <HAL_ADC_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001cc6:	f000 fa4f 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4837      	ldr	r0, [pc, #220]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001cdc:	f000 fe9e 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f000 fa3f 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4830      	ldr	r0, [pc, #192]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001cf8:	f000 fe90 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d02:	f000 fa31 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4829      	ldr	r0, [pc, #164]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001d14:	f000 fe82 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d1e:	f000 fa23 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d22:	2303      	movs	r3, #3
 8001d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d26:	2304      	movs	r3, #4
 8001d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4822      	ldr	r0, [pc, #136]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001d30:	f000 fe74 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d3a:	f000 fa15 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d42:	2305      	movs	r3, #5
 8001d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001d4c:	f000 fe66 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001d56:	f000 fa07 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4814      	ldr	r0, [pc, #80]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001d68:	f000 fe58 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001d72:	f000 f9f9 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d76:	2306      	movs	r3, #6
 8001d78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001d84:	f000 fe4a 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001d8e:	f000 f9eb 	bl	8002168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d92:	2307      	movs	r3, #7
 8001d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d96:	2308      	movs	r3, #8
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <MX_ADC1_Init+0x13c>)
 8001da0:	f000 fe3c 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001daa:	f000 f9dd 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000734 	.word	0x20000734
 8001dbc:	40012400 	.word	0x40012400

08001dc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <MX_I2C2_Init+0x54>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_I2C2_Init+0x58>)
 8001dce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_I2C2_Init+0x50>)
 8001dfe:	f001 fd7f 	bl	8003900 <HAL_I2C_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e08:	f000 f9ae 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000530 	.word	0x20000530
 8001e14:	40005800 	.word	0x40005800
 8001e18:	000186a0 	.word	0x000186a0

08001e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	463b      	mov	r3, r7
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e4c:	f244 6250 	movw	r2, #18000	; 0x4650
 8001e50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e5e:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e60:	f004 f828 	bl	8005eb4 <HAL_TIM_Base_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e6a:	f000 f97d 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e7c:	f004 fb7c 	bl	8006578 <HAL_TIM_ConfigClockSource>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e86:	f000 f96f 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_TIM3_Init+0x94>)
 8001e98:	f004 fefa 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ea2:	f000 f961 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200006e8 	.word	0x200006e8
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	; 0x38
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001eea:	4a3e      	ldr	r2, [pc, #248]	; (8001fe4 <MX_TIM4_Init+0x12c>)
 8001eec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001efc:	f242 3228 	movw	r2, #9000	; 0x2328
 8001f00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f0e:	4834      	ldr	r0, [pc, #208]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f10:	f003 ffd0 	bl	8005eb4 <HAL_TIM_Base_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f1a:	f000 f925 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	482d      	ldr	r0, [pc, #180]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f2c:	f004 fb24 	bl	8006578 <HAL_TIM_ConfigClockSource>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f36:	f000 f917 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f3a:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f3c:	f004 f85c 	bl	8005ff8 <HAL_TIM_PWM_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f46:	f000 f90f 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4619      	mov	r1, r3
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f5a:	f004 fe99 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f64:	f000 f900 	bl	8002168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4818      	ldr	r0, [pc, #96]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f80:	f004 fa3c 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f8a:	f000 f8ed 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2204      	movs	r2, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4812      	ldr	r0, [pc, #72]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001f96:	f004 fa31 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001fa0:	f000 f8e2 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001fac:	f004 fa26 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001fb6:	f000 f8d7 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001fc2:	f004 fa1b 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001fcc:	f000 f8cc 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fd0:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <MX_TIM4_Init+0x128>)
 8001fd2:	f000 f9eb 	bl	80023ac <HAL_TIM_MspPostInit>

}
 8001fd6:	bf00      	nop
 8001fd8:	3738      	adds	r7, #56	; 0x38
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200004cc 	.word	0x200004cc
 8001fe4:	40000800 	.word	0x40000800

08001fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <MX_USART1_UART_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002020:	f004 fea6 	bl	8006d70 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 f89d 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000086c 	.word	0x2000086c
 8002038:	40013800 	.word	0x40013800

0800203c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_DMA_Init+0x38>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <MX_DMA_Init+0x38>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6153      	str	r3, [r2, #20]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_DMA_Init+0x38>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	200b      	movs	r0, #11
 8002060:	f000 ffad 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002064:	200b      	movs	r0, #11
 8002066:	f000 ffc6 	bl	8002ff6 <HAL_NVIC_EnableIRQ>

}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <MX_GPIO_Init+0xe0>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a31      	ldr	r2, [pc, #196]	; (8002158 <MX_GPIO_Init+0xe0>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <MX_GPIO_Init+0xe0>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_GPIO_Init+0xe0>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f2:	481a      	ldr	r0, [pc, #104]	; (800215c <MX_GPIO_Init+0xe4>)
 80020f4:	f001 fbd3 	bl	800389e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin|ENABLE_ESP_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2130      	movs	r1, #48	; 0x30
 80020fc:	4818      	ldr	r0, [pc, #96]	; (8002160 <MX_GPIO_Init+0xe8>)
 80020fe:	f001 fbce 	bl	800389e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2302      	movs	r3, #2
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4619      	mov	r1, r3
 800211a:	4810      	ldr	r0, [pc, #64]	; (800215c <MX_GPIO_Init+0xe4>)
 800211c:	f001 fa24 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002120:	23ff      	movs	r3, #255	; 0xff
 8002122:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002124:	2303      	movs	r3, #3
 8002126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_GPIO_Init+0xec>)
 8002130:	f001 fa1a 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_ESP_Pin ENABLE_ESP_Pin */
  GPIO_InitStruct.Pin = RESET_ESP_Pin|ENABLE_ESP_Pin;
 8002134:	2330      	movs	r3, #48	; 0x30
 8002136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2302      	movs	r3, #2
 8002142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_GPIO_Init+0xe8>)
 800214c:	f001 fa0c 	bl	8003568 <HAL_GPIO_Init>

}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40011000 	.word	0x40011000
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40010800 	.word	0x40010800

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	e7fe      	b.n	8002170 <Error_Handler+0x8>
	...

08002174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_MspInit+0x5c>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_MspInit+0x5c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6193      	str	r3, [r2, #24]
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_MspInit+0x5c>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_MspInit+0x5c>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_MspInit+0x5c>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_MspInit+0x5c>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_MspInit+0x60>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_MspInit+0x60>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000

080021d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_ADC_MspInit+0xbc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d149      	bne.n	800228c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_ADC_MspInit+0xc0>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_ADC_MspInit+0xc0>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_ADC_MspInit+0xc0>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_ADC_MspInit+0xc0>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_ADC_MspInit+0xc0>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_ADC_MspInit+0xc0>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002228:	23ff      	movs	r3, #255	; 0xff
 800222a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222c:	2303      	movs	r3, #3
 800222e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4619      	mov	r1, r3
 8002236:	4819      	ldr	r0, [pc, #100]	; (800229c <HAL_ADC_MspInit+0xc4>)
 8002238:	f001 f996 	bl	8003568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_ADC_MspInit+0xcc>)
 8002240:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 800225e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002262:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 800226c:	2200      	movs	r2, #0
 800226e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002272:	f000 fedb 	bl	800302c <HAL_DMA_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800227c:	f7ff ff74 	bl	8002168 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002284:	621a      	str	r2, [r3, #32]
 8002286:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_ADC_MspInit+0xc8>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40012400 	.word	0x40012400
 8002298:	40021000 	.word	0x40021000
 800229c:	40010800 	.word	0x40010800
 80022a0:	200008bc 	.word	0x200008bc
 80022a4:	40020008 	.word	0x40020008

080022a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_I2C_MspInit+0x74>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d124      	bne.n	8002312 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_I2C_MspInit+0x78>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_I2C_MspInit+0x78>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_I2C_MspInit+0x78>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e6:	2312      	movs	r3, #18
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4619      	mov	r1, r3
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <HAL_I2C_MspInit+0x7c>)
 80022f6:	f001 f937 	bl	8003568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_I2C_MspInit+0x78>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_I2C_MspInit+0x78>)
 8002300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_I2C_MspInit+0x78>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40005800 	.word	0x40005800
 8002320:	40021000 	.word	0x40021000
 8002324:	40010c00 	.word	0x40010c00

08002328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_TIM_Base_MspInit+0x78>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d114      	bne.n	8002364 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	201d      	movs	r0, #29
 8002358:	f000 fe31 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800235c:	201d      	movs	r0, #29
 800235e:	f000 fe4a 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002362:	e018      	b.n	8002396 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d113      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201e      	movs	r0, #30
 800238c:	f000 fe17 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002390:	201e      	movs	r0, #30
 8002392:	f000 fe30 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40000800 	.word	0x40000800

080023ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_TIM_MspPostInit+0x5c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d118      	bne.n	80023fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_TIM_MspPostInit+0x60>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_TIM_MspPostInit+0x60>)
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_TIM_MspPostInit+0x60>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80023e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4619      	mov	r1, r3
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <HAL_TIM_MspPostInit+0x64>)
 80023fa:	f001 f8b5 	bl	8003568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40000800 	.word	0x40000800
 800240c:	40021000 	.word	0x40021000
 8002410:	40010c00 	.word	0x40010c00

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_UART_MspInit+0x9c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d139      	bne.n	80024a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 800243a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4619      	mov	r1, r3
 8002478:	480f      	ldr	r0, [pc, #60]	; (80024b8 <HAL_UART_MspInit+0xa4>)
 800247a:	f001 f875 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_UART_MspInit+0xa4>)
 8002494:	f001 f868 	bl	8003568 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2025      	movs	r0, #37	; 0x25
 800249e:	f000 fd8e 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024a2:	2025      	movs	r0, #37	; 0x25
 80024a4:	f000 fda7 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010800 	.word	0x40010800

080024bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <NMI_Handler+0x4>

080024c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <MemManage_Handler+0x4>

080024ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <UsageFault_Handler+0x4>

080024da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f000 f8a7 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <DMA1_Channel1_IRQHandler+0x10>)
 8002512:	f000 fef5 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200008bc 	.word	0x200008bc

08002520 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002526:	f001 fc60 	bl	8003dea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000153c 	.word	0x2000153c

08002534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM3_IRQHandler+0x10>)
 800253a:	f003 fe57 	bl	80061ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200006e8 	.word	0x200006e8

08002548 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <TIM4_IRQHandler+0x10>)
 800254e:	f003 fe4d 	bl	80061ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200004cc 	.word	0x200004cc

0800255c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <USART1_IRQHandler+0x10>)
 8002562:	f004 fced 	bl	8006f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000086c 	.word	0x2000086c

08002570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800257e:	490d      	ldr	r1, [pc, #52]	; (80025b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002594:	4c0a      	ldr	r4, [pc, #40]	; (80025c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025a2:	f7ff ffe5 	bl	8002570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f009 fb7d 	bl	800bca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025aa:	f7ff f87d 	bl	80016a8 <main>
  bx lr
 80025ae:	4770      	bx	lr
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80025b8:	0800bf0c 	.word	0x0800bf0c
  ldr r2, =_sbss
 80025bc:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80025c0:	20001828 	.word	0x20001828

080025c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC1_2_IRQHandler>
	...

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_Init+0x28>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_Init+0x28>)
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d8:	2003      	movs	r0, #3
 80025da:	f000 fce5 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025de:	200f      	movs	r0, #15
 80025e0:	f000 f808 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e4:	f7ff fdc6 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40022000 	.word	0x40022000

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x54>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x58>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fcfd 	bl	8003012 <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00e      	b.n	8002640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d80a      	bhi.n	800263e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f000 fcc5 	bl	8002fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <HAL_InitTick+0x5c>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000000 	.word	0x20000000
 800264c:	20000008 	.word	0x20000008
 8002650:	20000004 	.word	0x20000004

08002654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_IncTick+0x1c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_IncTick+0x20>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a03      	ldr	r2, [pc, #12]	; (8002674 <HAL_IncTick+0x20>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000008 	.word	0x20000008
 8002674:	20000c74 	.word	0x20000c74

08002678 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <HAL_GetTick+0x10>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	20000c74 	.word	0x20000c74

0800268c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0be      	b.n	800282c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fd84 	bl	80021d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 faf5 	bl	8002cc0 <ADC_ConversionStop_Disable>
 80026d6:	4603      	mov	r3, r0
 80026d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 8099 	bne.w	800281a <HAL_ADC_Init+0x18e>
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8095 	bne.w	800281a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026f8:	f023 0302 	bic.w	r3, r3, #2
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800270c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7b1b      	ldrb	r3, [r3, #12]
 8002712:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002714:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4313      	orrs	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002724:	d003      	beq.n	800272e <HAL_ADC_Init+0xa2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_ADC_Init+0xa8>
 800272e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002732:	e000      	b.n	8002736 <HAL_ADC_Init+0xaa>
 8002734:	2300      	movs	r3, #0
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7d1b      	ldrb	r3, [r3, #20]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d119      	bne.n	8002778 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7b1b      	ldrb	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	3b01      	subs	r3, #1
 8002752:	035a      	lsls	r2, r3, #13
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e00b      	b.n	8002778 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_ADC_Init+0x1a8>)
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	430b      	orrs	r3, r1
 800279e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a8:	d003      	beq.n	80027b2 <HAL_ADC_Init+0x126>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d104      	bne.n	80027bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	051b      	lsls	r3, r3, #20
 80027ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_ADC_Init+0x1ac>)
 80027d8:	4013      	ands	r3, r2
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10b      	bne.n	80027f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027f6:	e018      	b.n	800282a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	f023 0312 	bic.w	r3, r3, #18
 8002800:	f043 0210 	orr.w	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002818:	e007      	b.n	800282a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	ffe1f7fd 	.word	0xffe1f7fd
 8002838:	ff1f0efe 	.word	0xff1f0efe

0800283c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a64      	ldr	r2, [pc, #400]	; (80029e4 <HAL_ADC_Start_DMA+0x1a8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_ADC_Start_DMA+0x24>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a63      	ldr	r2, [pc, #396]	; (80029e8 <HAL_ADC_Start_DMA+0x1ac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d106      	bne.n	800286e <HAL_ADC_Start_DMA+0x32>
 8002860:	4b60      	ldr	r3, [pc, #384]	; (80029e4 <HAL_ADC_Start_DMA+0x1a8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 80b3 	bne.w	80029d4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_ADC_Start_DMA+0x40>
 8002878:	2302      	movs	r3, #2
 800287a:	e0ae      	b.n	80029da <HAL_ADC_Start_DMA+0x19e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f9c1 	bl	8002c0c <ADC_Enable>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 809a 	bne.w	80029ca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a4e      	ldr	r2, [pc, #312]	; (80029e8 <HAL_ADC_Start_DMA+0x1ac>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_Start_DMA+0x84>
 80028b4:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <HAL_ADC_Start_DMA+0x1a8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d115      	bne.n	80028ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d026      	beq.n	8002928 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028ea:	e01d      	b.n	8002928 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <HAL_ADC_Start_DMA+0x1a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_ADC_Start_DMA+0xd0>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a38      	ldr	r2, [pc, #224]	; (80029e8 <HAL_ADC_Start_DMA+0x1ac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d10d      	bne.n	8002928 <HAL_ADC_Start_DMA+0xec>
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_ADC_Start_DMA+0x1a8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002920:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f023 0206 	bic.w	r2, r3, #6
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002940:	e002      	b.n	8002948 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_ADC_Start_DMA+0x1b0>)
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <HAL_ADC_Start_DMA+0x1b4>)
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <HAL_ADC_Start_DMA+0x1b8>)
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0202 	mvn.w	r2, #2
 8002970:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002980:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a18      	ldr	r0, [r3, #32]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	334c      	adds	r3, #76	; 0x4c
 800298c:	4619      	mov	r1, r3
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f000 fba5 	bl	80030e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029a4:	d108      	bne.n	80029b8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029b4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029b6:	e00f      	b.n	80029d8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029c6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029c8:	e006      	b.n	80029d8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80029d2:	e001      	b.n	80029d8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40012400 	.word	0x40012400
 80029e8:	40012800 	.word	0x40012800
 80029ec:	08002d43 	.word	0x08002d43
 80029f0:	08002dbf 	.word	0x08002dbf
 80029f4:	08002ddb 	.word	0x08002ddb

080029f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x20>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0dc      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1da>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d81c      	bhi.n	8002a86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b05      	subs	r3, #5
 8002a5e:	221f      	movs	r2, #31
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4019      	ands	r1, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b05      	subs	r3, #5
 8002a78:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
 8002a84:	e03c      	b.n	8002b00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d81c      	bhi.n	8002ac8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b23      	subs	r3, #35	; 0x23
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4019      	ands	r1, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b23      	subs	r3, #35	; 0x23
 8002aba:	fa00 f203 	lsl.w	r2, r0, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac6:	e01b      	b.n	8002b00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b41      	subs	r3, #65	; 0x41
 8002ada:	221f      	movs	r2, #31
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4019      	ands	r1, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	3b41      	subs	r3, #65	; 0x41
 8002af4:	fa00 f203 	lsl.w	r2, r0, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d91c      	bls.n	8002b42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4019      	ands	r1, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6898      	ldr	r0, [r3, #8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	3b1e      	subs	r3, #30
 8002b34:	fa00 f203 	lsl.w	r2, r0, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	e019      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6919      	ldr	r1, [r3, #16]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	2207      	movs	r2, #7
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4019      	ands	r1, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6898      	ldr	r0, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d003      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b82:	2b11      	cmp	r3, #17
 8002b84:	d132      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d125      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d126      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d11a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9a      	lsrs	r2, r3, #18
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bcc:	e002      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f9      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x1b2>
 8002bda:	e007      	b.n	8002bec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	40012400 	.word	0x40012400
 8002c04:	20000000 	.word	0x20000000
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d040      	beq.n	8002cac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <ADC_Enable+0xac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <ADC_Enable+0xb0>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	0c9b      	lsrs	r3, r3, #18
 8002c46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c48:	e002      	b.n	8002c50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f9      	bne.n	8002c4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c56:	f7ff fd0f 	bl	8002678 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c5c:	e01f      	b.n	8002c9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c5e:	f7ff fd0b 	bl	8002678 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d918      	bls.n	8002c9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d011      	beq.n	8002c9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e007      	b.n	8002cae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d1d8      	bne.n	8002c5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d12e      	bne.n	8002d38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cea:	f7ff fcc5 	bl	8002678 <HAL_GetTick>
 8002cee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cf0:	e01b      	b.n	8002d2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cf2:	f7ff fcc1 	bl	8002678 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d914      	bls.n	8002d2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10d      	bne.n	8002d2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e007      	b.n	8002d3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d0dc      	beq.n	8002cf2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d127      	bne.n	8002dac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d76:	d115      	bne.n	8002da4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fd fecf 	bl	8000b48 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002daa:	e004      	b.n	8002db6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fe13 	bl	80029f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fe02 	bl	8002a0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <__NVIC_EnableIRQ+0x34>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	; (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
         );
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f74:	d301      	bcc.n	8002f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00f      	b.n	8002f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <SysTick_Config+0x40>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f82:	210f      	movs	r1, #15
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f7ff ff90 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SysTick_Config+0x40>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <SysTick_Config+0x40>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000e010 	.word	0xe000e010

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff2d 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd0:	f7ff ff42 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff90 	bl	8002f00 <NVIC_EncodePriority>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff5f 	bl	8002eac <__NVIC_SetPriority>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff35 	bl	8002e74 <__NVIC_EnableIRQ>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffa2 	bl	8002f64 <SysTick_Config>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e043      	b.n	80030ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_DMA_Init+0xa8>)
 800304a:	4413      	add	r3, r2
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_DMA_Init+0xac>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_DMA_Init+0xb0>)
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003076:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800307a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	bffdfff8 	.word	0xbffdfff8
 80030d8:	cccccccd 	.word	0xcccccccd
 80030dc:	40020000 	.word	0x40020000

080030e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Start_IT+0x20>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e04a      	b.n	8003196 <HAL_DMA_Start_IT+0xb6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800310e:	2b01      	cmp	r3, #1
 8003110:	d13a      	bne.n	8003188 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f9e8 	bl	800350c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 020e 	orr.w	r2, r2, #14
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e00f      	b.n	8003176 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0204 	bic.w	r2, r2, #4
 8003164:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 020a 	orr.w	r2, r2, #10
 8003174:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e005      	b.n	8003194 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d008      	beq.n	80031c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2204      	movs	r2, #4
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e020      	b.n	8003208 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 020e 	bic.w	r2, r2, #14
 80031d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f202 	lsl.w	r2, r1, r2
 80031f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003226:	2b02      	cmp	r3, #2
 8003228:	d005      	beq.n	8003236 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2204      	movs	r2, #4
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e051      	b.n	80032da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020e 	bic.w	r2, r2, #14
 8003244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_DMA_Abort_IT+0xd0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d029      	beq.n	80032b4 <HAL_DMA_Abort_IT+0xa0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_DMA_Abort_IT+0xd4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_DMA_Abort_IT+0x9c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_DMA_Abort_IT+0xd8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d01a      	beq.n	80032aa <HAL_DMA_Abort_IT+0x96>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_DMA_Abort_IT+0xdc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d012      	beq.n	80032a4 <HAL_DMA_Abort_IT+0x90>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_DMA_Abort_IT+0xe0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00a      	beq.n	800329e <HAL_DMA_Abort_IT+0x8a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_DMA_Abort_IT+0xe4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d102      	bne.n	8003298 <HAL_DMA_Abort_IT+0x84>
 8003292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003296:	e00e      	b.n	80032b6 <HAL_DMA_Abort_IT+0xa2>
 8003298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800329c:	e00b      	b.n	80032b6 <HAL_DMA_Abort_IT+0xa2>
 800329e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a2:	e008      	b.n	80032b6 <HAL_DMA_Abort_IT+0xa2>
 80032a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a8:	e005      	b.n	80032b6 <HAL_DMA_Abort_IT+0xa2>
 80032aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ae:	e002      	b.n	80032b6 <HAL_DMA_Abort_IT+0xa2>
 80032b0:	2310      	movs	r3, #16
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_Abort_IT+0xa2>
 80032b4:	2301      	movs	r3, #1
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_DMA_Abort_IT+0xe8>)
 80032b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
    } 
  }
  return status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40020008 	.word	0x40020008
 80032e8:	4002001c 	.word	0x4002001c
 80032ec:	40020030 	.word	0x40020030
 80032f0:	40020044 	.word	0x40020044
 80032f4:	40020058 	.word	0x40020058
 80032f8:	4002006c 	.word	0x4002006c
 80032fc:	40020000 	.word	0x40020000

08003300 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2204      	movs	r2, #4
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04f      	beq.n	80033c8 <HAL_DMA_IRQHandler+0xc8>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04a      	beq.n	80033c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a66      	ldr	r2, [pc, #408]	; (80034f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d029      	beq.n	80033ae <HAL_DMA_IRQHandler+0xae>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_IRQHandler+0xaa>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <HAL_DMA_IRQHandler+0x1f8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xa4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a62      	ldr	r2, [pc, #392]	; (80034fc <HAL_DMA_IRQHandler+0x1fc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d012      	beq.n	800339e <HAL_DMA_IRQHandler+0x9e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a60      	ldr	r2, [pc, #384]	; (8003500 <HAL_DMA_IRQHandler+0x200>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x98>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a5f      	ldr	r2, [pc, #380]	; (8003504 <HAL_DMA_IRQHandler+0x204>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d102      	bne.n	8003392 <HAL_DMA_IRQHandler+0x92>
 800338c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003390:	e00e      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb0>
 8003392:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003396:	e00b      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb0>
 8003398:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800339c:	e008      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb0>
 800339e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033a2:	e005      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb0>
 80033a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a8:	e002      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb0>
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	e000      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb0>
 80033ae:	2304      	movs	r3, #4
 80033b0:	4a55      	ldr	r2, [pc, #340]	; (8003508 <HAL_DMA_IRQHandler+0x208>)
 80033b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8094 	beq.w	80034e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033c6:	e08e      	b.n	80034e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2202      	movs	r2, #2
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d056      	beq.n	8003486 <HAL_DMA_IRQHandler+0x186>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d051      	beq.n	8003486 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020a 	bic.w	r2, r2, #10
 80033fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <HAL_DMA_IRQHandler+0x1f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d029      	beq.n	8003466 <HAL_DMA_IRQHandler+0x166>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a37      	ldr	r2, [pc, #220]	; (80034f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_IRQHandler+0x162>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a35      	ldr	r2, [pc, #212]	; (80034f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01a      	beq.n	800345c <HAL_DMA_IRQHandler+0x15c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_DMA_IRQHandler+0x1fc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d012      	beq.n	8003456 <HAL_DMA_IRQHandler+0x156>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a32      	ldr	r2, [pc, #200]	; (8003500 <HAL_DMA_IRQHandler+0x200>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00a      	beq.n	8003450 <HAL_DMA_IRQHandler+0x150>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a31      	ldr	r2, [pc, #196]	; (8003504 <HAL_DMA_IRQHandler+0x204>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d102      	bne.n	800344a <HAL_DMA_IRQHandler+0x14a>
 8003444:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003448:	e00e      	b.n	8003468 <HAL_DMA_IRQHandler+0x168>
 800344a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344e:	e00b      	b.n	8003468 <HAL_DMA_IRQHandler+0x168>
 8003450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003454:	e008      	b.n	8003468 <HAL_DMA_IRQHandler+0x168>
 8003456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345a:	e005      	b.n	8003468 <HAL_DMA_IRQHandler+0x168>
 800345c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003460:	e002      	b.n	8003468 <HAL_DMA_IRQHandler+0x168>
 8003462:	2320      	movs	r3, #32
 8003464:	e000      	b.n	8003468 <HAL_DMA_IRQHandler+0x168>
 8003466:	2302      	movs	r3, #2
 8003468:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_DMA_IRQHandler+0x208>)
 800346a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d034      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003484:	e02f      	b.n	80034e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2208      	movs	r2, #8
 800348c:	409a      	lsls	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d028      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x1e8>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 020e 	bic.w	r2, r2, #14
 80034ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
    }
  }
  return;
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
}
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40020008 	.word	0x40020008
 80034f4:	4002001c 	.word	0x4002001c
 80034f8:	40020030 	.word	0x40020030
 80034fc:	40020044 	.word	0x40020044
 8003500:	40020058 	.word	0x40020058
 8003504:	4002006c 	.word	0x4002006c
 8003508:	40020000 	.word	0x40020000

0800350c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b10      	cmp	r3, #16
 8003538:	d108      	bne.n	800354c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800354a:	e007      	b.n	800355c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
	...

08003568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003568:	b480      	push	{r7}
 800356a:	b08b      	sub	sp, #44	; 0x2c
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357a:	e169      	b.n	8003850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800357c:	2201      	movs	r2, #1
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 8158 	bne.w	800384a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a9a      	ldr	r2, [pc, #616]	; (8003808 <HAL_GPIO_Init+0x2a0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d05e      	beq.n	8003662 <HAL_GPIO_Init+0xfa>
 80035a4:	4a98      	ldr	r2, [pc, #608]	; (8003808 <HAL_GPIO_Init+0x2a0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d875      	bhi.n	8003696 <HAL_GPIO_Init+0x12e>
 80035aa:	4a98      	ldr	r2, [pc, #608]	; (800380c <HAL_GPIO_Init+0x2a4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d058      	beq.n	8003662 <HAL_GPIO_Init+0xfa>
 80035b0:	4a96      	ldr	r2, [pc, #600]	; (800380c <HAL_GPIO_Init+0x2a4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d86f      	bhi.n	8003696 <HAL_GPIO_Init+0x12e>
 80035b6:	4a96      	ldr	r2, [pc, #600]	; (8003810 <HAL_GPIO_Init+0x2a8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d052      	beq.n	8003662 <HAL_GPIO_Init+0xfa>
 80035bc:	4a94      	ldr	r2, [pc, #592]	; (8003810 <HAL_GPIO_Init+0x2a8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d869      	bhi.n	8003696 <HAL_GPIO_Init+0x12e>
 80035c2:	4a94      	ldr	r2, [pc, #592]	; (8003814 <HAL_GPIO_Init+0x2ac>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d04c      	beq.n	8003662 <HAL_GPIO_Init+0xfa>
 80035c8:	4a92      	ldr	r2, [pc, #584]	; (8003814 <HAL_GPIO_Init+0x2ac>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d863      	bhi.n	8003696 <HAL_GPIO_Init+0x12e>
 80035ce:	4a92      	ldr	r2, [pc, #584]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d046      	beq.n	8003662 <HAL_GPIO_Init+0xfa>
 80035d4:	4a90      	ldr	r2, [pc, #576]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d85d      	bhi.n	8003696 <HAL_GPIO_Init+0x12e>
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d82a      	bhi.n	8003634 <HAL_GPIO_Init+0xcc>
 80035de:	2b12      	cmp	r3, #18
 80035e0:	d859      	bhi.n	8003696 <HAL_GPIO_Init+0x12e>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_GPIO_Init+0x80>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	08003663 	.word	0x08003663
 80035ec:	0800363d 	.word	0x0800363d
 80035f0:	0800364f 	.word	0x0800364f
 80035f4:	08003691 	.word	0x08003691
 80035f8:	08003697 	.word	0x08003697
 80035fc:	08003697 	.word	0x08003697
 8003600:	08003697 	.word	0x08003697
 8003604:	08003697 	.word	0x08003697
 8003608:	08003697 	.word	0x08003697
 800360c:	08003697 	.word	0x08003697
 8003610:	08003697 	.word	0x08003697
 8003614:	08003697 	.word	0x08003697
 8003618:	08003697 	.word	0x08003697
 800361c:	08003697 	.word	0x08003697
 8003620:	08003697 	.word	0x08003697
 8003624:	08003697 	.word	0x08003697
 8003628:	08003697 	.word	0x08003697
 800362c:	08003645 	.word	0x08003645
 8003630:	08003659 	.word	0x08003659
 8003634:	4a79      	ldr	r2, [pc, #484]	; (800381c <HAL_GPIO_Init+0x2b4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800363a:	e02c      	b.n	8003696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	623b      	str	r3, [r7, #32]
          break;
 8003642:	e029      	b.n	8003698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	3304      	adds	r3, #4
 800364a:	623b      	str	r3, [r7, #32]
          break;
 800364c:	e024      	b.n	8003698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	3308      	adds	r3, #8
 8003654:	623b      	str	r3, [r7, #32]
          break;
 8003656:	e01f      	b.n	8003698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	330c      	adds	r3, #12
 800365e:	623b      	str	r3, [r7, #32]
          break;
 8003660:	e01a      	b.n	8003698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800366a:	2304      	movs	r3, #4
 800366c:	623b      	str	r3, [r7, #32]
          break;
 800366e:	e013      	b.n	8003698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003678:	2308      	movs	r3, #8
 800367a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	611a      	str	r2, [r3, #16]
          break;
 8003682:	e009      	b.n	8003698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003684:	2308      	movs	r3, #8
 8003686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	615a      	str	r2, [r3, #20]
          break;
 800368e:	e003      	b.n	8003698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003690:	2300      	movs	r3, #0
 8003692:	623b      	str	r3, [r7, #32]
          break;
 8003694:	e000      	b.n	8003698 <HAL_GPIO_Init+0x130>
          break;
 8003696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2bff      	cmp	r3, #255	; 0xff
 800369c:	d801      	bhi.n	80036a2 <HAL_GPIO_Init+0x13a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	e001      	b.n	80036a6 <HAL_GPIO_Init+0x13e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2bff      	cmp	r3, #255	; 0xff
 80036ac:	d802      	bhi.n	80036b4 <HAL_GPIO_Init+0x14c>
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	e002      	b.n	80036ba <HAL_GPIO_Init+0x152>
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	3b08      	subs	r3, #8
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	210f      	movs	r1, #15
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	401a      	ands	r2, r3
 80036cc:	6a39      	ldr	r1, [r7, #32]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	431a      	orrs	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80b1 	beq.w	800384a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036e8:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a4c      	ldr	r2, [pc, #304]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003700:	4a48      	ldr	r2, [pc, #288]	; (8003824 <HAL_GPIO_Init+0x2bc>)
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <HAL_GPIO_Init+0x2c0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_GPIO_Init+0x1ec>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3f      	ldr	r2, [pc, #252]	; (800382c <HAL_GPIO_Init+0x2c4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00d      	beq.n	8003750 <HAL_GPIO_Init+0x1e8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3e      	ldr	r2, [pc, #248]	; (8003830 <HAL_GPIO_Init+0x2c8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x1e4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3d      	ldr	r2, [pc, #244]	; (8003834 <HAL_GPIO_Init+0x2cc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_GPIO_Init+0x1e0>
 8003744:	2303      	movs	r3, #3
 8003746:	e006      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003748:	2304      	movs	r3, #4
 800374a:	e004      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 800374c:	2302      	movs	r3, #2
 800374e:	e002      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003754:	2300      	movs	r3, #0
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	f002 0203 	and.w	r2, r2, #3
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	4093      	lsls	r3, r2
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003766:	492f      	ldr	r1, [pc, #188]	; (8003824 <HAL_GPIO_Init+0x2bc>)
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	492c      	ldr	r1, [pc, #176]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
 800378c:	e006      	b.n	800379c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	43db      	mvns	r3, r3
 8003796:	4928      	ldr	r1, [pc, #160]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 8003798:	4013      	ands	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4922      	ldr	r1, [pc, #136]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
 80037b4:	e006      	b.n	80037c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	43db      	mvns	r3, r3
 80037be:	491e      	ldr	r1, [pc, #120]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	4918      	ldr	r1, [pc, #96]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	4914      	ldr	r1, [pc, #80]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d021      	beq.n	800383c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_GPIO_Init+0x2d0>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
 8003804:	e021      	b.n	800384a <HAL_GPIO_Init+0x2e2>
 8003806:	bf00      	nop
 8003808:	10320000 	.word	0x10320000
 800380c:	10310000 	.word	0x10310000
 8003810:	10220000 	.word	0x10220000
 8003814:	10210000 	.word	0x10210000
 8003818:	10120000 	.word	0x10120000
 800381c:	10110000 	.word	0x10110000
 8003820:	40021000 	.word	0x40021000
 8003824:	40010000 	.word	0x40010000
 8003828:	40010800 	.word	0x40010800
 800382c:	40010c00 	.word	0x40010c00
 8003830:	40011000 	.word	0x40011000
 8003834:	40011400 	.word	0x40011400
 8003838:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_GPIO_Init+0x304>)
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	43db      	mvns	r3, r3
 8003844:	4909      	ldr	r1, [pc, #36]	; (800386c <HAL_GPIO_Init+0x304>)
 8003846:	4013      	ands	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	3301      	adds	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	f47f ae8e 	bne.w	800357c <HAL_GPIO_Init+0x14>
  }
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	372c      	adds	r7, #44	; 0x2c
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40010400 	.word	0x40010400

08003870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	807b      	strh	r3, [r7, #2]
 80038aa:	4613      	mov	r3, r2
 80038ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ae:	787b      	ldrb	r3, [r7, #1]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b4:	887a      	ldrh	r2, [r7, #2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ba:	e003      	b.n	80038c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	041a      	lsls	r2, r3, #16
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	611a      	str	r2, [r3, #16]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038e0:	887a      	ldrh	r2, [r7, #2]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4013      	ands	r3, r2
 80038e6:	041a      	lsls	r2, r3, #16
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	400b      	ands	r3, r1
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e12b      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe fcbe 	bl	80022a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f002 f9aa 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a81      	ldr	r2, [pc, #516]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a80      	ldr	r2, [pc, #512]	; (8003b78 <HAL_I2C_Init+0x278>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a7d      	ldr	r2, [pc, #500]	; (8003b7c <HAL_I2C_Init+0x27c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a78      	ldr	r2, [pc, #480]	; (8003b80 <HAL_I2C_Init+0x280>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_I2C_Init+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_I2C_Init+0x284>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	495c      	ldr	r1, [pc, #368]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d819      	bhi.n	8003a3c <HAL_I2C_Init+0x13c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_I2C_Init+0x138>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e59      	subs	r1, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	e051      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e04f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <HAL_I2C_Init+0x168>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e012      	b.n	8003a8e <HAL_I2C_Init+0x18e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x196>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_I2C_Init+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e58      	subs	r0, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6911      	ldr	r1, [r2, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	001e847f 	.word	0x001e847f
 8003b7c:	003d08ff 	.word	0x003d08ff
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	b08b      	sub	sp, #44	; 0x2c
 8003b8c:	af06      	add	r7, sp, #24
 8003b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0fd      	b.n	8003d96 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f007 fdce 	bl	800b750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f003 fde3 	bl	800778c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	687e      	ldr	r6, [r7, #4]
 8003bce:	466d      	mov	r5, sp
 8003bd0:	f106 0410 	add.w	r4, r6, #16
 8003bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	1d33      	adds	r3, r6, #4
 8003bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be0:	6838      	ldr	r0, [r7, #0]
 8003be2:	f003 fdad 	bl	8007740 <USB_CoreInit>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0ce      	b.n	8003d96 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fdde 	bl	80077c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e04c      	b.n	8003ca4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	440b      	add	r3, r1
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	b298      	uxth	r0, r3
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	3336      	adds	r3, #54	; 0x36
 8003c48:	4602      	mov	r2, r0
 8003c4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	3338      	adds	r3, #56	; 0x38
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	440b      	add	r3, r1
 8003c84:	333c      	adds	r3, #60	; 0x3c
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	3340      	adds	r3, #64	; 0x40
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3ad      	bcc.n	8003c0a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e044      	b.n	8003d3e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3b5      	bcc.n	8003cb4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	687e      	ldr	r6, [r7, #4]
 8003d50:	466d      	mov	r5, sp
 8003d52:	f106 0410 	add.w	r4, r6, #16
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	1d33      	adds	r3, r6, #4
 8003d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	f003 fd38 	bl	80077d8 <USB_DevInit>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00d      	b.n	8003d96 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f005 fea9 	bl	8009ae6 <USB_DevDisconnect>

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_PCD_Start+0x16>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e016      	b.n	8003de2 <HAL_PCD_Start+0x44>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 fccd 	bl	8007760 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f007 ff34 	bl	800bc36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 fe7d 	bl	8009ad2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b088      	sub	sp, #32
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f005 fe7f 	bl	8009afa <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e06:	d102      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fb61 	bl	80044d0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f005 fe71 	bl	8009afa <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d112      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e36:	b292      	uxth	r2, r2
 8003e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f007 fd02 	bl	800b846 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e42:	2100      	movs	r1, #0
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f925 	bl	8004094 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f005 fe53 	bl	8009afa <USB_ReadInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5e:	d10b      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e72:	b292      	uxth	r2, r2
 8003e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 fe3c 	bl	8009afa <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f005 fe25 	bl	8009afa <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eba:	d126      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0208 	bic.w	r2, r2, #8
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f007 fce3 	bl	800b8b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f04:	b292      	uxth	r2, r2
 8003f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f005 fdf3 	bl	8009afa <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1e:	f040 8084 	bne.w	800402a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e011      	b.n	8003f4c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	7ffb      	ldrb	r3, [r7, #31]
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f107 0120 	add.w	r1, r7, #32
 8003f40:	440b      	add	r3, r1
 8003f42:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003f46:	7ffb      	ldrb	r3, [r7, #31]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	d9ea      	bls.n	8003f28 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	b292      	uxth	r2, r2
 8003f66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	b292      	uxth	r2, r2
 8003f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003f82:	bf00      	nop
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f6      	beq.n	8003f84 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e010      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	7ffa      	ldrb	r2, [r7, #31]
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	440a      	add	r2, r1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	f107 0120 	add.w	r1, r7, #32
 8003fc8:	440b      	add	r3, r1
 8003fca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003fce:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b07      	cmp	r3, #7
 8003fda:	d9eb      	bls.n	8003fb4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0208 	orr.w	r2, r2, #8
 8003fee:	b292      	uxth	r2, r2
 8003ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004006:	b292      	uxth	r2, r2
 8004008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0204 	orr.w	r2, r2, #4
 800401e:	b292      	uxth	r2, r2
 8004020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f007 fc2d 	bl	800b884 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f005 fd63 	bl	8009afa <USB_ReadInterrupts>
 8004034:	4603      	mov	r3, r0
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403e:	d10e      	bne.n	800405e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004052:	b292      	uxth	r2, r2
 8004054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f007 fbe6 	bl	800b82a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f005 fd49 	bl	8009afa <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004072:	d10b      	bne.n	800408c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004086:	b292      	uxth	r2, r2
 8004088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800408c:	bf00      	nop
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_PCD_SetAddress+0x1a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e013      	b.n	80040d6 <HAL_PCD_SetAddress+0x42>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f005 fcf0 	bl	8009aac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	461a      	mov	r2, r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	70fb      	strb	r3, [r7, #3]
 80040f0:	460b      	mov	r3, r1
 80040f2:	803b      	strh	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	da0e      	bge.n	8004122 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	705a      	strb	r2, [r3, #1]
 8004120:	e00e      	b.n	8004140 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	f003 0207 	and.w	r2, r3, #7
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800414c:	883a      	ldrh	r2, [r7, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	78ba      	ldrb	r2, [r7, #2]
 8004156:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800416a:	78bb      	ldrb	r3, [r7, #2]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d102      	bne.n	8004176 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_PCD_EP_Open+0xa6>
 8004180:	2302      	movs	r3, #2
 8004182:	e00e      	b.n	80041a2 <HAL_PCD_EP_Open+0xc4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fb40 	bl	8007818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80041a0:	7afb      	ldrb	r3, [r7, #11]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da0e      	bge.n	80041dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	705a      	strb	r2, [r3, #1]
 80041da:	e00e      	b.n	80041fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 0207 	and.w	r2, r3, #7
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_PCD_EP_Close+0x6a>
 8004210:	2302      	movs	r3, #2
 8004212:	e00e      	b.n	8004232 <HAL_PCD_EP_Close+0x88>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68f9      	ldr	r1, [r7, #12]
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fe62 	bl	8007eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	460b      	mov	r3, r1
 8004248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424a:	7afb      	ldrb	r3, [r7, #11]
 800424c:	f003 0207 	and.w	r2, r3, #7
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2200      	movs	r2, #0
 8004278:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800427a:	7afb      	ldrb	r3, [r7, #11]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	b2da      	uxtb	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f004 f814 	bl	80082c4 <USB_EPStartXfer>
 800429c:	e005      	b.n	80042aa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f004 f80d 	bl	80082c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 0207 	and.w	r2, r3, #7
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	440b      	add	r3, r1
 80042d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	460b      	mov	r3, r1
 80042f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2201      	movs	r2, #1
 800432c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432e:	7afb      	ldrb	r3, [r7, #11]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	b2da      	uxtb	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800433a:	7afb      	ldrb	r3, [r7, #11]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6979      	ldr	r1, [r7, #20]
 800434a:	4618      	mov	r0, r3
 800434c:	f003 ffba 	bl	80082c4 <USB_EPStartXfer>
 8004350:	e005      	b.n	800435e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	4618      	mov	r0, r3
 800435a:	f003 ffb3 	bl	80082c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 0207 	and.w	r2, r3, #7
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d901      	bls.n	8004386 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e04c      	b.n	8004420 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da0e      	bge.n	80043ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	705a      	strb	r2, [r3, #1]
 80043aa:	e00c      	b.n	80043c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4413      	add	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_PCD_EP_SetStall+0x7e>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e01c      	b.n	8004420 <HAL_PCD_EP_SetStall+0xb8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f005 fa5c 	bl	80098b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	2b00      	cmp	r3, #0
 8004402:	d108      	bne.n	8004416 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f005 fb81 	bl	8009b18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d901      	bls.n	8004446 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e040      	b.n	80044c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da0e      	bge.n	800446c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	705a      	strb	r2, [r3, #1]
 800446a:	e00e      	b.n	800448a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 0207 	and.w	r2, r3, #7
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_PCD_EP_ClrStall+0x82>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e00e      	b.n	80044c8 <HAL_PCD_EP_ClrStall+0xa0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f005 fa4a 	bl	8009952 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044d8:	e2ec      	b.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80044e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80044f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8161 	bne.w	80047bc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80044fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	d152      	bne.n	80045aa <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	81fb      	strh	r3, [r7, #14]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3328      	adds	r3, #40	; 0x28
 800452c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004536:	b29b      	uxth	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	3302      	adds	r3, #2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	441a      	add	r2, r3
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004568:	2100      	movs	r1, #0
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f007 f943 	bl	800b7f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 829b 	beq.w	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 8296 	bne.w	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004594:	b2da      	uxtb	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	b292      	uxth	r2, r2
 800459c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045a8:	e284      	b.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80045ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d034      	beq.n	800462e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	3306      	adds	r3, #6
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004602:	b29b      	uxth	r3, r3
 8004604:	f005 fad8 	bl	8009bb8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004614:	4013      	ands	r3, r2
 8004616:	823b      	strh	r3, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	8a3a      	ldrh	r2, [r7, #16]
 800461e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004622:	b292      	uxth	r2, r2
 8004624:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f007 f8b8 	bl	800b79c <HAL_PCD_SetupStageCallback>
 800462c:	e242      	b.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800462e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004632:	2b00      	cmp	r3, #0
 8004634:	f280 823e 	bge.w	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29a      	uxth	r2, r3
 8004640:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004644:	4013      	ands	r3, r2
 8004646:	83bb      	strh	r3, [r7, #28]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	8bba      	ldrh	r2, [r7, #28]
 800464e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004652:	b292      	uxth	r2, r2
 8004654:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	3306      	adds	r3, #6
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d019      	beq.n	80046be <PCD_EP_ISR_Handler+0x1ee>
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	6959      	ldr	r1, [r3, #20]
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f005 fa88 	bl	8009bb8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	441a      	add	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80046b6:	2100      	movs	r1, #0
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f007 f881 	bl	800b7c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 81f2 	bne.w	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	4413      	add	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d112      	bne.n	800471e <PCD_EP_ISR_Handler+0x24e>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004702:	b29a      	uxth	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004716:	b29a      	uxth	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	e02f      	b.n	800477e <PCD_EP_ISR_Handler+0x2ae>
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b3e      	cmp	r3, #62	; 0x3e
 8004724:	d813      	bhi.n	800474e <PCD_EP_ISR_Handler+0x27e>
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <PCD_EP_ISR_Handler+0x270>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	3301      	adds	r3, #1
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	b29b      	uxth	r3, r3
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	b29a      	uxth	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	e017      	b.n	800477e <PCD_EP_ISR_Handler+0x2ae>
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <PCD_EP_ISR_Handler+0x298>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	3b01      	subs	r3, #1
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	b29b      	uxth	r3, r3
 800476c:	029b      	lsls	r3, r3, #10
 800476e:	b29b      	uxth	r3, r3
 8004770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004778:	b29a      	uxth	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	827b      	strh	r3, [r7, #18]
 8004790:	8a7b      	ldrh	r3, [r7, #18]
 8004792:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004796:	827b      	strh	r3, [r7, #18]
 8004798:	8a7b      	ldrh	r3, [r7, #18]
 800479a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800479e:	827b      	strh	r3, [r7, #18]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	8a7b      	ldrh	r3, [r7, #18]
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
 80047ba:	e17b      	b.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f280 80ea 	bge.w	80049ac <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047ee:	4013      	ands	r3, r2
 80047f0:	853b      	strh	r3, [r7, #40]	; 0x28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004806:	b292      	uxth	r2, r2
 8004808:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800480a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	7b1b      	ldrb	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d122      	bne.n	800486e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	3306      	adds	r3, #6
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004850:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004852:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8087 	beq.w	8004968 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	88da      	ldrh	r2, [r3, #6]
 8004866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004868:	f005 f9a6 	bl	8009bb8 <USB_ReadPMA>
 800486c:	e07c      	b.n	8004968 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	78db      	ldrb	r3, [r3, #3]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d108      	bne.n	8004888 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004876:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004878:	461a      	mov	r2, r3
 800487a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f927 	bl	8004ad0 <HAL_PCD_EP_DB_Receive>
 8004882:	4603      	mov	r3, r0
 8004884:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004886:	e06f      	b.n	8004968 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d021      	beq.n	8004926 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	3302      	adds	r3, #2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800490c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800490e:	2b00      	cmp	r3, #0
 8004910:	d02a      	beq.n	8004968 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	6959      	ldr	r1, [r3, #20]
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	891a      	ldrh	r2, [r3, #8]
 800491e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004920:	f005 f94a 	bl	8009bb8 <USB_ReadPMA>
 8004924:	e020      	b.n	8004968 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	3306      	adds	r3, #6
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	6959      	ldr	r1, [r3, #20]
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	895a      	ldrh	r2, [r3, #10]
 8004962:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004964:	f005 f928 	bl	8009bb8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800496e:	441a      	add	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800497a:	441a      	add	r2, r3
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <PCD_EP_ISR_Handler+0x4c2>
 8004988:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d206      	bcs.n	80049a0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f006 ff11 	bl	800b7c0 <HAL_PCD_DataOutStageCallback>
 800499e:	e005      	b.n	80049ac <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f003 fc8c 	bl	80082c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d07e      	beq.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80049b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	843b      	strh	r3, [r7, #32]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8c3b      	ldrh	r3, [r7, #32]
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d00c      	beq.n	8004a24 <PCD_EP_ISR_Handler+0x554>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d146      	bne.n	8004aa8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d141      	bne.n	8004aa8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	3302      	adds	r3, #2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	8bfb      	ldrh	r3, [r7, #30]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d906      	bls.n	8004a66 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	8bfb      	ldrh	r3, [r7, #30]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	619a      	str	r2, [r3, #24]
 8004a64:	e002      	b.n	8004a6c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f006 febb 	bl	800b7f6 <HAL_PCD_DataInStageCallback>
 8004a80:	e018      	b.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	8bfb      	ldrh	r3, [r7, #30]
 8004a88:	441a      	add	r2, r3
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	8bfb      	ldrh	r3, [r7, #30]
 8004a94:	441a      	add	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f003 fc0f 	bl	80082c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004aa6:	e005      	b.n	8004ab4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004aa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f91b 	bl	8004cea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	b21b      	sxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f6ff ad0a 	blt.w	80044da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3738      	adds	r7, #56	; 0x38
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d07e      	beq.n	8004be6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	3302      	adds	r3, #2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	8b7b      	ldrh	r3, [r7, #26]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d306      	bcc.n	8004b2a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	8b7b      	ldrh	r3, [r7, #26]
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	619a      	str	r2, [r3, #24]
 8004b28:	e002      	b.n	8004b30 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d123      	bne.n	8004b80 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	833b      	strh	r3, [r7, #24]
 8004b54:	8b3b      	ldrh	r3, [r7, #24]
 8004b56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b5a:	833b      	strh	r3, [r7, #24]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	8b3b      	ldrh	r3, [r7, #24]
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01f      	beq.n	8004bca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	82fb      	strh	r3, [r7, #22]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	8afb      	ldrh	r3, [r7, #22]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bca:	8b7b      	ldrh	r3, [r7, #26]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8087 	beq.w	8004ce0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6959      	ldr	r1, [r3, #20]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	891a      	ldrh	r2, [r3, #8]
 8004bde:	8b7b      	ldrh	r3, [r7, #26]
 8004be0:	f004 ffea 	bl	8009bb8 <USB_ReadPMA>
 8004be4:	e07c      	b.n	8004ce0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3306      	adds	r3, #6
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	8b7b      	ldrh	r3, [r7, #26]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d306      	bcc.n	8004c28 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	8b7b      	ldrh	r3, [r7, #26]
 8004c20:	1ad2      	subs	r2, r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	619a      	str	r2, [r3, #24]
 8004c26:	e002      	b.n	8004c2e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d123      	bne.n	8004c7e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	83fb      	strh	r3, [r7, #30]
 8004c52:	8bfb      	ldrh	r3, [r7, #30]
 8004c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c58:	83fb      	strh	r3, [r7, #30]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	8bfb      	ldrh	r3, [r7, #30]
 8004c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d11f      	bne.n	8004cc8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	83bb      	strh	r3, [r7, #28]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	8bbb      	ldrh	r3, [r7, #28]
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cc8:	8b7b      	ldrh	r3, [r7, #26]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6959      	ldr	r1, [r3, #20]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	895a      	ldrh	r2, [r3, #10]
 8004cda:	8b7b      	ldrh	r3, [r7, #26]
 8004cdc:	f004 ff6c 	bl	8009bb8 <USB_ReadPMA>
    }
  }

  return count;
 8004ce0:	8b7b      	ldrh	r3, [r7, #26]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b0a2      	sub	sp, #136	; 0x88
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 81c7 	beq.w	8005092 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d907      	bls.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d44:	1ad2      	subs	r2, r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	619a      	str	r2, [r3, #24]
 8004d4a:	e002      	b.n	8004d52 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 80b9 	bne.w	8004ece <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d126      	bne.n	8004db2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	4413      	add	r3, r2
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	011a      	lsls	r2, r3, #4
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	4413      	add	r3, r2
 8004d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	e01a      	b.n	8004de8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d116      	bne.n	8004de8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	4413      	add	r3, r2
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	011a      	lsls	r2, r3, #4
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	4413      	add	r3, r2
 8004ddc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d126      	bne.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	011a      	lsls	r2, r3, #4
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	4413      	add	r3, r2
 8004e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e017      	b.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d113      	bne.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	623b      	str	r3, [r7, #32]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	011a      	lsls	r2, r3, #4
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	4413      	add	r3, r2
 8004e68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2200      	movs	r2, #0
 8004e72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f006 fcbb 	bl	800b7f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 82d4 	beq.w	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	827b      	strh	r3, [r7, #18]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	8a7b      	ldrh	r3, [r7, #18]
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]
 8004ecc:	e2b2      	b.n	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d021      	beq.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	f040 8286 	bne.w	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f30:	441a      	add	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f3e:	441a      	add	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d309      	bcc.n	8004f64 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5c:	1ad2      	subs	r2, r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	621a      	str	r2, [r3, #32]
 8004f62:	e015      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f7a:	e009      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d155      	bne.n	8005044 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	4413      	add	r3, r2
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	011a      	lsls	r2, r3, #4
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d112      	bne.n	8004fec <HAL_PCD_EP_DB_Transmit+0x302>
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	e047      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x392>
 8004fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fee:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff0:	d811      	bhi.n	8005016 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005004:	3301      	adds	r3, #1
 8005006:	64bb      	str	r3, [r7, #72]	; 0x48
 8005008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500a:	b29b      	uxth	r3, r3
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	b29a      	uxth	r2, r3
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e032      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x392>
 8005016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	64bb      	str	r3, [r7, #72]	; 0x48
 800501c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <HAL_PCD_EP_DB_Transmit+0x342>
 8005026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005028:	3b01      	subs	r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502e:	b29b      	uxth	r3, r3
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	b29b      	uxth	r3, r3
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29a      	uxth	r2, r3
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	e01b      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x392>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d117      	bne.n	800507c <HAL_PCD_EP_DB_Transmit+0x392>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	643b      	str	r3, [r7, #64]	; 0x40
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005060:	4413      	add	r3, r2
 8005062:	643b      	str	r3, [r7, #64]	; 0x40
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	011a      	lsls	r2, r3, #4
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	4413      	add	r3, r2
 800506e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005076:	b29a      	uxth	r2, r3
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6959      	ldr	r1, [r3, #20]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	891a      	ldrh	r2, [r3, #8]
 8005088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	f004 fd4f 	bl	8009b2e <USB_WritePMA>
 8005090:	e1d0      	b.n	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	3306      	adds	r3, #6
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d307      	bcc.n	80050da <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d2:	1ad2      	subs	r2, r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	619a      	str	r2, [r3, #24]
 80050d8:	e002      	b.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2200      	movs	r2, #0
 80050de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 80c4 	bne.w	8005272 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d126      	bne.n	8005140 <HAL_PCD_EP_DB_Transmit+0x456>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005100:	b29b      	uxth	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	4413      	add	r3, r2
 8005108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	011a      	lsls	r2, r3, #4
 8005110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005112:	4413      	add	r3, r2
 8005114:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005118:	66bb      	str	r3, [r7, #104]	; 0x68
 800511a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005124:	b29a      	uxth	r2, r3
 8005126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005138:	b29a      	uxth	r2, r3
 800513a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	e01a      	b.n	8005176 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d116      	bne.n	8005176 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	677b      	str	r3, [r7, #116]	; 0x74
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005156:	b29b      	uxth	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515c:	4413      	add	r3, r2
 800515e:	677b      	str	r3, [r7, #116]	; 0x74
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	011a      	lsls	r2, r3, #4
 8005166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005168:	4413      	add	r3, r2
 800516a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800516e:	673b      	str	r3, [r7, #112]	; 0x70
 8005170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005172:	2200      	movs	r2, #0
 8005174:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	67bb      	str	r3, [r7, #120]	; 0x78
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d12f      	bne.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800519c:	4413      	add	r3, r2
 800519e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	011a      	lsls	r2, r3, #4
 80051a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051ac:	4413      	add	r3, r2
 80051ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e017      	b.n	8005214 <HAL_PCD_EP_DB_Transmit+0x52a>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d113      	bne.n	8005214 <HAL_PCD_EP_DB_Transmit+0x52a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fa:	4413      	add	r3, r2
 80051fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	4413      	add	r3, r2
 8005208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800520c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800520e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005210:	2200      	movs	r2, #0
 8005212:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f006 faeb 	bl	800b7f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005226:	2b00      	cmp	r3, #0
 8005228:	f040 8104 	bne.w	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800525c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	b29b      	uxth	r3, r3
 800526e:	8013      	strh	r3, [r2, #0]
 8005270:	e0e0      	b.n	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d121      	bne.n	80052c0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	f040 80b4 	bne.w	8005434 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052d4:	441a      	add	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052e2:	441a      	add	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d309      	bcc.n	8005308 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	621a      	str	r2, [r3, #32]
 8005306:	e015      	b.n	8005334 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d107      	bne.n	8005320 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005314:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800531e:	e009      	b.n	8005334 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	667b      	str	r3, [r7, #100]	; 0x64
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d155      	bne.n	80053ee <HAL_PCD_EP_DB_Transmit+0x704>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005356:	4413      	add	r3, r2
 8005358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	011a      	lsls	r2, r3, #4
 8005360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005362:	4413      	add	r3, r2
 8005364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005368:	65bb      	str	r3, [r7, #88]	; 0x58
 800536a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536c:	2b00      	cmp	r3, #0
 800536e:	d112      	bne.n	8005396 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800537a:	b29a      	uxth	r2, r3
 800537c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29a      	uxth	r2, r3
 8005390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e044      	b.n	8005420 <HAL_PCD_EP_DB_Transmit+0x736>
 8005396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005398:	2b3e      	cmp	r3, #62	; 0x3e
 800539a:	d811      	bhi.n	80053c0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	657b      	str	r3, [r7, #84]	; 0x54
 80053a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	3301      	adds	r3, #1
 80053b0:	657b      	str	r3, [r7, #84]	; 0x54
 80053b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	029b      	lsls	r3, r3, #10
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	e02f      	b.n	8005420 <HAL_PCD_EP_DB_Transmit+0x736>
 80053c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	657b      	str	r3, [r7, #84]	; 0x54
 80053c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80053d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d2:	3b01      	subs	r3, #1
 80053d4:	657b      	str	r3, [r7, #84]	; 0x54
 80053d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d8:	b29b      	uxth	r3, r3
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e018      	b.n	8005420 <HAL_PCD_EP_DB_Transmit+0x736>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d114      	bne.n	8005420 <HAL_PCD_EP_DB_Transmit+0x736>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005404:	4413      	add	r3, r2
 8005406:	667b      	str	r3, [r7, #100]	; 0x64
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005410:	4413      	add	r3, r2
 8005412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
 8005418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541a:	b29a      	uxth	r2, r3
 800541c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800541e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6959      	ldr	r1, [r3, #20]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	895a      	ldrh	r2, [r3, #10]
 800542c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542e:	b29b      	uxth	r3, r3
 8005430:	f004 fb7d 	bl	8009b2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544e:	823b      	strh	r3, [r7, #16]
 8005450:	8a3b      	ldrh	r3, [r7, #16]
 8005452:	f083 0310 	eor.w	r3, r3, #16
 8005456:	823b      	strh	r3, [r7, #16]
 8005458:	8a3b      	ldrh	r3, [r7, #16]
 800545a:	f083 0320 	eor.w	r3, r3, #32
 800545e:	823b      	strh	r3, [r7, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	8a3b      	ldrh	r3, [r7, #16]
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3788      	adds	r7, #136	; 0x88
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800548e:	b480      	push	{r7}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	817b      	strh	r3, [r7, #10]
 800549c:	4613      	mov	r3, r2
 800549e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054a0:	897b      	ldrh	r3, [r7, #10]
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e009      	b.n	80054d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054c4:	897a      	ldrh	r2, [r7, #10]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80054d8:	893b      	ldrh	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d107      	bne.n	80054ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	80da      	strh	r2, [r3, #6]
 80054ec:	e00b      	b.n	8005506 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2201      	movs	r2, #1
 80054f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	b29a      	uxth	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
	...

08005514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e26c      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8087 	beq.w	8005642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005534:	4b92      	ldr	r3, [pc, #584]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b04      	cmp	r3, #4
 800553e:	d00c      	beq.n	800555a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005540:	4b8f      	ldr	r3, [pc, #572]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b08      	cmp	r3, #8
 800554a:	d112      	bne.n	8005572 <HAL_RCC_OscConfig+0x5e>
 800554c:	4b8c      	ldr	r3, [pc, #560]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d10b      	bne.n	8005572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555a:	4b89      	ldr	r3, [pc, #548]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d06c      	beq.n	8005640 <HAL_RCC_OscConfig+0x12c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d168      	bne.n	8005640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e246      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557a:	d106      	bne.n	800558a <HAL_RCC_OscConfig+0x76>
 800557c:	4b80      	ldr	r3, [pc, #512]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7f      	ldr	r2, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e02e      	b.n	80055e8 <HAL_RCC_OscConfig+0xd4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <HAL_RCC_OscConfig+0x98>
 8005592:	4b7b      	ldr	r3, [pc, #492]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a7a      	ldr	r2, [pc, #488]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b78      	ldr	r3, [pc, #480]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a77      	ldr	r2, [pc, #476]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e01d      	b.n	80055e8 <HAL_RCC_OscConfig+0xd4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0xbc>
 80055b6:	4b72      	ldr	r3, [pc, #456]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a71      	ldr	r2, [pc, #452]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4b6f      	ldr	r3, [pc, #444]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a6e      	ldr	r2, [pc, #440]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0xd4>
 80055d0:	4b6b      	ldr	r3, [pc, #428]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a6a      	ldr	r2, [pc, #424]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4b68      	ldr	r3, [pc, #416]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a67      	ldr	r2, [pc, #412]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d013      	beq.n	8005618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fd f842 	bl	8002678 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f8:	f7fd f83e 	bl	8002678 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1fa      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560a:	4b5d      	ldr	r3, [pc, #372]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0xe4>
 8005616:	e014      	b.n	8005642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd f82e 	bl	8002678 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fd f82a 	bl	8002678 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e1e6      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005632:	4b53      	ldr	r3, [pc, #332]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x10c>
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d063      	beq.n	8005716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800564e:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800565a:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b08      	cmp	r3, #8
 8005664:	d11c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x18c>
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d116      	bne.n	80056a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005672:	4b43      	ldr	r3, [pc, #268]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_RCC_OscConfig+0x176>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e1ba      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568a:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4939      	ldr	r1, [pc, #228]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569e:	e03a      	b.n	8005716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a8:	4b36      	ldr	r3, [pc, #216]	; (8005784 <HAL_RCC_OscConfig+0x270>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fc ffe3 	bl	8002678 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b6:	f7fc ffdf 	bl	8002678 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e19b      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c8:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d4:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4927      	ldr	r1, [pc, #156]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]
 80056e8:	e015      	b.n	8005716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_RCC_OscConfig+0x270>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fc ffc2 	bl	8002678 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fc ffbe 	bl	8002678 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e17a      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d03a      	beq.n	8005798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d019      	beq.n	800575e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572a:	4b17      	ldr	r3, [pc, #92]	; (8005788 <HAL_RCC_OscConfig+0x274>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005730:	f7fc ffa2 	bl	8002678 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005738:	f7fc ff9e 	bl	8002678 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e15a      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005756:	2001      	movs	r0, #1
 8005758:	f000 fad8 	bl	8005d0c <RCC_Delay>
 800575c:	e01c      	b.n	8005798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_RCC_OscConfig+0x274>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005764:	f7fc ff88 	bl	8002678 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576a:	e00f      	b.n	800578c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576c:	f7fc ff84 	bl	8002678 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d908      	bls.n	800578c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e140      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	42420000 	.word	0x42420000
 8005788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578c:	4b9e      	ldr	r3, [pc, #632]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e9      	bne.n	800576c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a6 	beq.w	80058f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057aa:	4b97      	ldr	r3, [pc, #604]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	4b94      	ldr	r3, [pc, #592]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4a93      	ldr	r2, [pc, #588]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80057bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c0:	61d3      	str	r3, [r2, #28]
 80057c2:	4b91      	ldr	r3, [pc, #580]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d2:	4b8e      	ldr	r3, [pc, #568]	; (8005a0c <HAL_RCC_OscConfig+0x4f8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d118      	bne.n	8005810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057de:	4b8b      	ldr	r3, [pc, #556]	; (8005a0c <HAL_RCC_OscConfig+0x4f8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a8a      	ldr	r2, [pc, #552]	; (8005a0c <HAL_RCC_OscConfig+0x4f8>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ea:	f7fc ff45 	bl	8002678 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f2:	f7fc ff41 	bl	8002678 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b64      	cmp	r3, #100	; 0x64
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e0fd      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005804:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <HAL_RCC_OscConfig+0x4f8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <HAL_RCC_OscConfig+0x312>
 8005818:	4b7b      	ldr	r3, [pc, #492]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4a7a      	ldr	r2, [pc, #488]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6213      	str	r3, [r2, #32]
 8005824:	e02d      	b.n	8005882 <HAL_RCC_OscConfig+0x36e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x334>
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4a75      	ldr	r2, [pc, #468]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	6213      	str	r3, [r2, #32]
 800583a:	4b73      	ldr	r3, [pc, #460]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	4a72      	ldr	r2, [pc, #456]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	6213      	str	r3, [r2, #32]
 8005846:	e01c      	b.n	8005882 <HAL_RCC_OscConfig+0x36e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b05      	cmp	r3, #5
 800584e:	d10c      	bne.n	800586a <HAL_RCC_OscConfig+0x356>
 8005850:	4b6d      	ldr	r3, [pc, #436]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	4a6c      	ldr	r2, [pc, #432]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6213      	str	r3, [r2, #32]
 800585c:	4b6a      	ldr	r3, [pc, #424]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	4a69      	ldr	r2, [pc, #420]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6213      	str	r3, [r2, #32]
 8005868:	e00b      	b.n	8005882 <HAL_RCC_OscConfig+0x36e>
 800586a:	4b67      	ldr	r3, [pc, #412]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4a66      	ldr	r2, [pc, #408]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6213      	str	r3, [r2, #32]
 8005876:	4b64      	ldr	r3, [pc, #400]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4a63      	ldr	r2, [pc, #396]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588a:	f7fc fef5 	bl	8002678 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fc fef1 	bl	8002678 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e0ab      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a8:	4b57      	ldr	r3, [pc, #348]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ee      	beq.n	8005892 <HAL_RCC_OscConfig+0x37e>
 80058b4:	e014      	b.n	80058e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b6:	f7fc fedf 	bl	8002678 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fc fedb 	bl	8002678 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e095      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d4:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ee      	bne.n	80058be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4b48      	ldr	r3, [pc, #288]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4a47      	ldr	r2, [pc, #284]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8081 	beq.w	80059fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058fc:	4b42      	ldr	r3, [pc, #264]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 030c 	and.w	r3, r3, #12
 8005904:	2b08      	cmp	r3, #8
 8005906:	d061      	beq.n	80059cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d146      	bne.n	800599e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <HAL_RCC_OscConfig+0x4fc>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005916:	f7fc feaf 	bl	8002678 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591e:	f7fc feab 	bl	8002678 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e067      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d108      	bne.n	8005958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005946:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	492d      	ldr	r1, [pc, #180]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005954:	4313      	orrs	r3, r2
 8005956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005958:	4b2b      	ldr	r3, [pc, #172]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a19      	ldr	r1, [r3, #32]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	430b      	orrs	r3, r1
 800596a:	4927      	ldr	r1, [pc, #156]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005970:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <HAL_RCC_OscConfig+0x4fc>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fc fe7f 	bl	8002678 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597e:	f7fc fe7b 	bl	8002678 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e037      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x46a>
 800599c:	e02f      	b.n	80059fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <HAL_RCC_OscConfig+0x4fc>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fc fe68 	bl	8002678 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fc fe64 	bl	8002678 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e020      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x498>
 80059ca:	e018      	b.n	80059fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e013      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d106      	bne.n	80059fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	42420060 	.word	0x42420060

08005a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0d0      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a28:	4b6a      	ldr	r3, [pc, #424]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d910      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b67      	ldr	r3, [pc, #412]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f023 0207 	bic.w	r2, r3, #7
 8005a3e:	4965      	ldr	r1, [pc, #404]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0b8      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a88:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4a52      	ldr	r2, [pc, #328]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	494d      	ldr	r1, [pc, #308]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d040      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d115      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad2:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e073      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae2:	4b3d      	ldr	r3, [pc, #244]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e06b      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005af2:	4b39      	ldr	r3, [pc, #228]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4936      	ldr	r1, [pc, #216]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b04:	f7fc fdb8 	bl	8002678 <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0c:	f7fc fdb4 	bl	8002678 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e053      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 020c 	and.w	r2, r3, #12
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d1eb      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b34:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d210      	bcs.n	8005b64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 0207 	bic.w	r2, r3, #7
 8005b4a:	4922      	ldr	r1, [pc, #136]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e032      	b.n	8005bca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4916      	ldr	r1, [pc, #88]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ba2:	f000 f821 	bl	8005be8 <HAL_RCC_GetSysClockFreq>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	490a      	ldr	r1, [pc, #40]	; (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bb4:	5ccb      	ldrb	r3, [r1, r3]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <HAL_RCC_ClockConfig+0x1cc>)
 8005bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1d0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fc fd16 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40022000 	.word	0x40022000
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	0800beec 	.word	0x0800beec
 8005be0:	20000000 	.word	0x20000000
 8005be4:	20000004 	.word	0x20000004

08005be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be8:	b490      	push	{r4, r7}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005bee:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005bf0:	1d3c      	adds	r4, r7, #4
 8005bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005bf8:	f240 2301 	movw	r3, #513	; 0x201
 8005bfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	2300      	movs	r3, #0
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c12:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d002      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x40>
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d003      	beq.n	8005c2e <HAL_RCC_GetSysClockFreq+0x46>
 8005c26:	e02d      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c28:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c2a:	623b      	str	r3, [r7, #32]
      break;
 8005c2c:	e02d      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	0c9b      	lsrs	r3, r3, #18
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	0c5b      	lsrs	r3, r3, #17
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c66:	fb02 f203 	mul.w	r2, r2, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	e004      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4a0b      	ldr	r2, [pc, #44]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	623b      	str	r3, [r7, #32]
      break;
 8005c82:	e002      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c86:	623b      	str	r3, [r7, #32]
      break;
 8005c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc90      	pop	{r4, r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	0800bd1c 	.word	0x0800bd1c
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	007a1200 	.word	0x007a1200
 8005ca4:	003d0900 	.word	0x003d0900

08005ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	20000000 	.word	0x20000000

08005cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cc0:	f7ff fff2 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	4903      	ldr	r1, [pc, #12]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	0800befc 	.word	0x0800befc

08005ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ce8:	f7ff ffde 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cec:	4602      	mov	r2, r0
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	0adb      	lsrs	r3, r3, #11
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cfa:	5ccb      	ldrb	r3, [r1, r3]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	0800befc 	.word	0x0800befc

08005d0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <RCC_Delay+0x34>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <RCC_Delay+0x38>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	0a5b      	lsrs	r3, r3, #9
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d28:	bf00      	nop
  }
  while (Delay --);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1e5a      	subs	r2, r3, #1
 8005d2e:	60fa      	str	r2, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f9      	bne.n	8005d28 <RCC_Delay+0x1c>
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	20000000 	.word	0x20000000
 8005d44:	10624dd3 	.word	0x10624dd3

08005d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d07d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d64:	2300      	movs	r3, #0
 8005d66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d68:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10d      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d74:	4b4c      	ldr	r3, [pc, #304]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	4a4b      	ldr	r2, [pc, #300]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	61d3      	str	r3, [r2, #28]
 8005d80:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d90:	4b46      	ldr	r3, [pc, #280]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d118      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d9c:	4b43      	ldr	r3, [pc, #268]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a42      	ldr	r2, [pc, #264]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da8:	f7fc fc66 	bl	8002678 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dae:	e008      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db0:	f7fc fc62 	bl	8002678 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e06d      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	4b3a      	ldr	r3, [pc, #232]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dce:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d02e      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d027      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dec:	4b2e      	ldr	r3, [pc, #184]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df6:	4b2e      	ldr	r3, [pc, #184]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e02:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d014      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fc fc31 	bl	8002678 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fc fc2d 	bl	8002678 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e036      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ee      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4917      	ldr	r1, [pc, #92]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d105      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e54:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	490b      	ldr	r1, [pc, #44]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4904      	ldr	r1, [pc, #16]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	42420440 	.word	0x42420440

08005eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e041      	b.n	8005f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc fa24 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f000 fc28 	bl	8006748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d001      	beq.n	8005f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e03a      	b.n	8005fe2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_TIM_Base_Start_IT+0x98>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x58>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d009      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x58>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x58>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d111      	bne.n	8005fd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b06      	cmp	r3, #6
 8005fbc:	d010      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	e007      	b.n	8005fe0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800

08005ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e041      	b.n	800608e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f839 	bl	8006096 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 fb86 	bl	8006748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d109      	bne.n	80060cc <HAL_TIM_PWM_Start+0x24>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e022      	b.n	8006112 <HAL_TIM_PWM_Start+0x6a>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d109      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x3e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e015      	b.n	8006112 <HAL_TIM_PWM_Start+0x6a>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d109      	bne.n	8006100 <HAL_TIM_PWM_Start+0x58>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	e008      	b.n	8006112 <HAL_TIM_PWM_Start+0x6a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e05e      	b.n	80061d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0x82>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	e013      	b.n	8006152 <HAL_TIM_PWM_Start+0xaa>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b04      	cmp	r3, #4
 800612e:	d104      	bne.n	800613a <HAL_TIM_PWM_Start+0x92>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006138:	e00b      	b.n	8006152 <HAL_TIM_PWM_Start+0xaa>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Start+0xa2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006148:	e003      	b.n	8006152 <HAL_TIM_PWM_Start+0xaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2201      	movs	r2, #1
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fd74 	bl	8006c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIM_PWM_Start+0x138>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d107      	bne.n	800617a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <HAL_TIM_PWM_Start+0x138>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00e      	beq.n	80061a2 <HAL_TIM_PWM_Start+0xfa>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618c:	d009      	beq.n	80061a2 <HAL_TIM_PWM_Start+0xfa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <HAL_TIM_PWM_Start+0x13c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d004      	beq.n	80061a2 <HAL_TIM_PWM_Start+0xfa>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a12      	ldr	r2, [pc, #72]	; (80061e8 <HAL_TIM_PWM_Start+0x140>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d111      	bne.n	80061c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d010      	beq.n	80061d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c4:	e007      	b.n	80061d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800

080061ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d122      	bne.n	8006248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d11b      	bne.n	8006248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0202 	mvn.w	r2, #2
 8006218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa6f 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa62 	bl	8006700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa71 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b04      	cmp	r3, #4
 8006254:	d122      	bne.n	800629c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b04      	cmp	r3, #4
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0204 	mvn.w	r2, #4
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa45 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa38 	bl	8006700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fa47 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d122      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d11b      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0208 	mvn.w	r2, #8
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2204      	movs	r2, #4
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa1b 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa0e 	bl	8006700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa1d 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d122      	bne.n	8006344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d11b      	bne.n	8006344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0210 	mvn.w	r2, #16
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2208      	movs	r2, #8
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9f1 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9e4 	bl	8006700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f9f3 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0201 	mvn.w	r2, #1
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fa f956 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006388:	2b80      	cmp	r3, #128	; 0x80
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fce1 	bl	8006d5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d10e      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d107      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9b7 	bl	8006736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d10e      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d107      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0220 	mvn.w	r2, #32
 80063ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fcac 	bl	8006d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006412:	2302      	movs	r3, #2
 8006414:	e0ac      	b.n	8006570 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	f200 809f 	bhi.w	8006564 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006461 	.word	0x08006461
 8006430:	08006565 	.word	0x08006565
 8006434:	08006565 	.word	0x08006565
 8006438:	08006565 	.word	0x08006565
 800643c:	080064a1 	.word	0x080064a1
 8006440:	08006565 	.word	0x08006565
 8006444:	08006565 	.word	0x08006565
 8006448:	08006565 	.word	0x08006565
 800644c:	080064e3 	.word	0x080064e3
 8006450:	08006565 	.word	0x08006565
 8006454:	08006565 	.word	0x08006565
 8006458:	08006565 	.word	0x08006565
 800645c:	08006523 	.word	0x08006523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f9d0 	bl	800680c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0208 	orr.w	r2, r2, #8
 800647a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0204 	bic.w	r2, r2, #4
 800648a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6999      	ldr	r1, [r3, #24]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	619a      	str	r2, [r3, #24]
      break;
 800649e:	e062      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fa16 	bl	80068d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6999      	ldr	r1, [r3, #24]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	021a      	lsls	r2, r3, #8
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	619a      	str	r2, [r3, #24]
      break;
 80064e0:	e041      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fa5f 	bl	80069ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0208 	orr.w	r2, r2, #8
 80064fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0204 	bic.w	r2, r2, #4
 800650c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69d9      	ldr	r1, [r3, #28]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	61da      	str	r2, [r3, #28]
      break;
 8006520:	e021      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 faa9 	bl	8006a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69d9      	ldr	r1, [r3, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	021a      	lsls	r2, r3, #8
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	61da      	str	r2, [r3, #28]
      break;
 8006562:	e000      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_TIM_ConfigClockSource+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e0b3      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x180>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c8:	d03e      	beq.n	8006648 <HAL_TIM_ConfigClockSource+0xd0>
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ce:	f200 8087 	bhi.w	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	f000 8085 	beq.w	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	d87f      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 80065e0:	2b70      	cmp	r3, #112	; 0x70
 80065e2:	d01a      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xa2>
 80065e4:	2b70      	cmp	r3, #112	; 0x70
 80065e6:	d87b      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 80065e8:	2b60      	cmp	r3, #96	; 0x60
 80065ea:	d050      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x116>
 80065ec:	2b60      	cmp	r3, #96	; 0x60
 80065ee:	d877      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 80065f0:	2b50      	cmp	r3, #80	; 0x50
 80065f2:	d03c      	beq.n	800666e <HAL_TIM_ConfigClockSource+0xf6>
 80065f4:	2b50      	cmp	r3, #80	; 0x50
 80065f6:	d873      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d058      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x136>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d86f      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 8006600:	2b30      	cmp	r3, #48	; 0x30
 8006602:	d064      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x156>
 8006604:	2b30      	cmp	r3, #48	; 0x30
 8006606:	d86b      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 8006608:	2b20      	cmp	r3, #32
 800660a:	d060      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x156>
 800660c:	2b20      	cmp	r3, #32
 800660e:	d867      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x156>
 8006614:	2b10      	cmp	r3, #16
 8006616:	d05a      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006618:	e062      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f000 faee 	bl	8006c0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800663c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	609a      	str	r2, [r3, #8]
      break;
 8006646:	e04e      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6899      	ldr	r1, [r3, #8]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f000 fad7 	bl	8006c0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666a:	609a      	str	r2, [r3, #8]
      break;
 800666c:	e03b      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	6859      	ldr	r1, [r3, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	461a      	mov	r2, r3
 800667c:	f000 fa4e 	bl	8006b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2150      	movs	r1, #80	; 0x50
 8006686:	4618      	mov	r0, r3
 8006688:	f000 faa5 	bl	8006bd6 <TIM_ITRx_SetConfig>
      break;
 800668c:	e02b      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	461a      	mov	r2, r3
 800669c:	f000 fa6c 	bl	8006b78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2160      	movs	r1, #96	; 0x60
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fa95 	bl	8006bd6 <TIM_ITRx_SetConfig>
      break;
 80066ac:	e01b      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fa2e 	bl	8006b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fa85 	bl	8006bd6 <TIM_ITRx_SetConfig>
      break;
 80066cc:	e00b      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f000 fa7c 	bl	8006bd6 <TIM_ITRx_SetConfig>
        break;
 80066de:	e002      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80066e0:	bf00      	nop
 80066e2:	e000      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80066e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <TIM_Base_SetConfig+0xb8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00b      	beq.n	8006778 <TIM_Base_SetConfig+0x30>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006766:	d007      	beq.n	8006778 <TIM_Base_SetConfig+0x30>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a26      	ldr	r2, [pc, #152]	; (8006804 <TIM_Base_SetConfig+0xbc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_Base_SetConfig+0x30>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a25      	ldr	r2, [pc, #148]	; (8006808 <TIM_Base_SetConfig+0xc0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d108      	bne.n	800678a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1c      	ldr	r2, [pc, #112]	; (8006800 <TIM_Base_SetConfig+0xb8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_Base_SetConfig+0x62>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d007      	beq.n	80067aa <TIM_Base_SetConfig+0x62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a19      	ldr	r2, [pc, #100]	; (8006804 <TIM_Base_SetConfig+0xbc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_Base_SetConfig+0x62>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <TIM_Base_SetConfig+0xc0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d108      	bne.n	80067bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <TIM_Base_SetConfig+0xb8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	615a      	str	r2, [r3, #20]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800

0800680c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 0302 	bic.w	r3, r3, #2
 8006854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <TIM_OC1_SetConfig+0xc8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d10c      	bne.n	8006882 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f023 0308 	bic.w	r3, r3, #8
 800686e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <TIM_OC1_SetConfig+0xc8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d111      	bne.n	80068ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	621a      	str	r2, [r3, #32]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40012c00 	.word	0x40012c00

080068d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0210 	bic.w	r2, r3, #16
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0320 	bic.w	r3, r3, #32
 8006922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <TIM_OC2_SetConfig+0xd0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d10d      	bne.n	8006954 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <TIM_OC2_SetConfig+0xd0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d113      	bne.n	8006984 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	40012c00 	.word	0x40012c00

080069ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <TIM_OC3_SetConfig+0xd0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d10d      	bne.n	8006a26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a14      	ldr	r2, [pc, #80]	; (8006a7c <TIM_OC3_SetConfig+0xd0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d113      	bne.n	8006a56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	621a      	str	r2, [r3, #32]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40012c00 	.word	0x40012c00

08006a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0f      	ldr	r2, [pc, #60]	; (8006b18 <TIM_OC4_SetConfig+0x98>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d109      	bne.n	8006af4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	019b      	lsls	r3, r3, #6
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	40012c00 	.word	0x40012c00

08006b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 030a 	bic.w	r3, r3, #10
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f023 0210 	bic.w	r2, r3, #16
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	031b      	lsls	r3, r3, #12
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f043 0307 	orr.w	r3, r3, #7
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b087      	sub	sp, #28
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	021a      	lsls	r2, r3, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	609a      	str	r2, [r3, #8]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1a      	ldr	r2, [r3, #32]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	431a      	orrs	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e046      	b.n	8006d36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf4:	d009      	beq.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a12      	ldr	r2, [pc, #72]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d10c      	bne.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	40000400 	.word	0x40000400
 8006d48:	40000800 	.word	0x40000800

08006d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e03f      	b.n	8006e02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fb fb3c 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2224      	movs	r2, #36	; 0x24
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc35 	bl	8007624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d11d      	bne.n	8006e60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_UART_Receive_IT+0x26>
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e016      	b.n	8006e62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Receive_IT+0x38>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e00f      	b.n	8006e62 <HAL_UART_Receive_IT+0x58>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	461a      	mov	r2, r3
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fa42 	bl	80072e0 <UART_Start_Receive_IT>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	e000      	b.n	8006e62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d107      	bne.n	8006eac <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0210 	bic.w	r2, r2, #16
 8006eaa:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d02d      	beq.n	8006f16 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <HAL_UART_AbortReceive_IT+0xd0>)
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fc f998 	bl	8003214 <HAL_DMA_Abort_IT>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d022      	beq.n	8006f30 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	e01a      	b.n	8006f30 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9d2 	bl	80072b8 <HAL_UART_AbortReceiveCpltCallback>
 8006f14:	e00c      	b.n	8006f30 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f9c4 	bl	80072b8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	080073d3 	.word	0x080073d3

08006f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <HAL_UART_IRQHandler+0x52>
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 faa0 	bl	80074d0 <UART_Receive_IT>
      return;
 8006f90:	e17b      	b.n	800728a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80b1 	beq.w	80070fc <HAL_UART_IRQHandler+0x1bc>
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <HAL_UART_IRQHandler+0x70>
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 80a6 	beq.w	80070fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x90>
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	f043 0201 	orr.w	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <HAL_UART_IRQHandler+0xb0>
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	f043 0202 	orr.w	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_UART_IRQHandler+0xd0>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f043 0204 	orr.w	r2, r3, #4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00f      	beq.n	800703a <HAL_UART_IRQHandler+0xfa>
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <HAL_UART_IRQHandler+0xee>
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f043 0208 	orr.w	r2, r3, #8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 811e 	beq.w	8007280 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <HAL_UART_IRQHandler+0x11e>
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa39 	bl	80074d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf14      	ite	ne
 800706c:	2301      	movne	r3, #1
 800706e:	2300      	moveq	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <HAL_UART_IRQHandler+0x146>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d031      	beq.n	80070ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f963 	bl	8007352 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d023      	beq.n	80070e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d013      	beq.n	80070da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	4a76      	ldr	r2, [pc, #472]	; (8007290 <HAL_UART_IRQHandler+0x350>)
 80070b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fc f8a8 	bl	8003214 <HAL_DMA_Abort_IT>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d016      	beq.n	80070f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	e00e      	b.n	80070f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8e3 	bl	80072a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	e00a      	b.n	80070f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8df 	bl	80072a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e8:	e006      	b.n	80070f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8db 	bl	80072a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80070f6:	e0c3      	b.n	8007280 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f8:	bf00      	nop
    return;
 80070fa:	e0c1      	b.n	8007280 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	2b01      	cmp	r3, #1
 8007102:	f040 80a1 	bne.w	8007248 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 809b 	beq.w	8007248 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8095 	beq.w	8007248 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d04e      	beq.n	80071e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800714c:	8a3b      	ldrh	r3, [r7, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8098 	beq.w	8007284 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007158:	8a3a      	ldrh	r2, [r7, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	f080 8092 	bcs.w	8007284 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8a3a      	ldrh	r2, [r7, #16]
 8007164:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b20      	cmp	r3, #32
 800716e:	d02b      	beq.n	80071c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0210 	bic.w	r2, r2, #16
 80071bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fb ffeb 	bl	800319e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f876 	bl	80072ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071de:	e051      	b.n	8007284 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d047      	beq.n	8007288 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80071f8:	8a7b      	ldrh	r3, [r7, #18]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d044      	beq.n	8007288 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800720c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0210 	bic.w	r2, r2, #16
 800723a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800723c:	8a7b      	ldrh	r3, [r7, #18]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f842 	bl	80072ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007246:	e01f      	b.n	8007288 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724e:	2b00      	cmp	r3, #0
 8007250:	d008      	beq.n	8007264 <HAL_UART_IRQHandler+0x324>
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f8d0 	bl	8007402 <UART_Transmit_IT>
    return;
 8007262:	e012      	b.n	800728a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <HAL_UART_IRQHandler+0x34a>
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f911 	bl	80074a0 <UART_EndTransmit_IT>
    return;
 800727e:	e004      	b.n	800728a <HAL_UART_IRQHandler+0x34a>
    return;
 8007280:	bf00      	nop
 8007282:	e002      	b.n	800728a <HAL_UART_IRQHandler+0x34a>
      return;
 8007284:	bf00      	nop
 8007286:	e000      	b.n	800728a <HAL_UART_IRQHandler+0x34a>
      return;
 8007288:	bf00      	nop
  }
}
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	080073ab 	.word	0x080073ab

08007294 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr

080072e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2222      	movs	r2, #34	; 0x22
 800730a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007324:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0201 	orr.w	r2, r2, #1
 8007334:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0220 	orr.w	r2, r2, #32
 8007344:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007368:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695a      	ldr	r2, [r3, #20]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0201 	bic.w	r2, r2, #1
 8007378:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	2b01      	cmp	r3, #1
 8007380:	d107      	bne.n	8007392 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0210 	bic.w	r2, r2, #16
 8007390:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr

080073aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff ff6e 	bl	80072a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff ff5f 	bl	80072b8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b21      	cmp	r3, #33	; 0x21
 8007414:	d13e      	bne.n	8007494 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741e:	d114      	bne.n	800744a <UART_Transmit_IT+0x48>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d110      	bne.n	800744a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800743c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	1c9a      	adds	r2, r3, #2
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	621a      	str	r2, [r3, #32]
 8007448:	e008      	b.n	800745c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	1c59      	adds	r1, r3, #1
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6211      	str	r1, [r2, #32]
 8007454:	781a      	ldrb	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29b      	uxth	r3, r3
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4619      	mov	r1, r3
 800746a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10f      	bne.n	8007490 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800747e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	e000      	b.n	8007496 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007494:	2302      	movs	r3, #2
  }
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fee7 	bl	8007294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b22      	cmp	r3, #34	; 0x22
 80074e2:	f040 8099 	bne.w	8007618 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	d117      	bne.n	8007520 <UART_Receive_IT+0x50>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d113      	bne.n	8007520 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	b29a      	uxth	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	1c9a      	adds	r2, r3, #2
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	629a      	str	r2, [r3, #40]	; 0x28
 800751e:	e026      	b.n	800756e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	d007      	beq.n	8007544 <UART_Receive_IT+0x74>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <UART_Receive_IT+0x82>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e008      	b.n	8007564 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	b2da      	uxtb	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29b      	uxth	r3, r3
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800757e:	2b00      	cmp	r3, #0
 8007580:	d148      	bne.n	8007614 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0220 	bic.w	r2, r2, #32
 8007590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d123      	bne.n	800760a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0210 	bic.w	r2, r2, #16
 80075d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d10a      	bne.n	80075fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fe61 	bl	80072ca <HAL_UARTEx_RxEventCallback>
 8007608:	e002      	b.n	8007610 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7f9 fa62 	bl	8000ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	e002      	b.n	800761a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800765e:	f023 030c 	bic.w	r3, r3, #12
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	430b      	orrs	r3, r1
 800766a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2c      	ldr	r2, [pc, #176]	; (8007738 <UART_SetConfig+0x114>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d103      	bne.n	8007694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800768c:	f7fe fb2a 	bl	8005ce4 <HAL_RCC_GetPCLK2Freq>
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	e002      	b.n	800769a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fe fb12 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 8007698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009a      	lsls	r2, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <UART_SetConfig+0x118>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	0119      	lsls	r1, r3, #4
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009a      	lsls	r2, r3, #2
 80076c4:	441a      	add	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <UART_SetConfig+0x118>)
 80076d2:	fba3 0302 	umull	r0, r3, r3, r2
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	2064      	movs	r0, #100	; 0x64
 80076da:	fb00 f303 	mul.w	r3, r0, r3
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	3332      	adds	r3, #50	; 0x32
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <UART_SetConfig+0x118>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f0:	4419      	add	r1, r3
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009a      	lsls	r2, r3, #2
 80076fc:	441a      	add	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	fbb2 f2f3 	udiv	r2, r2, r3
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <UART_SetConfig+0x118>)
 800770a:	fba3 0302 	umull	r0, r3, r3, r2
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	2064      	movs	r0, #100	; 0x64
 8007712:	fb00 f303 	mul.w	r3, r0, r3
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	3332      	adds	r3, #50	; 0x32
 800771c:	4a07      	ldr	r2, [pc, #28]	; (800773c <UART_SetConfig+0x118>)
 800771e:	fba2 2303 	umull	r2, r3, r2, r3
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	440a      	add	r2, r1
 800772e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40013800 	.word	0x40013800
 800773c:	51eb851f 	.word	0x51eb851f

08007740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007740:	b084      	sub	sp, #16
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	f107 0014 	add.w	r0, r7, #20
 800774e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	b004      	add	sp, #16
 800775e:	4770      	bx	lr

08007760 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007770:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007774:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	b29a      	uxth	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007794:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007798:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	4013      	ands	r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077d8:	b084      	sub	sp, #16
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	f107 0014 	add.w	r0, r7, #20
 80077e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	b004      	add	sp, #16
 8007816:	4770      	bx	lr

08007818 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007818:	b480      	push	{r7}
 800781a:	b09b      	sub	sp, #108	; 0x6c
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	78db      	ldrb	r3, [r3, #3]
 8007846:	2b03      	cmp	r3, #3
 8007848:	d81f      	bhi.n	800788a <USB_ActivateEndpoint+0x72>
 800784a:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <USB_ActivateEndpoint+0x38>)
 800784c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007850:	08007861 	.word	0x08007861
 8007854:	0800787d 	.word	0x0800787d
 8007858:	08007893 	.word	0x08007893
 800785c:	0800786f 	.word	0x0800786f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007860:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007868:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800786c:	e012      	b.n	8007894 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800786e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007872:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007876:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800787a:	e00b      	b.n	8007894 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800787c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007884:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007888:	e004      	b.n	8007894 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007890:	e000      	b.n	8007894 <USB_ActivateEndpoint+0x7c>
      break;
 8007892:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	441a      	add	r2, r3
 80078e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80078e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	7b1b      	ldrb	r3, [r3, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 8149 	bne.w	8007b98 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8084 	beq.w	8007a18 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	4413      	add	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	88db      	ldrh	r3, [r3, #6]
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	81fb      	strh	r3, [r7, #14]
 8007952:	89fb      	ldrh	r3, [r7, #14]
 8007954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01b      	beq.n	8007994 <USB_ActivateEndpoint+0x17c>
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007972:	81bb      	strh	r3, [r7, #12]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	89bb      	ldrh	r3, [r7, #12]
 8007980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007990:	b29b      	uxth	r3, r3
 8007992:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	78db      	ldrb	r3, [r3, #3]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d020      	beq.n	80079de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b2:	813b      	strh	r3, [r7, #8]
 80079b4:	893b      	ldrh	r3, [r7, #8]
 80079b6:	f083 0320 	eor.w	r3, r3, #32
 80079ba:	813b      	strh	r3, [r7, #8]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d8:	b29b      	uxth	r3, r3
 80079da:	8013      	strh	r3, [r2, #0]
 80079dc:	e27f      	b.n	8007ede <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	817b      	strh	r3, [r7, #10]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	441a      	add	r2, r3
 8007a00:	897b      	ldrh	r3, [r7, #10]
 8007a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]
 8007a16:	e262      	b.n	8007ede <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	4413      	add	r3, r2
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	011a      	lsls	r2, r3, #4
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	88db      	ldrh	r3, [r3, #6]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	4413      	add	r3, r2
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	011a      	lsls	r2, r3, #4
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	4413      	add	r3, r2
 8007a6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d112      	bne.n	8007a9e <USB_ActivateEndpoint+0x286>
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	e02f      	b.n	8007afe <USB_ActivateEndpoint+0x2e6>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8007aa4:	d813      	bhi.n	8007ace <USB_ActivateEndpoint+0x2b6>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	663b      	str	r3, [r7, #96]	; 0x60
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <USB_ActivateEndpoint+0x2a8>
 8007aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007abc:	3301      	adds	r3, #1
 8007abe:	663b      	str	r3, [r7, #96]	; 0x60
 8007ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	029b      	lsls	r3, r3, #10
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	e017      	b.n	8007afe <USB_ActivateEndpoint+0x2e6>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <USB_ActivateEndpoint+0x2d0>
 8007ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	029b      	lsls	r3, r3, #10
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	83fb      	strh	r3, [r7, #30]
 8007b0c:	8bfb      	ldrh	r3, [r7, #30]
 8007b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01b      	beq.n	8007b4e <USB_ActivateEndpoint+0x336>
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2c:	83bb      	strh	r3, [r7, #28]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	8bbb      	ldrh	r3, [r7, #28]
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b64:	837b      	strh	r3, [r7, #26]
 8007b66:	8b7b      	ldrh	r3, [r7, #26]
 8007b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b6c:	837b      	strh	r3, [r7, #26]
 8007b6e:	8b7b      	ldrh	r3, [r7, #26]
 8007b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b74:	837b      	strh	r3, [r7, #26]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	441a      	add	r2, r3
 8007b80:	8b7b      	ldrh	r3, [r7, #26]
 8007b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	8013      	strh	r3, [r2, #0]
 8007b96:	e1a2      	b.n	8007ede <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007be4:	4413      	add	r3, r2
 8007be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	011a      	lsls	r2, r3, #4
 8007bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	891b      	ldrh	r3, [r3, #8]
 8007bfc:	085b      	lsrs	r3, r3, #1
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c18:	4413      	add	r3, r2
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	011a      	lsls	r2, r3, #4
 8007c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	895b      	ldrh	r3, [r3, #10]
 8007c30:	085b      	lsrs	r3, r3, #1
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f040 8091 	bne.w	8007d68 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007c54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01b      	beq.n	8007c96 <USB_ActivateEndpoint+0x47e>
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	873b      	strh	r3, [r7, #56]	; 0x38
 8007ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01b      	beq.n	8007ce6 <USB_ActivateEndpoint+0x4ce>
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	441a      	add	r2, r3
 8007cd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007cfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007d06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d44:	867b      	strh	r3, [r7, #50]	; 0x32
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	441a      	add	r2, r3
 8007d50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	8013      	strh	r3, [r2, #0]
 8007d66:	e0ba      	b.n	8007ede <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01d      	beq.n	8007dc0 <USB_ActivateEndpoint+0x5a8>
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01d      	beq.n	8007e18 <USB_ActivateEndpoint+0x600>
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	441a      	add	r2, r3
 8007e00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	78db      	ldrb	r3, [r3, #3]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d024      	beq.n	8007e6a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007e3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e3e:	f083 0320 	eor.w	r3, r3, #32
 8007e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]
 8007e68:	e01d      	b.n	8007ea6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	441a      	add	r2, r3
 8007e8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	376c      	adds	r7, #108	; 0x6c
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b08d      	sub	sp, #52	; 0x34
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	7b1b      	ldrb	r3, [r3, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 808e 	bne.w	800801c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d044      	beq.n	8007f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	81bb      	strh	r3, [r7, #12]
 8007f16:	89bb      	ldrh	r3, [r7, #12]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01b      	beq.n	8007f58 <USB_DeactivateEndpoint+0x6c>
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f36:	817b      	strh	r3, [r7, #10]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	897b      	ldrh	r3, [r7, #10]
 8007f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f6e:	813b      	strh	r3, [r7, #8]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	893b      	ldrh	r3, [r7, #8]
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]
 8007f90:	e192      	b.n	80082b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	827b      	strh	r3, [r7, #18]
 8007fa0:	8a7b      	ldrh	r3, [r7, #18]
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01b      	beq.n	8007fe2 <USB_DeactivateEndpoint+0xf6>
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	823b      	strh	r3, [r7, #16]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	8a3b      	ldrh	r3, [r7, #16]
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff8:	81fb      	strh	r3, [r7, #14]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
 800801a:	e14d      	b.n	80082b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 80a5 	bne.w	8008170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	843b      	strh	r3, [r7, #32]
 8008034:	8c3b      	ldrh	r3, [r7, #32]
 8008036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01b      	beq.n	8008076 <USB_DeactivateEndpoint+0x18a>
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008054:	83fb      	strh	r3, [r7, #30]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	441a      	add	r2, r3
 8008060:	8bfb      	ldrh	r3, [r7, #30]
 8008062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800806e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008072:	b29b      	uxth	r3, r3
 8008074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	83bb      	strh	r3, [r7, #28]
 8008084:	8bbb      	ldrh	r3, [r7, #28]
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <USB_DeactivateEndpoint+0x1da>
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	837b      	strh	r3, [r7, #26]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	8b7b      	ldrh	r3, [r7, #26]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080dc:	833b      	strh	r3, [r7, #24]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	8b3b      	ldrh	r3, [r7, #24]
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	82fb      	strh	r3, [r7, #22]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	441a      	add	r2, r3
 8008120:	8afb      	ldrh	r3, [r7, #22]
 8008122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800812a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008132:	b29b      	uxth	r3, r3
 8008134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814c:	82bb      	strh	r3, [r7, #20]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	8abb      	ldrh	r3, [r7, #20]
 800815a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816a:	b29b      	uxth	r3, r3
 800816c:	8013      	strh	r3, [r2, #0]
 800816e:	e0a3      	b.n	80082b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800817e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01b      	beq.n	80081c0 <USB_DeactivateEndpoint+0x2d4>
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	441a      	add	r2, r3
 80081aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081bc:	b29b      	uxth	r3, r3
 80081be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80081ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <USB_DeactivateEndpoint+0x324>
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800820c:	b29b      	uxth	r3, r3
 800820e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	441a      	add	r2, r3
 8008232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	b29b      	uxth	r3, r3
 8008246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800826c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	b29b      	uxth	r3, r3
 800827e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	847b      	strh	r3, [r7, #34]	; 0x22
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3734      	adds	r7, #52	; 0x34
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b0cc      	sub	sp, #304	; 0x130
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	1d3b      	adds	r3, r7, #4
 80082cc:	6018      	str	r0, [r3, #0]
 80082ce:	463b      	mov	r3, r7
 80082d0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	f040 872e 	bne.w	800913a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	463b      	mov	r3, r7
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d905      	bls.n	80082fa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80082ee:	463b      	mov	r3, r7
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80082f8:	e004      	b.n	8008304 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80082fa:	463b      	mov	r3, r7
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008304:	463b      	mov	r3, r7
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	7b1b      	ldrb	r3, [r3, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d134      	bne.n	8008378 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800830e:	463b      	mov	r3, r7
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6959      	ldr	r1, [r3, #20]
 8008314:	463b      	mov	r3, r7
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	88da      	ldrh	r2, [r3, #6]
 800831a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831e:	b29b      	uxth	r3, r3
 8008320:	1d38      	adds	r0, r7, #4
 8008322:	6800      	ldr	r0, [r0, #0]
 8008324:	f001 fc03 	bl	8009b2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008328:	f107 0310 	add.w	r3, r7, #16
 800832c:	1d3a      	adds	r2, r7, #4
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	1d3b      	adds	r3, r7, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	4619      	mov	r1, r3
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	f107 0210 	add.w	r2, r7, #16
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	440a      	add	r2, r1
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	463b      	mov	r3, r7
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	011a      	lsls	r2, r3, #4
 8008354:	f107 0310 	add.w	r3, r7, #16
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4413      	add	r3, r2
 800835c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008360:	f107 030c 	add.w	r3, r7, #12
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836a:	b29a      	uxth	r2, r3
 800836c:	f107 030c 	add.w	r3, r7, #12
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	f000 beac 	b.w	80090d0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	78db      	ldrb	r3, [r3, #3]
 800837e:	2b02      	cmp	r3, #2
 8008380:	f040 838c 	bne.w	8008a9c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008384:	463b      	mov	r3, r7
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6a1a      	ldr	r2, [r3, #32]
 800838a:	463b      	mov	r3, r7
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	f240 8330 	bls.w	80089f6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008396:	1d3b      	adds	r3, r7, #4
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	463b      	mov	r3, r7
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80083b4:	1d3b      	adds	r3, r7, #4
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	463b      	mov	r3, r7
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	441a      	add	r2, r3
 80083c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80083da:	463b      	mov	r3, r7
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	463b      	mov	r3, r7
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083ec:	1d3b      	adds	r3, r7, #4
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	463b      	mov	r3, r7
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 819e 	beq.w	8008744 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800840c:	1d3a      	adds	r2, r7, #4
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	463b      	mov	r3, r7
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d17a      	bne.n	8008512 <USB_EPStartXfer+0x24e>
 800841c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008420:	1d3a      	adds	r2, r7, #4
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	1d3b      	adds	r3, r7, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800842e:	b29b      	uxth	r3, r3
 8008430:	4619      	mov	r1, r3
 8008432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	440a      	add	r2, r1
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	463b      	mov	r3, r7
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	011a      	lsls	r2, r3, #4
 8008448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4413      	add	r3, r2
 8008450:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d11a      	bne.n	8008498 <USB_EPStartXfer+0x1d4>
 8008462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008470:	b29a      	uxth	r2, r3
 8008472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800848c:	b29a      	uxth	r2, r3
 800848e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	801a      	strh	r2, [r3, #0]
 8008496:	e062      	b.n	800855e <USB_EPStartXfer+0x29a>
 8008498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800849c:	2b3e      	cmp	r3, #62	; 0x3e
 800849e:	d819      	bhi.n	80084d4 <USB_EPStartXfer+0x210>
 80084a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80084aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <USB_EPStartXfer+0x1fc>
 80084b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084ba:	3301      	adds	r3, #1
 80084bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80084c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	029b      	lsls	r3, r3, #10
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	e044      	b.n	800855e <USB_EPStartXfer+0x29a>
 80084d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80084de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e2:	f003 031f 	and.w	r3, r3, #31
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <USB_EPStartXfer+0x230>
 80084ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084ee:	3b01      	subs	r3, #1
 80084f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80084f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	029b      	lsls	r3, r3, #10
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008506:	b29a      	uxth	r2, r3
 8008508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	e025      	b.n	800855e <USB_EPStartXfer+0x29a>
 8008512:	463b      	mov	r3, r7
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d120      	bne.n	800855e <USB_EPStartXfer+0x29a>
 800851c:	1d3b      	adds	r3, r7, #4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008524:	b29b      	uxth	r3, r3
 8008526:	4619      	mov	r1, r3
 8008528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800852c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	440a      	add	r2, r1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	463b      	mov	r3, r7
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	011a      	lsls	r2, r3, #4
 800853e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4413      	add	r3, r2
 8008546:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800854a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008554:	b29a      	uxth	r2, r3
 8008556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800855e:	463b      	mov	r3, r7
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	895b      	ldrh	r3, [r3, #10]
 8008564:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008568:	463b      	mov	r3, r7
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6959      	ldr	r1, [r3, #20]
 800856e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008572:	b29b      	uxth	r3, r3
 8008574:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008578:	1d38      	adds	r0, r7, #4
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	f001 fad7 	bl	8009b2e <USB_WritePMA>
            ep->xfer_buff += len;
 8008580:	463b      	mov	r3, r7
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695a      	ldr	r2, [r3, #20]
 8008586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858a:	441a      	add	r2, r3
 800858c:	463b      	mov	r3, r7
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008592:	463b      	mov	r3, r7
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6a1a      	ldr	r2, [r3, #32]
 8008598:	463b      	mov	r3, r7
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d909      	bls.n	80085b6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80085a2:	463b      	mov	r3, r7
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6a1a      	ldr	r2, [r3, #32]
 80085a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ac:	1ad2      	subs	r2, r2, r3
 80085ae:	463b      	mov	r3, r7
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	621a      	str	r2, [r3, #32]
 80085b4:	e008      	b.n	80085c8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2200      	movs	r2, #0
 80085c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085c8:	463b      	mov	r3, r7
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d17a      	bne.n	80086c8 <USB_EPStartXfer+0x404>
 80085d2:	f107 0318 	add.w	r3, r7, #24
 80085d6:	1d3a      	adds	r2, r7, #4
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	f107 0318 	add.w	r3, r7, #24
 80085ec:	f107 0218 	add.w	r2, r7, #24
 80085f0:	6812      	ldr	r2, [r2, #0]
 80085f2:	440a      	add	r2, r1
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	463b      	mov	r3, r7
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	011a      	lsls	r2, r3, #4
 80085fe:	f107 0318 	add.w	r3, r7, #24
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4413      	add	r3, r2
 8008606:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800860a:	f107 0314 	add.w	r3, r7, #20
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11a      	bne.n	800864e <USB_EPStartXfer+0x38a>
 8008618:	f107 0314 	add.w	r3, r7, #20
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008626:	b29a      	uxth	r2, r3
 8008628:	f107 0314 	add.w	r3, r7, #20
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	f107 0314 	add.w	r3, r7, #20
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008642:	b29a      	uxth	r2, r3
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	e067      	b.n	800871e <USB_EPStartXfer+0x45a>
 800864e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008652:	2b3e      	cmp	r3, #62	; 0x3e
 8008654:	d819      	bhi.n	800868a <USB_EPStartXfer+0x3c6>
 8008656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <USB_EPStartXfer+0x3b2>
 800866c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008670:	3301      	adds	r3, #1
 8008672:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008676:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800867a:	b29b      	uxth	r3, r3
 800867c:	029b      	lsls	r3, r3, #10
 800867e:	b29a      	uxth	r2, r3
 8008680:	f107 0314 	add.w	r3, r7, #20
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e049      	b.n	800871e <USB_EPStartXfer+0x45a>
 800868a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800868e:	095b      	lsrs	r3, r3, #5
 8008690:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <USB_EPStartXfer+0x3e6>
 80086a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086a4:	3b01      	subs	r3, #1
 80086a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	029b      	lsls	r3, r3, #10
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086bc:	b29a      	uxth	r2, r3
 80086be:	f107 0314 	add.w	r3, r7, #20
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	801a      	strh	r2, [r3, #0]
 80086c6:	e02a      	b.n	800871e <USB_EPStartXfer+0x45a>
 80086c8:	463b      	mov	r3, r7
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d125      	bne.n	800871e <USB_EPStartXfer+0x45a>
 80086d2:	f107 0320 	add.w	r3, r7, #32
 80086d6:	1d3a      	adds	r2, r7, #4
 80086d8:	6812      	ldr	r2, [r2, #0]
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	1d3b      	adds	r3, r7, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4619      	mov	r1, r3
 80086e8:	f107 0320 	add.w	r3, r7, #32
 80086ec:	f107 0220 	add.w	r2, r7, #32
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	440a      	add	r2, r1
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	463b      	mov	r3, r7
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	011a      	lsls	r2, r3, #4
 80086fe:	f107 0320 	add.w	r3, r7, #32
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4413      	add	r3, r2
 8008706:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800870a:	f107 031c 	add.w	r3, r7, #28
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008714:	b29a      	uxth	r2, r3
 8008716:	f107 031c 	add.w	r3, r7, #28
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800871e:	463b      	mov	r3, r7
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	891b      	ldrh	r3, [r3, #8]
 8008724:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008728:	463b      	mov	r3, r7
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6959      	ldr	r1, [r3, #20]
 800872e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008732:	b29b      	uxth	r3, r3
 8008734:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008738:	1d38      	adds	r0, r7, #4
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	f001 f9f7 	bl	8009b2e <USB_WritePMA>
 8008740:	f000 bcc6 	b.w	80090d0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008744:	463b      	mov	r3, r7
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d164      	bne.n	8008818 <USB_EPStartXfer+0x554>
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	64bb      	str	r3, [r7, #72]	; 0x48
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875c:	b29b      	uxth	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008762:	4413      	add	r3, r2
 8008764:	64bb      	str	r3, [r7, #72]	; 0x48
 8008766:	463b      	mov	r3, r7
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	011a      	lsls	r2, r3, #4
 800876e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008770:	4413      	add	r3, r2
 8008772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d112      	bne.n	80087a6 <USB_EPStartXfer+0x4e2>
 8008780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800878a:	b29a      	uxth	r2, r3
 800878c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	b29b      	uxth	r3, r3
 8008796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800879e:	b29a      	uxth	r2, r3
 80087a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a2:	801a      	strh	r2, [r3, #0]
 80087a4:	e057      	b.n	8008856 <USB_EPStartXfer+0x592>
 80087a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087aa:	2b3e      	cmp	r3, #62	; 0x3e
 80087ac:	d817      	bhi.n	80087de <USB_EPStartXfer+0x51a>
 80087ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80087b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <USB_EPStartXfer+0x50a>
 80087c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80087c8:	3301      	adds	r3, #1
 80087ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80087ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	029b      	lsls	r3, r3, #10
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	e03b      	b.n	8008856 <USB_EPStartXfer+0x592>
 80087de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80087e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <USB_EPStartXfer+0x53a>
 80087f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80087f8:	3b01      	subs	r3, #1
 80087fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80087fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008802:	b29b      	uxth	r3, r3
 8008804:	029b      	lsls	r3, r3, #10
 8008806:	b29b      	uxth	r3, r3
 8008808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008810:	b29a      	uxth	r2, r3
 8008812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008814:	801a      	strh	r2, [r3, #0]
 8008816:	e01e      	b.n	8008856 <USB_EPStartXfer+0x592>
 8008818:	463b      	mov	r3, r7
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d119      	bne.n	8008856 <USB_EPStartXfer+0x592>
 8008822:	1d3b      	adds	r3, r7, #4
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	653b      	str	r3, [r7, #80]	; 0x50
 8008828:	1d3b      	adds	r3, r7, #4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008830:	b29b      	uxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008836:	4413      	add	r3, r2
 8008838:	653b      	str	r3, [r7, #80]	; 0x50
 800883a:	463b      	mov	r3, r7
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	011a      	lsls	r2, r3, #4
 8008842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008844:	4413      	add	r3, r2
 8008846:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800884a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800884c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008850:	b29a      	uxth	r2, r3
 8008852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008854:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008856:	463b      	mov	r3, r7
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	891b      	ldrh	r3, [r3, #8]
 800885c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008860:	463b      	mov	r3, r7
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6959      	ldr	r1, [r3, #20]
 8008866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886a:	b29b      	uxth	r3, r3
 800886c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008870:	1d38      	adds	r0, r7, #4
 8008872:	6800      	ldr	r0, [r0, #0]
 8008874:	f001 f95b 	bl	8009b2e <USB_WritePMA>
            ep->xfer_buff += len;
 8008878:	463b      	mov	r3, r7
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	441a      	add	r2, r3
 8008884:	463b      	mov	r3, r7
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800888a:	463b      	mov	r3, r7
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6a1a      	ldr	r2, [r3, #32]
 8008890:	463b      	mov	r3, r7
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	429a      	cmp	r2, r3
 8008898:	d909      	bls.n	80088ae <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800889a:	463b      	mov	r3, r7
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6a1a      	ldr	r2, [r3, #32]
 80088a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a4:	1ad2      	subs	r2, r2, r3
 80088a6:	463b      	mov	r3, r7
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	621a      	str	r2, [r3, #32]
 80088ac:	e008      	b.n	80088c0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80088ae:	463b      	mov	r3, r7
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80088b8:	463b      	mov	r3, r7
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088c0:	1d3b      	adds	r3, r7, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	643b      	str	r3, [r7, #64]	; 0x40
 80088c6:	463b      	mov	r3, r7
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d164      	bne.n	800899a <USB_EPStartXfer+0x6d6>
 80088d0:	1d3b      	adds	r3, r7, #4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80088d6:	1d3b      	adds	r3, r7, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	4413      	add	r3, r2
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088e8:	463b      	mov	r3, r7
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	011a      	lsls	r2, r3, #4
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	4413      	add	r3, r2
 80088f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
 80088fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d112      	bne.n	8008928 <USB_EPStartXfer+0x664>
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800890c:	b29a      	uxth	r2, r3
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	801a      	strh	r2, [r3, #0]
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008920:	b29a      	uxth	r2, r3
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	e054      	b.n	80089d2 <USB_EPStartXfer+0x70e>
 8008928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800892c:	2b3e      	cmp	r3, #62	; 0x3e
 800892e:	d817      	bhi.n	8008960 <USB_EPStartXfer+0x69c>
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008934:	085b      	lsrs	r3, r3, #1
 8008936:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800893a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <USB_EPStartXfer+0x68c>
 8008946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800894a:	3301      	adds	r3, #1
 800894c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008950:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008954:	b29b      	uxth	r3, r3
 8008956:	029b      	lsls	r3, r3, #10
 8008958:	b29a      	uxth	r2, r3
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	e038      	b.n	80089d2 <USB_EPStartXfer+0x70e>
 8008960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800896a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USB_EPStartXfer+0x6bc>
 8008976:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800897a:	3b01      	subs	r3, #1
 800897c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008980:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008992:	b29a      	uxth	r2, r3
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e01b      	b.n	80089d2 <USB_EPStartXfer+0x70e>
 800899a:	463b      	mov	r3, r7
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d116      	bne.n	80089d2 <USB_EPStartXfer+0x70e>
 80089a4:	1d3b      	adds	r3, r7, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b2:	4413      	add	r3, r2
 80089b4:	643b      	str	r3, [r7, #64]	; 0x40
 80089b6:	463b      	mov	r3, r7
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	011a      	lsls	r2, r3, #4
 80089be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c0:	4413      	add	r3, r2
 80089c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	895b      	ldrh	r3, [r3, #10]
 80089d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6959      	ldr	r1, [r3, #20]
 80089e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089ec:	1d38      	adds	r0, r7, #4
 80089ee:	6800      	ldr	r0, [r0, #0]
 80089f0:	f001 f89d 	bl	8009b2e <USB_WritePMA>
 80089f4:	e36c      	b.n	80090d0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008a00:	1d3b      	adds	r3, r7, #4
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	463b      	mov	r3, r7
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a1e:	1d3b      	adds	r3, r7, #4
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	441a      	add	r2, r3
 8008a2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a44:	1d3b      	adds	r3, r7, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a4a:	1d3b      	adds	r3, r7, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	461a      	mov	r2, r3
 8008a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a58:	4413      	add	r3, r2
 8008a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a5c:	463b      	mov	r3, r7
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	011a      	lsls	r2, r3, #4
 8008a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a66:	4413      	add	r3, r2
 8008a68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a78:	463b      	mov	r3, r7
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	891b      	ldrh	r3, [r3, #8]
 8008a7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a82:	463b      	mov	r3, r7
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6959      	ldr	r1, [r3, #20]
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a92:	1d38      	adds	r0, r7, #4
 8008a94:	6800      	ldr	r0, [r0, #0]
 8008a96:	f001 f84a 	bl	8009b2e <USB_WritePMA>
 8008a9a:	e319      	b.n	80090d0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008a9c:	1d3b      	adds	r3, r7, #4
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	463b      	mov	r3, r7
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008aba:	1d3b      	adds	r3, r7, #4
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	463b      	mov	r3, r7
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	441a      	add	r2, r3
 8008ac8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6a1a      	ldr	r2, [r3, #32]
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	463b      	mov	r3, r7
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8162 	beq.w	8008dd2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b16:	463b      	mov	r3, r7
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d164      	bne.n	8008bea <USB_EPStartXfer+0x926>
 8008b20:	1d3b      	adds	r3, r7, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b26:	1d3b      	adds	r3, r7, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b34:	4413      	add	r3, r2
 8008b36:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b38:	463b      	mov	r3, r7
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	011a      	lsls	r2, r3, #4
 8008b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b42:	4413      	add	r3, r2
 8008b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b48:	677b      	str	r3, [r7, #116]	; 0x74
 8008b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d112      	bne.n	8008b78 <USB_EPStartXfer+0x8b4>
 8008b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b74:	801a      	strh	r2, [r3, #0]
 8008b76:	e057      	b.n	8008c28 <USB_EPStartXfer+0x964>
 8008b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7c:	2b3e      	cmp	r3, #62	; 0x3e
 8008b7e:	d817      	bhi.n	8008bb0 <USB_EPStartXfer+0x8ec>
 8008b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d004      	beq.n	8008ba0 <USB_EPStartXfer+0x8dc>
 8008b96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ba0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	029b      	lsls	r3, r3, #10
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	e03b      	b.n	8008c28 <USB_EPStartXfer+0x964>
 8008bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <USB_EPStartXfer+0x90c>
 8008bc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	e01e      	b.n	8008c28 <USB_EPStartXfer+0x964>
 8008bea:	463b      	mov	r3, r7
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	785b      	ldrb	r3, [r3, #1]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d119      	bne.n	8008c28 <USB_EPStartXfer+0x964>
 8008bf4:	1d3b      	adds	r3, r7, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c04:	4413      	add	r3, r2
 8008c06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	011a      	lsls	r2, r3, #4
 8008c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c16:	4413      	add	r3, r2
 8008c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c28:	463b      	mov	r3, r7
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	895b      	ldrh	r3, [r3, #10]
 8008c2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c32:	463b      	mov	r3, r7
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6959      	ldr	r1, [r3, #20]
 8008c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c42:	1d38      	adds	r0, r7, #4
 8008c44:	6800      	ldr	r0, [r0, #0]
 8008c46:	f000 ff72 	bl	8009b2e <USB_WritePMA>
          ep->xfer_buff += len;
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695a      	ldr	r2, [r3, #20]
 8008c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c54:	441a      	add	r2, r3
 8008c56:	463b      	mov	r3, r7
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6a1a      	ldr	r2, [r3, #32]
 8008c62:	463b      	mov	r3, r7
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d909      	bls.n	8008c80 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6a1a      	ldr	r2, [r3, #32]
 8008c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	463b      	mov	r3, r7
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	621a      	str	r2, [r3, #32]
 8008c7e:	e008      	b.n	8008c92 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008c80:	463b      	mov	r3, r7
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 821a 	beq.w	80090d0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	785b      	ldrb	r3, [r3, #1]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d164      	bne.n	8008d70 <USB_EPStartXfer+0xaac>
 8008ca6:	1d3b      	adds	r3, r7, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cac:	1d3b      	adds	r3, r7, #4
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cba:	4413      	add	r3, r2
 8008cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	011a      	lsls	r2, r3, #4
 8008cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cc8:	4413      	add	r3, r2
 8008cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cce:	667b      	str	r3, [r7, #100]	; 0x64
 8008cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d112      	bne.n	8008cfe <USB_EPStartXfer+0xa3a>
 8008cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	e057      	b.n	8008dae <USB_EPStartXfer+0xaea>
 8008cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d02:	2b3e      	cmp	r3, #62	; 0x3e
 8008d04:	d817      	bhi.n	8008d36 <USB_EPStartXfer+0xa72>
 8008d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <USB_EPStartXfer+0xa62>
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	029b      	lsls	r3, r3, #10
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	e03b      	b.n	8008dae <USB_EPStartXfer+0xaea>
 8008d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	f003 031f 	and.w	r3, r3, #31
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <USB_EPStartXfer+0xa92>
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	3b01      	subs	r3, #1
 8008d52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	029b      	lsls	r3, r3, #10
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d6c:	801a      	strh	r2, [r3, #0]
 8008d6e:	e01e      	b.n	8008dae <USB_EPStartXfer+0xaea>
 8008d70:	463b      	mov	r3, r7
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d119      	bne.n	8008dae <USB_EPStartXfer+0xaea>
 8008d7a:	1d3b      	adds	r3, r7, #4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	673b      	str	r3, [r7, #112]	; 0x70
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d8e:	4413      	add	r3, r2
 8008d90:	673b      	str	r3, [r7, #112]	; 0x70
 8008d92:	463b      	mov	r3, r7
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	011a      	lsls	r2, r3, #4
 8008d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dae:	463b      	mov	r3, r7
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	891b      	ldrh	r3, [r3, #8]
 8008db4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008db8:	463b      	mov	r3, r7
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6959      	ldr	r1, [r3, #20]
 8008dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008dc8:	1d38      	adds	r0, r7, #4
 8008dca:	6800      	ldr	r0, [r0, #0]
 8008dcc:	f000 feaf 	bl	8009b2e <USB_WritePMA>
 8008dd0:	e17e      	b.n	80090d0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	785b      	ldrb	r3, [r3, #1]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d16f      	bne.n	8008ebc <USB_EPStartXfer+0xbf8>
 8008ddc:	1d3b      	adds	r3, r7, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008de4:	1d3b      	adds	r3, r7, #4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008df4:	4413      	add	r3, r2
 8008df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	011a      	lsls	r2, r3, #4
 8008e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e06:	4413      	add	r3, r2
 8008e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d116      	bne.n	8008e46 <USB_EPStartXfer+0xb82>
 8008e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	e05f      	b.n	8008f06 <USB_EPStartXfer+0xc42>
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e4c:	d818      	bhi.n	8008e80 <USB_EPStartXfer+0xbbc>
 8008e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <USB_EPStartXfer+0xbaa>
 8008e64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008e68:	3301      	adds	r3, #1
 8008e6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008e6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	029b      	lsls	r3, r3, #10
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e7c:	801a      	strh	r2, [r3, #0]
 8008e7e:	e042      	b.n	8008f06 <USB_EPStartXfer+0xc42>
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	095b      	lsrs	r3, r3, #5
 8008e86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e8e:	f003 031f 	and.w	r3, r3, #31
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <USB_EPStartXfer+0xbdc>
 8008e96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ea0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	029b      	lsls	r3, r3, #10
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008eb8:	801a      	strh	r2, [r3, #0]
 8008eba:	e024      	b.n	8008f06 <USB_EPStartXfer+0xc42>
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d11f      	bne.n	8008f06 <USB_EPStartXfer+0xc42>
 8008ec6:	1d3b      	adds	r3, r7, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ede:	4413      	add	r3, r2
 8008ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	011a      	lsls	r2, r3, #4
 8008eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f06:	463b      	mov	r3, r7
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	891b      	ldrh	r3, [r3, #8]
 8008f0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f10:	463b      	mov	r3, r7
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6959      	ldr	r1, [r3, #20]
 8008f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f20:	1d38      	adds	r0, r7, #4
 8008f22:	6800      	ldr	r0, [r0, #0]
 8008f24:	f000 fe03 	bl	8009b2e <USB_WritePMA>
          ep->xfer_buff += len;
 8008f28:	463b      	mov	r3, r7
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	695a      	ldr	r2, [r3, #20]
 8008f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f32:	441a      	add	r2, r3
 8008f34:	463b      	mov	r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a1a      	ldr	r2, [r3, #32]
 8008f40:	463b      	mov	r3, r7
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d909      	bls.n	8008f5e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f54:	1ad2      	subs	r2, r2, r3
 8008f56:	463b      	mov	r3, r7
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	621a      	str	r2, [r3, #32]
 8008f5c:	e008      	b.n	8008f70 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008f5e:	463b      	mov	r3, r7
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008f68:	463b      	mov	r3, r7
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80ab 	beq.w	80090d0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f7a:	1d3b      	adds	r3, r7, #4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f82:	463b      	mov	r3, r7
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d16f      	bne.n	800906c <USB_EPStartXfer+0xda8>
 8008f8c:	1d3b      	adds	r3, r7, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f94:	1d3b      	adds	r3, r7, #4
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008faa:	463b      	mov	r3, r7
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	011a      	lsls	r2, r3, #4
 8008fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d116      	bne.n	8008ff6 <USB_EPStartXfer+0xd32>
 8008fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	e05b      	b.n	80090ae <USB_EPStartXfer+0xdea>
 8008ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8008ffc:	d818      	bhi.n	8009030 <USB_EPStartXfer+0xd6c>
 8008ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009002:	085b      	lsrs	r3, r3, #1
 8009004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <USB_EPStartXfer+0xd5a>
 8009014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009018:	3301      	adds	r3, #1
 800901a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800901e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009022:	b29b      	uxth	r3, r3
 8009024:	029b      	lsls	r3, r3, #10
 8009026:	b29a      	uxth	r2, r3
 8009028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800902c:	801a      	strh	r2, [r3, #0]
 800902e:	e03e      	b.n	80090ae <USB_EPStartXfer+0xdea>
 8009030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800903a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <USB_EPStartXfer+0xd8c>
 8009046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800904a:	3b01      	subs	r3, #1
 800904c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009054:	b29b      	uxth	r3, r3
 8009056:	029b      	lsls	r3, r3, #10
 8009058:	b29b      	uxth	r3, r3
 800905a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009062:	b29a      	uxth	r2, r3
 8009064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009068:	801a      	strh	r2, [r3, #0]
 800906a:	e020      	b.n	80090ae <USB_EPStartXfer+0xdea>
 800906c:	463b      	mov	r3, r7
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d11b      	bne.n	80090ae <USB_EPStartXfer+0xdea>
 8009076:	1d3b      	adds	r3, r7, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800907e:	b29b      	uxth	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009086:	4413      	add	r3, r2
 8009088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800908c:	463b      	mov	r3, r7
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	011a      	lsls	r2, r3, #4
 8009094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009098:	4413      	add	r3, r2
 800909a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800909e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090ae:	463b      	mov	r3, r7
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	895b      	ldrh	r3, [r3, #10]
 80090b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090b8:	463b      	mov	r3, r7
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6959      	ldr	r1, [r3, #20]
 80090be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090c8:	1d38      	adds	r0, r7, #4
 80090ca:	6800      	ldr	r0, [r0, #0]
 80090cc:	f000 fd2f 	bl	8009b2e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80090d0:	1d3b      	adds	r3, r7, #4
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	463b      	mov	r3, r7
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f107 020a 	add.w	r2, r7, #10
 80090e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ee:	8013      	strh	r3, [r2, #0]
 80090f0:	f107 030a 	add.w	r3, r7, #10
 80090f4:	f107 020a 	add.w	r2, r7, #10
 80090f8:	8812      	ldrh	r2, [r2, #0]
 80090fa:	f082 0210 	eor.w	r2, r2, #16
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	f107 030a 	add.w	r3, r7, #10
 8009104:	f107 020a 	add.w	r2, r7, #10
 8009108:	8812      	ldrh	r2, [r2, #0]
 800910a:	f082 0220 	eor.w	r2, r2, #32
 800910e:	801a      	strh	r2, [r3, #0]
 8009110:	1d3b      	adds	r3, r7, #4
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	463b      	mov	r3, r7
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	441a      	add	r2, r3
 800911e:	f107 030a 	add.w	r3, r7, #10
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800912c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009134:	b29b      	uxth	r3, r3
 8009136:	8013      	strh	r3, [r2, #0]
 8009138:	e3b5      	b.n	80098a6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800913a:	463b      	mov	r3, r7
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	7b1b      	ldrb	r3, [r3, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f040 8090 	bne.w	8009266 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009146:	463b      	mov	r3, r7
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699a      	ldr	r2, [r3, #24]
 800914c:	463b      	mov	r3, r7
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	429a      	cmp	r2, r3
 8009154:	d90e      	bls.n	8009174 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009156:	463b      	mov	r3, r7
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009160:	463b      	mov	r3, r7
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	463b      	mov	r3, r7
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	619a      	str	r2, [r3, #24]
 8009172:	e008      	b.n	8009186 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009174:	463b      	mov	r3, r7
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800917e:	463b      	mov	r3, r7
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2200      	movs	r2, #0
 8009184:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009186:	1d3b      	adds	r3, r7, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009196:	b29b      	uxth	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800919e:	4413      	add	r3, r2
 80091a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091a4:	463b      	mov	r3, r7
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	011a      	lsls	r2, r3, #4
 80091ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091b0:	4413      	add	r3, r2
 80091b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d116      	bne.n	80091f0 <USB_EPStartXfer+0xf2c>
 80091c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ec:	801a      	strh	r2, [r3, #0]
 80091ee:	e32c      	b.n	800984a <USB_EPStartXfer+0x1586>
 80091f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f4:	2b3e      	cmp	r3, #62	; 0x3e
 80091f6:	d818      	bhi.n	800922a <USB_EPStartXfer+0xf66>
 80091f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USB_EPStartXfer+0xf54>
 800920e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009212:	3301      	adds	r3, #1
 8009214:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800921c:	b29b      	uxth	r3, r3
 800921e:	029b      	lsls	r3, r3, #10
 8009220:	b29a      	uxth	r2, r3
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	e30f      	b.n	800984a <USB_EPStartXfer+0x1586>
 800922a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009238:	f003 031f 	and.w	r3, r3, #31
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <USB_EPStartXfer+0xf86>
 8009240:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009244:	3b01      	subs	r3, #1
 8009246:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800924a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800924e:	b29b      	uxth	r3, r3
 8009250:	029b      	lsls	r3, r3, #10
 8009252:	b29b      	uxth	r3, r3
 8009254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800925c:	b29a      	uxth	r2, r3
 800925e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	e2f1      	b.n	800984a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009266:	463b      	mov	r3, r7
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	78db      	ldrb	r3, [r3, #3]
 800926c:	2b02      	cmp	r3, #2
 800926e:	f040 818f 	bne.w	8009590 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009272:	463b      	mov	r3, r7
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d175      	bne.n	8009368 <USB_EPStartXfer+0x10a4>
 800927c:	1d3b      	adds	r3, r7, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009284:	1d3b      	adds	r3, r7, #4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800928c:	b29b      	uxth	r3, r3
 800928e:	461a      	mov	r2, r3
 8009290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009294:	4413      	add	r3, r2
 8009296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800929a:	463b      	mov	r3, r7
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	011a      	lsls	r2, r3, #4
 80092a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80092a6:	4413      	add	r3, r2
 80092a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092b0:	463b      	mov	r3, r7
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d116      	bne.n	80092e8 <USB_EPStartXfer+0x1024>
 80092ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092cc:	801a      	strh	r2, [r3, #0]
 80092ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e065      	b.n	80093b4 <USB_EPStartXfer+0x10f0>
 80092e8:	463b      	mov	r3, r7
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	2b3e      	cmp	r3, #62	; 0x3e
 80092f0:	d81a      	bhi.n	8009328 <USB_EPStartXfer+0x1064>
 80092f2:	463b      	mov	r3, r7
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092fe:	463b      	mov	r3, r7
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <USB_EPStartXfer+0x1052>
 800930c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009310:	3301      	adds	r3, #1
 8009312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931a:	b29b      	uxth	r3, r3
 800931c:	029b      	lsls	r3, r3, #10
 800931e:	b29a      	uxth	r2, r3
 8009320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009324:	801a      	strh	r2, [r3, #0]
 8009326:	e045      	b.n	80093b4 <USB_EPStartXfer+0x10f0>
 8009328:	463b      	mov	r3, r7
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	095b      	lsrs	r3, r3, #5
 8009330:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009334:	463b      	mov	r3, r7
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <USB_EPStartXfer+0x1088>
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009346:	3b01      	subs	r3, #1
 8009348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800934c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009350:	b29b      	uxth	r3, r3
 8009352:	029b      	lsls	r3, r3, #10
 8009354:	b29b      	uxth	r3, r3
 8009356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800935e:	b29a      	uxth	r2, r3
 8009360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	e025      	b.n	80093b4 <USB_EPStartXfer+0x10f0>
 8009368:	463b      	mov	r3, r7
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d120      	bne.n	80093b4 <USB_EPStartXfer+0x10f0>
 8009372:	1d3b      	adds	r3, r7, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800937a:	1d3b      	adds	r3, r7, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800938a:	4413      	add	r3, r2
 800938c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009390:	463b      	mov	r3, r7
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	011a      	lsls	r2, r3, #4
 8009398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800939c:	4413      	add	r3, r2
 800939e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093a6:	463b      	mov	r3, r7
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	1d3b      	adds	r3, r7, #4
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093bc:	463b      	mov	r3, r7
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d175      	bne.n	80094b2 <USB_EPStartXfer+0x11ee>
 80093c6:	1d3b      	adds	r3, r7, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093ce:	1d3b      	adds	r3, r7, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	461a      	mov	r2, r3
 80093da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093de:	4413      	add	r3, r2
 80093e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093e4:	463b      	mov	r3, r7
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	011a      	lsls	r2, r3, #4
 80093ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093f0:	4413      	add	r3, r2
 80093f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093fa:	463b      	mov	r3, r7
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d116      	bne.n	8009432 <USB_EPStartXfer+0x116e>
 8009404:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009410:	b29a      	uxth	r2, r3
 8009412:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009416:	801a      	strh	r2, [r3, #0]
 8009418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	e061      	b.n	80094f6 <USB_EPStartXfer+0x1232>
 8009432:	463b      	mov	r3, r7
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b3e      	cmp	r3, #62	; 0x3e
 800943a:	d81a      	bhi.n	8009472 <USB_EPStartXfer+0x11ae>
 800943c:	463b      	mov	r3, r7
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	085b      	lsrs	r3, r3, #1
 8009444:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009448:	463b      	mov	r3, r7
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <USB_EPStartXfer+0x119c>
 8009456:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800945a:	3301      	adds	r3, #1
 800945c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009460:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009464:	b29b      	uxth	r3, r3
 8009466:	029b      	lsls	r3, r3, #10
 8009468:	b29a      	uxth	r2, r3
 800946a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e041      	b.n	80094f6 <USB_EPStartXfer+0x1232>
 8009472:	463b      	mov	r3, r7
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800947e:	463b      	mov	r3, r7
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <USB_EPStartXfer+0x11d2>
 800948c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009490:	3b01      	subs	r3, #1
 8009492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009496:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800949a:	b29b      	uxth	r3, r3
 800949c:	029b      	lsls	r3, r3, #10
 800949e:	b29b      	uxth	r3, r3
 80094a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	e021      	b.n	80094f6 <USB_EPStartXfer+0x1232>
 80094b2:	463b      	mov	r3, r7
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d11c      	bne.n	80094f6 <USB_EPStartXfer+0x1232>
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094cc:	4413      	add	r3, r2
 80094ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094d2:	463b      	mov	r3, r7
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	011a      	lsls	r2, r3, #4
 80094da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094de:	4413      	add	r3, r2
 80094e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094e8:	463b      	mov	r3, r7
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094f6:	463b      	mov	r3, r7
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 81a4 	beq.w	800984a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	463b      	mov	r3, r7
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009516:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800951a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d005      	beq.n	800952e <USB_EPStartXfer+0x126a>
 8009522:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10d      	bne.n	800954a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800952e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009536:	2b00      	cmp	r3, #0
 8009538:	f040 8187 	bne.w	800984a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800953c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009544:	2b00      	cmp	r3, #0
 8009546:	f040 8180 	bne.w	800984a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	463b      	mov	r3, r7
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009564:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009568:	1d3b      	adds	r3, r7, #4
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	463b      	mov	r3, r7
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	441a      	add	r2, r3
 8009576:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800957a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800958a:	b29b      	uxth	r3, r3
 800958c:	8013      	strh	r3, [r2, #0]
 800958e:	e15c      	b.n	800984a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009590:	463b      	mov	r3, r7
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	78db      	ldrb	r3, [r3, #3]
 8009596:	2b01      	cmp	r3, #1
 8009598:	f040 8155 	bne.w	8009846 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800959c:	463b      	mov	r3, r7
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	463b      	mov	r3, r7
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d90e      	bls.n	80095ca <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80095ac:	463b      	mov	r3, r7
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c0:	1ad2      	subs	r2, r2, r3
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	619a      	str	r2, [r3, #24]
 80095c8:	e008      	b.n	80095dc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80095ca:	463b      	mov	r3, r7
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80095d4:	463b      	mov	r3, r7
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2200      	movs	r2, #0
 80095da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80095dc:	463b      	mov	r3, r7
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	785b      	ldrb	r3, [r3, #1]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d16f      	bne.n	80096c6 <USB_EPStartXfer+0x1402>
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095ee:	1d3b      	adds	r3, r7, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	461a      	mov	r2, r3
 80095fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095fe:	4413      	add	r3, r2
 8009600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	011a      	lsls	r2, r3, #4
 800960c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009610:	4413      	add	r3, r2
 8009612:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800961a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961e:	2b00      	cmp	r3, #0
 8009620:	d116      	bne.n	8009650 <USB_EPStartXfer+0x138c>
 8009622:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	b29b      	uxth	r3, r3
 800962a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800962e:	b29a      	uxth	r2, r3
 8009630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	b29b      	uxth	r3, r3
 800963e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009646:	b29a      	uxth	r2, r3
 8009648:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	e05f      	b.n	8009710 <USB_EPStartXfer+0x144c>
 8009650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009654:	2b3e      	cmp	r3, #62	; 0x3e
 8009656:	d818      	bhi.n	800968a <USB_EPStartXfer+0x13c6>
 8009658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800965c:	085b      	lsrs	r3, r3, #1
 800965e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	d004      	beq.n	8009678 <USB_EPStartXfer+0x13b4>
 800966e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009672:	3301      	adds	r3, #1
 8009674:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967c:	b29b      	uxth	r3, r3
 800967e:	029b      	lsls	r3, r3, #10
 8009680:	b29a      	uxth	r2, r3
 8009682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009686:	801a      	strh	r2, [r3, #0]
 8009688:	e042      	b.n	8009710 <USB_EPStartXfer+0x144c>
 800968a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009698:	f003 031f 	and.w	r3, r3, #31
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <USB_EPStartXfer+0x13e6>
 80096a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096a4:	3b01      	subs	r3, #1
 80096a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	029b      	lsls	r3, r3, #10
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096c2:	801a      	strh	r2, [r3, #0]
 80096c4:	e024      	b.n	8009710 <USB_EPStartXfer+0x144c>
 80096c6:	463b      	mov	r3, r7
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d11f      	bne.n	8009710 <USB_EPStartXfer+0x144c>
 80096d0:	1d3b      	adds	r3, r7, #4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096d8:	1d3b      	adds	r3, r7, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	461a      	mov	r2, r3
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	4413      	add	r3, r2
 80096ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096ee:	463b      	mov	r3, r7
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	011a      	lsls	r2, r3, #4
 80096f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096fa:	4413      	add	r3, r2
 80096fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009700:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009708:	b29a      	uxth	r2, r3
 800970a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800970e:	801a      	strh	r2, [r3, #0]
 8009710:	1d3b      	adds	r3, r7, #4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009718:	463b      	mov	r3, r7
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d16f      	bne.n	8009802 <USB_EPStartXfer+0x153e>
 8009722:	1d3b      	adds	r3, r7, #4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800972a:	1d3b      	adds	r3, r7, #4
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009732:	b29b      	uxth	r3, r3
 8009734:	461a      	mov	r2, r3
 8009736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800973a:	4413      	add	r3, r2
 800973c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009740:	463b      	mov	r3, r7
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	011a      	lsls	r2, r3, #4
 8009748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800974c:	4413      	add	r3, r2
 800974e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d116      	bne.n	800978c <USB_EPStartXfer+0x14c8>
 800975e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	b29b      	uxth	r3, r3
 8009766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800976a:	b29a      	uxth	r2, r3
 800976c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009770:	801a      	strh	r2, [r3, #0]
 8009772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	b29b      	uxth	r3, r3
 800977a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800977e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009782:	b29a      	uxth	r2, r3
 8009784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009788:	801a      	strh	r2, [r3, #0]
 800978a:	e05e      	b.n	800984a <USB_EPStartXfer+0x1586>
 800978c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009790:	2b3e      	cmp	r3, #62	; 0x3e
 8009792:	d818      	bhi.n	80097c6 <USB_EPStartXfer+0x1502>
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009798:	085b      	lsrs	r3, r3, #1
 800979a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800979e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <USB_EPStartXfer+0x14f0>
 80097aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097ae:	3301      	adds	r3, #1
 80097b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	029b      	lsls	r3, r3, #10
 80097bc:	b29a      	uxth	r2, r3
 80097be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097c2:	801a      	strh	r2, [r3, #0]
 80097c4:	e041      	b.n	800984a <USB_EPStartXfer+0x1586>
 80097c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d4:	f003 031f 	and.w	r3, r3, #31
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <USB_EPStartXfer+0x1522>
 80097dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097e0:	3b01      	subs	r3, #1
 80097e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	029b      	lsls	r3, r3, #10
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	e023      	b.n	800984a <USB_EPStartXfer+0x1586>
 8009802:	463b      	mov	r3, r7
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	785b      	ldrb	r3, [r3, #1]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d11e      	bne.n	800984a <USB_EPStartXfer+0x1586>
 800980c:	1d3b      	adds	r3, r7, #4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009814:	b29b      	uxth	r3, r3
 8009816:	461a      	mov	r2, r3
 8009818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981c:	4413      	add	r3, r2
 800981e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009822:	463b      	mov	r3, r7
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	011a      	lsls	r2, r3, #4
 800982a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982e:	4413      	add	r3, r2
 8009830:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800983c:	b29a      	uxth	r2, r3
 800983e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e001      	b.n	800984a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e02e      	b.n	80098a8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800984a:	1d3b      	adds	r3, r7, #4
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	463b      	mov	r3, r7
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009864:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009868:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800986c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009870:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009874:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009878:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800987c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009880:	1d3b      	adds	r3, r7, #4
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	463b      	mov	r3, r7
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	441a      	add	r2, r3
 800988e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d020      	beq.n	8009906 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098da:	81bb      	strh	r3, [r7, #12]
 80098dc:	89bb      	ldrh	r3, [r7, #12]
 80098de:	f083 0310 	eor.w	r3, r3, #16
 80098e2:	81bb      	strh	r3, [r7, #12]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	441a      	add	r2, r3
 80098ee:	89bb      	ldrh	r3, [r7, #12]
 80098f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	b29b      	uxth	r3, r3
 8009902:	8013      	strh	r3, [r2, #0]
 8009904:	e01f      	b.n	8009946 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991c:	81fb      	strh	r3, [r7, #14]
 800991e:	89fb      	ldrh	r3, [r7, #14]
 8009920:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009924:	81fb      	strh	r3, [r7, #14]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	89fb      	ldrh	r3, [r7, #14]
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	bc80      	pop	{r7}
 8009950:	4770      	bx	lr

08009952 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009952:	b480      	push	{r7}
 8009954:	b087      	sub	sp, #28
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	7b1b      	ldrb	r3, [r3, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 809d 	bne.w	8009aa0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	785b      	ldrb	r3, [r3, #1]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04c      	beq.n	8009a08 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	823b      	strh	r3, [r7, #16]
 800997c:	8a3b      	ldrh	r3, [r7, #16]
 800997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01b      	beq.n	80099be <USB_EPClearStall+0x6c>
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999c:	81fb      	strh	r3, [r7, #14]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	441a      	add	r2, r3
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	78db      	ldrb	r3, [r3, #3]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d06c      	beq.n	8009aa0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099dc:	81bb      	strh	r3, [r7, #12]
 80099de:	89bb      	ldrh	r3, [r7, #12]
 80099e0:	f083 0320 	eor.w	r3, r3, #32
 80099e4:	81bb      	strh	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	441a      	add	r2, r3
 80099f0:	89bb      	ldrh	r3, [r7, #12]
 80099f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	8013      	strh	r3, [r2, #0]
 8009a06:	e04b      	b.n	8009aa0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	82fb      	strh	r3, [r7, #22]
 8009a16:	8afb      	ldrh	r3, [r7, #22]
 8009a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01b      	beq.n	8009a58 <USB_EPClearStall+0x106>
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	82bb      	strh	r3, [r7, #20]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	8abb      	ldrh	r3, [r7, #20]
 8009a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6e:	827b      	strh	r3, [r7, #18]
 8009a70:	8a7b      	ldrh	r3, [r7, #18]
 8009a72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a76:	827b      	strh	r3, [r7, #18]
 8009a78:	8a7b      	ldrh	r3, [r7, #18]
 8009a7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a7e:	827b      	strh	r3, [r7, #18]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	441a      	add	r2, r3
 8009a8a:	8a7b      	ldrh	r3, [r7, #18]
 8009a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d103      	bne.n	8009ac6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2280      	movs	r2, #128	; 0x80
 8009ac2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bc80      	pop	{r7}
 8009ad0:	4770      	bx	lr

08009ad2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr

08009ae6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr

08009afa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bc80      	pop	{r7}
 8009b2c:	4770      	bx	lr

08009b2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b08d      	sub	sp, #52	; 0x34
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	80fb      	strh	r3, [r7, #6]
 8009b40:	4613      	mov	r3, r2
 8009b42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b44:	88bb      	ldrh	r3, [r7, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	005a      	lsls	r2, r3, #1
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b60:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b66:	e01e      	b.n	8009ba6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	3301      	adds	r3, #1
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	3302      	adds	r3, #2
 8009b92:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	3302      	adds	r3, #2
 8009b98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1dd      	bne.n	8009b68 <USB_WritePMA+0x3a>
  }
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	3734      	adds	r7, #52	; 0x34
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b08b      	sub	sp, #44	; 0x2c
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	80fb      	strh	r3, [r7, #6]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009bce:	88bb      	ldrh	r3, [r7, #4]
 8009bd0:	085b      	lsrs	r3, r3, #1
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	005a      	lsls	r2, r3, #1
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf0:	e01b      	b.n	8009c2a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	3302      	adds	r3, #2
 8009c22:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	3b01      	subs	r3, #1
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e0      	bne.n	8009bf2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009c30:	88bb      	ldrh	r3, [r7, #4]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d007      	beq.n	8009c4c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	701a      	strb	r2, [r3, #0]
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	372c      	adds	r7, #44	; 0x2c
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bc80      	pop	{r7}
 8009c54:	4770      	bx	lr

08009c56 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	7c1b      	ldrb	r3, [r3, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d115      	bne.n	8009c9a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c72:	2202      	movs	r2, #2
 8009c74:	2181      	movs	r1, #129	; 0x81
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 fea1 	bl	800b9be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c86:	2202      	movs	r2, #2
 8009c88:	2101      	movs	r1, #1
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 fe97 	bl	800b9be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009c98:	e012      	b.n	8009cc0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	2181      	movs	r1, #129	; 0x81
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fe8c 	bl	800b9be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cac:	2340      	movs	r3, #64	; 0x40
 8009cae:	2202      	movs	r2, #2
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fe83 	bl	800b9be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	2182      	movs	r1, #130	; 0x82
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 fe79 	bl	800b9be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cd2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cd6:	f001 ff99 	bl	800bc0c <USBD_static_malloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
 8009cf0:	e026      	b.n	8009d40 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7c1b      	ldrb	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d26:	2101      	movs	r1, #1
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 ff39 	bl	800bba0 <USBD_LL_PrepareReceive>
 8009d2e:	e007      	b.n	8009d40 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d36:	2340      	movs	r3, #64	; 0x40
 8009d38:	2101      	movs	r1, #1
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 ff30 	bl	800bba0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	460b      	mov	r3, r1
 8009d54:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d5a:	2181      	movs	r1, #129	; 0x81
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 fe54 	bl	800ba0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d68:	2101      	movs	r1, #1
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fe4d 	bl	800ba0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d78:	2182      	movs	r1, #130	; 0x82
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 fe45 	bl	800ba0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00e      	beq.n	8009dae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 ff3f 	bl	800bc24 <USBD_static_free>
    pdev->pClassData = NULL;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d039      	beq.n	8009e56 <USBD_CDC_Setup+0x9e>
 8009de2:	2b20      	cmp	r3, #32
 8009de4:	d17f      	bne.n	8009ee6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	88db      	ldrh	r3, [r3, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d029      	beq.n	8009e42 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	b25b      	sxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	da11      	bge.n	8009e1c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009e04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	88d2      	ldrh	r2, [r2, #6]
 8009e0a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e0c:	6939      	ldr	r1, [r7, #16]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	88db      	ldrh	r3, [r3, #6]
 8009e12:	461a      	mov	r2, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fa0a 	bl	800b22e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009e1a:	e06b      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	785a      	ldrb	r2, [r3, #1]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	88db      	ldrh	r3, [r3, #6]
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e32:	6939      	ldr	r1, [r7, #16]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	88db      	ldrh	r3, [r3, #6]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fa25 	bl	800b28a <USBD_CtlPrepareRx>
      break;
 8009e40:	e058      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	7850      	ldrb	r0, [r2, #1]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	4798      	blx	r3
      break;
 8009e54:	e04e      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	2b0b      	cmp	r3, #11
 8009e5c:	d02e      	beq.n	8009ebc <USBD_CDC_Setup+0x104>
 8009e5e:	2b0b      	cmp	r3, #11
 8009e60:	dc38      	bgt.n	8009ed4 <USBD_CDC_Setup+0x11c>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <USBD_CDC_Setup+0xb4>
 8009e66:	2b0a      	cmp	r3, #10
 8009e68:	d014      	beq.n	8009e94 <USBD_CDC_Setup+0xdc>
 8009e6a:	e033      	b.n	8009ed4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d107      	bne.n	8009e86 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009e76:	f107 030c 	add.w	r3, r7, #12
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f001 f9d5 	bl	800b22e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e84:	e02e      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 f966 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	75fb      	strb	r3, [r7, #23]
          break;
 8009e92:	e027      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d107      	bne.n	8009eae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e9e:	f107 030f 	add.w	r3, r7, #15
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f9c1 	bl	800b22e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eac:	e01a      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f952 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eba:	e013      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d00d      	beq.n	8009ee2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f946 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ed2:	e006      	b.n	8009ee2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f93f 	bl	800b15a <USBD_CtlError>
          ret = USBD_FAIL;
 8009edc:	2302      	movs	r3, #2
 8009ede:	75fb      	strb	r3, [r7, #23]
          break;
 8009ee0:	e000      	b.n	8009ee4 <USBD_CDC_Setup+0x12c>
          break;
 8009ee2:	bf00      	nop
      }
      break;
 8009ee4:	e006      	b.n	8009ef4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f936 	bl	800b15a <USBD_CtlError>
      ret = USBD_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef2:	bf00      	nop
  }

  return ret;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f10:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d03a      	beq.n	8009f9a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	331c      	adds	r3, #28
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d029      	beq.n	8009f8e <USBD_CDC_DataIn+0x90>
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	440b      	add	r3, r1
 8009f48:	331c      	adds	r3, #28
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	78f9      	ldrb	r1, [r7, #3]
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	460b      	mov	r3, r1
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4403      	add	r3, r0
 8009f5a:	3338      	adds	r3, #56	; 0x38
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f62:	fb03 f301 	mul.w	r3, r3, r1
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d110      	bne.n	8009f8e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	440b      	add	r3, r1
 8009f7a:	331c      	adds	r3, #28
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f80:	78f9      	ldrb	r1, [r7, #3]
 8009f82:	2300      	movs	r3, #0
 8009f84:	2200      	movs	r2, #0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fde7 	bl	800bb5a <USBD_LL_Transmit>
 8009f8c:	e003      	b.n	8009f96 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009f9a:	2302      	movs	r3, #2
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fe12 	bl	800bbe6 <USBD_LL_GetRxDataSize>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00d      	beq.n	8009ff0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4798      	blx	r3

    return USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e000      	b.n	8009ff2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ff0:	2302      	movs	r3, #2
  }
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a008:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a010:	2b00      	cmp	r3, #0
 800a012:	d015      	beq.n	800a040 <USBD_CDC_EP0_RxReady+0x46>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a01a:	2bff      	cmp	r3, #255	; 0xff
 800a01c:	d010      	beq.n	800a040 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a02c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a034:	b292      	uxth	r2, r2
 800a036:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	22ff      	movs	r2, #255	; 0xff
 800a03c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2243      	movs	r2, #67	; 0x43
 800a058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	20000094 	.word	0x20000094

0800a06c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2243      	movs	r2, #67	; 0x43
 800a078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a07a:	4b03      	ldr	r3, [pc, #12]	; (800a088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	bc80      	pop	{r7}
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	20000050 	.word	0x20000050

0800a08c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2243      	movs	r2, #67	; 0x43
 800a098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200000d8 	.word	0x200000d8

0800a0ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a0ba:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	2000000c 	.word	0x2000000c

0800a0cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bc80      	pop	{r7}
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	bc80      	pop	{r7}
 800a128:	4770      	bx	lr

0800a12a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr

0800a150 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01c      	beq.n	800a1a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a170:	2b00      	cmp	r3, #0
 800a172:	d115      	bne.n	800a1a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a192:	b29b      	uxth	r3, r3
 800a194:	2181      	movs	r1, #129	; 0x81
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 fcdf 	bl	800bb5a <USBD_LL_Transmit>

      return USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	e002      	b.n	800a1a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a1a4:	2302      	movs	r3, #2
  }
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d017      	beq.n	800a1f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7c1b      	ldrb	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1da:	2101      	movs	r1, #1
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fcdf 	bl	800bba0 <USBD_LL_PrepareReceive>
 800a1e2:	e007      	b.n	800a1f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 fcd6 	bl	800bba0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a1f8:	2302      	movs	r3, #2
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	4613      	mov	r3, r2
 800a20e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a216:	2302      	movs	r3, #2
 800a218:	e01a      	b.n	800a250 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	79fa      	ldrb	r2, [r7, #7]
 800a246:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f001 fb43 	bl	800b8d4 <USBD_LL_Init>

  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
 800a278:	e001      	b.n	800a27e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a27a:	2302      	movs	r3, #2
 800a27c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr

0800a28a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fb78 	bl	800b988 <USBD_LL_Start>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr

0800a2b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00c      	beq.n	800a2ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	4798      	blx	r3
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	4798      	blx	r3

  return USBD_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fed8 	bl	800b0e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a340:	461a      	mov	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	2b02      	cmp	r3, #2
 800a354:	d016      	beq.n	800a384 <USBD_LL_SetupStage+0x6a>
 800a356:	2b02      	cmp	r3, #2
 800a358:	d81c      	bhi.n	800a394 <USBD_LL_SetupStage+0x7a>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <USBD_LL_SetupStage+0x4a>
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d008      	beq.n	800a374 <USBD_LL_SetupStage+0x5a>
 800a362:	e017      	b.n	800a394 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f9cb 	bl	800a708 <USBD_StdDevReq>
      break;
 800a372:	e01a      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa2d 	bl	800a7dc <USBD_StdItfReq>
      break;
 800a382:	e012      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa6d 	bl	800a86c <USBD_StdEPReq>
      break;
 800a392:	e00a      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a39a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fb50 	bl	800ba48 <USBD_LL_StallEP>
      break;
 800a3a8:	bf00      	nop
  }

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d14b      	bne.n	800a460 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d134      	bne.n	800a444 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d919      	bls.n	800a41a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d203      	bcs.n	800a408 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a404:	b29b      	uxth	r3, r3
 800a406:	e002      	b.n	800a40e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 ff57 	bl	800b2c6 <USBD_CtlContinueRx>
 800a418:	e038      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d105      	bne.n	800a43c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 ff54 	bl	800b2ea <USBD_CtlSendStatus>
 800a442:	e023      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d11e      	bne.n	800a48c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a456:	2100      	movs	r1, #0
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f001 faf5 	bl	800ba48 <USBD_LL_StallEP>
 800a45e:	e015      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00d      	beq.n	800a488 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a472:	2b03      	cmp	r3, #3
 800a474:	d108      	bne.n	800a488 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	7afa      	ldrb	r2, [r7, #11]
 800a480:	4611      	mov	r1, r2
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4798      	blx	r3
 800a486:	e001      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a488:	2302      	movs	r3, #2
 800a48a:	e000      	b.n	800a48e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4a4:	7afb      	ldrb	r3, [r7, #11]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d17f      	bne.n	800a5aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d15c      	bne.n	800a574 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d915      	bls.n	800a4f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fec1 	bl	800b266 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f001 fb58 	bl	800bba0 <USBD_LL_PrepareReceive>
 800a4f0:	e04e      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	6912      	ldr	r2, [r2, #16]
 800a4fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4fe:	fb02 f201 	mul.w	r2, r2, r1
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11c      	bne.n	800a542 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a510:	429a      	cmp	r2, r3
 800a512:	d316      	bcc.n	800a542 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a51e:	429a      	cmp	r2, r3
 800a520:	d20f      	bcs.n	800a542 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a522:	2200      	movs	r2, #0
 800a524:	2100      	movs	r1, #0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fe9d 	bl	800b266 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a534:	2300      	movs	r3, #0
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f001 fb30 	bl	800bba0 <USBD_LL_PrepareReceive>
 800a540:	e026      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a554:	2b03      	cmp	r3, #3
 800a556:	d105      	bne.n	800a564 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a564:	2180      	movs	r1, #128	; 0x80
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f001 fa6e 	bl	800ba48 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 fecf 	bl	800b310 <USBD_CtlReceiveStatus>
 800a572:	e00d      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d004      	beq.n	800a588 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a584:	2b00      	cmp	r3, #0
 800a586:	d103      	bne.n	800a590 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a588:	2180      	movs	r1, #128	; 0x80
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f001 fa5c 	bl	800ba48 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a596:	2b01      	cmp	r3, #1
 800a598:	d11d      	bne.n	800a5d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fe81 	bl	800a2a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5a8:	e015      	b.n	800a5d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d108      	bne.n	800a5d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	7afa      	ldrb	r2, [r7, #11]
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	4798      	blx	r3
 800a5d0:	e001      	b.n	800a5d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e000      	b.n	800a5d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 f9e5 	bl	800b9be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a604:	2340      	movs	r3, #64	; 0x40
 800a606:	2200      	movs	r2, #0
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f9d7 	bl	800b9be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2240      	movs	r2, #64	; 0x40
 800a61a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	2b00      	cmp	r3, #0
 800a642:	d009      	beq.n	800a658 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6852      	ldr	r2, [r2, #4]
 800a650:	b2d2      	uxtb	r2, r2
 800a652:	4611      	mov	r1, r2
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	4798      	blx	r3
  }

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2204      	movs	r2, #4
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bc80      	pop	{r7}
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d105      	bne.n	800a6c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bc80      	pop	{r7}
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d10b      	bne.n	800a6fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a71e:	2b40      	cmp	r3, #64	; 0x40
 800a720:	d005      	beq.n	800a72e <USBD_StdDevReq+0x26>
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d84f      	bhi.n	800a7c6 <USBD_StdDevReq+0xbe>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <USBD_StdDevReq+0x36>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d14b      	bne.n	800a7c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
      break;
 800a73c:	e048      	b.n	800a7d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	2b09      	cmp	r3, #9
 800a744:	d839      	bhi.n	800a7ba <USBD_StdDevReq+0xb2>
 800a746:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <USBD_StdDevReq+0x44>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a79d 	.word	0x0800a79d
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	0800a7bb 	.word	0x0800a7bb
 800a758:	0800a7a7 	.word	0x0800a7a7
 800a75c:	0800a7bb 	.word	0x0800a7bb
 800a760:	0800a77f 	.word	0x0800a77f
 800a764:	0800a775 	.word	0x0800a775
 800a768:	0800a7bb 	.word	0x0800a7bb
 800a76c:	0800a793 	.word	0x0800a793
 800a770:	0800a789 	.word	0x0800a789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f9dc 	bl	800ab34 <USBD_GetDescriptor>
          break;
 800a77c:	e022      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fb3f 	bl	800ae04 <USBD_SetAddress>
          break;
 800a786:	e01d      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fb7e 	bl	800ae8c <USBD_SetConfig>
          break;
 800a790:	e018      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fc07 	bl	800afa8 <USBD_GetConfig>
          break;
 800a79a:	e013      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fc37 	bl	800b012 <USBD_GetStatus>
          break;
 800a7a4:	e00e      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc65 	bl	800b078 <USBD_SetFeature>
          break;
 800a7ae:	e009      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fc74 	bl	800b0a0 <USBD_ClrFeature>
          break;
 800a7b8:	e004      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fccc 	bl	800b15a <USBD_CtlError>
          break;
 800a7c2:	bf00      	nop
      }
      break;
 800a7c4:	e004      	b.n	800a7d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fcc6 	bl	800b15a <USBD_CtlError>
      break;
 800a7ce:	bf00      	nop
  }

  return ret;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop

0800a7dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d005      	beq.n	800a802 <USBD_StdItfReq+0x26>
 800a7f6:	2b40      	cmp	r3, #64	; 0x40
 800a7f8:	d82e      	bhi.n	800a858 <USBD_StdItfReq+0x7c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <USBD_StdItfReq+0x26>
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	d12a      	bne.n	800a858 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a808:	3b01      	subs	r3, #1
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d81d      	bhi.n	800a84a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	889b      	ldrh	r3, [r3, #4]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b01      	cmp	r3, #1
 800a816:	d813      	bhi.n	800a840 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
 800a826:	4603      	mov	r3, r0
 800a828:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	88db      	ldrh	r3, [r3, #6]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d110      	bne.n	800a854 <USBD_StdItfReq+0x78>
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10d      	bne.n	800a854 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fd56 	bl	800b2ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a83e:	e009      	b.n	800a854 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc89 	bl	800b15a <USBD_CtlError>
          break;
 800a848:	e004      	b.n	800a854 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc84 	bl	800b15a <USBD_CtlError>
          break;
 800a852:	e000      	b.n	800a856 <USBD_StdItfReq+0x7a>
          break;
 800a854:	bf00      	nop
      }
      break;
 800a856:	e004      	b.n	800a862 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc7d 	bl	800b15a <USBD_CtlError>
      break;
 800a860:	bf00      	nop
  }

  return USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	889b      	ldrh	r3, [r3, #4]
 800a87e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a888:	2b40      	cmp	r3, #64	; 0x40
 800a88a:	d007      	beq.n	800a89c <USBD_StdEPReq+0x30>
 800a88c:	2b40      	cmp	r3, #64	; 0x40
 800a88e:	f200 8146 	bhi.w	800ab1e <USBD_StdEPReq+0x2b2>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <USBD_StdEPReq+0x40>
 800a896:	2b20      	cmp	r3, #32
 800a898:	f040 8141 	bne.w	800ab1e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
      break;
 800a8aa:	e13d      	b.n	800ab28 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d10a      	bne.n	800a8ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	e12d      	b.n	800ab2a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d007      	beq.n	800a8e6 <USBD_StdEPReq+0x7a>
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	f300 811b 	bgt.w	800ab12 <USBD_StdEPReq+0x2a6>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d072      	beq.n	800a9c6 <USBD_StdEPReq+0x15a>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d03a      	beq.n	800a95a <USBD_StdEPReq+0xee>
 800a8e4:	e115      	b.n	800ab12 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d002      	beq.n	800a8f6 <USBD_StdEPReq+0x8a>
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d015      	beq.n	800a920 <USBD_StdEPReq+0xb4>
 800a8f4:	e02b      	b.n	800a94e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <USBD_StdEPReq+0xaa>
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b80      	cmp	r3, #128	; 0x80
 800a900:	d009      	beq.n	800a916 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 f89e 	bl	800ba48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 f89a 	bl	800ba48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a914:	e020      	b.n	800a958 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc1e 	bl	800b15a <USBD_CtlError>
              break;
 800a91e:	e01b      	b.n	800a958 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	885b      	ldrh	r3, [r3, #2]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10e      	bne.n	800a946 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00b      	beq.n	800a946 <USBD_StdEPReq+0xda>
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b80      	cmp	r3, #128	; 0x80
 800a932:	d008      	beq.n	800a946 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	88db      	ldrh	r3, [r3, #6]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d104      	bne.n	800a946 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 f881 	bl	800ba48 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fccf 	bl	800b2ea <USBD_CtlSendStatus>

              break;
 800a94c:	e004      	b.n	800a958 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc02 	bl	800b15a <USBD_CtlError>
              break;
 800a956:	bf00      	nop
          }
          break;
 800a958:	e0e0      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	2b02      	cmp	r3, #2
 800a962:	d002      	beq.n	800a96a <USBD_StdEPReq+0xfe>
 800a964:	2b03      	cmp	r3, #3
 800a966:	d015      	beq.n	800a994 <USBD_StdEPReq+0x128>
 800a968:	e026      	b.n	800a9b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00c      	beq.n	800a98a <USBD_StdEPReq+0x11e>
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d009      	beq.n	800a98a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 f864 	bl	800ba48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 f860 	bl	800ba48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a988:	e01c      	b.n	800a9c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fbe4 	bl	800b15a <USBD_CtlError>
              break;
 800a992:	e017      	b.n	800a9c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	885b      	ldrh	r3, [r3, #2]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d112      	bne.n	800a9c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 f86b 	bl	800ba86 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fc9a 	bl	800b2ea <USBD_CtlSendStatus>
              }
              break;
 800a9b6:	e004      	b.n	800a9c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fbcd 	bl	800b15a <USBD_CtlError>
              break;
 800a9c0:	e000      	b.n	800a9c4 <USBD_StdEPReq+0x158>
              break;
 800a9c2:	bf00      	nop
          }
          break;
 800a9c4:	e0aa      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d002      	beq.n	800a9d6 <USBD_StdEPReq+0x16a>
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d032      	beq.n	800aa3a <USBD_StdEPReq+0x1ce>
 800a9d4:	e097      	b.n	800ab06 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <USBD_StdEPReq+0x180>
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d004      	beq.n	800a9ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fbb8 	bl	800b15a <USBD_CtlError>
                break;
 800a9ea:	e091      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	da0b      	bge.n	800aa0c <USBD_StdEPReq+0x1a0>
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	3310      	adds	r3, #16
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	4413      	add	r3, r2
 800aa08:	3304      	adds	r3, #4
 800aa0a:	e00b      	b.n	800aa24 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	3304      	adds	r3, #4
 800aa24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fbfb 	bl	800b22e <USBD_CtlSendData>
              break;
 800aa38:	e06a      	b.n	800ab10 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	da11      	bge.n	800aa66 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	f003 020f 	and.w	r2, r3, #15
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	440b      	add	r3, r1
 800aa54:	3318      	adds	r3, #24
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d117      	bne.n	800aa8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fb7b 	bl	800b15a <USBD_CtlError>
                  break;
 800aa64:	e054      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fb68 	bl	800b15a <USBD_CtlError>
                  break;
 800aa8a:	e041      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da0b      	bge.n	800aaac <USBD_StdEPReq+0x240>
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	3310      	adds	r3, #16
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	e00b      	b.n	800aac4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	3304      	adds	r3, #4
 800aac4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <USBD_StdEPReq+0x266>
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	2b80      	cmp	r3, #128	; 0x80
 800aad0:	d103      	bne.n	800aada <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e00e      	b.n	800aaf8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fff0 	bl	800bac4 <USBD_LL_IsStallEP>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e002      	b.n	800aaf8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2202      	movs	r2, #2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fb95 	bl	800b22e <USBD_CtlSendData>
              break;
 800ab04:	e004      	b.n	800ab10 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fb26 	bl	800b15a <USBD_CtlError>
              break;
 800ab0e:	bf00      	nop
          }
          break;
 800ab10:	e004      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fb20 	bl	800b15a <USBD_CtlError>
          break;
 800ab1a:	bf00      	nop
      }
      break;
 800ab1c:	e004      	b.n	800ab28 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fb1a 	bl	800b15a <USBD_CtlError>
      break;
 800ab26:	bf00      	nop
  }

  return ret;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3b01      	subs	r3, #1
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	f200 8128 	bhi.w	800adaa <USBD_GetDescriptor+0x276>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <USBD_GetDescriptor+0x2c>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab7d 	.word	0x0800ab7d
 800ab64:	0800ab95 	.word	0x0800ab95
 800ab68:	0800abd5 	.word	0x0800abd5
 800ab6c:	0800adab 	.word	0x0800adab
 800ab70:	0800adab 	.word	0x0800adab
 800ab74:	0800ad4b 	.word	0x0800ad4b
 800ab78:	0800ad77 	.word	0x0800ad77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
      break;
 800ab92:	e112      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7c1b      	ldrb	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2202      	movs	r2, #2
 800abb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abb6:	e100      	b.n	800adba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f107 0208 	add.w	r2, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	2202      	movs	r2, #2
 800abd0:	701a      	strb	r2, [r3, #0]
      break;
 800abd2:	e0f2      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b05      	cmp	r3, #5
 800abdc:	f200 80ac 	bhi.w	800ad38 <USBD_GetDescriptor+0x204>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBD_GetDescriptor+0xb4>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800ac35 	.word	0x0800ac35
 800abf0:	0800ac69 	.word	0x0800ac69
 800abf4:	0800ac9d 	.word	0x0800ac9d
 800abf8:	0800acd1 	.word	0x0800acd1
 800abfc:	0800ad05 	.word	0x0800ad05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac22:	e091      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa97 	bl	800b15a <USBD_CtlError>
            err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
          break;
 800ac32:	e089      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7c12      	ldrb	r2, [r2, #16]
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac56:	e077      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa7d 	bl	800b15a <USBD_CtlError>
            err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
          break;
 800ac66:	e06f      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8a:	e05d      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa63 	bl	800b15a <USBD_CtlError>
            err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9a:	e055      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e043      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa49 	bl	800b15a <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e03b      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e029      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa2f 	bl	800b15a <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e021      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad26:	e00f      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa15 	bl	800b15a <USBD_CtlError>
            err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
          break;
 800ad36:	e007      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa0d 	bl	800b15a <USBD_CtlError>
          err++;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	3301      	adds	r3, #1
 800ad44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad46:	e038      	b.n	800adba <USBD_GetDescriptor+0x286>
 800ad48:	e037      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7c1b      	ldrb	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5a:	f107 0208 	add.w	r2, r7, #8
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
 800ad62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad64:	e029      	b.n	800adba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f9f6 	bl	800b15a <USBD_CtlError>
        err++;
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	3301      	adds	r3, #1
 800ad72:	72fb      	strb	r3, [r7, #11]
      break;
 800ad74:	e021      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7c1b      	ldrb	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10d      	bne.n	800ad9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f107 0208 	add.w	r2, r7, #8
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4798      	blx	r3
 800ad8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	2207      	movs	r2, #7
 800ad96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad98:	e00f      	b.n	800adba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f9dc 	bl	800b15a <USBD_CtlError>
        err++;
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	3301      	adds	r3, #1
 800ada6:	72fb      	strb	r3, [r7, #11]
      break;
 800ada8:	e007      	b.n	800adba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f9d4 	bl	800b15a <USBD_CtlError>
      err++;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	3301      	adds	r3, #1
 800adb6:	72fb      	strb	r3, [r7, #11]
      break;
 800adb8:	bf00      	nop
  }

  if (err != 0U)
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11c      	bne.n	800adfa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800adc0:	893b      	ldrh	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d011      	beq.n	800adea <USBD_GetDescriptor+0x2b6>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	88db      	ldrh	r3, [r3, #6]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88da      	ldrh	r2, [r3, #6]
 800add2:	893b      	ldrh	r3, [r7, #8]
 800add4:	4293      	cmp	r3, r2
 800add6:	bf28      	it	cs
 800add8:	4613      	movcs	r3, r2
 800adda:	b29b      	uxth	r3, r3
 800addc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adde:	893b      	ldrh	r3, [r7, #8]
 800ade0:	461a      	mov	r2, r3
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa22 	bl	800b22e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa79 	bl	800b2ea <USBD_CtlSendStatus>
 800adf8:	e000      	b.n	800adfc <USBD_GetDescriptor+0x2c8>
    return;
 800adfa:	bf00      	nop
    }
  }
}
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop

0800ae04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d130      	bne.n	800ae78 <USBD_SetAddress+0x74>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	88db      	ldrh	r3, [r3, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d12c      	bne.n	800ae78 <USBD_SetAddress+0x74>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	2b7f      	cmp	r3, #127	; 0x7f
 800ae24:	d828      	bhi.n	800ae78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	885b      	ldrh	r3, [r3, #2]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d104      	bne.n	800ae46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f98b 	bl	800b15a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae44:	e01d      	b.n	800ae82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	7bfa      	ldrb	r2, [r7, #15]
 800ae4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fe62 	bl	800bb1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fa46 	bl	800b2ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae6c:	e009      	b.n	800ae82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae76:	e004      	b.n	800ae82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f96d 	bl	800b15a <USBD_CtlError>
  }
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	885b      	ldrh	r3, [r3, #2]
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <USBD_SetConfig+0x118>)
 800ae9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aea0:	4b40      	ldr	r3, [pc, #256]	; (800afa4 <USBD_SetConfig+0x118>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d904      	bls.n	800aeb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f955 	bl	800b15a <USBD_CtlError>
 800aeb0:	e075      	b.n	800af9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d002      	beq.n	800aec2 <USBD_SetConfig+0x36>
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d023      	beq.n	800af08 <USBD_SetConfig+0x7c>
 800aec0:	e062      	b.n	800af88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aec2:	4b38      	ldr	r3, [pc, #224]	; (800afa4 <USBD_SetConfig+0x118>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01a      	beq.n	800af00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aeca:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <USBD_SetConfig+0x118>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2203      	movs	r2, #3
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aedc:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <USBD_SetConfig+0x118>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f9e7 	bl	800a2b6 <USBD_SetClassConfig>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d104      	bne.n	800aef8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f932 	bl	800b15a <USBD_CtlError>
            return;
 800aef6:	e052      	b.n	800af9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f9f6 	bl	800b2ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aefe:	e04e      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f9f2 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af06:	e04a      	b.n	800af9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800af08:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <USBD_SetConfig+0x118>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d112      	bne.n	800af36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800af18:	4b22      	ldr	r3, [pc, #136]	; (800afa4 <USBD_SetConfig+0x118>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af22:	4b20      	ldr	r3, [pc, #128]	; (800afa4 <USBD_SetConfig+0x118>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff f9e3 	bl	800a2f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f9db 	bl	800b2ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af34:	e033      	b.n	800af9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af36:	4b1b      	ldr	r3, [pc, #108]	; (800afa4 <USBD_SetConfig+0x118>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d01d      	beq.n	800af80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff f9d1 	bl	800a2f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af52:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <USBD_SetConfig+0x118>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <USBD_SetConfig+0x118>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff f9a7 	bl	800a2b6 <USBD_SetClassConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d104      	bne.n	800af78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f8f2 	bl	800b15a <USBD_CtlError>
            return;
 800af76:	e012      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f9b6 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af7e:	e00e      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f9b2 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af86:	e00a      	b.n	800af9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f8e5 	bl	800b15a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <USBD_SetConfig+0x118>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f9ac 	bl	800a2f4 <USBD_ClrClassConfig>
        break;
 800af9c:	bf00      	nop
    }
  }
}
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	2000029c 	.word	0x2000029c

0800afa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d004      	beq.n	800afc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f8cc 	bl	800b15a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afc2:	e022      	b.n	800b00a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afca:	2b02      	cmp	r3, #2
 800afcc:	dc02      	bgt.n	800afd4 <USBD_GetConfig+0x2c>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dc03      	bgt.n	800afda <USBD_GetConfig+0x32>
 800afd2:	e015      	b.n	800b000 <USBD_GetConfig+0x58>
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d00b      	beq.n	800aff0 <USBD_GetConfig+0x48>
 800afd8:	e012      	b.n	800b000 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3308      	adds	r3, #8
 800afe4:	2201      	movs	r2, #1
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f920 	bl	800b22e <USBD_CtlSendData>
        break;
 800afee:	e00c      	b.n	800b00a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	2201      	movs	r2, #1
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f918 	bl	800b22e <USBD_CtlSendData>
        break;
 800affe:	e004      	b.n	800b00a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f8a9 	bl	800b15a <USBD_CtlError>
        break;
 800b008:	bf00      	nop
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	3b01      	subs	r3, #1
 800b024:	2b02      	cmp	r3, #2
 800b026:	d81e      	bhi.n	800b066 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d004      	beq.n	800b03a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f891 	bl	800b15a <USBD_CtlError>
        break;
 800b038:	e01a      	b.n	800b070 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f043 0202 	orr.w	r2, r3, #2
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	330c      	adds	r3, #12
 800b05a:	2202      	movs	r2, #2
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f8e5 	bl	800b22e <USBD_CtlSendData>
      break;
 800b064:	e004      	b.n	800b070 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f876 	bl	800b15a <USBD_CtlError>
      break;
 800b06e:	bf00      	nop
  }
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	885b      	ldrh	r3, [r3, #2]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d106      	bne.n	800b098 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f929 	bl	800b2ea <USBD_CtlSendStatus>
  }
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d80b      	bhi.n	800b0ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d10c      	bne.n	800b0d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f90f 	bl	800b2ea <USBD_CtlSendStatus>
      }
      break;
 800b0cc:	e004      	b.n	800b0d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f842 	bl	800b15a <USBD_CtlError>
      break;
 800b0d6:	e000      	b.n	800b0da <USBD_ClrFeature+0x3a>
      break;
 800b0d8:	bf00      	nop
  }
}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	785a      	ldrb	r2, [r3, #1]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	3302      	adds	r3, #2
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	b29a      	uxth	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3303      	adds	r3, #3
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4413      	add	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3304      	adds	r3, #4
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b29a      	uxth	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3305      	adds	r3, #5
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29b      	uxth	r3, r3
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	4413      	add	r3, r2
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	3306      	adds	r3, #6
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	3307      	adds	r3, #7
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	b29b      	uxth	r3, r3
 800b148:	4413      	add	r3, r2
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	80da      	strh	r2, [r3, #6]

}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr

0800b15a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b164:	2180      	movs	r1, #128	; 0x80
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fc6e 	bl	800ba48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b16c:	2100      	movs	r1, #0
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fc6a 	bl	800ba48 <USBD_LL_StallEP>
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d032      	beq.n	800b1f8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 f834 	bl	800b200 <USBD_GetLen>
 800b198:	4603      	mov	r3, r0
 800b19a:	3301      	adds	r3, #1
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	75fa      	strb	r2, [r7, #23]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	7812      	ldrb	r2, [r2, #0]
 800b1b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	75fa      	strb	r2, [r7, #23]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1c8:	e012      	b.n	800b1f0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	60fa      	str	r2, [r7, #12]
 800b1d0:	7dfa      	ldrb	r2, [r7, #23]
 800b1d2:	1c51      	adds	r1, r2, #1
 800b1d4:	75f9      	strb	r1, [r7, #23]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	440a      	add	r2, r1
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	75fa      	strb	r2, [r7, #23]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e8      	bne.n	800b1ca <USBD_GetString+0x4e>
    }
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b20c:	e005      	b.n	800b21a <USBD_GetLen+0x1a>
  {
    len++;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	3301      	adds	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3301      	adds	r3, #1
 800b218:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1f5      	bne.n	800b20e <USBD_GetLen+0xe>
  }

  return len;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	4613      	mov	r3, r2
 800b23a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2202      	movs	r2, #2
 800b240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fc7f 	bl	800bb5a <USBD_LL_Transmit>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4613      	mov	r3, r2
 800b272:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	2100      	movs	r1, #0
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fc6d 	bl	800bb5a <USBD_LL_Transmit>

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2203      	movs	r2, #3
 800b29c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fc72 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2d4:	88fb      	ldrh	r3, [r7, #6]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 fc60 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2204      	movs	r2, #4
 800b2f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fc2a 	bl	800bb5a <USBD_LL_Transmit>

  return USBD_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2205      	movs	r2, #5
 800b31c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b320:	2300      	movs	r3, #0
 800b322:	2200      	movs	r2, #0
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fc3a 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b33c:	2200      	movs	r2, #0
 800b33e:	4912      	ldr	r1, [pc, #72]	; (800b388 <MX_USB_DEVICE_Init+0x50>)
 800b340:	4812      	ldr	r0, [pc, #72]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b342:	f7fe ff5e 	bl	800a202 <USBD_Init>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b34c:	f7f6 ff0c 	bl	8002168 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b350:	490f      	ldr	r1, [pc, #60]	; (800b390 <MX_USB_DEVICE_Init+0x58>)
 800b352:	480e      	ldr	r0, [pc, #56]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b354:	f7fe ff80 	bl	800a258 <USBD_RegisterClass>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b35e:	f7f6 ff03 	bl	8002168 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b362:	490c      	ldr	r1, [pc, #48]	; (800b394 <MX_USB_DEVICE_Init+0x5c>)
 800b364:	4809      	ldr	r0, [pc, #36]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b366:	f7fe feb1 	bl	800a0cc <USBD_CDC_RegisterInterface>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b370:	f7f6 fefa 	bl	8002168 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b374:	4805      	ldr	r0, [pc, #20]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b376:	f7fe ff88 	bl	800a28a <USBD_Start>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b380:	f7f6 fef2 	bl	8002168 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b384:	bf00      	nop
 800b386:	bd80      	pop	{r7, pc}
 800b388:	2000012c 	.word	0x2000012c
 800b38c:	20000c78 	.word	0x20000c78
 800b390:	20000018 	.word	0x20000018
 800b394:	2000011c 	.word	0x2000011c

0800b398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b39c:	2200      	movs	r2, #0
 800b39e:	4905      	ldr	r1, [pc, #20]	; (800b3b4 <CDC_Init_FS+0x1c>)
 800b3a0:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <CDC_Init_FS+0x20>)
 800b3a2:	f7fe fea9 	bl	800a0f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3a6:	4905      	ldr	r1, [pc, #20]	; (800b3bc <CDC_Init_FS+0x24>)
 800b3a8:	4803      	ldr	r0, [pc, #12]	; (800b3b8 <CDC_Init_FS+0x20>)
 800b3aa:	f7fe febe 	bl	800a12a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	2000113c 	.word	0x2000113c
 800b3b8:	20000c78 	.word	0x20000c78
 800b3bc:	20000f3c 	.word	0x20000f3c

0800b3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bc80      	pop	{r7}
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3e0:	79fb      	ldrb	r3, [r7, #7]
 800b3e2:	2b23      	cmp	r3, #35	; 0x23
 800b3e4:	d84a      	bhi.n	800b47c <CDC_Control_FS+0xac>
 800b3e6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <CDC_Control_FS+0x1c>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b47d 	.word	0x0800b47d
 800b3f0:	0800b47d 	.word	0x0800b47d
 800b3f4:	0800b47d 	.word	0x0800b47d
 800b3f8:	0800b47d 	.word	0x0800b47d
 800b3fc:	0800b47d 	.word	0x0800b47d
 800b400:	0800b47d 	.word	0x0800b47d
 800b404:	0800b47d 	.word	0x0800b47d
 800b408:	0800b47d 	.word	0x0800b47d
 800b40c:	0800b47d 	.word	0x0800b47d
 800b410:	0800b47d 	.word	0x0800b47d
 800b414:	0800b47d 	.word	0x0800b47d
 800b418:	0800b47d 	.word	0x0800b47d
 800b41c:	0800b47d 	.word	0x0800b47d
 800b420:	0800b47d 	.word	0x0800b47d
 800b424:	0800b47d 	.word	0x0800b47d
 800b428:	0800b47d 	.word	0x0800b47d
 800b42c:	0800b47d 	.word	0x0800b47d
 800b430:	0800b47d 	.word	0x0800b47d
 800b434:	0800b47d 	.word	0x0800b47d
 800b438:	0800b47d 	.word	0x0800b47d
 800b43c:	0800b47d 	.word	0x0800b47d
 800b440:	0800b47d 	.word	0x0800b47d
 800b444:	0800b47d 	.word	0x0800b47d
 800b448:	0800b47d 	.word	0x0800b47d
 800b44c:	0800b47d 	.word	0x0800b47d
 800b450:	0800b47d 	.word	0x0800b47d
 800b454:	0800b47d 	.word	0x0800b47d
 800b458:	0800b47d 	.word	0x0800b47d
 800b45c:	0800b47d 	.word	0x0800b47d
 800b460:	0800b47d 	.word	0x0800b47d
 800b464:	0800b47d 	.word	0x0800b47d
 800b468:	0800b47d 	.word	0x0800b47d
 800b46c:	0800b47d 	.word	0x0800b47d
 800b470:	0800b47d 	.word	0x0800b47d
 800b474:	0800b47d 	.word	0x0800b47d
 800b478:	0800b47d 	.word	0x0800b47d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b47c:	bf00      	nop
  }

  return (USBD_OK);
 800b47e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop

0800b48c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <CDC_Receive_FS+0x38>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d006      	beq.n	800b4ac <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800b49e:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <CDC_Receive_FS+0x38>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	6812      	ldr	r2, [r2, #0]
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	4806      	ldr	r0, [pc, #24]	; (800b4c8 <CDC_Receive_FS+0x3c>)
 800b4b0:	f7fe fe3b 	bl	800a12a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4b4:	4804      	ldr	r0, [pc, #16]	; (800b4c8 <CDC_Receive_FS+0x3c>)
 800b4b6:	f7fe fe7a 	bl	800a1ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	200002a0 	.word	0x200002a0
 800b4c8:	20000c78 	.word	0x20000c78

0800b4cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <CDC_Transmit_FS+0x48>)
 800b4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e00b      	b.n	800b50a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b4f2:	887b      	ldrh	r3, [r7, #2]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4806      	ldr	r0, [pc, #24]	; (800b514 <CDC_Transmit_FS+0x48>)
 800b4fa:	f7fe fdfd 	bl	800a0f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b4fe:	4805      	ldr	r0, [pc, #20]	; (800b514 <CDC_Transmit_FS+0x48>)
 800b500:	f7fe fe26 	bl	800a150 <USBD_CDC_TransmitPacket>
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20000c78 	.word	0x20000c78

0800b518 <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800b520:	4a03      	ldr	r2, [pc, #12]	; (800b530 <CDC_AttachOnUSBData+0x18>)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6013      	str	r3, [r2, #0]
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bc80      	pop	{r7}
 800b52e:	4770      	bx	lr
 800b530:	200002a0 	.word	0x200002a0

0800b534 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	6039      	str	r1, [r7, #0]
 800b53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2212      	movs	r2, #18
 800b544:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b546:	4b03      	ldr	r3, [pc, #12]	; (800b554 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b548:	4618      	mov	r0, r3
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bc80      	pop	{r7}
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	20000148 	.word	0x20000148

0800b558 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	6039      	str	r1, [r7, #0]
 800b562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2204      	movs	r2, #4
 800b568:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b56a:	4b03      	ldr	r3, [pc, #12]	; (800b578 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	2000015c 	.word	0x2000015c

0800b57c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	6039      	str	r1, [r7, #0]
 800b586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d105      	bne.n	800b59a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	4907      	ldr	r1, [pc, #28]	; (800b5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b592:	4808      	ldr	r0, [pc, #32]	; (800b5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b594:	f7ff fdf2 	bl	800b17c <USBD_GetString>
 800b598:	e004      	b.n	800b5a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	4904      	ldr	r1, [pc, #16]	; (800b5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b59e:	4805      	ldr	r0, [pc, #20]	; (800b5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5a0:	f7ff fdec 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5a4:	4b02      	ldr	r3, [pc, #8]	; (800b5b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	2000133c 	.word	0x2000133c
 800b5b4:	0800bd2c 	.word	0x0800bd2c

0800b5b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	6039      	str	r1, [r7, #0]
 800b5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	4904      	ldr	r1, [pc, #16]	; (800b5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5c8:	4804      	ldr	r0, [pc, #16]	; (800b5dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5ca:	f7ff fdd7 	bl	800b17c <USBD_GetString>
  return USBD_StrDesc;
 800b5ce:	4b02      	ldr	r3, [pc, #8]	; (800b5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	2000133c 	.word	0x2000133c
 800b5dc:	0800bd44 	.word	0x0800bd44

0800b5e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	6039      	str	r1, [r7, #0]
 800b5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	221a      	movs	r2, #26
 800b5f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5f2:	f000 f843 	bl	800b67c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b5f6:	4b02      	ldr	r3, [pc, #8]	; (800b600 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20000160 	.word	0x20000160

0800b604 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	6039      	str	r1, [r7, #0]
 800b60e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b610:	79fb      	ldrb	r3, [r7, #7]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d105      	bne.n	800b622 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	4907      	ldr	r1, [pc, #28]	; (800b638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b61a:	4808      	ldr	r0, [pc, #32]	; (800b63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b61c:	f7ff fdae 	bl	800b17c <USBD_GetString>
 800b620:	e004      	b.n	800b62c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	4904      	ldr	r1, [pc, #16]	; (800b638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b626:	4805      	ldr	r0, [pc, #20]	; (800b63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b628:	f7ff fda8 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b62c:	4b02      	ldr	r3, [pc, #8]	; (800b638 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	2000133c 	.word	0x2000133c
 800b63c:	0800bd58 	.word	0x0800bd58

0800b640 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d105      	bne.n	800b65e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	4907      	ldr	r1, [pc, #28]	; (800b674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b656:	4808      	ldr	r0, [pc, #32]	; (800b678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b658:	f7ff fd90 	bl	800b17c <USBD_GetString>
 800b65c:	e004      	b.n	800b668 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	4904      	ldr	r1, [pc, #16]	; (800b674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b662:	4805      	ldr	r0, [pc, #20]	; (800b678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b664:	f7ff fd8a 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	2000133c 	.word	0x2000133c
 800b678:	0800bd64 	.word	0x0800bd64

0800b67c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b682:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <Get_SerialNum+0x44>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b688:	4b0e      	ldr	r3, [pc, #56]	; (800b6c4 <Get_SerialNum+0x48>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b68e:	4b0e      	ldr	r3, [pc, #56]	; (800b6c8 <Get_SerialNum+0x4c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4413      	add	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d009      	beq.n	800b6b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	4909      	ldr	r1, [pc, #36]	; (800b6cc <Get_SerialNum+0x50>)
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f000 f814 	bl	800b6d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	4908      	ldr	r1, [pc, #32]	; (800b6d0 <Get_SerialNum+0x54>)
 800b6b0:	68b8      	ldr	r0, [r7, #8]
 800b6b2:	f000 f80f 	bl	800b6d4 <IntToUnicode>
  }
}
 800b6b6:	bf00      	nop
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	1ffff7e8 	.word	0x1ffff7e8
 800b6c4:	1ffff7ec 	.word	0x1ffff7ec
 800b6c8:	1ffff7f0 	.word	0x1ffff7f0
 800b6cc:	20000162 	.word	0x20000162
 800b6d0:	20000172 	.word	0x20000172

0800b6d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b087      	sub	sp, #28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	75fb      	strb	r3, [r7, #23]
 800b6ea:	e027      	b.n	800b73c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	0f1b      	lsrs	r3, r3, #28
 800b6f0:	2b09      	cmp	r3, #9
 800b6f2:	d80b      	bhi.n	800b70c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	0f1b      	lsrs	r3, r3, #28
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	005b      	lsls	r3, r3, #1
 800b6fe:	4619      	mov	r1, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	440b      	add	r3, r1
 800b704:	3230      	adds	r2, #48	; 0x30
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]
 800b70a:	e00a      	b.n	800b722 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	0f1b      	lsrs	r3, r3, #28
 800b710:	b2da      	uxtb	r2, r3
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	4619      	mov	r1, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	440b      	add	r3, r1
 800b71c:	3237      	adds	r2, #55	; 0x37
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	3301      	adds	r3, #1
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	4413      	add	r3, r2
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	3301      	adds	r3, #1
 800b73a:	75fb      	strb	r3, [r7, #23]
 800b73c:	7dfa      	ldrb	r2, [r7, #23]
 800b73e:	79fb      	ldrb	r3, [r7, #7]
 800b740:	429a      	cmp	r2, r3
 800b742:	d3d3      	bcc.n	800b6ec <IntToUnicode+0x18>
  }
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bc80      	pop	{r7}
 800b74e:	4770      	bx	lr

0800b750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a0d      	ldr	r2, [pc, #52]	; (800b794 <HAL_PCD_MspInit+0x44>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d113      	bne.n	800b78a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b762:	4b0d      	ldr	r3, [pc, #52]	; (800b798 <HAL_PCD_MspInit+0x48>)
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	4a0c      	ldr	r2, [pc, #48]	; (800b798 <HAL_PCD_MspInit+0x48>)
 800b768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b76c:	61d3      	str	r3, [r2, #28]
 800b76e:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <HAL_PCD_MspInit+0x48>)
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b77a:	2200      	movs	r2, #0
 800b77c:	2100      	movs	r1, #0
 800b77e:	2014      	movs	r0, #20
 800b780:	f7f7 fc1d 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b784:	2014      	movs	r0, #20
 800b786:	f7f7 fc36 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b78a:	bf00      	nop
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	40005c00 	.word	0x40005c00
 800b798:	40021000 	.word	0x40021000

0800b79c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7fe fdb1 	bl	800a31a <USBD_LL_SetupStage>
}
 800b7b8:	bf00      	nop
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7d2:	78fa      	ldrb	r2, [r7, #3]
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	440b      	add	r3, r1
 800b7e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f7fe fde3 	bl	800a3b4 <USBD_LL_DataOutStage>
}
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b808:	78fa      	ldrb	r2, [r7, #3]
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	440b      	add	r3, r1
 800b816:	333c      	adds	r3, #60	; 0x3c
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	4619      	mov	r1, r3
 800b81e:	f7fe fe3a 	bl	800a496 <USBD_LL_DataInStage>
}
 800b822:	bf00      	nop
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe ff4a 	bl	800a6d2 <USBD_LL_SOF>
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b84e:	2301      	movs	r3, #1
 800b850:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	2b02      	cmp	r3, #2
 800b858:	d001      	beq.n	800b85e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b85a:	f7f6 fc85 	bl	8002168 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b864:	7bfa      	ldrb	r2, [r7, #15]
 800b866:	4611      	mov	r1, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fefa 	bl	800a662 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe feb3 	bl	800a5e0 <USBD_LL_Reset>
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fef4 	bl	800a680 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8a0:	4b04      	ldr	r3, [pc, #16]	; (800b8b4 <HAL_PCD_SuspendCallback+0x30>)
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	4a03      	ldr	r2, [pc, #12]	; (800b8b4 <HAL_PCD_SuspendCallback+0x30>)
 800b8a6:	f043 0306 	orr.w	r3, r3, #6
 800b8aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8ac:	bf00      	nop
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	e000ed00 	.word	0xe000ed00

0800b8b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe feee 	bl	800a6a8 <USBD_LL_Resume>
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b8dc:	4a28      	ldr	r2, [pc, #160]	; (800b980 <USBD_LL_Init+0xac>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a26      	ldr	r2, [pc, #152]	; (800b980 <USBD_LL_Init+0xac>)
 800b8e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b8ec:	4b24      	ldr	r3, [pc, #144]	; (800b980 <USBD_LL_Init+0xac>)
 800b8ee:	4a25      	ldr	r2, [pc, #148]	; (800b984 <USBD_LL_Init+0xb0>)
 800b8f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8f2:	4b23      	ldr	r3, [pc, #140]	; (800b980 <USBD_LL_Init+0xac>)
 800b8f4:	2208      	movs	r2, #8
 800b8f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8f8:	4b21      	ldr	r3, [pc, #132]	; (800b980 <USBD_LL_Init+0xac>)
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8fe:	4b20      	ldr	r3, [pc, #128]	; (800b980 <USBD_LL_Init+0xac>)
 800b900:	2200      	movs	r2, #0
 800b902:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b904:	4b1e      	ldr	r3, [pc, #120]	; (800b980 <USBD_LL_Init+0xac>)
 800b906:	2200      	movs	r2, #0
 800b908:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b90a:	4b1d      	ldr	r3, [pc, #116]	; (800b980 <USBD_LL_Init+0xac>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b910:	481b      	ldr	r0, [pc, #108]	; (800b980 <USBD_LL_Init+0xac>)
 800b912:	f7f8 f939 	bl	8003b88 <HAL_PCD_Init>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b91c:	f7f6 fc24 	bl	8002168 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b926:	2318      	movs	r3, #24
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	f7f9 fdaf 	bl	800548e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b936:	2358      	movs	r3, #88	; 0x58
 800b938:	2200      	movs	r2, #0
 800b93a:	2180      	movs	r1, #128	; 0x80
 800b93c:	f7f9 fda7 	bl	800548e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b946:	23c0      	movs	r3, #192	; 0xc0
 800b948:	2200      	movs	r2, #0
 800b94a:	2181      	movs	r1, #129	; 0x81
 800b94c:	f7f9 fd9f 	bl	800548e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b956:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b95a:	2200      	movs	r2, #0
 800b95c:	2101      	movs	r1, #1
 800b95e:	f7f9 fd96 	bl	800548e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b96c:	2200      	movs	r2, #0
 800b96e:	2182      	movs	r1, #130	; 0x82
 800b970:	f7f9 fd8d 	bl	800548e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	2000153c 	.word	0x2000153c
 800b984:	40005c00 	.word	0x40005c00

0800b988 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7f8 f9fd 	bl	8003d9e <HAL_PCD_Start>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 f94e 	bl	800bc4c <USBD_Get_USB_Status>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	4608      	mov	r0, r1
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	70fb      	strb	r3, [r7, #3]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70bb      	strb	r3, [r7, #2]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9e6:	78bb      	ldrb	r3, [r7, #2]
 800b9e8:	883a      	ldrh	r2, [r7, #0]
 800b9ea:	78f9      	ldrb	r1, [r7, #3]
 800b9ec:	f7f8 fb77 	bl	80040de <HAL_PCD_EP_Open>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f928 	bl	800bc4c <USBD_Get_USB_Status>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	460b      	mov	r3, r1
 800ba14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7f8 fbbe 	bl	80041aa <HAL_PCD_EP_Close>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f000 f909 	bl	800bc4c <USBD_Get_USB_Status>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba62:	78fa      	ldrb	r2, [r7, #3]
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f8 fc7e 	bl	8004368 <HAL_PCD_EP_SetStall>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f8ea 	bl	800bc4c <USBD_Get_USB_Status>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baa0:	78fa      	ldrb	r2, [r7, #3]
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7f8 fcbf 	bl	8004428 <HAL_PCD_EP_ClrStall>
 800baaa:	4603      	mov	r3, r0
 800baac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baae:	7bfb      	ldrb	r3, [r7, #15]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 f8cb 	bl	800bc4c <USBD_Get_USB_Status>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baba:	7bbb      	ldrb	r3, [r7, #14]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bad6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800badc:	2b00      	cmp	r3, #0
 800bade:	da0c      	bge.n	800bafa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	440b      	add	r3, r1
 800baf4:	3302      	adds	r3, #2
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	e00b      	b.n	800bb12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb00:	68f9      	ldr	r1, [r7, #12]
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	440b      	add	r3, r1
 800bb0c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb10:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bc80      	pop	{r7}
 800bb1a:	4770      	bx	lr

0800bb1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb36:	78fa      	ldrb	r2, [r7, #3]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f8 faaa 	bl	8004094 <HAL_PCD_SetAddress>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f880 	bl	800bc4c <USBD_Get_USB_Status>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b086      	sub	sp, #24
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	461a      	mov	r2, r3
 800bb66:	460b      	mov	r3, r1
 800bb68:	72fb      	strb	r3, [r7, #11]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb7c:	893b      	ldrh	r3, [r7, #8]
 800bb7e:	7af9      	ldrb	r1, [r7, #11]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	f7f8 fbae 	bl	80042e2 <HAL_PCD_EP_Transmit>
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 f85d 	bl	800bc4c <USBD_Get_USB_Status>
 800bb92:	4603      	mov	r3, r0
 800bb94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb96:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	607a      	str	r2, [r7, #4]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	460b      	mov	r3, r1
 800bbae:	72fb      	strb	r3, [r7, #11]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbc2:	893b      	ldrh	r3, [r7, #8]
 800bbc4:	7af9      	ldrb	r1, [r7, #11]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	f7f8 fb37 	bl	800423a <HAL_PCD_EP_Receive>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f83a 	bl	800bc4c <USBD_Get_USB_Status>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbdc:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b082      	sub	sp, #8
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf8:	78fa      	ldrb	r2, [r7, #3]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7f8 fb59 	bl	80042b4 <HAL_PCD_EP_GetRxCount>
 800bc02:	4603      	mov	r3, r0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc14:	4b02      	ldr	r3, [pc, #8]	; (800bc20 <USBD_static_malloc+0x14>)
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bc80      	pop	{r7}
 800bc1e:	4770      	bx	lr
 800bc20:	200002a4 	.word	0x200002a4

0800bc24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]

}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bc80      	pop	{r7}
 800bc34:	4770      	bx	lr

0800bc36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc36:	b480      	push	{r7}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bc80      	pop	{r7}
 800bc4a:	4770      	bx	lr

0800bc4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d817      	bhi.n	800bc90 <USBD_Get_USB_Status+0x44>
 800bc60:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <USBD_Get_USB_Status+0x1c>)
 800bc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc66:	bf00      	nop
 800bc68:	0800bc79 	.word	0x0800bc79
 800bc6c:	0800bc7f 	.word	0x0800bc7f
 800bc70:	0800bc85 	.word	0x0800bc85
 800bc74:	0800bc8b 	.word	0x0800bc8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7c:	e00b      	b.n	800bc96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc7e:	2302      	movs	r3, #2
 800bc80:	73fb      	strb	r3, [r7, #15]
    break;
 800bc82:	e008      	b.n	800bc96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc84:	2301      	movs	r3, #1
 800bc86:	73fb      	strb	r3, [r7, #15]
    break;
 800bc88:	e005      	b.n	800bc96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8e:	e002      	b.n	800bc96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc90:	2302      	movs	r3, #2
 800bc92:	73fb      	strb	r3, [r7, #15]
    break;
 800bc94:	bf00      	nop
  }
  return usb_status;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop

0800bca4 <__libc_init_array>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	2600      	movs	r6, #0
 800bca8:	4d0c      	ldr	r5, [pc, #48]	; (800bcdc <__libc_init_array+0x38>)
 800bcaa:	4c0d      	ldr	r4, [pc, #52]	; (800bce0 <__libc_init_array+0x3c>)
 800bcac:	1b64      	subs	r4, r4, r5
 800bcae:	10a4      	asrs	r4, r4, #2
 800bcb0:	42a6      	cmp	r6, r4
 800bcb2:	d109      	bne.n	800bcc8 <__libc_init_array+0x24>
 800bcb4:	f000 f822 	bl	800bcfc <_init>
 800bcb8:	2600      	movs	r6, #0
 800bcba:	4d0a      	ldr	r5, [pc, #40]	; (800bce4 <__libc_init_array+0x40>)
 800bcbc:	4c0a      	ldr	r4, [pc, #40]	; (800bce8 <__libc_init_array+0x44>)
 800bcbe:	1b64      	subs	r4, r4, r5
 800bcc0:	10a4      	asrs	r4, r4, #2
 800bcc2:	42a6      	cmp	r6, r4
 800bcc4:	d105      	bne.n	800bcd2 <__libc_init_array+0x2e>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bccc:	4798      	blx	r3
 800bcce:	3601      	adds	r6, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__libc_init_array+0xc>
 800bcd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcd6:	4798      	blx	r3
 800bcd8:	3601      	adds	r6, #1
 800bcda:	e7f2      	b.n	800bcc2 <__libc_init_array+0x1e>
 800bcdc:	0800bf04 	.word	0x0800bf04
 800bce0:	0800bf04 	.word	0x0800bf04
 800bce4:	0800bf04 	.word	0x0800bf04
 800bce8:	0800bf08 	.word	0x0800bf08

0800bcec <memset>:
 800bcec:	4603      	mov	r3, r0
 800bcee:	4402      	add	r2, r0
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d100      	bne.n	800bcf6 <memset+0xa>
 800bcf4:	4770      	bx	lr
 800bcf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcfa:	e7f9      	b.n	800bcf0 <memset+0x4>

0800bcfc <_init>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr

0800bd08 <_fini>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	bf00      	nop
 800bd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0e:	bc08      	pop	{r3}
 800bd10:	469e      	mov	lr, r3
 800bd12:	4770      	bx	lr
