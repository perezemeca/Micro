
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdb0  0800bdb0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdb0  0800bdb0  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdb0  0800bdb0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bdb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000166c  2000017c  0800bf34  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e8  0800bf34  000217e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5b0  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8a  00000000  00000000  0003e755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  000424e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  00043bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde1  00000000  00000000  00045150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd79  00000000  00000000  00060f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097943  00000000  00000000  0007dcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001155ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006188  00000000  00000000  00115640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bba8 	.word	0x0800bba8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800bba8 	.word	0x0800bba8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <InitEsp>:
		error=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
	}
/***********************************************************************************/
}

void InitEsp(_Rx *RXUSART1){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	switch(Estado){
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <InitEsp+0xa0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d83a      	bhi.n	800058a <InitEsp+0x86>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <InitEsp+0x18>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000531 	.word	0x08000531
 8000520:	08000543 	.word	0x08000543
 8000524:	08000555 	.word	0x08000555
 8000528:	08000567 	.word	0x08000567
 800052c:	08000579 	.word	0x08000579
		case 0:
			PutStrOnTx((_Tx *)&TXUSART1,AT); //Envio comando AT para ver si responde el ESP
 8000530:	491d      	ldr	r1, [pc, #116]	; (80005a8 <InitEsp+0xa4>)
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <InitEsp+0xa8>)
 8000534:	f000 feac 	bl	8001290 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,AT);    // Depuracion por USB
 8000538:	491b      	ldr	r1, [pc, #108]	; (80005a8 <InitEsp+0xa4>)
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <InitEsp+0xac>)
 800053c:	f000 fea8 	bl	8001290 <PutStrOnTx>
		break;
 8000540:	e023      	b.n	800058a <InitEsp+0x86>

		case 1:
			PutStrOnTx((_Tx *)&TXUSART1,CWMODE); //Envio comando CWMODE
 8000542:	491c      	ldr	r1, [pc, #112]	; (80005b4 <InitEsp+0xb0>)
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <InitEsp+0xa8>)
 8000546:	f000 fea3 	bl	8001290 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWMODE);    // Depuracion por USB
 800054a:	491a      	ldr	r1, [pc, #104]	; (80005b4 <InitEsp+0xb0>)
 800054c:	4818      	ldr	r0, [pc, #96]	; (80005b0 <InitEsp+0xac>)
 800054e:	f000 fe9f 	bl	8001290 <PutStrOnTx>

		break;
 8000552:	e01a      	b.n	800058a <InitEsp+0x86>

		case 2:
			PutStrOnTx((_Tx *)&TXUSART1,CWJAP_); //Envio comando CWJAP con los datos de la red
 8000554:	4918      	ldr	r1, [pc, #96]	; (80005b8 <InitEsp+0xb4>)
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <InitEsp+0xa8>)
 8000558:	f000 fe9a 	bl	8001290 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CWJAP_);    // Depuracion por USB
 800055c:	4916      	ldr	r1, [pc, #88]	; (80005b8 <InitEsp+0xb4>)
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <InitEsp+0xac>)
 8000560:	f000 fe96 	bl	8001290 <PutStrOnTx>

		break;
 8000564:	e011      	b.n	800058a <InitEsp+0x86>
//			PutStrOnTx((_Tx *)&TXUSB,CIFSR);    // Depuracion por USB
//
//		break;

		case 3:
			PutStrOnTx((_Tx *)&TXUSART1,CIPMUX);
 8000566:	4915      	ldr	r1, [pc, #84]	; (80005bc <InitEsp+0xb8>)
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <InitEsp+0xa8>)
 800056a:	f000 fe91 	bl	8001290 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPMUX);    // Depuracion por USB
 800056e:	4913      	ldr	r1, [pc, #76]	; (80005bc <InitEsp+0xb8>)
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <InitEsp+0xac>)
 8000572:	f000 fe8d 	bl	8001290 <PutStrOnTx>

		break;
 8000576:	e008      	b.n	800058a <InitEsp+0x86>

		case 4:
			PutStrOnTx((_Tx *)&TXUSART1,CIPSTART);
 8000578:	4911      	ldr	r1, [pc, #68]	; (80005c0 <InitEsp+0xbc>)
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <InitEsp+0xa8>)
 800057c:	f000 fe88 	bl	8001290 <PutStrOnTx>
			PutStrOnTx((_Tx *)&TXUSB,CIPSTART);    // Depuracion por USB
 8000580:	490f      	ldr	r1, [pc, #60]	; (80005c0 <InitEsp+0xbc>)
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <InitEsp+0xac>)
 8000584:	f000 fe84 	bl	8001290 <PutStrOnTx>

		break;
 8000588:	bf00      	nop
	}
	DecodeTimeOut = 4;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <InitEsp+0xc0>)
 800058c:	2204      	movs	r2, #4
 800058e:	801a      	strh	r2, [r3, #0]
	ESPReadyToRecyb = 1;
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <InitEsp+0xc4>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0320 	orr.w	r3, r3, #32
 8000598:	7013      	strb	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000744 	.word	0x20000744
 80005a8:	0800bc20 	.word	0x0800bc20
 80005ac:	20000c20 	.word	0x20000c20
 80005b0:	200006b8 	.word	0x200006b8
 80005b4:	0800bc9c 	.word	0x0800bc9c
 80005b8:	0800bc28 	.word	0x0800bc28
 80005bc:	0800bc50 	.word	0x0800bc50
 80005c0:	0800bc60 	.word	0x0800bc60
 80005c4:	2000052c 	.word	0x2000052c
 80005c8:	20000890 	.word	0x20000890

080005cc <Reset>:

void Reset(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	espConnected = 0;
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <Reset+0x3c>)
 80005d2:	7813      	ldrb	r3, [r2, #0]
 80005d4:	f36f 0300 	bfc	r3, #0, #1
 80005d8:	7013      	strb	r3, [r2, #0]
	ESPReadyToRecyb = 1;
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <Reset+0x3c>)
 80005dc:	7813      	ldrb	r3, [r2, #0]
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	7013      	strb	r3, [r2, #0]
	ResetESP = 1;
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <Reset+0x40>)
 80005e6:	7813      	ldrb	r3, [r2, #0]
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	7013      	strb	r3, [r2, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <Reset+0x44>)
 80005f0:	f006 fb8a 	bl	8006d08 <HAL_UART_AbortReceive_IT>
	HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_RESET);//Reset ESP8266
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <Reset+0x48>)
 80005fa:	f003 f89e 	bl	800373a <HAL_GPIO_WritePin>
	DecodeTimeOut = 20;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <Reset+0x4c>)
 8000600:	2214      	movs	r2, #20
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000890 	.word	0x20000890
 800060c:	20000710 	.word	0x20000710
 8000610:	2000084c 	.word	0x2000084c
 8000614:	40010c00 	.word	0x40010c00
 8000618:	2000052c 	.word	0x2000052c

0800061c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
/***************** Contadores para control del flujo de tiempo ********************/
/*
 * Instancia cada 1ms
 *
 */
	if(htim->Instance == TIM4){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d125      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
		Count100ms--;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800063a:	801a      	strh	r2, [r3, #0]

		if(!Count100ms){
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x36>
			Count100ms = 100;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000648:	2264      	movs	r2, #100	; 0x64
 800064a:	801a      	strh	r2, [r3, #0]
			On100ms = 1;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 800064e:	2201      	movs	r2, #1
 8000650:	801a      	strh	r2, [r3, #0]
		}

		if(RXUSB.header) {
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000654:	79db      	ldrb	r3, [r3, #7]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00e      	beq.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
			RXUSB.timeout--;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800065e:	7bdb      	ldrb	r3, [r3, #15]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000668:	73da      	strb	r2, [r3, #15]
			if(!RXUSB.timeout)
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800066c:	7bdb      	ldrb	r3, [r3, #15]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x5e>
				RXUSB.header = 0;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	71da      	strb	r2, [r3, #7]
/************************* Incio lectura analogica por DMA *************************/
/*
 * Instancia cada 500us
 *
 */
	if(htim->Instance == TIM3){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10a      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800068e:	4413      	add	r3, r2
 8000690:	2208      	movs	r2, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000696:	f002 f81f 	bl	80026d8 <HAL_ADC_Start_DMA>
	}
/***********************************************************************************/

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40000800 	.word	0x40000800
 80006a8:	20000af0 	.word	0x20000af0
 80006ac:	20000586 	.word	0x20000586
 80006b0:	20000c0c 	.word	0x20000c0c
 80006b4:	40000400 	.word	0x40000400
 80006b8:	20000711 	.word	0x20000711
 80006bc:	200008e0 	.word	0x200008e0
 80006c0:	20000714 	.word	0x20000714

080006c4 <DecodeESP>:

void DecodeESP(_Rx *RXUSART1){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

//	if(RXUSART1->Buff[RXUSART1->ir] > 128){
//		Reset();
//	}

	if(espConnected){
 80006cc:	4b9f      	ldr	r3, [pc, #636]	; (800094c <DecodeESP+0x288>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d06d      	beq.n	80007b6 <DecodeESP+0xf2>
		//Decodifica \r\n+IPD,
		if(RXUSART1->Buff[RXUSART1->ir] == IPD[IndiceIPD]){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7952      	ldrb	r2, [r2, #5]
 80006e2:	4413      	add	r3, r2
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	4b9a      	ldr	r3, [pc, #616]	; (8000950 <DecodeESP+0x28c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4b99      	ldr	r3, [pc, #612]	; (8000954 <DecodeESP+0x290>)
 80006ee:	5c5b      	ldrb	r3, [r3, r1]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d10f      	bne.n	8000714 <DecodeESP+0x50>
			IndiceIPD++;
 80006f4:	4b96      	ldr	r3, [pc, #600]	; (8000950 <DecodeESP+0x28c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b94      	ldr	r3, [pc, #592]	; (8000950 <DecodeESP+0x28c>)
 80006fe:	701a      	strb	r2, [r3, #0]
			if(IndiceIPD == 7){
 8000700:	4b93      	ldr	r3, [pc, #588]	; (8000950 <DecodeESP+0x28c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d113      	bne.n	8000730 <DecodeESP+0x6c>
				DecodeIPD = 1;
 8000708:	4a90      	ldr	r2, [pc, #576]	; (800094c <DecodeESP+0x288>)
 800070a:	7813      	ldrb	r3, [r2, #0]
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	7013      	strb	r3, [r2, #0]
 8000712:	e00d      	b.n	8000730 <DecodeESP+0x6c>
			}
		}
		else{
			if((IndiceDisconnect > 0) && (!DecodeIPD)){
 8000714:	4b90      	ldr	r3, [pc, #576]	; (8000958 <DecodeESP+0x294>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <DecodeESP+0x6c>
 800071c:	4b8b      	ldr	r3, [pc, #556]	; (800094c <DecodeESP+0x288>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <DecodeESP+0x6c>
				IndiceDisconnect = 0;
 800072a:	4b8b      	ldr	r3, [pc, #556]	; (8000958 <DecodeESP+0x294>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(DecodeIPD){
 8000730:	4b86      	ldr	r3, [pc, #536]	; (800094c <DecodeESP+0x288>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d011      	beq.n	8000762 <DecodeESP+0x9e>
			if(RXUSART1->Buff[RXUSART1->ir]==':'){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7952      	ldrb	r2, [r2, #5]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b3a      	cmp	r3, #58	; 0x3a
 800074c:	d109      	bne.n	8000762 <DecodeESP+0x9e>
				DecodeHeaderESP = 1;
 800074e:	4a7f      	ldr	r2, [pc, #508]	; (800094c <DecodeESP+0x288>)
 8000750:	7813      	ldrb	r3, [r2, #0]
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	7013      	strb	r3, [r2, #0]
				DecodeIPD = 0;
 8000758:	4a7c      	ldr	r2, [pc, #496]	; (800094c <DecodeESP+0x288>)
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	f36f 1386 	bfc	r3, #6, #1
 8000760:	7013      	strb	r3, [r2, #0]
			}
		}

		//Decodifica WIFI DISCONNECT\r\n
		if(RXUSART1->Buff[RXUSART1->ir] == WIFI_DISCONNECT[IndiceDisconnect]){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7952      	ldrb	r2, [r2, #5]
 800076a:	4413      	add	r3, r2
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b7a      	ldr	r3, [pc, #488]	; (8000958 <DecodeESP+0x294>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	4b79      	ldr	r3, [pc, #484]	; (800095c <DecodeESP+0x298>)
 8000776:	5c5b      	ldrb	r3, [r3, r1]
 8000778:	429a      	cmp	r2, r3
 800077a:	d10f      	bne.n	800079c <DecodeESP+0xd8>
			IndiceDisconnect++;
 800077c:	4b76      	ldr	r3, [pc, #472]	; (8000958 <DecodeESP+0x294>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b74      	ldr	r3, [pc, #464]	; (8000958 <DecodeESP+0x294>)
 8000786:	701a      	strb	r2, [r3, #0]
			if(IndiceDisconnect == 17){
 8000788:	4b73      	ldr	r3, [pc, #460]	; (8000958 <DecodeESP+0x294>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b11      	cmp	r3, #17
 800078e:	d10c      	bne.n	80007aa <DecodeESP+0xe6>
				IndiceDisconnect=0;
 8000790:	4b71      	ldr	r3, [pc, #452]	; (8000958 <DecodeESP+0x294>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
				Reset();
 8000796:	f7ff ff19 	bl	80005cc <Reset>
 800079a:	e006      	b.n	80007aa <DecodeESP+0xe6>
			}
		}
		else{
			if(IndiceDisconnect > 0){
 800079c:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <DecodeESP+0x294>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <DecodeESP+0xe6>
				IndiceDisconnect = 0;
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <DecodeESP+0x294>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
			}
		}
		RXUSART1->ir++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	795b      	ldrb	r3, [r3, #5]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	715a      	strb	r2, [r3, #5]
	}

	//Decodifica inicializacion de ESP8266
	if((!espConnected) && (!DecodeTimeOut)){
 80007b6:	4b65      	ldr	r3, [pc, #404]	; (800094c <DecodeESP+0x288>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f040 815c 	bne.w	8000a7e <DecodeESP+0x3ba>
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <DecodeESP+0x29c>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f040 8156 	bne.w	8000a7e <DecodeESP+0x3ba>
		switch(Estado){
 80007d2:	4b64      	ldr	r3, [pc, #400]	; (8000964 <DecodeESP+0x2a0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	f200 815c 	bhi.w	8000a94 <DecodeESP+0x3d0>
 80007dc:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <DecodeESP+0x120>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	08000867 	.word	0x08000867
 80007ec:	080008d9 	.word	0x080008d9
 80007f0:	08000979 	.word	0x08000979
 80007f4:	080009f3 	.word	0x080009f3
			case 0:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_AT[Indice]){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7952      	ldrb	r2, [r2, #5]
 8000800:	4413      	add	r3, r2
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	4b58      	ldr	r3, [pc, #352]	; (8000968 <DecodeESP+0x2a4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	4b58      	ldr	r3, [pc, #352]	; (800096c <DecodeESP+0x2a8>)
 800080c:	5c5b      	ldrb	r3, [r3, r1]
 800080e:	429a      	cmp	r2, r3
 8000810:	d11c      	bne.n	800084c <DecodeESP+0x188>
					Indice ++;
 8000812:	4b55      	ldr	r3, [pc, #340]	; (8000968 <DecodeESP+0x2a4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <DecodeESP+0x2a4>)
 800081c:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	795b      	ldrb	r3, [r3, #5]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	715a      	strb	r2, [r3, #5]
					if(Indice == 10){
 800082a:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <DecodeESP+0x2a4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b0a      	cmp	r3, #10
 8000830:	f040 8127 	bne.w	8000a82 <DecodeESP+0x3be>
						Indice = 0;
 8000834:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <DecodeESP+0x2a4>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
						Estado = 1;
 800083a:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <DecodeESP+0x2a0>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <DecodeESP+0x288>)
 8000842:	7813      	ldrb	r3, [r2, #0]
 8000844:	f36f 1345 	bfc	r3, #5, #1
 8000848:	7013      	strb	r3, [r2, #0]
				else{
					RXUSART1->ir = RXUSART1->iw;
					Indice = 0;
					ESPReadyToRecyb = 0;
				}
			break;
 800084a:	e11a      	b.n	8000a82 <DecodeESP+0x3be>
					RXUSART1->ir = RXUSART1->iw;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791a      	ldrb	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	715a      	strb	r2, [r3, #5]
					Indice = 0;
 8000854:	4b44      	ldr	r3, [pc, #272]	; (8000968 <DecodeESP+0x2a4>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
					ESPReadyToRecyb = 0;
 800085a:	4a3c      	ldr	r2, [pc, #240]	; (800094c <DecodeESP+0x288>)
 800085c:	7813      	ldrb	r3, [r2, #0]
 800085e:	f36f 1345 	bfc	r3, #5, #1
 8000862:	7013      	strb	r3, [r2, #0]
			break;
 8000864:	e10d      	b.n	8000a82 <DecodeESP+0x3be>

			case 1:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWMODE[Indice]){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	7952      	ldrb	r2, [r2, #5]
 800086e:	4413      	add	r3, r2
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <DecodeESP+0x2a4>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <DecodeESP+0x2ac>)
 800087a:	5c5b      	ldrb	r3, [r3, r1]
 800087c:	429a      	cmp	r2, r3
 800087e:	d11c      	bne.n	80008ba <DecodeESP+0x1f6>
					Indice++;
 8000880:	4b39      	ldr	r3, [pc, #228]	; (8000968 <DecodeESP+0x2a4>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <DecodeESP+0x2a4>)
 800088a:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	3301      	adds	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	715a      	strb	r2, [r3, #5]
					if(Indice==19){
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <DecodeESP+0x2a4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b13      	cmp	r3, #19
 800089e:	f040 80f2 	bne.w	8000a86 <DecodeESP+0x3c2>
						Indice=0;
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <DecodeESP+0x2a4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
						Estado = 2;
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <DecodeESP+0x2a0>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 80008ae:	4a27      	ldr	r2, [pc, #156]	; (800094c <DecodeESP+0x288>)
 80008b0:	7813      	ldrb	r3, [r2, #0]
 80008b2:	f36f 1345 	bfc	r3, #5, #1
 80008b6:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 80008b8:	e0e5      	b.n	8000a86 <DecodeESP+0x3c2>
					if(Indice>0){
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <DecodeESP+0x2a4>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <DecodeESP+0x20c>
						RXUSART1->ir = RXUSART1->iw;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791a      	ldrb	r2, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	715a      	strb	r2, [r3, #5]
						Indice=0;
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <DecodeESP+0x2a4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <DecodeESP+0x2a0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
			break;
 80008d6:	e0d6      	b.n	8000a86 <DecodeESP+0x3c2>

			case 2:
				if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWJAP_[Indice]){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7952      	ldrb	r2, [r2, #5]
 80008e0:	4413      	add	r3, r2
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <DecodeESP+0x2a4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <DecodeESP+0x2b0>)
 80008ec:	5c5b      	ldrb	r3, [r3, r1]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d11c      	bne.n	800092c <DecodeESP+0x268>
					Indice++;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <DecodeESP+0x2a4>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <DecodeESP+0x2a4>)
 80008fc:	701a      	strb	r2, [r3, #0]
					RXUSART1->ir++;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	3301      	adds	r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	715a      	strb	r2, [r3, #5]
					if(Indice==LONG_ANS_CWJAP_){
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <DecodeESP+0x2a4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b58      	cmp	r3, #88	; 0x58
 8000910:	f040 80bb 	bne.w	8000a8a <DecodeESP+0x3c6>
						Indice = 0;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <DecodeESP+0x2a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
						Estado = 3;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <DecodeESP+0x2a0>)
 800091c:	2203      	movs	r2, #3
 800091e:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <DecodeESP+0x288>)
 8000922:	7813      	ldrb	r3, [r2, #0]
 8000924:	f36f 1345 	bfc	r3, #5, #1
 8000928:	7013      	strb	r3, [r2, #0]
						RXUSART1->ir = RXUSART1->iw;
						Indice=0;
					}
					Estado = 0;
				}
			break;
 800092a:	e0ae      	b.n	8000a8a <DecodeESP+0x3c6>
					if(Indice>0){
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <DecodeESP+0x2a4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <DecodeESP+0x27e>
						RXUSART1->ir = RXUSART1->iw;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791a      	ldrb	r2, [r3, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	715a      	strb	r2, [r3, #5]
						Indice=0;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <DecodeESP+0x2a4>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
					Estado = 0;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <DecodeESP+0x2a0>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
			break;
 8000948:	e09f      	b.n	8000a8a <DecodeESP+0x3c6>
 800094a:	bf00      	nop
 800094c:	20000890 	.word	0x20000890
 8000950:	20000ae0 	.word	0x20000ae0
 8000954:	0800bd90 	.word	0x0800bd90
 8000958:	20000c02 	.word	0x20000c02
 800095c:	0800bd7c 	.word	0x0800bd7c
 8000960:	2000052c 	.word	0x2000052c
 8000964:	20000744 	.word	0x20000744
 8000968:	20000891 	.word	0x20000891
 800096c:	0800bd70 	.word	0x0800bd70
 8000970:	0800bcac 	.word	0x0800bcac
 8000974:	0800bcc0 	.word	0x0800bcc0

			case 3:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPMUX[Indice]){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	7952      	ldrb	r2, [r2, #5]
 8000980:	4413      	add	r3, r2
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <DecodeESP+0x3d8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <DecodeESP+0x3dc>)
 800098c:	5c5b      	ldrb	r3, [r3, r1]
 800098e:	429a      	cmp	r2, r3
 8000990:	d11b      	bne.n	80009ca <DecodeESP+0x306>
						Indice++;
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <DecodeESP+0x3d8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <DecodeESP+0x3d8>)
 800099c:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	715a      	strb	r2, [r3, #5]
						if(Indice == 19){
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <DecodeESP+0x3d8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b13      	cmp	r3, #19
 80009b0:	d16d      	bne.n	8000a8e <DecodeESP+0x3ca>
							Indice = 0;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <DecodeESP+0x3d8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
							Estado = 4;
 80009b8:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <DecodeESP+0x3e0>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	701a      	strb	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 80009be:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <DecodeESP+0x3e4>)
 80009c0:	7813      	ldrb	r3, [r2, #0]
 80009c2:	f36f 1345 	bfc	r3, #5, #1
 80009c6:	7013      	strb	r3, [r2, #0]
							Indice = 0;
						}
						Estado = 0;
						ESPReadyToRecyb = 0;
					}
			break;
 80009c8:	e061      	b.n	8000a8e <DecodeESP+0x3ca>
						if(Indice>0){
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <DecodeESP+0x3d8>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d006      	beq.n	80009e0 <DecodeESP+0x31c>
							RXUSART1->ir = RXUSART1->iw;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	791a      	ldrb	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <DecodeESP+0x3d8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
						Estado = 0;
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <DecodeESP+0x3e0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
						ESPReadyToRecyb = 0;
 80009e6:	4a30      	ldr	r2, [pc, #192]	; (8000aa8 <DecodeESP+0x3e4>)
 80009e8:	7813      	ldrb	r3, [r2, #0]
 80009ea:	f36f 1345 	bfc	r3, #5, #1
 80009ee:	7013      	strb	r3, [r2, #0]
			break;
 80009f0:	e04d      	b.n	8000a8e <DecodeESP+0x3ca>

			case 4:
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPSTART[Indice]){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	7952      	ldrb	r2, [r2, #5]
 80009fa:	4413      	add	r3, r2
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <DecodeESP+0x3d8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <DecodeESP+0x3e8>)
 8000a06:	5c5b      	ldrb	r3, [r3, r1]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d11e      	bne.n	8000a4a <DecodeESP+0x386>
						Indice++;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <DecodeESP+0x3d8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <DecodeESP+0x3d8>)
 8000a16:	701a      	strb	r2, [r3, #0]
						RXUSART1->ir++;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	795b      	ldrb	r3, [r3, #5]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	715a      	strb	r2, [r3, #5]
						if(Indice == 62){
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <DecodeESP+0x3d8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b3e      	cmp	r3, #62	; 0x3e
 8000a2a:	d132      	bne.n	8000a92 <DecodeESP+0x3ce>
							Indice = 0;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <DecodeESP+0x3d8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <DecodeESP+0x3e4>)
 8000a34:	7813      	ldrb	r3, [r2, #0]
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <DecodeESP+0x3e0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
							Count3000ms = 7;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <DecodeESP+0x3ec>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	801a      	strh	r2, [r3, #0]
							Estado = 0;
							Count3000ms = 7;
						}
						Estado = 0;
					}
			break;
 8000a48:	e023      	b.n	8000a92 <DecodeESP+0x3ce>
						if(Indice>0){
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <DecodeESP+0x3d8>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d011      	beq.n	8000a76 <DecodeESP+0x3b2>
							RXUSART1->ir = RXUSART1->iw;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	791a      	ldrb	r2, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	715a      	strb	r2, [r3, #5]
							Indice = 0;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <DecodeESP+0x3d8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
							espConnected = 1;
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <DecodeESP+0x3e4>)
 8000a62:	7813      	ldrb	r3, [r2, #0]
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	7013      	strb	r3, [r2, #0]
							Estado = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <DecodeESP+0x3e0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
							Count3000ms = 7;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <DecodeESP+0x3ec>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	801a      	strh	r2, [r3, #0]
						Estado = 0;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <DecodeESP+0x3e0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
			break;
 8000a7c:	e009      	b.n	8000a92 <DecodeESP+0x3ce>
		}
	}
 8000a7e:	bf00      	nop
 8000a80:	e008      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a82:	bf00      	nop
 8000a84:	e006      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a86:	bf00      	nop
 8000a88:	e004      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a8a:	bf00      	nop
 8000a8c:	e002      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <DecodeESP+0x3d0>
			break;
 8000a92:	bf00      	nop
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000891 	.word	0x20000891
 8000aa0:	0800bd1c 	.word	0x0800bd1c
 8000aa4:	20000744 	.word	0x20000744
 8000aa8:	20000890 	.word	0x20000890
 8000aac:	0800bd30 	.word	0x0800bd30
 8000ab0:	200004c6 	.word	0x200004c6

08000ab4 <HAL_UART_RxCpltCallback>:
//		}
//	}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_UART_RxCpltCallback+0x60>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d121      	bne.n	8000b0a <HAL_UART_RxCpltCallback+0x56>
		TXUSB.Buff[TXUSB.iw++] = rxUSART1Buff[RXUSART1.iw];
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_UART_RxCpltCallback+0x68>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_RxCpltCallback+0x68>)
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	1c59      	adds	r1, r3, #1
 8000ad8:	b2cc      	uxtb	r4, r1
 8000ada:	4910      	ldr	r1, [pc, #64]	; (8000b1c <HAL_UART_RxCpltCallback+0x68>)
 8000adc:	710c      	strb	r4, [r1, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_UART_RxCpltCallback+0x6c>)
 8000ae2:	5c12      	ldrb	r2, [r2, r0]
 8000ae4:	701a      	strb	r2, [r3, #0]
		RXUSART1.iw++;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000af2:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_UART_RxCpltCallback+0x64>)
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_UART_RxCpltCallback+0x6c>)
 8000afe:	4413      	add	r3, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <HAL_UART_RxCpltCallback+0x70>)
 8000b06:	f006 f8ce 	bl	8006ca6 <HAL_UART_Receive_IT>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40013800 	.word	0x40013800
 8000b18:	20000518 	.word	0x20000518
 8000b1c:	200006b8 	.word	0x200006b8
 8000b20:	2000019c 	.word	0x2000019c
 8000b24:	2000084c 	.word	0x2000084c

08000b28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	// Incrento indice del buffer
	iAdc++;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b3c:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d102      	bne.n	8000b4e <HAL_ADC_ConvCpltCallback+0x26>
		iAdc = 0;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	}
	ADC();
 8000b4e:	f000 f807 	bl	8000b60 <ADC>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000711 	.word	0x20000711

08000b60 <ADC>:
void ADC(){
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	volatile uint8_t c;
/********************* Media movil de las 3 primeras lecturas **********************/
	if(FirtScan){
 8000b66:	4baf      	ldr	r3, [pc, #700]	; (8000e24 <ADC+0x2c4>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d07a      	beq.n	8000c64 <ADC+0x104>
		switch(iAdc){
 8000b6e:	4bae      	ldr	r3, [pc, #696]	; (8000e28 <ADC+0x2c8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <ADC+0x1e>
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d033      	beq.n	8000be4 <ADC+0x84>
				}
				FirtScan = 0;
			break;

			default:
			break;
 8000b7c:	e14d      	b.n	8000e1a <ADC+0x2ba>
				for(c=0;c<8;c++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e02a      	b.n	8000bda <ADC+0x7a>
					bufADC[1][c]=round((bufADC[0][c]+bufADC[1][c]) / 2 );
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4ba8      	ldr	r3, [pc, #672]	; (8000e2c <ADC+0x2cc>)
 8000b8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4aa4      	ldr	r2, [pc, #656]	; (8000e2c <ADC+0x2cc>)
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	440b      	add	r3, r1
 8000ba4:	0fda      	lsrs	r2, r3, #31
 8000ba6:	4413      	add	r3, r2
 8000ba8:	105b      	asrs	r3, r3, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fc20 	bl	80003f0 <__aeabi_i2d>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	79f9      	ldrb	r1, [r7, #7]
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	460c      	mov	r4, r1
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f7ff fc81 	bl	80004c4 <__aeabi_d2uiz>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	4a99      	ldr	r2, [pc, #612]	; (8000e2c <ADC+0x2cc>)
 8000bc8:	f104 0308 	add.w	r3, r4, #8
 8000bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d9d0      	bls.n	8000b84 <ADC+0x24>
			break;
 8000be2:	e11a      	b.n	8000e1a <ADC+0x2ba>
				for(c=0;c<8;c++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	e034      	b.n	8000c54 <ADC+0xf4>
					bufADC[2][c]=round((bufADC[0][c]+bufADC[1][c]+bufADC[2][c]) / 3);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b8e      	ldr	r3, [pc, #568]	; (8000e2c <ADC+0x2cc>)
 8000bf2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4a8b      	ldr	r2, [pc, #556]	; (8000e2c <ADC+0x2cc>)
 8000c00:	3308      	adds	r3, #8
 8000c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	440b      	add	r3, r1
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	4987      	ldr	r1, [pc, #540]	; (8000e2c <ADC+0x2cc>)
 8000c10:	3210      	adds	r2, #16
 8000c12:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c16:	b292      	uxth	r2, r2
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a85      	ldr	r2, [pc, #532]	; (8000e30 <ADC+0x2d0>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	17db      	asrs	r3, r3, #31
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbe3 	bl	80003f0 <__aeabi_i2d>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	79f9      	ldrb	r1, [r7, #7]
 8000c30:	b2c9      	uxtb	r1, r1
 8000c32:	460c      	mov	r4, r1
 8000c34:	4610      	mov	r0, r2
 8000c36:	4619      	mov	r1, r3
 8000c38:	f7ff fc44 	bl	80004c4 <__aeabi_d2uiz>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	4a7a      	ldr	r2, [pc, #488]	; (8000e2c <ADC+0x2cc>)
 8000c42:	f104 0310 	add.w	r3, r4, #16
 8000c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	d9c6      	bls.n	8000bea <ADC+0x8a>
				FirtScan = 0;
 8000c5c:	4b71      	ldr	r3, [pc, #452]	; (8000e24 <ADC+0x2c4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
			break;
 8000c62:	e0da      	b.n	8000e1a <ADC+0x2ba>
	}

/***********************************************************************************/
/********************* Media movil de las siguientes lecturas **********************/
	else{
		if(iAdc >= 0 && iAdc <= 1){
 8000c64:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <ADC+0x2c8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <ADC+0x2c8>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	f200 8081 	bhi.w	8000d76 <ADC+0x216>
			// Cruce por 0 y 1 donde se toman dos valores anteriores para hacer la media
			switch(iAdc){
 8000c74:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <ADC+0x2c8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <ADC+0x124>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d03b      	beq.n	8000cfa <ADC+0x19a>
 8000c82:	e0ca      	b.n	8000e1a <ADC+0x2ba>
				case 0:
					for(c = 0; c<8; c++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	e032      	b.n	8000cf0 <ADC+0x190>
						bufADC[0][c]=round(( bufADC[0][c]+bufADC[31][c]+bufADC[30][c]) / 3) ;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <ADC+0x2cc>)
 8000c92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4a63      	ldr	r2, [pc, #396]	; (8000e2c <ADC+0x2cc>)
 8000ca0:	33f8      	adds	r3, #248	; 0xf8
 8000ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	440b      	add	r3, r1
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	495f      	ldr	r1, [pc, #380]	; (8000e2c <ADC+0x2cc>)
 8000cb0:	32f0      	adds	r2, #240	; 0xf0
 8000cb2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a5d      	ldr	r2, [pc, #372]	; (8000e30 <ADC+0x2d0>)
 8000cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fb93 	bl	80003f0 <__aeabi_i2d>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	79f9      	ldrb	r1, [r7, #7]
 8000cd0:	b2c9      	uxtb	r1, r1
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fbf4 	bl	80004c4 <__aeabi_d2uiz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <ADC+0x2cc>)
 8000ce2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					for(c = 0; c<8; c++){
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d9c8      	bls.n	8000c8a <ADC+0x12a>
					}
				break;
 8000cf8:	e03c      	b.n	8000d74 <ADC+0x214>
				case 1:
					for(c = 0; c<8; c++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e034      	b.n	8000d6a <ADC+0x20a>
						bufADC[1][c]=round((bufADC[0][c]+bufADC[1][c]+bufADC[31][c]) / 3);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <ADC+0x2cc>)
 8000d08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4619      	mov	r1, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4a45      	ldr	r2, [pc, #276]	; (8000e2c <ADC+0x2cc>)
 8000d16:	3308      	adds	r3, #8
 8000d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	440b      	add	r3, r1
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	4941      	ldr	r1, [pc, #260]	; (8000e2c <ADC+0x2cc>)
 8000d26:	32f8      	adds	r2, #248	; 0xf8
 8000d28:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d2c:	b292      	uxth	r2, r2
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <ADC+0x2d0>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	17db      	asrs	r3, r3, #31
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb58 	bl	80003f0 <__aeabi_i2d>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	79f9      	ldrb	r1, [r7, #7]
 8000d46:	b2c9      	uxtb	r1, r1
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff fbb9 	bl	80004c4 <__aeabi_d2uiz>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <ADC+0x2cc>)
 8000d58:	f104 0308 	add.w	r3, r4, #8
 8000d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(c = 0; c<8; c++){
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	d9c6      	bls.n	8000d00 <ADC+0x1a0>
					}
				break;
 8000d72:	bf00      	nop
			switch(iAdc){
 8000d74:	e051      	b.n	8000e1a <ADC+0x2ba>
			}
		}
		else{
			// Cálculo comprendido entre bufADC[2] y bufADC[31]
			for(c = 0; c<8; c++){
 8000d76:	2300      	movs	r3, #0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	e049      	b.n	8000e10 <ADC+0x2b0>
				bufADC[iAdc][c] = round((bufADC[iAdc-2][c] + bufADC[iAdc-1][c] + bufADC[iAdc][c])/3);
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <ADC+0x2c8>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3b02      	subs	r3, #2
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <ADC+0x2cc>)
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	440b      	add	r3, r1
 8000d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <ADC+0x2c8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	4610      	mov	r0, r2
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <ADC+0x2cc>)
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	440b      	add	r3, r1
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <ADC+0x2c8>)
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	79f9      	ldrb	r1, [r7, #7]
 8000dbc:	b2c9      	uxtb	r1, r1
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	491a      	ldr	r1, [pc, #104]	; (8000e2c <ADC+0x2cc>)
 8000dc2:	00d2      	lsls	r2, r2, #3
 8000dc4:	4402      	add	r2, r0
 8000dc6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <ADC+0x2d0>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	17db      	asrs	r3, r3, #31
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb09 	bl	80003f0 <__aeabi_i2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4911      	ldr	r1, [pc, #68]	; (8000e28 <ADC+0x2c8>)
 8000de4:	7809      	ldrb	r1, [r1, #0]
 8000de6:	b2c9      	uxtb	r1, r1
 8000de8:	460d      	mov	r5, r1
 8000dea:	79f9      	ldrb	r1, [r7, #7]
 8000dec:	b2c9      	uxtb	r1, r1
 8000dee:	460c      	mov	r4, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fb66 	bl	80004c4 <__aeabi_d2uiz>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <ADC+0x2cc>)
 8000dfe:	00eb      	lsls	r3, r5, #3
 8000e00:	4423      	add	r3, r4
 8000e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(c = 0; c<8; c++){
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d9b1      	bls.n	8000d7c <ADC+0x21c>
			}
		}
	}
/***********************************************************************************/
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000198 	.word	0x20000198
 8000e28:	20000711 	.word	0x20000711
 8000e2c:	200008e0 	.word	0x200008e0
 8000e30:	55555556 	.word	0x55555556

08000e34 <MyCallBackOnUSBData>:
void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	e010      	b.n	8000e66 <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	441a      	add	r2, r3
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MyCallBackOnUSBData+0x48>)
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	1c59      	adds	r1, r3, #1
 8000e52:	b2c8      	uxtb	r0, r1
 8000e54:	4909      	ldr	r1, [pc, #36]	; (8000e7c <MyCallBackOnUSBData+0x48>)
 8000e56:	7108      	strb	r0, [r1, #4]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MyCallBackOnUSBData+0x4c>)
 8000e5e:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3ea      	bcc.n	8000e44 <MyCallBackOnUSBData+0x10>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000c0c 	.word	0x20000c0c
 8000e80:	200005b0 	.word	0x200005b0

08000e84 <DecodeHeader>:

    return aux;
}

void DecodeHeader(_Rx *RX)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 8000e92:	e0e3      	b.n	800105c <DecodeHeader+0x1d8>
        switch(RX->header) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	79db      	ldrb	r3, [r3, #7]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	f200 80c2 	bhi.w	8001022 <DecodeHeader+0x19e>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <DecodeHeader+0x20>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000ec1 	.word	0x08000ec1
 8000ea8:	08000ee1 	.word	0x08000ee1
 8000eac:	08000f0d 	.word	0x08000f0d
 8000eb0:	08000f39 	.word	0x08000f39
 8000eb4:	08000f65 	.word	0x08000f65
 8000eb8:	08000f7d 	.word	0x08000f7d
 8000ebc:	08000fd3 	.word	0x08000fd3
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	7952      	ldrb	r2, [r2, #5]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b55      	cmp	r3, #85	; 0x55
 8000ece:	f040 80ac 	bne.w	800102a <DecodeHeader+0x1a6>
                    RX->header = 1;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2205      	movs	r2, #5
 8000edc:	73da      	strb	r2, [r3, #15]
                }
                break;
 8000ede:	e0a4      	b.n	800102a <DecodeHeader+0x1a6>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	7952      	ldrb	r2, [r2, #5]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b4e      	cmp	r3, #78	; 0x4e
 8000eee:	d103      	bne.n	8000ef8 <DecodeHeader+0x74>
                    RX->header = 2;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000ef6:	e09b      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	795b      	ldrb	r3, [r3, #5]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	715a      	strb	r2, [r3, #5]
                break;
 8000f0a:	e091      	b.n	8001030 <DecodeHeader+0x1ac>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	7952      	ldrb	r2, [r2, #5]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b45      	cmp	r3, #69	; 0x45
 8000f1a:	d103      	bne.n	8000f24 <DecodeHeader+0xa0>
                    RX->header = 3;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000f22:	e085      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	715a      	strb	r2, [r3, #5]
                break;
 8000f36:	e07b      	b.n	8001030 <DecodeHeader+0x1ac>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	7952      	ldrb	r2, [r2, #5]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b52      	cmp	r3, #82	; 0x52
 8000f46:	d103      	bne.n	8000f50 <DecodeHeader+0xcc>
                    RX->header = 4;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000f4e:	e06f      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	715a      	strb	r2, [r3, #5]
                break;
 8000f62:	e065      	b.n	8001030 <DecodeHeader+0x1ac>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	7952      	ldrb	r2, [r2, #5]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2205      	movs	r2, #5
 8000f78:	71da      	strb	r2, [r3, #7]
                break;
 8000f7a:	e059      	b.n	8001030 <DecodeHeader+0x1ac>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7952      	ldrb	r2, [r2, #5]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b3a      	cmp	r3, #58	; 0x3a
 8000f8a:	d118      	bne.n	8000fbe <DecodeHeader+0x13a>
                    RX->header = 6;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2206      	movs	r2, #6
 8000f90:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	735a      	strb	r2, [r3, #13]
                    RX->iData &= RX->maskSize;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7b5a      	ldrb	r2, [r3, #13]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7b9b      	ldrb	r3, [r3, #14]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	735a      	strb	r2, [r3, #13]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7adb      	ldrb	r3, [r3, #11]
 8000fb2:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000fbc:	e038      	b.n	8001030 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	795b      	ldrb	r3, [r3, #5]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	715a      	strb	r2, [r3, #5]
                break;
 8000fd0:	e02e      	b.n	8001030 <DecodeHeader+0x1ac>
            case 6:
                RX->nbytes--;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7adb      	ldrb	r3, [r3, #11]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7adb      	ldrb	r3, [r3, #11]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00c      	beq.n	8001000 <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a5a      	ldrb	r2, [r3, #9]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	7949      	ldrb	r1, [r1, #5]
 8000ff2:	440b      	add	r3, r1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4053      	eors	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	725a      	strb	r2, [r3, #9]
                    RX->header = 0 ;
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                    }
                }
                break;
 8000ffe:	e016      	b.n	800102e <DecodeHeader+0x1aa>
                    RX->header = 0 ;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7a5a      	ldrb	r2, [r3, #9]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	7949      	ldrb	r1, [r1, #5]
 8001012:	440b      	add	r3, r1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d109      	bne.n	800102e <DecodeHeader+0x1aa>
                        RX->ISCMD = 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	719a      	strb	r2, [r3, #6]
                break;
 8001020:	e005      	b.n	800102e <DecodeHeader+0x1aa>

            default:
                RX->header = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	71da      	strb	r2, [r3, #7]
                break;
 8001028:	e002      	b.n	8001030 <DecodeHeader+0x1ac>
                break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <DecodeHeader+0x1ac>
                break;
 800102e:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	795a      	ldrb	r2, [r3, #5]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b9b      	ldrb	r3, [r3, #14]
 8001038:	4013      	ands	r3, r2
 800103a:	b2da      	uxtb	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	795b      	ldrb	r3, [r3, #5]
 8001044:	3301      	adds	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;                                                // Enmascaro el indice de lectura - Cuando llega a 63 se pone en 0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	795a      	ldrb	r2, [r3, #5]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7b9b      	ldrb	r3, [r3, #14]
 8001054:	4013      	ands	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	795b      	ldrb	r3, [r3, #5]
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	429a      	cmp	r2, r3
 8001064:	f47f af16 	bne.w	8000e94 <DecodeHeader+0x10>
    }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <DecodeCmd>:

void DecodeCmd(_Rx *RX, _Tx *TX){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    RX->ISCMD = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	719a      	strb	r2, [r3, #6]
//			if(espConnected)PutCIPSENDOnTx(8);
//        	PutHeaderOnTx(TX, 0xFF, 1);
//            PutcksOnTx(TX);
//            break;
    }
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <SendUDPData>:

void SendUDPData(uint8_t cmd){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	switch(cmd){
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2ba0      	cmp	r3, #160	; 0xa0
 800109e:	d06b      	beq.n	8001178 <SendUDPData+0xe8>
 80010a0:	2bf0      	cmp	r3, #240	; 0xf0
 80010a2:	f040 80da 	bne.w	800125a <SendUDPData+0x1ca>
		/*Alive ESP*/
		case 0xF0:

			if((ECOCIPSEND0xF0) && (!Count3000ms)){
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <SendUDPData+0x1d4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d018      	beq.n	80010e6 <SendUDPData+0x56>
 80010b4:	4b6c      	ldr	r3, [pc, #432]	; (8001268 <SendUDPData+0x1d8>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d113      	bne.n	80010e6 <SendUDPData+0x56>
				PutHeaderOnTx((_Tx *)&TXUSART1, 0xF0, 2);
 80010be:	2202      	movs	r2, #2
 80010c0:	21f0      	movs	r1, #240	; 0xf0
 80010c2:	486a      	ldr	r0, [pc, #424]	; (800126c <SendUDPData+0x1dc>)
 80010c4:	f000 f95c 	bl	8001380 <PutHeaderOnTx>
				PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 80010c8:	210d      	movs	r1, #13
 80010ca:	4868      	ldr	r0, [pc, #416]	; (800126c <SendUDPData+0x1dc>)
 80010cc:	f000 f90d 	bl	80012ea <PutByteOnTx>
				PutcksOnTx((_Tx *)&TXUSART1);
 80010d0:	4866      	ldr	r0, [pc, #408]	; (800126c <SendUDPData+0x1dc>)
 80010d2:	f000 f9ec 	bl	80014ae <PutcksOnTx>
				ECOCIPSEND0xF0 = 0;
 80010d6:	4a63      	ldr	r2, [pc, #396]	; (8001264 <SendUDPData+0x1d4>)
 80010d8:	7813      	ldrb	r3, [r2, #0]
 80010da:	f36f 13c7 	bfc	r3, #7, #1
 80010de:	7013      	strb	r3, [r2, #0]
				Count3000ms = 1;
 80010e0:	4b61      	ldr	r3, [pc, #388]	; (8001268 <SendUDPData+0x1d8>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	801a      	strh	r2, [r3, #0]
			}

			if((!ECOCIPSEND0xF0) && (!Count3000ms)){
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <SendUDPData+0x1d4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 80af 	bne.w	8001254 <SendUDPData+0x1c4>
 80010f6:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <SendUDPData+0x1d8>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f040 80a9 	bne.w	8001254 <SendUDPData+0x1c4>
				PutStrOnTx((_Tx *)&TXUSART1, CIPSEND);
 8001102:	495b      	ldr	r1, [pc, #364]	; (8001270 <SendUDPData+0x1e0>)
 8001104:	4859      	ldr	r0, [pc, #356]	; (800126c <SendUDPData+0x1dc>)
 8001106:	f000 f8c3 	bl	8001290 <PutStrOnTx>
				PutStrOnTx((_Tx *)&TXUSART1, "9");
 800110a:	495a      	ldr	r1, [pc, #360]	; (8001274 <SendUDPData+0x1e4>)
 800110c:	4857      	ldr	r0, [pc, #348]	; (800126c <SendUDPData+0x1dc>)
 800110e:	f000 f8bf 	bl	8001290 <PutStrOnTx>
				strcpy(CantBytes, (const char *) 9);
 8001112:	2109      	movs	r1, #9
 8001114:	4858      	ldr	r0, [pc, #352]	; (8001278 <SendUDPData+0x1e8>)
 8001116:	f00a fd3f 	bl	800bb98 <strcpy>
				TXUSART1.Buff[TXUSART1.iw++] = '\r';
 800111a:	4b54      	ldr	r3, [pc, #336]	; (800126c <SendUDPData+0x1dc>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <SendUDPData+0x1dc>)
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	1c59      	adds	r1, r3, #1
 8001124:	b2c8      	uxtb	r0, r1
 8001126:	4951      	ldr	r1, [pc, #324]	; (800126c <SendUDPData+0x1dc>)
 8001128:	7108      	strb	r0, [r1, #4]
 800112a:	4413      	add	r3, r2
 800112c:	220d      	movs	r2, #13
 800112e:	701a      	strb	r2, [r3, #0]
				TXUSART1.iw &= TXUSART1.maskSize;
 8001130:	4b4e      	ldr	r3, [pc, #312]	; (800126c <SendUDPData+0x1dc>)
 8001132:	791a      	ldrb	r2, [r3, #4]
 8001134:	4b4d      	ldr	r3, [pc, #308]	; (800126c <SendUDPData+0x1dc>)
 8001136:	7a1b      	ldrb	r3, [r3, #8]
 8001138:	4013      	ands	r3, r2
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <SendUDPData+0x1dc>)
 800113e:	711a      	strb	r2, [r3, #4]
				TXUSART1.Buff[TXUSART1.iw++] = '\n';
 8001140:	4b4a      	ldr	r3, [pc, #296]	; (800126c <SendUDPData+0x1dc>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <SendUDPData+0x1dc>)
 8001146:	791b      	ldrb	r3, [r3, #4]
 8001148:	1c59      	adds	r1, r3, #1
 800114a:	b2c8      	uxtb	r0, r1
 800114c:	4947      	ldr	r1, [pc, #284]	; (800126c <SendUDPData+0x1dc>)
 800114e:	7108      	strb	r0, [r1, #4]
 8001150:	4413      	add	r3, r2
 8001152:	220a      	movs	r2, #10
 8001154:	701a      	strb	r2, [r3, #0]
				TXUSART1.iw &= TXUSART1.maskSize;
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <SendUDPData+0x1dc>)
 8001158:	791a      	ldrb	r2, [r3, #4]
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <SendUDPData+0x1dc>)
 800115c:	7a1b      	ldrb	r3, [r3, #8]
 800115e:	4013      	ands	r3, r2
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <SendUDPData+0x1dc>)
 8001164:	711a      	strb	r2, [r3, #4]
				ECOCIPSEND0xF0 = 1;
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <SendUDPData+0x1d4>)
 8001168:	7813      	ldrb	r3, [r2, #0]
 800116a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116e:	7013      	strb	r3, [r2, #0]
				Count3000ms = 25;
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <SendUDPData+0x1d8>)
 8001172:	2219      	movs	r2, #25
 8001174:	801a      	strh	r2, [r3, #0]
			}


		break;
 8001176:	e06d      	b.n	8001254 <SendUDPData+0x1c4>
		 * Comando para enviar datos IR
		 */
		case 0xA0:                                                              //Sensores analogicos


			if((!Count500ms) && (ECOCIPSEND0xA0)){
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <SendUDPData+0x1ec>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d121      	bne.n	80011c6 <SendUDPData+0x136>
 8001182:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <SendUDPData+0x1f0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01a      	beq.n	80011c6 <SendUDPData+0x136>
				PutHeaderOnTx((_Tx *)&TXUSART1, 0xA0, 17);
 8001190:	2211      	movs	r2, #17
 8001192:	21a0      	movs	r1, #160	; 0xa0
 8001194:	4835      	ldr	r0, [pc, #212]	; (800126c <SendUDPData+0x1dc>)
 8001196:	f000 f8f3 	bl	8001380 <PutHeaderOnTx>
				PutBuffOnTx((_Tx *)&TXUSART1, (uint8_t *)&bufADC[iAdc], 16);
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <SendUDPData+0x1f4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4a39      	ldr	r2, [pc, #228]	; (8001288 <SendUDPData+0x1f8>)
 80011a4:	4413      	add	r3, r2
 80011a6:	2210      	movs	r2, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4830      	ldr	r0, [pc, #192]	; (800126c <SendUDPData+0x1dc>)
 80011ac:	f000 f8bb 	bl	8001326 <PutBuffOnTx>
				PutcksOnTx((_Tx *)&TXUSART1);
 80011b0:	482e      	ldr	r0, [pc, #184]	; (800126c <SendUDPData+0x1dc>)
 80011b2:	f000 f97c 	bl	80014ae <PutcksOnTx>
				ECOCIPSEND0xA0 = 0;
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <SendUDPData+0x1f0>)
 80011b8:	7813      	ldrb	r3, [r2, #0]
 80011ba:	f36f 0382 	bfc	r3, #2, #1
 80011be:	7013      	strb	r3, [r2, #0]
				Count500ms = 1;
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <SendUDPData+0x1ec>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	801a      	strh	r2, [r3, #0]
			}

			if((!ECOCIPSEND0xA0) && (!Count500ms)){
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <SendUDPData+0x1f0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d141      	bne.n	8001258 <SendUDPData+0x1c8>
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <SendUDPData+0x1ec>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d13c      	bne.n	8001258 <SendUDPData+0x1c8>
				PutStrOnTx((_Tx *)&TXUSART1, CIPSEND);
 80011de:	4924      	ldr	r1, [pc, #144]	; (8001270 <SendUDPData+0x1e0>)
 80011e0:	4822      	ldr	r0, [pc, #136]	; (800126c <SendUDPData+0x1dc>)
 80011e2:	f000 f855 	bl	8001290 <PutStrOnTx>
				PutStrOnTx((_Tx *)&TXUSART1, "24");
 80011e6:	4929      	ldr	r1, [pc, #164]	; (800128c <SendUDPData+0x1fc>)
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <SendUDPData+0x1dc>)
 80011ea:	f000 f851 	bl	8001290 <PutStrOnTx>
				strcpy(CantBytes, (const char *) 24);
 80011ee:	2118      	movs	r1, #24
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <SendUDPData+0x1e8>)
 80011f2:	f00a fcd1 	bl	800bb98 <strcpy>
				TXUSART1.Buff[TXUSART1.iw++] = '\r';
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <SendUDPData+0x1dc>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <SendUDPData+0x1dc>)
 80011fc:	791b      	ldrb	r3, [r3, #4]
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	b2c8      	uxtb	r0, r1
 8001202:	491a      	ldr	r1, [pc, #104]	; (800126c <SendUDPData+0x1dc>)
 8001204:	7108      	strb	r0, [r1, #4]
 8001206:	4413      	add	r3, r2
 8001208:	220d      	movs	r2, #13
 800120a:	701a      	strb	r2, [r3, #0]
				TXUSART1.iw &= TXUSART1.maskSize;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <SendUDPData+0x1dc>)
 800120e:	791a      	ldrb	r2, [r3, #4]
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <SendUDPData+0x1dc>)
 8001212:	7a1b      	ldrb	r3, [r3, #8]
 8001214:	4013      	ands	r3, r2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <SendUDPData+0x1dc>)
 800121a:	711a      	strb	r2, [r3, #4]
				TXUSART1.Buff[TXUSART1.iw++] = '\n';
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <SendUDPData+0x1dc>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <SendUDPData+0x1dc>)
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	b2c8      	uxtb	r0, r1
 8001228:	4910      	ldr	r1, [pc, #64]	; (800126c <SendUDPData+0x1dc>)
 800122a:	7108      	strb	r0, [r1, #4]
 800122c:	4413      	add	r3, r2
 800122e:	220a      	movs	r2, #10
 8001230:	701a      	strb	r2, [r3, #0]
				TXUSART1.iw &= TXUSART1.maskSize;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <SendUDPData+0x1dc>)
 8001234:	791a      	ldrb	r2, [r3, #4]
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <SendUDPData+0x1dc>)
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	4013      	ands	r3, r2
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <SendUDPData+0x1dc>)
 8001240:	711a      	strb	r2, [r3, #4]
				ECOCIPSEND0xA0 = 1;
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <SendUDPData+0x1f0>)
 8001244:	7813      	ldrb	r3, [r2, #0]
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	7013      	strb	r3, [r2, #0]
				Count500ms = 2;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <SendUDPData+0x1ec>)
 800124e:	2202      	movs	r2, #2
 8001250:	801a      	strh	r2, [r3, #0]
			}


		break;
 8001252:	e001      	b.n	8001258 <SendUDPData+0x1c8>
		break;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <SendUDPData+0x1ca>
		break;
 8001258:	bf00      	nop
//			PutBuffOnTx((_Tx *)&TXUSART1, (uint8_t *)&EspIp, 15);
//			PutcksOnTx((_Tx *)&TXUSART1);
//		break;
	}
	//PutHeaderOnTx((_Tx *)&TXUSB, 0xE0, 2);
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000890 	.word	0x20000890
 8001268:	200004c6 	.word	0x200004c6
 800126c:	20000c20 	.word	0x20000c20
 8001270:	0800bc90 	.word	0x0800bc90
 8001274:	0800bbc0 	.word	0x0800bbc0
 8001278:	20000748 	.word	0x20000748
 800127c:	200006b4 	.word	0x200006b4
 8001280:	20000710 	.word	0x20000710
 8001284:	20000711 	.word	0x20000711
 8001288:	200008e0 	.word	0x200008e0
 800128c:	0800bbc4 	.word	0x0800bbc4

08001290 <PutStrOnTx>:

void PutStrOnTx(_Tx *TX, const char *str)
{
 8001290:	b490      	push	{r4, r7}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]

    while(str[i]) {
 800129e:	e018      	b.n	80012d2 <PutStrOnTx+0x42>
        TX->Buff[TX->iw++] = str[i++];
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	73fa      	strb	r2, [r7, #15]
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	441a      	add	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	1c58      	adds	r0, r3, #1
 80012b6:	b2c4      	uxtb	r4, r0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	7104      	strb	r4, [r0, #4]
 80012bc:	440b      	add	r3, r1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	791a      	ldrb	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7a1b      	ldrb	r3, [r3, #8]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	711a      	strb	r2, [r3, #4]
    while(str[i]) {
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1e0      	bne.n	80012a0 <PutStrOnTx+0x10>
    }
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc90      	pop	{r4, r7}
 80012e8:	4770      	bx	lr

080012ea <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	1c59      	adds	r1, r3, #1
 8001300:	b2c8      	uxtb	r0, r1
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	7108      	strb	r0, [r1, #4]
 8001306:	4413      	add	r3, r2
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	791a      	ldrb	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	4013      	ands	r3, r2
 8001316:	b2da      	uxtb	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	711a      	strb	r2, [r3, #4]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <PutBuffOnTx>:

void PutBuffOnTx(_Tx *TX, uint8_t *buf, uint8_t length)
{
 8001326:	b490      	push	{r4, r7}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	4613      	mov	r3, r2
 8001332:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0; i<length; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	75fb      	strb	r3, [r7, #23]
 8001338:	e018      	b.n	800136c <PutBuffOnTx+0x46>

    	TX->Buff[TX->iw++] = buf[i];
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	441a      	add	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	1c58      	adds	r0, r3, #1
 800134a:	b2c4      	uxtb	r4, r0
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	7104      	strb	r4, [r0, #4]
 8001350:	440b      	add	r3, r1
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	701a      	strb	r2, [r3, #0]
    	TX->iw &= TX->maskSize;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	791a      	ldrb	r2, [r3, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	4013      	ands	r3, r2
 8001360:	b2da      	uxtb	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	711a      	strb	r2, [r3, #4]
    for(i=0; i<length; i++) {
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	3301      	adds	r3, #1
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	7dfa      	ldrb	r2, [r7, #23]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	429a      	cmp	r2, r3
 8001372:	d3e2      	bcc.n	800133a <PutBuffOnTx+0x14>
    }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bc90      	pop	{r4, r7}
 800137e:	4770      	bx	lr

08001380 <PutHeaderOnTx>:

void PutHeaderOnTx(_Tx *TX, uint8_t cmd, uint8_t CantDatos)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	1c59      	adds	r1, r3, #1
 800139a:	b2c8      	uxtb	r0, r1
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	7108      	strb	r0, [r1, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	2255      	movs	r2, #85	; 0x55
 80013a4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	791a      	ldrb	r2, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7a1b      	ldrb	r3, [r3, #8]
 80013ae:	4013      	ands	r3, r2
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	1c59      	adds	r1, r3, #1
 80013c0:	b2c8      	uxtb	r0, r1
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	7108      	strb	r0, [r1, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	224e      	movs	r2, #78	; 0x4e
 80013ca:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	791a      	ldrb	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7a1b      	ldrb	r3, [r3, #8]
 80013d4:	4013      	ands	r3, r2
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	1c59      	adds	r1, r3, #1
 80013e6:	b2c8      	uxtb	r0, r1
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	7108      	strb	r0, [r1, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	2245      	movs	r2, #69	; 0x45
 80013f0:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	791a      	ldrb	r2, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7a1b      	ldrb	r3, [r3, #8]
 80013fa:	4013      	ands	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	1c59      	adds	r1, r3, #1
 800140c:	b2c8      	uxtb	r0, r1
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	7108      	strb	r0, [r1, #4]
 8001412:	4413      	add	r3, r2
 8001414:	2252      	movs	r2, #82	; 0x52
 8001416:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	791a      	ldrb	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7a1b      	ldrb	r3, [r3, #8]
 8001420:	4013      	ands	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	711a      	strb	r2, [r3, #4]
    //lcmd cantidad de datos: id+payload+cks
    TX->length = CantDatos;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	78ba      	ldrb	r2, [r7, #2]
 800142c:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = CantDatos + 1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	b2c8      	uxtb	r0, r1
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	7108      	strb	r0, [r1, #4]
 800143e:	4413      	add	r3, r2
 8001440:	78ba      	ldrb	r2, [r7, #2]
 8001442:	3201      	adds	r2, #1
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	791a      	ldrb	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7a1b      	ldrb	r3, [r3, #8]
 8001450:	4013      	ands	r3, r2
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	b2c8      	uxtb	r0, r1
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	7108      	strb	r0, [r1, #4]
 8001468:	4413      	add	r3, r2
 800146a:	223a      	movs	r2, #58	; 0x3a
 800146c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791a      	ldrb	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7a1b      	ldrb	r3, [r3, #8]
 8001476:	4013      	ands	r3, r2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = cmd;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	1c59      	adds	r1, r3, #1
 8001488:	b2c8      	uxtb	r0, r1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	7108      	strb	r0, [r1, #4]
 800148e:	4413      	add	r3, r2
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	791a      	ldrb	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7a1b      	ldrb	r3, [r3, #8]
 800149c:	4013      	ands	r3, r2
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	711a      	strb	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <PutcksOnTx>:

void PutcksOnTx(_Tx *TX)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	799b      	ldrb	r3, [r3, #6]
 80014be:	3306      	adds	r3, #6
 80014c0:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	791a      	ldrb	r2, [r3, #4]
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a1a      	ldrb	r2, [r3, #8]
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	4013      	ands	r3, r2
 80014d4:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 80014d6:	e00e      	b.n	80014f6 <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	73b9      	strb	r1, [r7, #14]
 80014e2:	4413      	add	r3, r2
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4053      	eors	r3, r2
 80014ea:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7a1a      	ldrb	r2, [r3, #8]
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	4013      	ands	r3, r2
 80014f4:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	7bba      	ldrb	r2, [r7, #14]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	1c59      	adds	r1, r3, #1
 800150a:	b2c8      	uxtb	r0, r1
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	7108      	strb	r0, [r1, #4]
 8001510:	4413      	add	r3, r2
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	791a      	ldrb	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7a1b      	ldrb	r3, [r3, #8]
 800151e:	4013      	ands	r3, r2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	711a      	strb	r2, [r3, #4]
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 ff96 	bl	8002464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 fa90 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 fcea 	bl	8001f14 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001540:	f000 fc08 	bl	8001d54 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001544:	f000 fb8a 	bl	8001c5c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001548:	f000 fc9c 	bl	8001e84 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800154c:	f000 fcc4 	bl	8001ed8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001550:	f000 fae2 	bl	8001b18 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001554:	f009 fe3e 	bl	800b1d4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001558:	f000 fbae 	bl	8001cb8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 800155c:	48a9      	ldr	r0, [pc, #676]	; (8001804 <main+0x2d4>)
 800155e:	f009 ff29 	bl	800b3b4 <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 8001562:	48a9      	ldr	r0, [pc, #676]	; (8001808 <main+0x2d8>)
 8001564:	f004 fc44 	bl	8005df0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001568:	48a8      	ldr	r0, [pc, #672]	; (800180c <main+0x2dc>)
 800156a:	f004 fc41 	bl	8005df0 <HAL_TIM_Base_Start_IT>
  //Enable ESP8266
  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);	//Enable ESP8266
 800156e:	2201      	movs	r2, #1
 8001570:	2120      	movs	r1, #32
 8001572:	48a7      	ldr	r0, [pc, #668]	; (8001810 <main+0x2e0>)
 8001574:	f002 f8e1 	bl	800373a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);	//Reset ESP8266
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	48a4      	ldr	r0, [pc, #656]	; (8001810 <main+0x2e0>)
 800157e:	f002 f8dc 	bl	800373a <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001582:	2100      	movs	r1, #0
 8001584:	48a0      	ldr	r0, [pc, #640]	; (8001808 <main+0x2d8>)
 8001586:	f004 fcdd 	bl	8005f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800158a:	2104      	movs	r1, #4
 800158c:	489e      	ldr	r0, [pc, #632]	; (8001808 <main+0x2d8>)
 800158e:	f004 fcd9 	bl	8005f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001592:	2108      	movs	r1, #8
 8001594:	489c      	ldr	r0, [pc, #624]	; (8001808 <main+0x2d8>)
 8001596:	f004 fcd5 	bl	8005f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800159a:	210c      	movs	r1, #12
 800159c:	489a      	ldr	r0, [pc, #616]	; (8001808 <main+0x2d8>)
 800159e:	f004 fcd1 	bl	8005f44 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015a2:	4b99      	ldr	r3, [pc, #612]	; (8001808 <main+0x2d8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2200      	movs	r2, #0
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015aa:	4b97      	ldr	r3, [pc, #604]	; (8001808 <main+0x2d8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015b2:	4b95      	ldr	r3, [pc, #596]	; (8001808 <main+0x2d8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80015ba:	4b93      	ldr	r3, [pc, #588]	; (8001808 <main+0x2d8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
/***********************************************************************************/
/************************** Inicializacion de contadores ***************************/
/***********************************************************************************/
  Count100ms = 100;
 80015c2:	4b94      	ldr	r3, [pc, #592]	; (8001814 <main+0x2e4>)
 80015c4:	2264      	movs	r2, #100	; 0x64
 80015c6:	801a      	strh	r2, [r3, #0]
  Count200ms = 0;
 80015c8:	4b93      	ldr	r3, [pc, #588]	; (8001818 <main+0x2e8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	801a      	strh	r2, [r3, #0]
  Count3000ms = 0;
 80015ce:	4b93      	ldr	r3, [pc, #588]	; (800181c <main+0x2ec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	801a      	strh	r2, [r3, #0]
  Count500ms = 5;
 80015d4:	4b92      	ldr	r3, [pc, #584]	; (8001820 <main+0x2f0>)
 80015d6:	2205      	movs	r2, #5
 80015d8:	801a      	strh	r2, [r3, #0]
  DecodeTimeOut = 60;
 80015da:	4b92      	ldr	r3, [pc, #584]	; (8001824 <main+0x2f4>)
 80015dc:	223c      	movs	r2, #60	; 0x3c
 80015de:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/*************************** Inicializacion de variables USB ***********************/
/***********************************************************************************/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 80015e0:	4b91      	ldr	r3, [pc, #580]	; (8001828 <main+0x2f8>)
 80015e2:	4a92      	ldr	r2, [pc, #584]	; (800182c <main+0x2fc>)
 80015e4:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 80015e6:	4b90      	ldr	r3, [pc, #576]	; (8001828 <main+0x2f8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 80015ec:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <main+0x2f8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 80015f2:	4b8d      	ldr	r3, [pc, #564]	; (8001828 <main+0x2f8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 255;
 80015f8:	4b8b      	ldr	r3, [pc, #556]	; (8001828 <main+0x2f8>)
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	739a      	strb	r2, [r3, #14]
  RXUSB.ISCMD = 0;
 80015fe:	4b8a      	ldr	r3, [pc, #552]	; (8001828 <main+0x2f8>)
 8001600:	2200      	movs	r2, #0
 8001602:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 8001604:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <main+0x300>)
 8001606:	4a8b      	ldr	r2, [pc, #556]	; (8001834 <main+0x304>)
 8001608:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 800160a:	4b89      	ldr	r3, [pc, #548]	; (8001830 <main+0x300>)
 800160c:	2200      	movs	r2, #0
 800160e:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 8001610:	4b87      	ldr	r3, [pc, #540]	; (8001830 <main+0x300>)
 8001612:	2200      	movs	r2, #0
 8001614:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 255;
 8001616:	4b86      	ldr	r3, [pc, #536]	; (8001830 <main+0x300>)
 8001618:	22ff      	movs	r2, #255	; 0xff
 800161a:	721a      	strb	r2, [r3, #8]
  TXUSB.maskBuf = 255;
 800161c:	4b84      	ldr	r3, [pc, #528]	; (8001830 <main+0x300>)
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	725a      	strb	r2, [r3, #9]
/***********************************************************************************/

/***********************************************************************************/
/********************** Inicialización de  ESP8266 ************************/
/***********************************************************************************/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <main+0x308>)
 8001624:	4a85      	ldr	r2, [pc, #532]	; (800183c <main+0x30c>)
 8001626:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <main+0x308>)
 800162a:	2200      	movs	r2, #0
 800162c:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <main+0x308>)
 8001630:	2200      	movs	r2, #0
 8001632:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 8001634:	4b80      	ldr	r3, [pc, #512]	; (8001838 <main+0x308>)
 8001636:	2200      	movs	r2, #0
 8001638:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 255;
 800163a:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <main+0x308>)
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	739a      	strb	r2, [r3, #14]
  RXUSART1.ISCMD = 0;
 8001640:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <main+0x308>)
 8001642:	2200      	movs	r2, #0
 8001644:	719a      	strb	r2, [r3, #6]

  TXUSART1.Buff = txUSART1Buff;
 8001646:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <main+0x310>)
 8001648:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <main+0x314>)
 800164a:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 800164c:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <main+0x310>)
 800164e:	2200      	movs	r2, #0
 8001650:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 8001652:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <main+0x310>)
 8001654:	2200      	movs	r2, #0
 8001656:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 255;
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <main+0x310>)
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	721a      	strb	r2, [r3, #8]
  TXUSART1.maskBuf = 255;
 800165e:	4b78      	ldr	r3, [pc, #480]	; (8001840 <main+0x310>)
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	725a      	strb	r2, [r3, #9]

  /*Bits de control*/
  DecodeIPD = 0;
 8001664:	4a78      	ldr	r2, [pc, #480]	; (8001848 <main+0x318>)
 8001666:	7813      	ldrb	r3, [r2, #0]
 8001668:	f36f 1386 	bfc	r3, #6, #1
 800166c:	7013      	strb	r3, [r2, #0]
  DecodeCIPSEND = 0;
 800166e:	4b77      	ldr	r3, [pc, #476]	; (800184c <main+0x31c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
  DecodeHeaderESP = 0;
 8001674:	4a74      	ldr	r2, [pc, #464]	; (8001848 <main+0x318>)
 8001676:	7813      	ldrb	r3, [r2, #0]
 8001678:	f36f 03c3 	bfc	r3, #3, #1
 800167c:	7013      	strb	r3, [r2, #0]
  ESPReadyToRecyb = 0;
 800167e:	4a72      	ldr	r2, [pc, #456]	; (8001848 <main+0x318>)
 8001680:	7813      	ldrb	r3, [r2, #0]
 8001682:	f36f 1345 	bfc	r3, #5, #1
 8001686:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND0xF0 = 0;
 8001688:	4a6f      	ldr	r2, [pc, #444]	; (8001848 <main+0x318>)
 800168a:	7813      	ldrb	r3, [r2, #0]
 800168c:	f36f 13c7 	bfc	r3, #7, #1
 8001690:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND0xA0 = 0;
 8001692:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <main+0x320>)
 8001694:	7813      	ldrb	r3, [r2, #0]
 8001696:	f36f 0382 	bfc	r3, #2, #1
 800169a:	7013      	strb	r3, [r2, #0]
  ResetESP = 1;
 800169c:	4a6c      	ldr	r2, [pc, #432]	; (8001850 <main+0x320>)
 800169e:	7813      	ldrb	r3, [r2, #0]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	7013      	strb	r3, [r2, #0]
  Estado = 0;
 80016a6:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <main+0x324>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  Indice = 0;
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <main+0x328>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  SentDataESP = 0;
 80016b2:	4a67      	ldr	r2, [pc, #412]	; (8001850 <main+0x320>)
 80016b4:	7813      	ldrb	r3, [r2, #0]
 80016b6:	f36f 0341 	bfc	r3, #1, #1
 80016ba:	7013      	strb	r3, [r2, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************ Inicializacion de variables ADC **************************/
/***********************************************************************************/
  iAdc = 0;
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <main+0x32c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  FirtScan=1;
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <main+0x330>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]


/***********************************************************************************/
/***************** Inicializacion de variables error cuadratico ********************/
/***********************************************************************************/
  posMINCenter = 0;
 80016c8:	4b66      	ldr	r3, [pc, #408]	; (8001864 <main+0x334>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  posMINDerecha = 0;
 80016ce:	4b66      	ldr	r3, [pc, #408]	; (8001868 <main+0x338>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
  posMINIzquierda = 0;
 80016d4:	4b65      	ldr	r3, [pc, #404]	; (800186c <main+0x33c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
  sensorValue = 0;
 80016da:	4b65      	ldr	r3, [pc, #404]	; (8001870 <main+0x340>)
 80016dc:	2200      	movs	r2, #0
 80016de:	801a      	strh	r2, [r3, #0]
  error = 0;
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <main+0x344>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************* Inicialización de variables PID *************************/
/***********************************************************************************/
  Kp = 0;
 80016e6:	4b64      	ldr	r3, [pc, #400]	; (8001878 <main+0x348>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
  Ki = 0;
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <main+0x34c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  Kd = 0;
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <main+0x350>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
  Proporcional = 0;
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <main+0x354>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
  Integral = 0;
 80016fe:	4b62      	ldr	r3, [pc, #392]	; (8001888 <main+0x358>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
  Derivativo = 0;
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <main+0x35c>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED de estado - Parpadea cada 100ms
	  if(On100ms){
 800170a:	4b61      	ldr	r3, [pc, #388]	; (8001890 <main+0x360>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d042      	beq.n	800179a <main+0x26a>
		  On100ms = 0;
 8001714:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <main+0x360>)
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 800171a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171e:	485d      	ldr	r0, [pc, #372]	; (8001894 <main+0x364>)
 8001720:	f002 f823 	bl	800376a <HAL_GPIO_TogglePin>

		  if(espConnected){
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <main+0x318>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d027      	beq.n	8001782 <main+0x252>
			  if(Count3000ms > 0){
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <main+0x2ec>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00e      	beq.n	800175a <main+0x22a>
				  Count3000ms--;
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <main+0x2ec>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <main+0x2ec>)
 8001748:	801a      	strh	r2, [r3, #0]
				  if(!Count3000ms){
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <main+0x2ec>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <main+0x22a>
					SendUDPData(0xF0);
 8001754:	20f0      	movs	r0, #240	; 0xf0
 8001756:	f7ff fc9b 	bl	8001090 <SendUDPData>
//					Count3000ms = 1;
				  }
			  }

			  if(Count500ms > 0){
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <main+0x2f0>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00e      	beq.n	8001782 <main+0x252>
				  Count500ms--;
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <main+0x2f0>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <main+0x2f0>)
 8001770:	801a      	strh	r2, [r3, #0]
				  if(!Count500ms){
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <main+0x2f0>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <main+0x252>
					  SendUDPData(0xA0);
 800177c:	20a0      	movs	r0, #160	; 0xa0
 800177e:	f7ff fc87 	bl	8001090 <SendUDPData>
				  }
			  }
		  }

		  //Utilizado como delay para no capturar basura de la ESP8266 al iniciarla
		  if(DecodeTimeOut > 0){
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <main+0x2f4>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <main+0x26a>
			  DecodeTimeOut--;
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <main+0x2f4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <main+0x2f4>)
 8001798:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  //Recepcion por USB - Decodifica header
	  if(RXUSB.iw != RXUSB.ir) {
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <main+0x2f8>)
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <main+0x2f8>)
 80017a2:	795b      	ldrb	r3, [r3, #5]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d002      	beq.n	80017b0 <main+0x280>
		  DecodeHeader((_Rx *)&RXUSB);
 80017aa:	481f      	ldr	r0, [pc, #124]	; (8001828 <main+0x2f8>)
 80017ac:	f7ff fb6a 	bl	8000e84 <DecodeHeader>
	  }
	  //Recepcion por USB - Decodifica comando
	  if(RXUSB.ISCMD) {
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <main+0x2f8>)
 80017b2:	799b      	ldrb	r3, [r3, #6]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <main+0x292>
		  DecodeCmd((_Rx *)&RXUSB, (_Tx *)&TXUSB);
 80017ba:	491d      	ldr	r1, [pc, #116]	; (8001830 <main+0x300>)
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <main+0x2f8>)
 80017be:	f7ff fc59 	bl	8001074 <DecodeCmd>
	  }
	  //Transmision por USB
	  if(TXUSB.iw != TXUSB.ir) {
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <main+0x300>)
 80017c4:	791a      	ldrb	r2, [r3, #4]
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <main+0x300>)
 80017c8:	795b      	ldrb	r3, [r3, #5]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	f000 808e 	beq.w	80018ec <main+0x3bc>
		  if(TXUSB.iw > TXUSB.ir){
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <main+0x300>)
 80017d2:	791a      	ldrb	r2, [r3, #4]
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <main+0x300>)
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d962      	bls.n	80018a2 <main+0x372>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <main+0x300>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <main+0x300>)
 80017e2:	7952      	ldrb	r2, [r2, #5]
 80017e4:	1898      	adds	r0, r3, r2
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <main+0x300>)
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <main+0x300>)
 80017ee:	795b      	ldrb	r3, [r3, #5]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	f009 fdb6 	bl	800b368 <CDC_Transmit_FS>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d16c      	bne.n	80018dc <main+0x3ac>
 8001802:	e049      	b.n	8001898 <main+0x368>
 8001804:	08000e35 	.word	0x08000e35
 8001808:	200004cc 	.word	0x200004cc
 800180c:	200006c8 	.word	0x200006c8
 8001810:	40010c00 	.word	0x40010c00
 8001814:	20000af0 	.word	0x20000af0
 8001818:	20000ae2 	.word	0x20000ae2
 800181c:	200004c6 	.word	0x200004c6
 8001820:	200006b4 	.word	0x200006b4
 8001824:	2000052c 	.word	0x2000052c
 8001828:	20000c0c 	.word	0x20000c0c
 800182c:	200005b0 	.word	0x200005b0
 8001830:	200006b8 	.word	0x200006b8
 8001834:	2000074c 	.word	0x2000074c
 8001838:	20000518 	.word	0x20000518
 800183c:	2000019c 	.word	0x2000019c
 8001840:	20000c20 	.word	0x20000c20
 8001844:	20000af4 	.word	0x20000af4
 8001848:	20000890 	.word	0x20000890
 800184c:	20000584 	.word	0x20000584
 8001850:	20000710 	.word	0x20000710
 8001854:	20000744 	.word	0x20000744
 8001858:	20000891 	.word	0x20000891
 800185c:	20000711 	.word	0x20000711
 8001860:	20000198 	.word	0x20000198
 8001864:	20000712 	.word	0x20000712
 8001868:	200006c4 	.word	0x200006c4
 800186c:	20000c2c 	.word	0x20000c2c
 8001870:	20000bf8 	.word	0x20000bf8
 8001874:	20000aec 	.word	0x20000aec
 8001878:	20000c03 	.word	0x20000c03
 800187c:	20000514 	.word	0x20000514
 8001880:	20000ae4 	.word	0x20000ae4
 8001884:	20000c04 	.word	0x20000c04
 8001888:	20000bfc 	.word	0x20000bfc
 800188c:	20000588 	.word	0x20000588
 8001890:	20000586 	.word	0x20000586
 8001894:	40011000 	.word	0x40011000
				  TXUSB.ir=TXUSB.iw;
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <main+0x500>)
 800189a:	791a      	ldrb	r2, [r3, #4]
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <main+0x500>)
 800189e:	715a      	strb	r2, [r3, #5]
 80018a0:	e01c      	b.n	80018dc <main+0x3ac>
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <main+0x500>)
 80018a4:	7a5b      	ldrb	r3, [r3, #9]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <main+0x500>)
 80018aa:	795b      	ldrb	r3, [r3, #5]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <main+0x504>)
 80018b8:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <main+0x500>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <main+0x500>)
 80018c0:	7952      	ldrb	r2, [r2, #5]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <main+0x504>)
 80018c6:	8812      	ldrh	r2, [r2, #0]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f009 fd4c 	bl	800b368 <CDC_Transmit_FS>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <main+0x3ac>
				  TXUSB.ir = 0;
 80018d6:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <main+0x500>)
 80018d8:	2200      	movs	r2, #0
 80018da:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 80018dc:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <main+0x500>)
 80018de:	795a      	ldrb	r2, [r3, #5]
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <main+0x500>)
 80018e2:	7a1b      	ldrb	r3, [r3, #8]
 80018e4:	4013      	ands	r3, r2
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <main+0x500>)
 80018ea:	715a      	strb	r2, [r3, #5]
	  }

	  //Primera inicializacion de ESP8266 y Reset
	  if((!DecodeTimeOut) && (ResetESP) && (!ESPReadyToRecyb)){
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <main+0x508>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11a      	bne.n	800192c <main+0x3fc>
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <main+0x50c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <main+0x3fc>
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <main+0x510>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <main+0x3fc>
		  InitEsp((_Rx *)&RXUSART1);
 8001912:	484c      	ldr	r0, [pc, #304]	; (8001a44 <main+0x514>)
 8001914:	f7fe fdf6 	bl	8000504 <InitEsp>
		  //Interrupcion para recibir datos desde ESP8266
		  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 8001918:	2201      	movs	r2, #1
 800191a:	494b      	ldr	r1, [pc, #300]	; (8001a48 <main+0x518>)
 800191c:	484b      	ldr	r0, [pc, #300]	; (8001a4c <main+0x51c>)
 800191e:	f005 f9c2 	bl	8006ca6 <HAL_UART_Receive_IT>
		  ResetESP = 0;
 8001922:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <main+0x50c>)
 8001924:	7813      	ldrb	r3, [r2, #0]
 8001926:	f36f 0300 	bfc	r3, #0, #1
 800192a:	7013      	strb	r3, [r2, #0]
	  }

	  //Continua con los casos para iniciar
	  if((!espConnected) && (!ESPReadyToRecyb) && (!ResetESP) && (!DecodeTimeOut)){
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <main+0x510>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d115      	bne.n	8001966 <main+0x436>
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <main+0x510>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10e      	bne.n	8001966 <main+0x436>
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <main+0x50c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <main+0x436>
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <main+0x508>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <main+0x436>
		  InitEsp((_Rx *)&RXUSART1);
 8001960:	4838      	ldr	r0, [pc, #224]	; (8001a44 <main+0x514>)
 8001962:	f7fe fdcf 	bl	8000504 <InitEsp>
	  }

	  //Recepcion por ESP8266 - Decodifica comandos provenientes de ESP8266
	  if(RXUSART1.iw != RXUSART1.ir){
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <main+0x514>)
 8001968:	791b      	ldrb	r3, [r3, #4]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <main+0x514>)
 800196e:	795b      	ldrb	r3, [r3, #5]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	429a      	cmp	r2, r3
 8001974:	d002      	beq.n	800197c <main+0x44c>
		  DecodeESP((_Rx *)&RXUSART1);
 8001976:	4833      	ldr	r0, [pc, #204]	; (8001a44 <main+0x514>)
 8001978:	f7fe fea4 	bl	80006c4 <DecodeESP>
	  }
	  //Si la decodificacion resulta de un dato proveniente de PC, se decodifica header
	  if(DecodeHeaderESP){
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <main+0x510>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <main+0x46a>
		  DecodeHeader((_Rx *)&RXUSART1);
 800198a:	482e      	ldr	r0, [pc, #184]	; (8001a44 <main+0x514>)
 800198c:	f7ff fa7a 	bl	8000e84 <DecodeHeader>
		  DecodeHeaderESP = 0;
 8001990:	4a2b      	ldr	r2, [pc, #172]	; (8001a40 <main+0x510>)
 8001992:	7813      	ldrb	r3, [r2, #0]
 8001994:	f36f 03c3 	bfc	r3, #3, #1
 8001998:	7013      	strb	r3, [r2, #0]
	  }
	  //Recepcion por ESP8266 - Decodifica comando
	  if(RXUSART1.ISCMD) {
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <main+0x514>)
 800199c:	799b      	ldrb	r3, [r3, #6]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <main+0x47c>
		  DecodeCmd((_Rx *)&RXUSART1, (_Tx *)&TXUSART1);
 80019a4:	492a      	ldr	r1, [pc, #168]	; (8001a50 <main+0x520>)
 80019a6:	4827      	ldr	r0, [pc, #156]	; (8001a44 <main+0x514>)
 80019a8:	f7ff fb64 	bl	8001074 <DecodeCmd>
	  }

	  //Transmision por ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <main+0x520>)
 80019ae:	791a      	ldrb	r2, [r3, #4]
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <main+0x520>)
 80019b2:	795b      	ldrb	r3, [r3, #5]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d012      	beq.n	80019de <main+0x4ae>
		  if((huart1.Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE){
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <main+0x51c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	2b80      	cmp	r3, #128	; 0x80
 80019c4:	d10b      	bne.n	80019de <main+0x4ae>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <main+0x520>)
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	b2d1      	uxtb	r1, r2
 80019ce:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <main+0x520>)
 80019d0:	7151      	strb	r1, [r2, #5]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <main+0x524>)
 80019d6:	5c9a      	ldrb	r2, [r3, r2]
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <main+0x51c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
		  }
	  }

	  //Reset ESPE8266
	  if((HAL_GPIO_ReadPin(GPIOB, RESET_ESP_Pin) == GPIO_PIN_RESET) && (!DecodeTimeOut) && (ResetESP) && (ESPReadyToRecyb)){
 80019de:	2110      	movs	r1, #16
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <main+0x528>)
 80019e2:	f001 fe93 	bl	800370c <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae8e 	bne.w	800170a <main+0x1da>
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <main+0x508>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f ae88 	bne.w	800170a <main+0x1da>
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <main+0x50c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f43f ae80 	beq.w	800170a <main+0x1da>
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <main+0x510>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f43f ae78 	beq.w	800170a <main+0x1da>
		  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <main+0x528>)
 8001a20:	f001 fe8b 	bl	800373a <HAL_GPIO_WritePin>
		  ResetESP = 1;
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <main+0x50c>)
 8001a26:	7813      	ldrb	r3, [r2, #0]
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	7013      	strb	r3, [r2, #0]
	  if(On100ms){
 8001a2e:	e66c      	b.n	800170a <main+0x1da>
 8001a30:	200006b8 	.word	0x200006b8
 8001a34:	2000058c 	.word	0x2000058c
 8001a38:	2000052c 	.word	0x2000052c
 8001a3c:	20000710 	.word	0x20000710
 8001a40:	20000890 	.word	0x20000890
 8001a44:	20000518 	.word	0x20000518
 8001a48:	2000019c 	.word	0x2000019c
 8001a4c:	2000084c 	.word	0x2000084c
 8001a50:	20000c20 	.word	0x20000c20
 8001a54:	20000af4 	.word	0x20000af4
 8001a58:	40010c00 	.word	0x40010c00

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	; 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a66:	2228      	movs	r2, #40	; 0x28
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00a f88c 	bl	800bb88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aa8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc7c 	bl	80053b0 <HAL_RCC_OscConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001abe:	f000 faa1 	bl	8002004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2102      	movs	r1, #2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fee6 	bl	80058b0 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001aea:	f000 fa8b 	bl	8002004 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001aee:	2312      	movs	r3, #18
 8001af0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f870 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b0a:	f000 fa7b 	bl	8002004 <Error_Handler>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3750      	adds	r7, #80	; 0x50
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b2a:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <MX_ADC1_Init+0x140>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b44:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4a:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b52:	2208      	movs	r2, #8
 8001b54:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b56:	483f      	ldr	r0, [pc, #252]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b58:	f000 fce6 	bl	8002528 <HAL_ADC_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b62:	f000 fa4f 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4837      	ldr	r0, [pc, #220]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b78:	f000 fe9e 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b82:	f000 fa3f 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4830      	ldr	r0, [pc, #192]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001b94:	f000 fe90 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b9e:	f000 fa31 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4829      	ldr	r0, [pc, #164]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001bb0:	f000 fe82 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001bba:	f000 fa23 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4822      	ldr	r0, [pc, #136]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001bcc:	f000 fe74 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001bd6:	f000 fa15 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001bde:	2305      	movs	r3, #5
 8001be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	481b      	ldr	r0, [pc, #108]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001be8:	f000 fe66 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001bf2:	f000 fa07 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001c04:	f000 fe58 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001c0e:	f000 f9f9 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c12:	2306      	movs	r3, #6
 8001c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001c16:	2307      	movs	r3, #7
 8001c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001c20:	f000 fe4a 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001c2a:	f000 f9eb 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c2e:	2307      	movs	r3, #7
 8001c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001c32:	2308      	movs	r3, #8
 8001c34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <MX_ADC1_Init+0x13c>)
 8001c3c:	f000 fe3c 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001c46:	f000 f9dd 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000714 	.word	0x20000714
 8001c58:	40012400 	.word	0x40012400

08001c5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <MX_I2C2_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_I2C2_Init+0x58>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_I2C2_Init+0x50>)
 8001c9a:	f001 fd7f 	bl	800379c <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 f9ae 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000530 	.word	0x20000530
 8001cb0:	40005800 	.word	0x40005800
 8001cb4:	000186a0 	.word	0x000186a0

08001cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <MX_TIM3_Init+0x98>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001ce8:	f244 6250 	movw	r2, #18000	; 0x4650
 8001cec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cfa:	4814      	ldr	r0, [pc, #80]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001cfc:	f004 f828 	bl	8005d50 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d06:	f000 f97d 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001d18:	f004 fb7c 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f000 f96f 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	; (8001d4c <MX_TIM3_Init+0x94>)
 8001d34:	f004 fefa 	bl	8006b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d3e:	f000 f961 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200006c8 	.word	0x200006c8
 8001d50:	40000400 	.word	0x40000400

08001d54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001d86:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <MX_TIM4_Init+0x12c>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001d98:	f242 3228 	movw	r2, #9000	; 0x2328
 8001d9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001daa:	4834      	ldr	r0, [pc, #208]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001dac:	f003 ffd0 	bl	8005d50 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001db6:	f000 f925 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	482d      	ldr	r0, [pc, #180]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001dc8:	f004 fb24 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001dd2:	f000 f917 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dd6:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001dd8:	f004 f85c 	bl	8005e94 <HAL_TIM_PWM_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001de2:	f000 f90f 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	4619      	mov	r1, r3
 8001df4:	4821      	ldr	r0, [pc, #132]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001df6:	f004 fe99 	bl	8006b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e00:	f000 f900 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e04:	2360      	movs	r3, #96	; 0x60
 8001e06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4818      	ldr	r0, [pc, #96]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001e1c:	f004 fa3c 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e26:	f000 f8ed 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4812      	ldr	r0, [pc, #72]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001e32:	f004 fa31 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001e3c:	f000 f8e2 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2208      	movs	r2, #8
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001e48:	f004 fa26 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001e52:	f000 f8d7 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	220c      	movs	r2, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001e5e:	f004 fa1b 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001e68:	f000 f8cc 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM4_Init+0x128>)
 8001e6e:	f000 f9eb 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001e72:	bf00      	nop
 8001e74:	3738      	adds	r7, #56	; 0x38
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200004cc 	.word	0x200004cc
 8001e80:	40000800 	.word	0x40000800

08001e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <MX_USART1_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	f004 fea6 	bl	8006c0c <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f000 f89d 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000084c 	.word	0x2000084c
 8001ed4:	40013800 	.word	0x40013800

08001ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_DMA_Init+0x38>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <MX_DMA_Init+0x38>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6153      	str	r3, [r2, #20]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_DMA_Init+0x38>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	200b      	movs	r0, #11
 8001efc:	f000 ffad 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f00:	200b      	movs	r0, #11
 8001f02:	f000 ffc6 	bl	8002e92 <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f28:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f40:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f76:	f043 0308 	orr.w	r3, r3, #8
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <MX_GPIO_Init+0xe0>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <MX_GPIO_Init+0xe4>)
 8001f90:	f001 fbd3 	bl	800373a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_ESP_Pin|ENABLE_ESP_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2130      	movs	r1, #48	; 0x30
 8001f98:	4818      	ldr	r0, [pc, #96]	; (8001ffc <MX_GPIO_Init+0xe8>)
 8001f9a:	f001 fbce 	bl	800373a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8001f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <MX_GPIO_Init+0xe4>)
 8001fb8:	f001 fa24 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001fbc:	23ff      	movs	r3, #255	; 0xff
 8001fbe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_GPIO_Init+0xec>)
 8001fcc:	f001 fa1a 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_ESP_Pin ENABLE_ESP_Pin */
  GPIO_InitStruct.Pin = RESET_ESP_Pin|ENABLE_ESP_Pin;
 8001fd0:	2330      	movs	r3, #48	; 0x30
 8001fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_GPIO_Init+0xe8>)
 8001fe8:	f001 fa0c 	bl	8003404 <HAL_GPIO_Init>

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40010800 	.word	0x40010800

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_MspInit+0x5c>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_MspInit+0x5c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6193      	str	r3, [r2, #24]
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_MspInit+0x5c>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_MspInit+0x5c>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_MspInit+0x5c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_MspInit+0x5c>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_MspInit+0x60>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_MspInit+0x60>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000

08002074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a28      	ldr	r2, [pc, #160]	; (8002130 <HAL_ADC_MspInit+0xbc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d149      	bne.n	8002128 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_ADC_MspInit+0xc0>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_ADC_MspInit+0xc0>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_ADC_MspInit+0xc0>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_ADC_MspInit+0xc0>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_ADC_MspInit+0xc0>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_ADC_MspInit+0xc0>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020c4:	23ff      	movs	r3, #255	; 0xff
 80020c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c8:	2303      	movs	r3, #3
 80020ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4819      	ldr	r0, [pc, #100]	; (8002138 <HAL_ADC_MspInit+0xc4>)
 80020d4:	f001 f996 	bl	8003404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_ADC_MspInit+0xc8>)
 80020da:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_ADC_MspInit+0xcc>)
 80020dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_ADC_MspInit+0xc8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_ADC_MspInit+0xc8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_ADC_MspInit+0xc8>)
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_ADC_MspInit+0xc8>)
 80020f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_ADC_MspInit+0xc8>)
 80020fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_ADC_MspInit+0xc8>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_ADC_MspInit+0xc8>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <HAL_ADC_MspInit+0xc8>)
 800210e:	f000 fedb 	bl	8002ec8 <HAL_DMA_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002118:	f7ff ff74 	bl	8002004 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_ADC_MspInit+0xc8>)
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_ADC_MspInit+0xc8>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40012400 	.word	0x40012400
 8002134:	40021000 	.word	0x40021000
 8002138:	40010800 	.word	0x40010800
 800213c:	2000089c 	.word	0x2000089c
 8002140:	40020008 	.word	0x40020008

08002144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_I2C_MspInit+0x74>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d124      	bne.n	80021ae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_I2C_MspInit+0x78>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_I2C_MspInit+0x78>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_I2C_MspInit+0x78>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800217c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002182:	2312      	movs	r3, #18
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4619      	mov	r1, r3
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <HAL_I2C_MspInit+0x7c>)
 8002192:	f001 f937 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_I2C_MspInit+0x78>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_I2C_MspInit+0x78>)
 800219c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_I2C_MspInit+0x78>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40005800 	.word	0x40005800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010c00 	.word	0x40010c00

080021c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_TIM_Base_MspInit+0x78>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d114      	bne.n	8002200 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_TIM_Base_MspInit+0x7c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_TIM_Base_MspInit+0x7c>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_TIM_Base_MspInit+0x7c>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	201d      	movs	r0, #29
 80021f4:	f000 fe31 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021f8:	201d      	movs	r0, #29
 80021fa:	f000 fe4a 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021fe:	e018      	b.n	8002232 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_TIM_Base_MspInit+0x80>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d113      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x7c>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x7c>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0x7c>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	201e      	movs	r0, #30
 8002228:	f000 fe17 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800222c:	201e      	movs	r0, #30
 800222e:	f000 fe30 	bl	8002e92 <HAL_NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40000400 	.word	0x40000400
 8002240:	40021000 	.word	0x40021000
 8002244:	40000800 	.word	0x40000800

08002248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_TIM_MspPostInit+0x5c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d118      	bne.n	800229a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_TIM_MspPostInit+0x60>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <HAL_TIM_MspPostInit+0x60>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_TIM_MspPostInit+0x60>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002280:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2302      	movs	r3, #2
 800228c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_TIM_MspPostInit+0x64>)
 8002296:	f001 f8b5 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010c00 	.word	0x40010c00

080022b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_UART_MspInit+0x9c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d139      	bne.n	8002344 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_UART_MspInit+0xa0>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_UART_MspInit+0xa0>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_UART_MspInit+0xa0>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_UART_MspInit+0xa0>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_UART_MspInit+0xa0>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_UART_MspInit+0xa0>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	480f      	ldr	r0, [pc, #60]	; (8002354 <HAL_UART_MspInit+0xa4>)
 8002316:	f001 f875 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800231a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4619      	mov	r1, r3
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <HAL_UART_MspInit+0xa4>)
 8002330:	f001 f868 	bl	8003404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2025      	movs	r0, #37	; 0x25
 800233a:	f000 fd8e 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800233e:	2025      	movs	r0, #37	; 0x25
 8002340:	f000 fda7 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40013800 	.word	0x40013800
 8002350:	40021000 	.word	0x40021000
 8002354:	40010800 	.word	0x40010800

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800235c:	e7fe      	b.n	800235c <NMI_Handler+0x4>

0800235e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <HardFault_Handler+0x4>

08002364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <MemManage_Handler+0x4>

0800236a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <UsageFault_Handler+0x4>

08002376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239e:	f000 f8a7 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <DMA1_Channel1_IRQHandler+0x10>)
 80023ae:	f000 fef5 	bl	800319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000089c 	.word	0x2000089c

080023bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80023c2:	f001 fc60 	bl	8003c86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200014fc 	.word	0x200014fc

080023d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <TIM3_IRQHandler+0x10>)
 80023d6:	f003 fe57 	bl	8006088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200006c8 	.word	0x200006c8

080023e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <TIM4_IRQHandler+0x10>)
 80023ea:	f003 fe4d 	bl	8006088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200004cc 	.word	0x200004cc

080023f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <USART1_IRQHandler+0x10>)
 80023fe:	f004 fced 	bl	8006ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000084c 	.word	0x2000084c

0800240c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002430:	4c0a      	ldr	r4, [pc, #40]	; (800245c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800243e:	f7ff ffe5 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f009 fb7d 	bl	800bb40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002446:	f7ff f873 	bl	8001530 <main>
  bx lr
 800244a:	4770      	bx	lr
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002454:	0800bdb8 	.word	0x0800bdb8
  ldr r2, =_sbss
 8002458:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800245c:	200017e8 	.word	0x200017e8

08002460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC1_2_IRQHandler>
	...

08002464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_Init+0x28>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_Init+0x28>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 fce5 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	200f      	movs	r0, #15
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff fdc6 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fcfd 	bl	8002eae <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 fcc5 	bl	8002e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000008 	.word	0x20000008
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_IncTick+0x1c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x20>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a03      	ldr	r2, [pc, #12]	; (8002510 <HAL_IncTick+0x20>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000008 	.word	0x20000008
 8002510:	20000c34 	.word	0x20000c34

08002514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <HAL_GetTick+0x10>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	20000c34 	.word	0x20000c34

08002528 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0be      	b.n	80026c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fd84 	bl	8002074 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 faf5 	bl	8002b5c <ADC_ConversionStop_Disable>
 8002572:	4603      	mov	r3, r0
 8002574:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8099 	bne.w	80026b6 <HAL_ADC_Init+0x18e>
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8095 	bne.w	80026b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002594:	f023 0302 	bic.w	r3, r3, #2
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7b1b      	ldrb	r3, [r3, #12]
 80025ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c0:	d003      	beq.n	80025ca <HAL_ADC_Init+0xa2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_ADC_Init+0xa8>
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_Init+0xaa>
 80025d0:	2300      	movs	r3, #0
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7d1b      	ldrb	r3, [r3, #20]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d119      	bne.n	8002614 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7b1b      	ldrb	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	035a      	lsls	r2, r3, #13
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e00b      	b.n	8002614 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_ADC_Init+0x1a8>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	430b      	orrs	r3, r1
 800263a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002644:	d003      	beq.n	800264e <HAL_ADC_Init+0x126>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d104      	bne.n	8002658 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	3b01      	subs	r3, #1
 8002654:	051b      	lsls	r3, r3, #20
 8002656:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	430a      	orrs	r2, r1
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_ADC_Init+0x1ac>)
 8002674:	4013      	ands	r3, r2
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d10b      	bne.n	8002694 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002692:	e018      	b.n	80026c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f023 0312 	bic.w	r3, r3, #18
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026b4:	e007      	b.n	80026c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	ffe1f7fd 	.word	0xffe1f7fd
 80026d4:	ff1f0efe 	.word	0xff1f0efe

080026d8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a64      	ldr	r2, [pc, #400]	; (8002880 <HAL_ADC_Start_DMA+0x1a8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_ADC_Start_DMA+0x24>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a63      	ldr	r2, [pc, #396]	; (8002884 <HAL_ADC_Start_DMA+0x1ac>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d106      	bne.n	800270a <HAL_ADC_Start_DMA+0x32>
 80026fc:	4b60      	ldr	r3, [pc, #384]	; (8002880 <HAL_ADC_Start_DMA+0x1a8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 80b3 	bne.w	8002870 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_ADC_Start_DMA+0x40>
 8002714:	2302      	movs	r3, #2
 8002716:	e0ae      	b.n	8002876 <HAL_ADC_Start_DMA+0x19e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f9c1 	bl	8002aa8 <ADC_Enable>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 809a 	bne.w	8002866 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_ADC_Start_DMA+0x1ac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d105      	bne.n	800275c <HAL_ADC_Start_DMA+0x84>
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_ADC_Start_DMA+0x1a8>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d115      	bne.n	8002788 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	2b00      	cmp	r3, #0
 8002774:	d026      	beq.n	80027c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800277e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002786:	e01d      	b.n	80027c4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a39      	ldr	r2, [pc, #228]	; (8002880 <HAL_ADC_Start_DMA+0x1a8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_ADC_Start_DMA+0xd0>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a38      	ldr	r2, [pc, #224]	; (8002884 <HAL_ADC_Start_DMA+0x1ac>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d10d      	bne.n	80027c4 <HAL_ADC_Start_DMA+0xec>
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <HAL_ADC_Start_DMA+0x1a8>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	f023 0206 	bic.w	r2, r3, #6
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <HAL_ADC_Start_DMA+0x1b0>)
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_ADC_Start_DMA+0x1b4>)
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_ADC_Start_DMA+0x1b8>)
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0202 	mvn.w	r2, #2
 800280c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a18      	ldr	r0, [r3, #32]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	334c      	adds	r3, #76	; 0x4c
 8002828:	4619      	mov	r1, r3
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f000 fba5 	bl	8002f7c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800283c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002840:	d108      	bne.n	8002854 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002850:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002852:	e00f      	b.n	8002874 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002862:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002864:	e006      	b.n	8002874 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800286e:	e001      	b.n	8002874 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002874:	7dfb      	ldrb	r3, [r7, #23]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012400 	.word	0x40012400
 8002884:	40012800 	.word	0x40012800
 8002888:	08002bdf 	.word	0x08002bdf
 800288c:	08002c5b 	.word	0x08002c5b
 8002890:	08002c77 	.word	0x08002c77

08002894 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x20>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e0dc      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x1da>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d81c      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b05      	subs	r3, #5
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	4019      	ands	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b05      	subs	r3, #5
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
 8002920:	e03c      	b.n	800299c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d81c      	bhi.n	8002964 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b23      	subs	r3, #35	; 0x23
 800293c:	221f      	movs	r2, #31
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	4019      	ands	r1, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	3b23      	subs	r3, #35	; 0x23
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
 8002962:	e01b      	b.n	800299c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	3b41      	subs	r3, #65	; 0x41
 8002976:	221f      	movs	r2, #31
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	4019      	ands	r1, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	3b41      	subs	r3, #65	; 0x41
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b09      	cmp	r3, #9
 80029a2:	d91c      	bls.n	80029de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68d9      	ldr	r1, [r3, #12]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	3b1e      	subs	r3, #30
 80029b6:	2207      	movs	r2, #7
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	4019      	ands	r1, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6898      	ldr	r0, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	3b1e      	subs	r3, #30
 80029d0:	fa00 f203 	lsl.w	r2, r0, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	e019      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6919      	ldr	r1, [r3, #16]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d003      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a1e:	2b11      	cmp	r3, #17
 8002a20:	d132      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_ADC_ConfigChannel+0x1e4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d125      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d126      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d11a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	0c9a      	lsrs	r2, r3, #18
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x1b2>
 8002a76:	e007      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40012400 	.word	0x40012400
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	431bde83 	.word	0x431bde83

08002aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d040      	beq.n	8002b48 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <ADC_Enable+0xac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <ADC_Enable+0xb0>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ae4:	e002      	b.n	8002aec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f9      	bne.n	8002ae6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002af2:	f7ff fd0f 	bl	8002514 <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002af8:	e01f      	b.n	8002b3a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002afa:	f7ff fd0b 	bl	8002514 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d918      	bls.n	8002b3a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d011      	beq.n	8002b3a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e007      	b.n	8002b4a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d1d8      	bne.n	8002afa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000000 	.word	0x20000000
 8002b58:	431bde83 	.word	0x431bde83

08002b5c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d12e      	bne.n	8002bd4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b86:	f7ff fcc5 	bl	8002514 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b8c:	e01b      	b.n	8002bc6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b8e:	f7ff fcc1 	bl	8002514 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d914      	bls.n	8002bc6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10d      	bne.n	8002bc6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e007      	b.n	8002bd6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d0dc      	beq.n	8002b8e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d127      	bne.n	8002c48 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c12:	d115      	bne.n	8002c40 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7fd ff71 	bl	8000b28 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c46:	e004      	b.n	8002c52 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fe13 	bl	8002894 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff fe02 	bl	80028a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4906      	ldr	r1, [pc, #24]	; (8002d44 <__NVIC_EnableIRQ+0x34>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e10:	d301      	bcc.n	8002e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00f      	b.n	8002e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <SysTick_Config+0x40>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	f7ff ff90 	bl	8002d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <SysTick_Config+0x40>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <SysTick_Config+0x40>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff2d 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e6c:	f7ff ff42 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7ff ff90 	bl	8002d9c <NVIC_EncodePriority>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff5f 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff35 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffa2 	bl	8002e00 <SysTick_Config>
 8002ebc:	4603      	mov	r3, r0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e043      	b.n	8002f66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <HAL_DMA_Init+0xa8>)
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_DMA_Init+0xac>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	009a      	lsls	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_DMA_Init+0xb0>)
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	bffdfff8 	.word	0xbffdfff8
 8002f74:	cccccccd 	.word	0xcccccccd
 8002f78:	40020000 	.word	0x40020000

08002f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_DMA_Start_IT+0x20>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e04a      	b.n	8003032 <HAL_DMA_Start_IT+0xb6>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d13a      	bne.n	8003024 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f9e8 	bl	80033a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 020e 	orr.w	r2, r2, #14
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e00f      	b.n	8003012 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0204 	bic.w	r2, r2, #4
 8003000:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 020a 	orr.w	r2, r2, #10
 8003010:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e005      	b.n	8003030 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800302c:	2302      	movs	r3, #2
 800302e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800304c:	2b02      	cmp	r3, #2
 800304e:	d008      	beq.n	8003062 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2204      	movs	r2, #4
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e020      	b.n	80030a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 020e 	bic.w	r2, r2, #14
 8003070:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d005      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e051      	b.n	8003176 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 020e 	bic.w	r2, r2, #14
 80030e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_DMA_Abort_IT+0xd0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d029      	beq.n	8003150 <HAL_DMA_Abort_IT+0xa0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_DMA_Abort_IT+0xd4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d022      	beq.n	800314c <HAL_DMA_Abort_IT+0x9c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_DMA_Abort_IT+0xd8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d01a      	beq.n	8003146 <HAL_DMA_Abort_IT+0x96>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_DMA_Abort_IT+0xdc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d012      	beq.n	8003140 <HAL_DMA_Abort_IT+0x90>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_DMA_Abort_IT+0xe0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00a      	beq.n	800313a <HAL_DMA_Abort_IT+0x8a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_DMA_Abort_IT+0xe4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d102      	bne.n	8003134 <HAL_DMA_Abort_IT+0x84>
 800312e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003132:	e00e      	b.n	8003152 <HAL_DMA_Abort_IT+0xa2>
 8003134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003138:	e00b      	b.n	8003152 <HAL_DMA_Abort_IT+0xa2>
 800313a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800313e:	e008      	b.n	8003152 <HAL_DMA_Abort_IT+0xa2>
 8003140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003144:	e005      	b.n	8003152 <HAL_DMA_Abort_IT+0xa2>
 8003146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314a:	e002      	b.n	8003152 <HAL_DMA_Abort_IT+0xa2>
 800314c:	2310      	movs	r3, #16
 800314e:	e000      	b.n	8003152 <HAL_DMA_Abort_IT+0xa2>
 8003150:	2301      	movs	r3, #1
 8003152:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_DMA_Abort_IT+0xe8>)
 8003154:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    } 
  }
  return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40020008 	.word	0x40020008
 8003184:	4002001c 	.word	0x4002001c
 8003188:	40020030 	.word	0x40020030
 800318c:	40020044 	.word	0x40020044
 8003190:	40020058 	.word	0x40020058
 8003194:	4002006c 	.word	0x4002006c
 8003198:	40020000 	.word	0x40020000

0800319c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2204      	movs	r2, #4
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d04f      	beq.n	8003264 <HAL_DMA_IRQHandler+0xc8>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04a      	beq.n	8003264 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0204 	bic.w	r2, r2, #4
 80031ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a66      	ldr	r2, [pc, #408]	; (800338c <HAL_DMA_IRQHandler+0x1f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d029      	beq.n	800324a <HAL_DMA_IRQHandler+0xae>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a65      	ldr	r2, [pc, #404]	; (8003390 <HAL_DMA_IRQHandler+0x1f4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0xaa>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a63      	ldr	r2, [pc, #396]	; (8003394 <HAL_DMA_IRQHandler+0x1f8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01a      	beq.n	8003240 <HAL_DMA_IRQHandler+0xa4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a62      	ldr	r2, [pc, #392]	; (8003398 <HAL_DMA_IRQHandler+0x1fc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d012      	beq.n	800323a <HAL_DMA_IRQHandler+0x9e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a60      	ldr	r2, [pc, #384]	; (800339c <HAL_DMA_IRQHandler+0x200>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x98>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5f      	ldr	r2, [pc, #380]	; (80033a0 <HAL_DMA_IRQHandler+0x204>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <HAL_DMA_IRQHandler+0x92>
 8003228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800322c:	e00e      	b.n	800324c <HAL_DMA_IRQHandler+0xb0>
 800322e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003232:	e00b      	b.n	800324c <HAL_DMA_IRQHandler+0xb0>
 8003234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003238:	e008      	b.n	800324c <HAL_DMA_IRQHandler+0xb0>
 800323a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800323e:	e005      	b.n	800324c <HAL_DMA_IRQHandler+0xb0>
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	e002      	b.n	800324c <HAL_DMA_IRQHandler+0xb0>
 8003246:	2340      	movs	r3, #64	; 0x40
 8003248:	e000      	b.n	800324c <HAL_DMA_IRQHandler+0xb0>
 800324a:	2304      	movs	r3, #4
 800324c:	4a55      	ldr	r2, [pc, #340]	; (80033a4 <HAL_DMA_IRQHandler+0x208>)
 800324e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8094 	beq.w	8003382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003262:	e08e      	b.n	8003382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2202      	movs	r2, #2
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d056      	beq.n	8003322 <HAL_DMA_IRQHandler+0x186>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d051      	beq.n	8003322 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 020a 	bic.w	r2, r2, #10
 800329a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a38      	ldr	r2, [pc, #224]	; (800338c <HAL_DMA_IRQHandler+0x1f0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d029      	beq.n	8003302 <HAL_DMA_IRQHandler+0x166>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a37      	ldr	r2, [pc, #220]	; (8003390 <HAL_DMA_IRQHandler+0x1f4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <HAL_DMA_IRQHandler+0x162>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a35      	ldr	r2, [pc, #212]	; (8003394 <HAL_DMA_IRQHandler+0x1f8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x15c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_DMA_IRQHandler+0x1fc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d012      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x156>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a32      	ldr	r2, [pc, #200]	; (800339c <HAL_DMA_IRQHandler+0x200>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00a      	beq.n	80032ec <HAL_DMA_IRQHandler+0x150>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_DMA_IRQHandler+0x204>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <HAL_DMA_IRQHandler+0x14a>
 80032e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032e4:	e00e      	b.n	8003304 <HAL_DMA_IRQHandler+0x168>
 80032e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ea:	e00b      	b.n	8003304 <HAL_DMA_IRQHandler+0x168>
 80032ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f0:	e008      	b.n	8003304 <HAL_DMA_IRQHandler+0x168>
 80032f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f6:	e005      	b.n	8003304 <HAL_DMA_IRQHandler+0x168>
 80032f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fc:	e002      	b.n	8003304 <HAL_DMA_IRQHandler+0x168>
 80032fe:	2320      	movs	r3, #32
 8003300:	e000      	b.n	8003304 <HAL_DMA_IRQHandler+0x168>
 8003302:	2302      	movs	r3, #2
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <HAL_DMA_IRQHandler+0x208>)
 8003306:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d034      	beq.n	8003382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003320:	e02f      	b.n	8003382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2208      	movs	r2, #8
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_DMA_IRQHandler+0x1e8>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d023      	beq.n	8003384 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 020e 	bic.w	r2, r2, #14
 800334a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
    }
  }
  return;
 8003382:	bf00      	nop
 8003384:	bf00      	nop
}
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40020008 	.word	0x40020008
 8003390:	4002001c 	.word	0x4002001c
 8003394:	40020030 	.word	0x40020030
 8003398:	40020044 	.word	0x40020044
 800339c:	40020058 	.word	0x40020058
 80033a0:	4002006c 	.word	0x4002006c
 80033a4:	40020000 	.word	0x40020000

080033a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f202 	lsl.w	r2, r1, r2
 80033c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d108      	bne.n	80033e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033e6:	e007      	b.n	80033f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
	...

08003404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003404:	b480      	push	{r7}
 8003406:	b08b      	sub	sp, #44	; 0x2c
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003416:	e169      	b.n	80036ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003418:	2201      	movs	r2, #1
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	429a      	cmp	r2, r3
 8003432:	f040 8158 	bne.w	80036e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4a9a      	ldr	r2, [pc, #616]	; (80036a4 <HAL_GPIO_Init+0x2a0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d05e      	beq.n	80034fe <HAL_GPIO_Init+0xfa>
 8003440:	4a98      	ldr	r2, [pc, #608]	; (80036a4 <HAL_GPIO_Init+0x2a0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d875      	bhi.n	8003532 <HAL_GPIO_Init+0x12e>
 8003446:	4a98      	ldr	r2, [pc, #608]	; (80036a8 <HAL_GPIO_Init+0x2a4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d058      	beq.n	80034fe <HAL_GPIO_Init+0xfa>
 800344c:	4a96      	ldr	r2, [pc, #600]	; (80036a8 <HAL_GPIO_Init+0x2a4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d86f      	bhi.n	8003532 <HAL_GPIO_Init+0x12e>
 8003452:	4a96      	ldr	r2, [pc, #600]	; (80036ac <HAL_GPIO_Init+0x2a8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d052      	beq.n	80034fe <HAL_GPIO_Init+0xfa>
 8003458:	4a94      	ldr	r2, [pc, #592]	; (80036ac <HAL_GPIO_Init+0x2a8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d869      	bhi.n	8003532 <HAL_GPIO_Init+0x12e>
 800345e:	4a94      	ldr	r2, [pc, #592]	; (80036b0 <HAL_GPIO_Init+0x2ac>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04c      	beq.n	80034fe <HAL_GPIO_Init+0xfa>
 8003464:	4a92      	ldr	r2, [pc, #584]	; (80036b0 <HAL_GPIO_Init+0x2ac>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d863      	bhi.n	8003532 <HAL_GPIO_Init+0x12e>
 800346a:	4a92      	ldr	r2, [pc, #584]	; (80036b4 <HAL_GPIO_Init+0x2b0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d046      	beq.n	80034fe <HAL_GPIO_Init+0xfa>
 8003470:	4a90      	ldr	r2, [pc, #576]	; (80036b4 <HAL_GPIO_Init+0x2b0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d85d      	bhi.n	8003532 <HAL_GPIO_Init+0x12e>
 8003476:	2b12      	cmp	r3, #18
 8003478:	d82a      	bhi.n	80034d0 <HAL_GPIO_Init+0xcc>
 800347a:	2b12      	cmp	r3, #18
 800347c:	d859      	bhi.n	8003532 <HAL_GPIO_Init+0x12e>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <HAL_GPIO_Init+0x80>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034ff 	.word	0x080034ff
 8003488:	080034d9 	.word	0x080034d9
 800348c:	080034eb 	.word	0x080034eb
 8003490:	0800352d 	.word	0x0800352d
 8003494:	08003533 	.word	0x08003533
 8003498:	08003533 	.word	0x08003533
 800349c:	08003533 	.word	0x08003533
 80034a0:	08003533 	.word	0x08003533
 80034a4:	08003533 	.word	0x08003533
 80034a8:	08003533 	.word	0x08003533
 80034ac:	08003533 	.word	0x08003533
 80034b0:	08003533 	.word	0x08003533
 80034b4:	08003533 	.word	0x08003533
 80034b8:	08003533 	.word	0x08003533
 80034bc:	08003533 	.word	0x08003533
 80034c0:	08003533 	.word	0x08003533
 80034c4:	08003533 	.word	0x08003533
 80034c8:	080034e1 	.word	0x080034e1
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	4a79      	ldr	r2, [pc, #484]	; (80036b8 <HAL_GPIO_Init+0x2b4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034d6:	e02c      	b.n	8003532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	623b      	str	r3, [r7, #32]
          break;
 80034de:	e029      	b.n	8003534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	3304      	adds	r3, #4
 80034e6:	623b      	str	r3, [r7, #32]
          break;
 80034e8:	e024      	b.n	8003534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	3308      	adds	r3, #8
 80034f0:	623b      	str	r3, [r7, #32]
          break;
 80034f2:	e01f      	b.n	8003534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	330c      	adds	r3, #12
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e01a      	b.n	8003534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003506:	2304      	movs	r3, #4
 8003508:	623b      	str	r3, [r7, #32]
          break;
 800350a:	e013      	b.n	8003534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003514:	2308      	movs	r3, #8
 8003516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	611a      	str	r2, [r3, #16]
          break;
 800351e:	e009      	b.n	8003534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003520:	2308      	movs	r3, #8
 8003522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	615a      	str	r2, [r3, #20]
          break;
 800352a:	e003      	b.n	8003534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800352c:	2300      	movs	r3, #0
 800352e:	623b      	str	r3, [r7, #32]
          break;
 8003530:	e000      	b.n	8003534 <HAL_GPIO_Init+0x130>
          break;
 8003532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	d801      	bhi.n	800353e <HAL_GPIO_Init+0x13a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	e001      	b.n	8003542 <HAL_GPIO_Init+0x13e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2bff      	cmp	r3, #255	; 0xff
 8003548:	d802      	bhi.n	8003550 <HAL_GPIO_Init+0x14c>
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	e002      	b.n	8003556 <HAL_GPIO_Init+0x152>
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	3b08      	subs	r3, #8
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	210f      	movs	r1, #15
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	6a39      	ldr	r1, [r7, #32]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	431a      	orrs	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80b1 	beq.w	80036e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003584:	4b4d      	ldr	r3, [pc, #308]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6193      	str	r3, [r2, #24]
 8003590:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800359c:	4a48      	ldr	r2, [pc, #288]	; (80036c0 <HAL_GPIO_Init+0x2bc>)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	3302      	adds	r3, #2
 80035a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	220f      	movs	r2, #15
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <HAL_GPIO_Init+0x2c0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_GPIO_Init+0x1ec>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <HAL_GPIO_Init+0x2c4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00d      	beq.n	80035ec <HAL_GPIO_Init+0x1e8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3e      	ldr	r2, [pc, #248]	; (80036cc <HAL_GPIO_Init+0x2c8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <HAL_GPIO_Init+0x1e4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_GPIO_Init+0x2cc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_GPIO_Init+0x1e0>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e006      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035e4:	2304      	movs	r3, #4
 80035e6:	e004      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e002      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035f0:	2300      	movs	r3, #0
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	f002 0203 	and.w	r2, r2, #3
 80035f8:	0092      	lsls	r2, r2, #2
 80035fa:	4093      	lsls	r3, r2
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003602:	492f      	ldr	r1, [pc, #188]	; (80036c0 <HAL_GPIO_Init+0x2bc>)
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	492c      	ldr	r1, [pc, #176]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	43db      	mvns	r3, r3
 8003632:	4928      	ldr	r1, [pc, #160]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003634:	4013      	ands	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	43db      	mvns	r3, r3
 800365a:	491e      	ldr	r1, [pc, #120]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800365c:	4013      	ands	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4918      	ldr	r1, [pc, #96]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	4914      	ldr	r1, [pc, #80]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003684:	4013      	ands	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d021      	beq.n	80036d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
 80036a0:	e021      	b.n	80036e6 <HAL_GPIO_Init+0x2e2>
 80036a2:	bf00      	nop
 80036a4:	10320000 	.word	0x10320000
 80036a8:	10310000 	.word	0x10310000
 80036ac:	10220000 	.word	0x10220000
 80036b0:	10210000 	.word	0x10210000
 80036b4:	10120000 	.word	0x10120000
 80036b8:	10110000 	.word	0x10110000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40010800 	.word	0x40010800
 80036c8:	40010c00 	.word	0x40010c00
 80036cc:	40011000 	.word	0x40011000
 80036d0:	40011400 	.word	0x40011400
 80036d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_GPIO_Init+0x304>)
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	43db      	mvns	r3, r3
 80036e0:	4909      	ldr	r1, [pc, #36]	; (8003708 <HAL_GPIO_Init+0x304>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	3301      	adds	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f47f ae8e 	bne.w	8003418 <HAL_GPIO_Init+0x14>
  }
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	372c      	adds	r7, #44	; 0x2c
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	40010400 	.word	0x40010400

0800370c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e001      	b.n	800372e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	807b      	strh	r3, [r7, #2]
 8003746:	4613      	mov	r3, r2
 8003748:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800374a:	787b      	ldrb	r3, [r7, #1]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003750:	887a      	ldrh	r2, [r7, #2]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003756:	e003      	b.n	8003760 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	041a      	lsls	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	611a      	str	r2, [r3, #16]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	041a      	lsls	r2, r3, #16
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43d9      	mvns	r1, r3
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	400b      	ands	r3, r1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e12b      	b.n	8003a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fe fcbe 	bl	8002144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003800:	f002 f9aa 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8003804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a81      	ldr	r2, [pc, #516]	; (8003a10 <HAL_I2C_Init+0x274>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d807      	bhi.n	8003820 <HAL_I2C_Init+0x84>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a80      	ldr	r2, [pc, #512]	; (8003a14 <HAL_I2C_Init+0x278>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e006      	b.n	800382e <HAL_I2C_Init+0x92>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a7d      	ldr	r2, [pc, #500]	; (8003a18 <HAL_I2C_Init+0x27c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	bf94      	ite	ls
 8003828:	2301      	movls	r3, #1
 800382a:	2300      	movhi	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0e7      	b.n	8003a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a78      	ldr	r2, [pc, #480]	; (8003a1c <HAL_I2C_Init+0x280>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0c9b      	lsrs	r3, r3, #18
 8003840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_I2C_Init+0x274>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d802      	bhi.n	8003870 <HAL_I2C_Init+0xd4>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	e009      	b.n	8003884 <HAL_I2C_Init+0xe8>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <HAL_I2C_Init+0x284>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	3301      	adds	r3, #1
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	495c      	ldr	r1, [pc, #368]	; (8003a10 <HAL_I2C_Init+0x274>)
 80038a0:	428b      	cmp	r3, r1
 80038a2:	d819      	bhi.n	80038d8 <HAL_I2C_Init+0x13c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e59      	subs	r1, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038b8:	400b      	ands	r3, r1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_I2C_Init+0x138>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1e59      	subs	r1, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d2:	e051      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 80038d4:	2304      	movs	r3, #4
 80038d6:	e04f      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d111      	bne.n	8003904 <HAL_I2C_Init+0x168>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e012      	b.n	800392a <HAL_I2C_Init+0x18e>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	0099      	lsls	r1, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	fbb0 f3f3 	udiv	r3, r0, r3
 800391a:	3301      	adds	r3, #1
 800391c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Init+0x196>
 800392e:	2301      	movs	r3, #1
 8003930:	e022      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10e      	bne.n	8003958 <HAL_I2C_Init+0x1bc>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1e58      	subs	r0, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	440b      	add	r3, r1
 8003948:	fbb0 f3f3 	udiv	r3, r0, r3
 800394c:	3301      	adds	r3, #1
 800394e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003956:	e00f      	b.n	8003978 <HAL_I2C_Init+0x1dc>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	0099      	lsls	r1, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	6809      	ldr	r1, [r1, #0]
 800397c:	4313      	orrs	r3, r2
 800397e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6911      	ldr	r1, [r2, #16]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68d2      	ldr	r2, [r2, #12]
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	000186a0 	.word	0x000186a0
 8003a14:	001e847f 	.word	0x001e847f
 8003a18:	003d08ff 	.word	0x003d08ff
 8003a1c:	431bde83 	.word	0x431bde83
 8003a20:	10624dd3 	.word	0x10624dd3

08003a24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af06      	add	r7, sp, #24
 8003a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0fd      	b.n	8003c32 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f007 fdce 	bl	800b5ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2203      	movs	r2, #3
 8003a54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 fde3 	bl	8007628 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	687e      	ldr	r6, [r7, #4]
 8003a6a:	466d      	mov	r5, sp
 8003a6c:	f106 0410 	add.w	r4, r6, #16
 8003a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	1d33      	adds	r3, r6, #4
 8003a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	f003 fdad 	bl	80075dc <USB_CoreInit>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0ce      	b.n	8003c32 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fdde 	bl	800765c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	e04c      	b.n	8003b40 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	440b      	add	r3, r1
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	b298      	uxth	r0, r3
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3336      	adds	r3, #54	; 0x36
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	440b      	add	r3, r1
 8003af8:	3303      	adds	r3, #3
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3338      	adds	r3, #56	; 0x38
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	333c      	adds	r3, #60	; 0x3c
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	3340      	adds	r3, #64	; 0x40
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3ad      	bcc.n	8003aa6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e044      	b.n	8003bda <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3b5      	bcc.n	8003b50 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	687e      	ldr	r6, [r7, #4]
 8003bec:	466d      	mov	r5, sp
 8003bee:	f106 0410 	add.w	r4, r6, #16
 8003bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	602b      	str	r3, [r5, #0]
 8003bfa:	1d33      	adds	r3, r6, #4
 8003bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bfe:	6838      	ldr	r0, [r7, #0]
 8003c00:	f003 fd38 	bl	8007674 <USB_DevInit>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00d      	b.n	8003c32 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f005 fea9 	bl	8009982 <USB_DevDisconnect>

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_PCD_Start+0x16>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e016      	b.n	8003c7e <HAL_PCD_Start+0x44>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 fccd 	bl	80075fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c62:	2101      	movs	r1, #1
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f007 ff34 	bl	800bad2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f005 fe7d 	bl	800996e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b088      	sub	sp, #32
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f005 fe7f 	bl	8009996 <USB_ReadInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	d102      	bne.n	8003caa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fb61 	bl	800436c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f005 fe71 	bl	8009996 <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d112      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f007 fd02 	bl	800b6e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f925 	bl	8003f30 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f005 fe53 	bl	8009996 <USB_ReadInterrupts>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfa:	d10b      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f005 fe3c 	bl	8009996 <USB_ReadInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d28:	d10b      	bne.n	8003d42 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 fe25 	bl	8009996 <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d126      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0204 	bic.w	r2, r2, #4
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0208 	bic.w	r2, r2, #8
 8003d82:	b292      	uxth	r2, r2
 8003d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f007 fce3 	bl	800b754 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003da0:	b292      	uxth	r2, r2
 8003da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f005 fdf3 	bl	8009996 <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	f040 8084 	bne.w	8003ec6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e011      	b.n	8003de8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	441a      	add	r2, r3
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f107 0120 	add.w	r1, r7, #32
 8003ddc:	440b      	add	r3, r1
 8003dde:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
 8003de4:	3301      	adds	r3, #1
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	2b07      	cmp	r3, #7
 8003dec:	d9ea      	bls.n	8003dc4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	b292      	uxth	r2, r2
 8003e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003e1e:	bf00      	nop
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f6      	beq.n	8003e20 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e44:	b292      	uxth	r2, r2
 8003e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e010      	b.n	8003e72 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003e50:	7ffb      	ldrb	r3, [r7, #31]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4611      	mov	r1, r2
 8003e58:	7ffa      	ldrb	r2, [r7, #31]
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	440a      	add	r2, r1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	f107 0120 	add.w	r1, r7, #32
 8003e64:	440b      	add	r3, r1
 8003e66:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003e6a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	7ffb      	ldrb	r3, [r7, #31]
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	d9eb      	bls.n	8003e50 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0204 	orr.w	r2, r2, #4
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f007 fc2d 	bl	800b720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 fd63 	bl	8009996 <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eda:	d10e      	bne.n	8003efa <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f007 fbe6 	bl	800b6c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fd49 	bl	8009996 <USB_ReadInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0e:	d10b      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f22:	b292      	uxth	r2, r2
 8003f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_PCD_SetAddress+0x1a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e013      	b.n	8003f72 <HAL_PCD_SetAddress+0x42>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 fcf0 	bl	8009948 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	461a      	mov	r2, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	803b      	strh	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da0e      	bge.n	8003fbe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	705a      	strb	r2, [r3, #1]
 8003fbc:	e00e      	b.n	8003fdc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 0207 	and.w	r2, r3, #7
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fe8:	883a      	ldrh	r2, [r7, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	78ba      	ldrb	r2, [r7, #2]
 8003ff2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004006:	78bb      	ldrb	r3, [r7, #2]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d102      	bne.n	8004012 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_PCD_EP_Open+0xa6>
 800401c:	2302      	movs	r3, #2
 800401e:	e00e      	b.n	800403e <HAL_PCD_EP_Open+0xc4>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	4618      	mov	r0, r3
 8004030:	f003 fb40 	bl	80076b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800403c:	7afb      	ldrb	r3, [r7, #11]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0e      	bge.n	8004078 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	705a      	strb	r2, [r3, #1]
 8004076:	e00e      	b.n	8004096 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	f003 0207 	and.w	r2, r3, #7
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_PCD_EP_Close+0x6a>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e00e      	b.n	80040ce <HAL_PCD_EP_Close+0x88>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fe62 	bl	8007d88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	460b      	mov	r3, r1
 80040e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	7afb      	ldrb	r3, [r7, #11]
 80040e8:	f003 0207 	and.w	r2, r3, #7
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	b2da      	uxtb	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	4618      	mov	r0, r3
 8004134:	f004 f814 	bl	8008160 <USB_EPStartXfer>
 8004138:	e005      	b.n	8004146 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6979      	ldr	r1, [r7, #20]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 f80d 	bl	8008160 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 0207 	and.w	r2, r3, #7
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	460b      	mov	r3, r1
 800418c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418e:	7afb      	ldrb	r3, [r7, #11]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2201      	movs	r2, #1
 80041c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 ffba 	bl	8008160 <USB_EPStartXfer>
 80041ec:	e005      	b.n	80041fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6979      	ldr	r1, [r7, #20]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 ffb3 	bl	8008160 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 0207 	and.w	r2, r3, #7
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d901      	bls.n	8004222 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e04c      	b.n	80042bc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	da0e      	bge.n	8004248 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	705a      	strb	r2, [r3, #1]
 8004246:	e00c      	b.n	8004262 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_PCD_EP_SetStall+0x7e>
 800427e:	2302      	movs	r3, #2
 8004280:	e01c      	b.n	80042bc <HAL_PCD_EP_SetStall+0xb8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	4618      	mov	r0, r3
 8004292:	f005 fa5c 	bl	800974e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f005 fb81 	bl	80099b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d901      	bls.n	80042e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e040      	b.n	8004364 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	da0e      	bge.n	8004308 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00e      	b.n	8004326 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 0207 	and.w	r2, r3, #7
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_PCD_EP_ClrStall+0x82>
 8004342:	2302      	movs	r3, #2
 8004344:	e00e      	b.n	8004364 <HAL_PCD_EP_ClrStall+0xa0>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	4618      	mov	r0, r3
 8004356:	f005 fa4a 	bl	80097ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004374:	e2ec      	b.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800437e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004380:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800438c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 8161 	bne.w	8004658 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004396:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d152      	bne.n	8004446 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	81fb      	strh	r3, [r7, #14]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	89fb      	ldrh	r3, [r7, #14]
 80043b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3328      	adds	r3, #40	; 0x28
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	3302      	adds	r3, #2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	441a      	add	r2, r3
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004404:	2100      	movs	r1, #0
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f007 f943 	bl	800b692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 829b 	beq.w	8004950 <PCD_EP_ISR_Handler+0x5e4>
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 8296 	bne.w	8004950 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004430:	b2da      	uxtb	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b292      	uxth	r2, r2
 8004438:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004444:	e284      	b.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004456:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445c:	2b00      	cmp	r3, #0
 800445e:	d034      	beq.n	80044ca <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004468:	b29b      	uxth	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	3306      	adds	r3, #6
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f005 fad8 	bl	8009a54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044b0:	4013      	ands	r3, r2
 80044b2:	823b      	strh	r3, [r7, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	8a3a      	ldrh	r2, [r7, #16]
 80044ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044be:	b292      	uxth	r2, r2
 80044c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f007 f8b8 	bl	800b638 <HAL_PCD_SetupStageCallback>
 80044c8:	e242      	b.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f280 823e 	bge.w	8004950 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044e0:	4013      	ands	r3, r2
 80044e2:	83bb      	strh	r3, [r7, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	8bba      	ldrh	r2, [r7, #28]
 80044ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044ee:	b292      	uxth	r2, r2
 80044f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	3306      	adds	r3, #6
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d019      	beq.n	800455a <PCD_EP_ISR_Handler+0x1ee>
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	6959      	ldr	r1, [r3, #20]
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800453e:	b29b      	uxth	r3, r3
 8004540:	f005 fa88 	bl	8009a54 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	441a      	add	r2, r3
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004552:	2100      	movs	r1, #0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f007 f881 	bl	800b65c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 81f2 	bne.w	8004950 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4413      	add	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d112      	bne.n	80045ba <PCD_EP_ISR_Handler+0x24e>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800459e:	b29a      	uxth	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	e02f      	b.n	800461a <PCD_EP_ISR_Handler+0x2ae>
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b3e      	cmp	r3, #62	; 0x3e
 80045c0:	d813      	bhi.n	80045ea <PCD_EP_ISR_Handler+0x27e>
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <PCD_EP_ISR_Handler+0x270>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	3301      	adds	r3, #1
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	b29b      	uxth	r3, r3
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	e017      	b.n	800461a <PCD_EP_ISR_Handler+0x2ae>
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d102      	bne.n	8004604 <PCD_EP_ISR_Handler+0x298>
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	3b01      	subs	r3, #1
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	b29b      	uxth	r3, r3
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	b29b      	uxth	r3, r3
 800460c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004614:	b29a      	uxth	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	827b      	strh	r3, [r7, #18]
 800462c:	8a7b      	ldrh	r3, [r7, #18]
 800462e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004632:	827b      	strh	r3, [r7, #18]
 8004634:	8a7b      	ldrh	r3, [r7, #18]
 8004636:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800463a:	827b      	strh	r3, [r7, #18]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	8a7b      	ldrh	r3, [r7, #18]
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]
 8004656:	e17b      	b.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800466a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800466e:	2b00      	cmp	r3, #0
 8004670:	f280 80ea 	bge.w	8004848 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29a      	uxth	r2, r3
 8004686:	f640 738f 	movw	r3, #3983	; 0xf8f
 800468a:	4013      	ands	r3, r2
 800468c:	853b      	strh	r3, [r7, #40]	; 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800469e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a2:	b292      	uxth	r2, r2
 80046a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	7b1b      	ldrb	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d122      	bne.n	800470a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	3306      	adds	r3, #6
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80046ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8087 	beq.w	8004804 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	6959      	ldr	r1, [r3, #20]
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	88da      	ldrh	r2, [r3, #6]
 8004702:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004704:	f005 f9a6 	bl	8009a54 <USB_ReadPMA>
 8004708:	e07c      	b.n	8004804 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	78db      	ldrb	r3, [r3, #3]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d108      	bne.n	8004724 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004714:	461a      	mov	r2, r3
 8004716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f927 	bl	800496c <HAL_PCD_EP_DB_Receive>
 800471e:	4603      	mov	r3, r0
 8004720:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004722:	e06f      	b.n	8004804 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d021      	beq.n	80047c2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	3302      	adds	r3, #2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80047a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02a      	beq.n	8004804 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	6959      	ldr	r1, [r3, #20]
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	891a      	ldrh	r2, [r3, #8]
 80047ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047bc:	f005 f94a 	bl	8009a54 <USB_ReadPMA>
 80047c0:	e020      	b.n	8004804 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	3306      	adds	r3, #6
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80047ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	6959      	ldr	r1, [r3, #20]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	895a      	ldrh	r2, [r3, #10]
 80047fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004800:	f005 f928 	bl	8009a54 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800480a:	441a      	add	r2, r3
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004816:	441a      	add	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <PCD_EP_ISR_Handler+0x4c2>
 8004824:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d206      	bcs.n	800483c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f006 ff11 	bl	800b65c <HAL_PCD_DataOutStageCallback>
 800483a:	e005      	b.n	8004848 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004842:	4618      	mov	r0, r3
 8004844:	f003 fc8c 	bl	8008160 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004848:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d07e      	beq.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	843b      	strh	r3, [r7, #32]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8c3b      	ldrh	r3, [r7, #32]
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d00c      	beq.n	80048c0 <PCD_EP_ISR_Handler+0x554>
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d146      	bne.n	8004944 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80048b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d141      	bne.n	8004944 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	3302      	adds	r3, #2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	8bfb      	ldrh	r3, [r7, #30]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d906      	bls.n	8004902 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	8bfb      	ldrh	r3, [r7, #30]
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	619a      	str	r2, [r3, #24]
 8004900:	e002      	b.n	8004908 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f006 febb 	bl	800b692 <HAL_PCD_DataInStageCallback>
 800491c:	e018      	b.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	8bfb      	ldrh	r3, [r7, #30]
 8004924:	441a      	add	r2, r3
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	8bfb      	ldrh	r3, [r7, #30]
 8004930:	441a      	add	r2, r3
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800493c:	4618      	mov	r0, r3
 800493e:	f003 fc0f 	bl	8008160 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004942:	e005      	b.n	8004950 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004946:	461a      	mov	r2, r3
 8004948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f91b 	bl	8004b86 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004958:	b29b      	uxth	r3, r3
 800495a:	b21b      	sxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f6ff ad0a 	blt.w	8004376 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3738      	adds	r7, #56	; 0x38
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d07e      	beq.n	8004a82 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498c:	b29b      	uxth	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	3302      	adds	r3, #2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d306      	bcc.n	80049c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	8b7b      	ldrh	r3, [r7, #26]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	619a      	str	r2, [r3, #24]
 80049c4:	e002      	b.n	80049cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d123      	bne.n	8004a1c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	833b      	strh	r3, [r7, #24]
 80049f0:	8b3b      	ldrh	r3, [r7, #24]
 80049f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049f6:	833b      	strh	r3, [r7, #24]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	8b3b      	ldrh	r3, [r7, #24]
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01f      	beq.n	8004a66 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	82fb      	strh	r3, [r7, #22]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	8afb      	ldrh	r3, [r7, #22]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a66:	8b7b      	ldrh	r3, [r7, #26]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8087 	beq.w	8004b7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6959      	ldr	r1, [r3, #20]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	891a      	ldrh	r2, [r3, #8]
 8004a7a:	8b7b      	ldrh	r3, [r7, #26]
 8004a7c:	f004 ffea 	bl	8009a54 <USB_ReadPMA>
 8004a80:	e07c      	b.n	8004b7c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	3306      	adds	r3, #6
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aaa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	8b7b      	ldrh	r3, [r7, #26]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d306      	bcc.n	8004ac4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	8b7b      	ldrh	r3, [r7, #26]
 8004abc:	1ad2      	subs	r2, r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	619a      	str	r2, [r3, #24]
 8004ac2:	e002      	b.n	8004aca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d123      	bne.n	8004b1a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	83fb      	strh	r3, [r7, #30]
 8004aee:	8bfb      	ldrh	r3, [r7, #30]
 8004af0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004af4:	83fb      	strh	r3, [r7, #30]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	8bfb      	ldrh	r3, [r7, #30]
 8004b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11f      	bne.n	8004b64 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	83bb      	strh	r3, [r7, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	8bbb      	ldrh	r3, [r7, #28]
 8004b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b64:	8b7b      	ldrh	r3, [r7, #26]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6959      	ldr	r1, [r3, #20]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	895a      	ldrh	r2, [r3, #10]
 8004b76:	8b7b      	ldrh	r3, [r7, #26]
 8004b78:	f004 ff6c 	bl	8009a54 <USB_ReadPMA>
    }
  }

  return count;
 8004b7c:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b0a2      	sub	sp, #136	; 0x88
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 81c7 	beq.w	8004f2e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d907      	bls.n	8004be8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004be0:	1ad2      	subs	r2, r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	619a      	str	r2, [r3, #24]
 8004be6:	e002      	b.n	8004bee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 80b9 	bne.w	8004d6a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d126      	bne.n	8004c4e <HAL_PCD_EP_DB_Transmit+0xc8>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	4413      	add	r3, r2
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	011a      	lsls	r2, r3, #4
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	4413      	add	r3, r2
 8004c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	801a      	strh	r2, [r3, #0]
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	801a      	strh	r2, [r3, #0]
 8004c4c:	e01a      	b.n	8004c84 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d116      	bne.n	8004c84 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	4413      	add	r3, r2
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	011a      	lsls	r2, r3, #4
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	4413      	add	r3, r2
 8004c78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2200      	movs	r2, #0
 8004c82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	623b      	str	r3, [r7, #32]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d126      	bne.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	011a      	lsls	r2, r3, #4
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e017      	b.n	8004d10 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d113      	bne.n	8004d10 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	011a      	lsls	r2, r3, #4
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	4619      	mov	r1, r3
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f006 fcbb 	bl	800b692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 82d4 	beq.w	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	827b      	strh	r3, [r7, #18]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	8a7b      	ldrh	r3, [r7, #18]
 8004d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]
 8004d68:	e2b2      	b.n	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d021      	beq.n	8004db8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	f040 8286 	bne.w	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dcc:	441a      	add	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dda:	441a      	add	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d309      	bcc.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df8:	1ad2      	subs	r2, r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	621a      	str	r2, [r3, #32]
 8004dfe:	e015      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004e08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e16:	e009      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d155      	bne.n	8004ee0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	4413      	add	r3, r2
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	011a      	lsls	r2, r3, #4
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	4413      	add	r3, r2
 8004e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d112      	bne.n	8004e88 <HAL_PCD_EP_DB_Transmit+0x302>
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e047      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x392>
 8004e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e8c:	d811      	bhi.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	029b      	lsls	r3, r3, #10
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e032      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x392>
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <HAL_PCD_EP_DB_Transmit+0x342>
 8004ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e01b      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x392>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d117      	bne.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x392>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efc:	4413      	add	r3, r2
 8004efe:	643b      	str	r3, [r7, #64]	; 0x40
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	011a      	lsls	r2, r3, #4
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	4413      	add	r3, r2
 8004f0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6959      	ldr	r1, [r3, #20]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	891a      	ldrh	r2, [r3, #8]
 8004f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f004 fd4f 	bl	80099ca <USB_WritePMA>
 8004f2c:	e1d0      	b.n	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	3306      	adds	r3, #6
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d307      	bcc.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	619a      	str	r2, [r3, #24]
 8004f74:	e002      	b.n	8004f7c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 80c4 	bne.w	800510e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d126      	bne.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x456>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	4413      	add	r3, r2
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	011a      	lsls	r2, r3, #4
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	4413      	add	r3, r2
 8004fb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	e01a      	b.n	8005012 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d116      	bne.n	8005012 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	677b      	str	r3, [r7, #116]	; 0x74
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff8:	4413      	add	r3, r2
 8004ffa:	677b      	str	r3, [r7, #116]	; 0x74
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	011a      	lsls	r2, r3, #4
 8005002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005004:	4413      	add	r3, r2
 8005006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800500a:	673b      	str	r3, [r7, #112]	; 0x70
 800500c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800500e:	2200      	movs	r2, #0
 8005010:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	67bb      	str	r3, [r7, #120]	; 0x78
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d12f      	bne.n	8005080 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005030:	b29b      	uxth	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005038:	4413      	add	r3, r2
 800503a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	011a      	lsls	r2, r3, #4
 8005044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005048:	4413      	add	r3, r2
 800504a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800504e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800505e:	b29a      	uxth	r2, r3
 8005060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005064:	801a      	strh	r2, [r3, #0]
 8005066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29a      	uxth	r2, r3
 8005078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e017      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d113      	bne.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005090:	b29b      	uxth	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005096:	4413      	add	r3, r2
 8005098:	67bb      	str	r3, [r7, #120]	; 0x78
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	011a      	lsls	r2, r3, #4
 80050a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a2:	4413      	add	r3, r2
 80050a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ac:	2200      	movs	r2, #0
 80050ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f006 faeb 	bl	800b692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 8104 	bne.w	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
 800510c:	e0e0      	b.n	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d121      	bne.n	800515c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005162:	2b01      	cmp	r3, #1
 8005164:	f040 80b4 	bne.w	80052d0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005170:	441a      	add	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800517e:	441a      	add	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	429a      	cmp	r2, r3
 800518e:	d309      	bcc.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	621a      	str	r2, [r3, #32]
 80051a2:	e015      	b.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80051ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051ba:	e009      	b.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	667b      	str	r3, [r7, #100]	; 0x64
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d155      	bne.n	800528a <HAL_PCD_EP_DB_Transmit+0x704>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051f2:	4413      	add	r3, r2
 80051f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	011a      	lsls	r2, r3, #4
 80051fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fe:	4413      	add	r3, r2
 8005200:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005204:	65bb      	str	r3, [r7, #88]	; 0x58
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d112      	bne.n	8005232 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800520c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005216:	b29a      	uxth	r2, r3
 8005218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29a      	uxth	r2, r3
 800522c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e044      	b.n	80052bc <HAL_PCD_EP_DB_Transmit+0x736>
 8005232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005234:	2b3e      	cmp	r3, #62	; 0x3e
 8005236:	d811      	bhi.n	800525c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	657b      	str	r3, [r7, #84]	; 0x54
 800523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524a:	3301      	adds	r3, #1
 800524c:	657b      	str	r3, [r7, #84]	; 0x54
 800524e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005250:	b29b      	uxth	r3, r3
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	b29a      	uxth	r2, r3
 8005256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e02f      	b.n	80052bc <HAL_PCD_EP_DB_Transmit+0x736>
 800525c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	657b      	str	r3, [r7, #84]	; 0x54
 8005262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800526c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526e:	3b01      	subs	r3, #1
 8005270:	657b      	str	r3, [r7, #84]	; 0x54
 8005272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005274:	b29b      	uxth	r3, r3
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	b29b      	uxth	r3, r3
 800527a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005282:	b29a      	uxth	r2, r3
 8005284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	e018      	b.n	80052bc <HAL_PCD_EP_DB_Transmit+0x736>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d114      	bne.n	80052bc <HAL_PCD_EP_DB_Transmit+0x736>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a0:	4413      	add	r3, r2
 80052a2:	667b      	str	r3, [r7, #100]	; 0x64
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052b2:	663b      	str	r3, [r7, #96]	; 0x60
 80052b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6959      	ldr	r1, [r3, #20]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	895a      	ldrh	r2, [r3, #10]
 80052c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f004 fb7d 	bl	80099ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	823b      	strh	r3, [r7, #16]
 80052ec:	8a3b      	ldrh	r3, [r7, #16]
 80052ee:	f083 0310 	eor.w	r3, r3, #16
 80052f2:	823b      	strh	r3, [r7, #16]
 80052f4:	8a3b      	ldrh	r3, [r7, #16]
 80052f6:	f083 0320 	eor.w	r3, r3, #32
 80052fa:	823b      	strh	r3, [r7, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	8a3b      	ldrh	r3, [r7, #16]
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3788      	adds	r7, #136	; 0x88
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	817b      	strh	r3, [r7, #10]
 8005338:	4613      	mov	r3, r2
 800533a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005348:	897b      	ldrh	r3, [r7, #10]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e009      	b.n	8005374 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005360:	897a      	ldrh	r2, [r7, #10]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005374:	893b      	ldrh	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	b29a      	uxth	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	80da      	strh	r2, [r3, #6]
 8005388:	e00b      	b.n	80053a2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2201      	movs	r2, #1
 800538e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	b29a      	uxth	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	b29a      	uxth	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e26c      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8087 	beq.w	80054de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053d0:	4b92      	ldr	r3, [pc, #584]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d00c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053dc:	4b8f      	ldr	r3, [pc, #572]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d112      	bne.n	800540e <HAL_RCC_OscConfig+0x5e>
 80053e8:	4b8c      	ldr	r3, [pc, #560]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d10b      	bne.n	800540e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f6:	4b89      	ldr	r3, [pc, #548]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d06c      	beq.n	80054dc <HAL_RCC_OscConfig+0x12c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d168      	bne.n	80054dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e246      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005416:	d106      	bne.n	8005426 <HAL_RCC_OscConfig+0x76>
 8005418:	4b80      	ldr	r3, [pc, #512]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7f      	ldr	r2, [pc, #508]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e02e      	b.n	8005484 <HAL_RCC_OscConfig+0xd4>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x98>
 800542e:	4b7b      	ldr	r3, [pc, #492]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a7a      	ldr	r2, [pc, #488]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b78      	ldr	r3, [pc, #480]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a77      	ldr	r2, [pc, #476]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e01d      	b.n	8005484 <HAL_RCC_OscConfig+0xd4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005450:	d10c      	bne.n	800546c <HAL_RCC_OscConfig+0xbc>
 8005452:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a71      	ldr	r2, [pc, #452]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4b6f      	ldr	r3, [pc, #444]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6e      	ldr	r2, [pc, #440]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e00b      	b.n	8005484 <HAL_RCC_OscConfig+0xd4>
 800546c:	4b6b      	ldr	r3, [pc, #428]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a6a      	ldr	r2, [pc, #424]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4b68      	ldr	r3, [pc, #416]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a67      	ldr	r2, [pc, #412]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 800547e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fd f842 	bl	8002514 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005494:	f7fd f83e 	bl	8002514 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e1fa      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	4b5d      	ldr	r3, [pc, #372]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0xe4>
 80054b2:	e014      	b.n	80054de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fd f82e 	bl	8002514 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fd f82a 	bl	8002514 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1e6      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ce:	4b53      	ldr	r3, [pc, #332]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x10c>
 80054da:	e000      	b.n	80054de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d063      	beq.n	80055b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ea:	4b4c      	ldr	r3, [pc, #304]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054f6:	4b49      	ldr	r3, [pc, #292]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d11c      	bne.n	800553c <HAL_RCC_OscConfig+0x18c>
 8005502:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d116      	bne.n	800553c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550e:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_RCC_OscConfig+0x176>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d001      	beq.n	8005526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e1ba      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005526:	4b3d      	ldr	r3, [pc, #244]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4939      	ldr	r1, [pc, #228]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553a:	e03a      	b.n	80055b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005544:	4b36      	ldr	r3, [pc, #216]	; (8005620 <HAL_RCC_OscConfig+0x270>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554a:	f7fc ffe3 	bl	8002514 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005552:	f7fc ffdf 	bl	8002514 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e19b      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005564:	4b2d      	ldr	r3, [pc, #180]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4927      	ldr	r1, [pc, #156]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]
 8005584:	e015      	b.n	80055b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005586:	4b26      	ldr	r3, [pc, #152]	; (8005620 <HAL_RCC_OscConfig+0x270>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558c:	f7fc ffc2 	bl	8002514 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005594:	f7fc ffbe 	bl	8002514 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e17a      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03a      	beq.n	8005634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d019      	beq.n	80055fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c6:	4b17      	ldr	r3, [pc, #92]	; (8005624 <HAL_RCC_OscConfig+0x274>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055cc:	f7fc ffa2 	bl	8002514 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d4:	f7fc ff9e 	bl	8002514 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e15a      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <HAL_RCC_OscConfig+0x26c>)
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055f2:	2001      	movs	r0, #1
 80055f4:	f000 fad8 	bl	8005ba8 <RCC_Delay>
 80055f8:	e01c      	b.n	8005634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <HAL_RCC_OscConfig+0x274>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005600:	f7fc ff88 	bl	8002514 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005606:	e00f      	b.n	8005628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005608:	f7fc ff84 	bl	8002514 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d908      	bls.n	8005628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e140      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	42420000 	.word	0x42420000
 8005624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	4b9e      	ldr	r3, [pc, #632]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e9      	bne.n	8005608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a6 	beq.w	800578e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005646:	4b97      	ldr	r3, [pc, #604]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10d      	bne.n	800566e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005652:	4b94      	ldr	r3, [pc, #592]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4a93      	ldr	r2, [pc, #588]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565c:	61d3      	str	r3, [r2, #28]
 800565e:	4b91      	ldr	r3, [pc, #580]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566e:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCC_OscConfig+0x4f8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d118      	bne.n	80056ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567a:	4b8b      	ldr	r3, [pc, #556]	; (80058a8 <HAL_RCC_OscConfig+0x4f8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a8a      	ldr	r2, [pc, #552]	; (80058a8 <HAL_RCC_OscConfig+0x4f8>)
 8005680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005686:	f7fc ff45 	bl	8002514 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568e:	f7fc ff41 	bl	8002514 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b64      	cmp	r3, #100	; 0x64
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e0fd      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a0:	4b81      	ldr	r3, [pc, #516]	; (80058a8 <HAL_RCC_OscConfig+0x4f8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x312>
 80056b4:	4b7b      	ldr	r3, [pc, #492]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	4a7a      	ldr	r2, [pc, #488]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6213      	str	r3, [r2, #32]
 80056c0:	e02d      	b.n	800571e <HAL_RCC_OscConfig+0x36e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x334>
 80056ca:	4b76      	ldr	r3, [pc, #472]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	4a75      	ldr	r2, [pc, #468]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	6213      	str	r3, [r2, #32]
 80056d6:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	4a72      	ldr	r2, [pc, #456]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056dc:	f023 0304 	bic.w	r3, r3, #4
 80056e0:	6213      	str	r3, [r2, #32]
 80056e2:	e01c      	b.n	800571e <HAL_RCC_OscConfig+0x36e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d10c      	bne.n	8005706 <HAL_RCC_OscConfig+0x356>
 80056ec:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	4a6c      	ldr	r2, [pc, #432]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056f2:	f043 0304 	orr.w	r3, r3, #4
 80056f6:	6213      	str	r3, [r2, #32]
 80056f8:	4b6a      	ldr	r3, [pc, #424]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4a69      	ldr	r2, [pc, #420]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6213      	str	r3, [r2, #32]
 8005704:	e00b      	b.n	800571e <HAL_RCC_OscConfig+0x36e>
 8005706:	4b67      	ldr	r3, [pc, #412]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4a66      	ldr	r2, [pc, #408]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	6213      	str	r3, [r2, #32]
 8005712:	4b64      	ldr	r3, [pc, #400]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4a63      	ldr	r2, [pc, #396]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d015      	beq.n	8005752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005726:	f7fc fef5 	bl	8002514 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572c:	e00a      	b.n	8005744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572e:	f7fc fef1 	bl	8002514 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	f241 3288 	movw	r2, #5000	; 0x1388
 800573c:	4293      	cmp	r3, r2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0ab      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0ee      	beq.n	800572e <HAL_RCC_OscConfig+0x37e>
 8005750:	e014      	b.n	800577c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005752:	f7fc fedf 	bl	8002514 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fc fedb 	bl	8002514 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e095      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005770:	4b4c      	ldr	r3, [pc, #304]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ee      	bne.n	800575a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d105      	bne.n	800578e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005782:	4b48      	ldr	r3, [pc, #288]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	4a47      	ldr	r2, [pc, #284]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8081 	beq.w	800589a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005798:	4b42      	ldr	r3, [pc, #264]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d061      	beq.n	8005868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d146      	bne.n	800583a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_RCC_OscConfig+0x4fc>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fc feaf 	bl	8002514 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fc feab 	bl	8002514 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e067      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f0      	bne.n	80057ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e0:	d108      	bne.n	80057f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057e2:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	492d      	ldr	r1, [pc, #180]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a19      	ldr	r1, [r3, #32]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	430b      	orrs	r3, r1
 8005806:	4927      	ldr	r1, [pc, #156]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005808:	4313      	orrs	r3, r2
 800580a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800580c:	4b27      	ldr	r3, [pc, #156]	; (80058ac <HAL_RCC_OscConfig+0x4fc>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005812:	f7fc fe7f 	bl	8002514 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581a:	f7fc fe7b 	bl	8002514 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e037      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800582c:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x46a>
 8005838:	e02f      	b.n	800589a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <HAL_RCC_OscConfig+0x4fc>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fc fe68 	bl	8002514 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005848:	f7fc fe64 	bl	8002514 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e020      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x498>
 8005866:	e018      	b.n	800589a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e013      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_OscConfig+0x4f4>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	429a      	cmp	r2, r3
 8005886:	d106      	bne.n	8005896 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40007000 	.word	0x40007000
 80058ac:	42420060 	.word	0x42420060

080058b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0d0      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c4:	4b6a      	ldr	r3, [pc, #424]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d910      	bls.n	80058f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b67      	ldr	r3, [pc, #412]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 0207 	bic.w	r2, r3, #7
 80058da:	4965      	ldr	r1, [pc, #404]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0b8      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d020      	beq.n	8005942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800590c:	4b59      	ldr	r3, [pc, #356]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a58      	ldr	r2, [pc, #352]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005924:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a52      	ldr	r2, [pc, #328]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800592a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800592e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005930:	4b50      	ldr	r3, [pc, #320]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	494d      	ldr	r1, [pc, #308]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d040      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005956:	4b47      	ldr	r3, [pc, #284]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d115      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d107      	bne.n	800597e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596e:	4b41      	ldr	r3, [pc, #260]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e073      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597e:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e06b      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598e:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f023 0203 	bic.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	4936      	ldr	r1, [pc, #216]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a0:	f7fc fdb8 	bl	8002514 <HAL_GetTick>
 80059a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a6:	e00a      	b.n	80059be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a8:	f7fc fdb4 	bl	8002514 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e053      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059be:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 020c 	and.w	r2, r3, #12
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d1eb      	bne.n	80059a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059d0:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d210      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 0207 	bic.w	r2, r3, #7
 80059e6:	4922      	ldr	r1, [pc, #136]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e032      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4916      	ldr	r1, [pc, #88]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	490e      	ldr	r1, [pc, #56]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a3e:	f000 f821 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005a42:	4602      	mov	r2, r0
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	490a      	ldr	r1, [pc, #40]	; (8005a78 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	5ccb      	ldrb	r3, [r1, r3]
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <HAL_RCC_ClockConfig+0x1cc>)
 8005a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCC_ClockConfig+0x1d0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fc fd16 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40022000 	.word	0x40022000
 8005a74:	40021000 	.word	0x40021000
 8005a78:	0800bd98 	.word	0x0800bd98
 8005a7c:	20000000 	.word	0x20000000
 8005a80:	20000004 	.word	0x20000004

08005a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b490      	push	{r4, r7}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a8c:	1d3c      	adds	r4, r7, #4
 8005a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a94:	f240 2301 	movw	r3, #513	; 0x201
 8005a98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d002      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d003      	beq.n	8005aca <HAL_RCC_GetSysClockFreq+0x46>
 8005ac2:	e02d      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac6:	623b      	str	r3, [r7, #32]
      break;
 8005ac8:	e02d      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	0c9b      	lsrs	r3, r3, #18
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005adc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d013      	beq.n	8005b10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ae8:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	0c5b      	lsrs	r3, r3, #17
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005af6:	4413      	add	r3, r2
 8005af8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005afc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b02:	fb02 f203 	mul.w	r2, r2, r3
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	e004      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	623b      	str	r3, [r7, #32]
      break;
 8005b1e:	e002      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b22:	623b      	str	r3, [r7, #32]
      break;
 8005b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b26:	6a3b      	ldr	r3, [r7, #32]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3728      	adds	r7, #40	; 0x28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc90      	pop	{r4, r7}
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	0800bbc8 	.word	0x0800bbc8
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	007a1200 	.word	0x007a1200
 8005b40:	003d0900 	.word	0x003d0900

08005b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b48:	4b02      	ldr	r3, [pc, #8]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr
 8005b54:	20000000 	.word	0x20000000

08005b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b5c:	f7ff fff2 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	0800bda8 	.word	0x0800bda8

08005b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b84:	f7ff ffde 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	0adb      	lsrs	r3, r3, #11
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4903      	ldr	r1, [pc, #12]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	0800bda8 	.word	0x0800bda8

08005ba8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <RCC_Delay+0x34>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <RCC_Delay+0x38>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	0a5b      	lsrs	r3, r3, #9
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bc4:	bf00      	nop
  }
  while (Delay --);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	60fa      	str	r2, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f9      	bne.n	8005bc4 <RCC_Delay+0x1c>
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	20000000 	.word	0x20000000
 8005be0:	10624dd3 	.word	0x10624dd3

08005be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d07d      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c04:	4b4f      	ldr	r3, [pc, #316]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10d      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c10:	4b4c      	ldr	r3, [pc, #304]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	4a4b      	ldr	r2, [pc, #300]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	61d3      	str	r3, [r2, #28]
 8005c1c:	4b49      	ldr	r3, [pc, #292]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2c:	4b46      	ldr	r3, [pc, #280]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d118      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c38:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a42      	ldr	r2, [pc, #264]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c44:	f7fc fc66 	bl	8002514 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4a:	e008      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fc fc62 	bl	8002514 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e06d      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c6a:	4b36      	ldr	r3, [pc, #216]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d02e      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d027      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c88:	4b2e      	ldr	r3, [pc, #184]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c92:	4b2e      	ldr	r3, [pc, #184]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c98:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c9e:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d014      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cae:	f7fc fc31 	bl	8002514 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb6:	f7fc fc2d 	bl	8002514 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e036      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ccc:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ee      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4917      	ldr	r1, [pc, #92]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf0:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	490b      	ldr	r1, [pc, #44]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4904      	ldr	r1, [pc, #16]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40007000 	.word	0x40007000
 8005d4c:	42420440 	.word	0x42420440

08005d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e041      	b.n	8005de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc fa24 	bl	80021c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fc28 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e03a      	b.n	8005e7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_TIM_Base_Start_IT+0x98>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x58>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e32:	d009      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x58>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <HAL_TIM_Base_Start_IT+0x9c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x58>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d111      	bne.n	8005e6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d010      	beq.n	8005e7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	e007      	b.n	8005e7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800

08005e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e041      	b.n	8005f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f839 	bl	8005f32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f000 fb86 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <HAL_TIM_PWM_Start+0x24>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e022      	b.n	8005fae <HAL_TIM_PWM_Start+0x6a>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d109      	bne.n	8005f82 <HAL_TIM_PWM_Start+0x3e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	bf14      	ite	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	2300      	moveq	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	e015      	b.n	8005fae <HAL_TIM_PWM_Start+0x6a>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d109      	bne.n	8005f9c <HAL_TIM_PWM_Start+0x58>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	e008      	b.n	8005fae <HAL_TIM_PWM_Start+0x6a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e05e      	b.n	8006074 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0x82>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc4:	e013      	b.n	8005fee <HAL_TIM_PWM_Start+0xaa>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d104      	bne.n	8005fd6 <HAL_TIM_PWM_Start+0x92>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	e00b      	b.n	8005fee <HAL_TIM_PWM_Start+0xaa>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d104      	bne.n	8005fe6 <HAL_TIM_PWM_Start+0xa2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe4:	e003      	b.n	8005fee <HAL_TIM_PWM_Start+0xaa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fd74 	bl	8006ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_TIM_PWM_Start+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d107      	bne.n	8006016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a18      	ldr	r2, [pc, #96]	; (800607c <HAL_TIM_PWM_Start+0x138>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_TIM_PWM_Start+0xfa>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006028:	d009      	beq.n	800603e <HAL_TIM_PWM_Start+0xfa>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a14      	ldr	r2, [pc, #80]	; (8006080 <HAL_TIM_PWM_Start+0x13c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_TIM_PWM_Start+0xfa>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a12      	ldr	r2, [pc, #72]	; (8006084 <HAL_TIM_PWM_Start+0x140>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d111      	bne.n	8006062 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b06      	cmp	r3, #6
 800604e:	d010      	beq.n	8006072 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006060:	e007      	b.n	8006072 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800

08006088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0202 	mvn.w	r2, #2
 80060b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa6f 	bl	80065ae <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa62 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa71 	bl	80065c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d122      	bne.n	8006138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d11b      	bne.n	8006138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0204 	mvn.w	r2, #4
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa45 	bl	80065ae <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa38 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa47 	bl	80065c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b08      	cmp	r3, #8
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0208 	mvn.w	r2, #8
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2204      	movs	r2, #4
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa1b 	bl	80065ae <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa0e 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa1d 	bl	80065c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b10      	cmp	r3, #16
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0210 	mvn.w	r2, #16
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2208      	movs	r2, #8
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9f1 	bl	80065ae <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9e4 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f9f3 	bl	80065c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10e      	bne.n	800620c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0201 	mvn.w	r2, #1
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fa fa08 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d10e      	bne.n	8006238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d107      	bne.n	8006238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fce1 	bl	8006bfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9b7 	bl	80065d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b20      	cmp	r3, #32
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b20      	cmp	r3, #32
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0220 	mvn.w	r2, #32
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fcac 	bl	8006be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0ac      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x174>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	f200 809f 	bhi.w	8006400 <HAL_TIM_PWM_ConfigChannel+0x168>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	08006401 	.word	0x08006401
 80062d0:	08006401 	.word	0x08006401
 80062d4:	08006401 	.word	0x08006401
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	08006401 	.word	0x08006401
 80062e0:	08006401 	.word	0x08006401
 80062e4:	08006401 	.word	0x08006401
 80062e8:	0800637f 	.word	0x0800637f
 80062ec:	08006401 	.word	0x08006401
 80062f0:	08006401 	.word	0x08006401
 80062f4:	08006401 	.word	0x08006401
 80062f8:	080063bf 	.word	0x080063bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f9d0 	bl	80066a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0208 	orr.w	r2, r2, #8
 8006316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6999      	ldr	r1, [r3, #24]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	619a      	str	r2, [r3, #24]
      break;
 800633a:	e062      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fa16 	bl	8006774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6999      	ldr	r1, [r3, #24]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	021a      	lsls	r2, r3, #8
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	619a      	str	r2, [r3, #24]
      break;
 800637c:	e041      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fa5f 	bl	8006848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0208 	orr.w	r2, r2, #8
 8006398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0204 	bic.w	r2, r2, #4
 80063a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	61da      	str	r2, [r3, #28]
      break;
 80063bc:	e021      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 faa9 	bl	800691c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69d9      	ldr	r1, [r3, #28]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	021a      	lsls	r2, r3, #8
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	61da      	str	r2, [r3, #28]
      break;
 80063fe:	e000      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIM_ConfigClockSource+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e0b3      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x180>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800644a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006464:	d03e      	beq.n	80064e4 <HAL_TIM_ConfigClockSource+0xd0>
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646a:	f200 8087 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x168>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	f000 8085 	beq.w	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647a:	d87f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 800647c:	2b70      	cmp	r3, #112	; 0x70
 800647e:	d01a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xa2>
 8006480:	2b70      	cmp	r3, #112	; 0x70
 8006482:	d87b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 8006484:	2b60      	cmp	r3, #96	; 0x60
 8006486:	d050      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x116>
 8006488:	2b60      	cmp	r3, #96	; 0x60
 800648a:	d877      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 800648c:	2b50      	cmp	r3, #80	; 0x50
 800648e:	d03c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0xf6>
 8006490:	2b50      	cmp	r3, #80	; 0x50
 8006492:	d873      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d058      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x136>
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d86f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 800649c:	2b30      	cmp	r3, #48	; 0x30
 800649e:	d064      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x156>
 80064a0:	2b30      	cmp	r3, #48	; 0x30
 80064a2:	d86b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d060      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x156>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d867      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x168>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d05c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x156>
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d05a      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064b4:	e062      	b.n	800657c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6899      	ldr	r1, [r3, #8]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f000 faee 	bl	8006aa6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	609a      	str	r2, [r3, #8]
      break;
 80064e2:	e04e      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f000 fad7 	bl	8006aa6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006506:	609a      	str	r2, [r3, #8]
      break;
 8006508:	e03b      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fa4e 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2150      	movs	r1, #80	; 0x50
 8006522:	4618      	mov	r0, r3
 8006524:	f000 faa5 	bl	8006a72 <TIM_ITRx_SetConfig>
      break;
 8006528:	e02b      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	461a      	mov	r2, r3
 8006538:	f000 fa6c 	bl	8006a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2160      	movs	r1, #96	; 0x60
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fa95 	bl	8006a72 <TIM_ITRx_SetConfig>
      break;
 8006548:	e01b      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fa2e 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2140      	movs	r1, #64	; 0x40
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fa85 	bl	8006a72 <TIM_ITRx_SetConfig>
      break;
 8006568:	e00b      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 fa7c 	bl	8006a72 <TIM_ITRx_SetConfig>
        break;
 800657a:	e002      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800657c:	bf00      	nop
 800657e:	e000      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006580:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a29      	ldr	r2, [pc, #164]	; (800669c <TIM_Base_SetConfig+0xb8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00b      	beq.n	8006614 <TIM_Base_SetConfig+0x30>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006602:	d007      	beq.n	8006614 <TIM_Base_SetConfig+0x30>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a26      	ldr	r2, [pc, #152]	; (80066a0 <TIM_Base_SetConfig+0xbc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0x30>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a25      	ldr	r2, [pc, #148]	; (80066a4 <TIM_Base_SetConfig+0xc0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d108      	bne.n	8006626 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1c      	ldr	r2, [pc, #112]	; (800669c <TIM_Base_SetConfig+0xb8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00b      	beq.n	8006646 <TIM_Base_SetConfig+0x62>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006634:	d007      	beq.n	8006646 <TIM_Base_SetConfig+0x62>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <TIM_Base_SetConfig+0xbc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_Base_SetConfig+0x62>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <TIM_Base_SetConfig+0xc0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d108      	bne.n	8006658 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <TIM_Base_SetConfig+0xb8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d103      	bne.n	800668c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	615a      	str	r2, [r3, #20]
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800

080066a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 0302 	bic.w	r3, r3, #2
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <TIM_OC1_SetConfig+0xc8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10c      	bne.n	800671e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0308 	bic.w	r3, r3, #8
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0304 	bic.w	r3, r3, #4
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <TIM_OC1_SetConfig+0xc8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d111      	bne.n	800674a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800672c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40012c00 	.word	0x40012c00

08006774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f023 0210 	bic.w	r2, r3, #16
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0320 	bic.w	r3, r3, #32
 80067be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <TIM_OC2_SetConfig+0xd0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10d      	bne.n	80067f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a14      	ldr	r2, [pc, #80]	; (8006844 <TIM_OC2_SetConfig+0xd0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d113      	bne.n	8006820 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	40012c00 	.word	0x40012c00

08006848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a1d      	ldr	r2, [pc, #116]	; (8006918 <TIM_OC3_SetConfig+0xd0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d10d      	bne.n	80068c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a14      	ldr	r2, [pc, #80]	; (8006918 <TIM_OC3_SetConfig+0xd0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d113      	bne.n	80068f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00

0800691c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a0f      	ldr	r2, [pc, #60]	; (80069b4 <TIM_OC4_SetConfig+0x98>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d109      	bne.n	8006990 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00

080069b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f023 0201 	bic.w	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 030a 	bic.w	r3, r3, #10
 80069f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f023 0210 	bic.w	r2, r3, #16
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	031b      	lsls	r3, r3, #12
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f043 0307 	orr.w	r3, r3, #7
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	609a      	str	r2, [r3, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	021a      	lsls	r2, r3, #8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	609a      	str	r2, [r3, #8]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	2201      	movs	r2, #1
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e046      	b.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800

08006be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e03f      	b.n	8006c9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb fb3c 	bl	80022b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc35 	bl	80074c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d11d      	bne.n	8006cfc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_UART_Receive_IT+0x26>
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e016      	b.n	8006cfe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Receive_IT+0x38>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e00f      	b.n	8006cfe <HAL_UART_Receive_IT+0x58>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fa42 	bl	800717c <UART_Start_Receive_IT>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	e000      	b.n	8006cfe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695a      	ldr	r2, [r3, #20]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0210 	bic.w	r2, r2, #16
 8006d46:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02d      	beq.n	8006db2 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695a      	ldr	r2, [r3, #20]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d64:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <HAL_UART_AbortReceive_IT+0xd0>)
 8006d74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fc f998 	bl	80030b0 <HAL_DMA_Abort_IT>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d022      	beq.n	8006dcc <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	e01a      	b.n	8006dcc <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9d2 	bl	8007154 <HAL_UART_AbortReceiveCpltCallback>
 8006db0:	e00c      	b.n	8006dcc <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f9c4 	bl	8007154 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	0800726f 	.word	0x0800726f

08006ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_UART_IRQHandler+0x52>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 faa0 	bl	800736c <UART_Receive_IT>
      return;
 8006e2c:	e17b      	b.n	8007126 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80b1 	beq.w	8006f98 <HAL_UART_IRQHandler+0x1bc>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_UART_IRQHandler+0x70>
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 80a6 	beq.w	8006f98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_UART_IRQHandler+0x90>
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	f043 0201 	orr.w	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <HAL_UART_IRQHandler+0xb0>
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_UART_IRQHandler+0xd0>
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	f043 0204 	orr.w	r2, r3, #4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00f      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xfa>
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <HAL_UART_IRQHandler+0xee>
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f043 0208 	orr.w	r2, r3, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 811e 	beq.w	800711c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <HAL_UART_IRQHandler+0x11e>
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa39 	bl	800736c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <HAL_UART_IRQHandler+0x146>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d031      	beq.n	8006f86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f963 	bl	80071ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d023      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d013      	beq.n	8006f76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	4a76      	ldr	r2, [pc, #472]	; (800712c <HAL_UART_IRQHandler+0x350>)
 8006f54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fc f8a8 	bl	80030b0 <HAL_DMA_Abort_IT>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	e00e      	b.n	8006f94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f8e3 	bl	8007142 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7c:	e00a      	b.n	8006f94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f8df 	bl	8007142 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	e006      	b.n	8006f94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8db 	bl	8007142 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f92:	e0c3      	b.n	800711c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f94:	bf00      	nop
    return;
 8006f96:	e0c1      	b.n	800711c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	f040 80a1 	bne.w	80070e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 809b 	beq.w	80070e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8095 	beq.w	80070e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d04e      	beq.n	800707c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006fe8:	8a3b      	ldrh	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8098 	beq.w	8007120 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ff4:	8a3a      	ldrh	r2, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	f080 8092 	bcs.w	8007120 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8a3a      	ldrh	r2, [r7, #16]
 8007000:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b20      	cmp	r3, #32
 800700a:	d02b      	beq.n	8007064 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800701a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695a      	ldr	r2, [r3, #20]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0210 	bic.w	r2, r2, #16
 8007058:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	4618      	mov	r0, r3
 8007060:	f7fb ffeb 	bl	800303a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	b29b      	uxth	r3, r3
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f876 	bl	8007166 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800707a:	e051      	b.n	8007120 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007084:	b29b      	uxth	r3, r3
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d047      	beq.n	8007124 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007094:	8a7b      	ldrh	r3, [r7, #18]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d044      	beq.n	8007124 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0210 	bic.w	r2, r2, #16
 80070d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d8:	8a7b      	ldrh	r3, [r7, #18]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f842 	bl	8007166 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80070e2:	e01f      	b.n	8007124 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <HAL_UART_IRQHandler+0x324>
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8d0 	bl	800729e <UART_Transmit_IT>
    return;
 80070fe:	e012      	b.n	8007126 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <HAL_UART_IRQHandler+0x34a>
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f911 	bl	800733c <UART_EndTransmit_IT>
    return;
 800711a:	e004      	b.n	8007126 <HAL_UART_IRQHandler+0x34a>
    return;
 800711c:	bf00      	nop
 800711e:	e002      	b.n	8007126 <HAL_UART_IRQHandler+0x34a>
      return;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_UART_IRQHandler+0x34a>
      return;
 8007124:	bf00      	nop
  }
}
 8007126:	3728      	adds	r7, #40	; 0x28
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08007247 	.word	0x08007247

08007130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr

08007142 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2222      	movs	r2, #34	; 0x22
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0201 	orr.w	r2, r2, #1
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0220 	orr.w	r2, r2, #32
 80071e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007204:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695a      	ldr	r2, [r3, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	2b01      	cmp	r3, #1
 800721c:	d107      	bne.n	800722e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0210 	bic.w	r2, r2, #16
 800722c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff ff6e 	bl	8007142 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff ff5f 	bl	8007154 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b21      	cmp	r3, #33	; 0x21
 80072b0:	d13e      	bne.n	8007330 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ba:	d114      	bne.n	80072e6 <UART_Transmit_IT+0x48>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d110      	bne.n	80072e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	1c9a      	adds	r2, r3, #2
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	621a      	str	r2, [r3, #32]
 80072e4:	e008      	b.n	80072f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6211      	str	r1, [r2, #32]
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29b      	uxth	r3, r3
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4619      	mov	r1, r3
 8007306:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10f      	bne.n	800732c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800731a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800732a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	e000      	b.n	8007332 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007330:	2302      	movs	r3, #2
  }
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007352:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff fee7 	bl	8007130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b22      	cmp	r3, #34	; 0x22
 800737e:	f040 8099 	bne.w	80074b4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d117      	bne.n	80073bc <UART_Receive_IT+0x50>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d113      	bne.n	80073bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	1c9a      	adds	r2, r3, #2
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	629a      	str	r2, [r3, #40]	; 0x28
 80073ba:	e026      	b.n	800740a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ce:	d007      	beq.n	80073e0 <UART_Receive_IT+0x74>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <UART_Receive_IT+0x82>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e008      	b.n	8007400 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29b      	uxth	r3, r3
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4619      	mov	r1, r3
 8007418:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800741a:	2b00      	cmp	r3, #0
 800741c:	d148      	bne.n	80074b0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0220 	bic.w	r2, r2, #32
 800742c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800743c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695a      	ldr	r2, [r3, #20]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	2b01      	cmp	r3, #1
 800745c:	d123      	bne.n	80074a6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0210 	bic.w	r2, r2, #16
 8007472:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b10      	cmp	r3, #16
 8007480:	d10a      	bne.n	8007498 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fe61 	bl	8007166 <HAL_UARTEx_RxEventCallback>
 80074a4:	e002      	b.n	80074ac <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7f9 fb04 	bl	8000ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e002      	b.n	80074b6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	e000      	b.n	80074b6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
  }
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80074fa:	f023 030c 	bic.w	r3, r3, #12
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	430b      	orrs	r3, r1
 8007506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699a      	ldr	r2, [r3, #24]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <UART_SetConfig+0x114>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d103      	bne.n	8007530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fe fb2a 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	e002      	b.n	8007536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fe fb12 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8007534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009a      	lsls	r2, r3, #2
 8007540:	441a      	add	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	4a22      	ldr	r2, [pc, #136]	; (80075d8 <UART_SetConfig+0x118>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	0119      	lsls	r1, r3, #4
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009a      	lsls	r2, r3, #2
 8007560:	441a      	add	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	fbb2 f2f3 	udiv	r2, r2, r3
 800756c:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <UART_SetConfig+0x118>)
 800756e:	fba3 0302 	umull	r0, r3, r3, r2
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	2064      	movs	r0, #100	; 0x64
 8007576:	fb00 f303 	mul.w	r3, r0, r3
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	3332      	adds	r3, #50	; 0x32
 8007580:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <UART_SetConfig+0x118>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800758c:	4419      	add	r1, r3
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	009a      	lsls	r2, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <UART_SetConfig+0x118>)
 80075a6:	fba3 0302 	umull	r0, r3, r3, r2
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	2064      	movs	r0, #100	; 0x64
 80075ae:	fb00 f303 	mul.w	r3, r0, r3
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	3332      	adds	r3, #50	; 0x32
 80075b8:	4a07      	ldr	r2, [pc, #28]	; (80075d8 <UART_SetConfig+0x118>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	f003 020f 	and.w	r2, r3, #15
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	440a      	add	r2, r1
 80075ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	40013800 	.word	0x40013800
 80075d8:	51eb851f 	.word	0x51eb851f

080075dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80075dc:	b084      	sub	sp, #16
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	f107 0014 	add.w	r0, r7, #20
 80075ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	b004      	add	sp, #16
 80075fa:	4770      	bx	lr

080075fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800760c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007610:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	b29a      	uxth	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007630:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007634:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800763c:	b29a      	uxth	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	b29b      	uxth	r3, r3
 8007642:	43db      	mvns	r3, r3
 8007644:	b29b      	uxth	r3, r3
 8007646:	4013      	ands	r3, r2
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr

0800765c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007674:	b084      	sub	sp, #16
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	f107 0014 	add.w	r0, r7, #20
 8007682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	b004      	add	sp, #16
 80076b2:	4770      	bx	lr

080076b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b09b      	sub	sp, #108	; 0x6c
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d81f      	bhi.n	8007726 <USB_ActivateEndpoint+0x72>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USB_ActivateEndpoint+0x38>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	08007719 	.word	0x08007719
 80076f4:	0800772f 	.word	0x0800772f
 80076f8:	0800770b 	.word	0x0800770b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007704:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007708:	e012      	b.n	8007730 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800770a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800770e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007712:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007716:	e00b      	b.n	8007730 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007718:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800771c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007720:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007724:	e004      	b.n	8007730 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800772c:	e000      	b.n	8007730 <USB_ActivateEndpoint+0x7c>
      break;
 800772e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	441a      	add	r2, r3
 800773a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800773e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	b29a      	uxth	r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007794:	b29b      	uxth	r3, r3
 8007796:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 8149 	bne.w	8007a34 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8084 	beq.w	80078b4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	011a      	lsls	r2, r3, #4
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	88db      	ldrh	r3, [r3, #6]
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	81fb      	strh	r3, [r7, #14]
 80077ee:	89fb      	ldrh	r3, [r7, #14]
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <USB_ActivateEndpoint+0x17c>
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	81bb      	strh	r3, [r7, #12]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	441a      	add	r2, r3
 800781a:	89bb      	ldrh	r3, [r7, #12]
 800781c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800782c:	b29b      	uxth	r3, r3
 800782e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d020      	beq.n	800787a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800784e:	813b      	strh	r3, [r7, #8]
 8007850:	893b      	ldrh	r3, [r7, #8]
 8007852:	f083 0320 	eor.w	r3, r3, #32
 8007856:	813b      	strh	r3, [r7, #8]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	441a      	add	r2, r3
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007874:	b29b      	uxth	r3, r3
 8007876:	8013      	strh	r3, [r2, #0]
 8007878:	e27f      	b.n	8007d7a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007890:	817b      	strh	r3, [r7, #10]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	897b      	ldrh	r3, [r7, #10]
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
 80078b2:	e262      	b.n	8007d7a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078be:	b29b      	uxth	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	4413      	add	r3, r2
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	011a      	lsls	r2, r3, #4
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88db      	ldrh	r3, [r3, #6]
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	b29b      	uxth	r3, r3
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	4413      	add	r3, r2
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	011a      	lsls	r2, r3, #4
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	4413      	add	r3, r2
 8007906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800790a:	623b      	str	r3, [r7, #32]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d112      	bne.n	800793a <USB_ActivateEndpoint+0x286>
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29b      	uxth	r3, r3
 800791a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800791e:	b29a      	uxth	r2, r3
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800792e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007932:	b29a      	uxth	r2, r3
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	e02f      	b.n	800799a <USB_ActivateEndpoint+0x2e6>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b3e      	cmp	r3, #62	; 0x3e
 8007940:	d813      	bhi.n	800796a <USB_ActivateEndpoint+0x2b6>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	663b      	str	r3, [r7, #96]	; 0x60
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <USB_ActivateEndpoint+0x2a8>
 8007956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007958:	3301      	adds	r3, #1
 800795a:	663b      	str	r3, [r7, #96]	; 0x60
 800795c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800795e:	b29b      	uxth	r3, r3
 8007960:	029b      	lsls	r3, r3, #10
 8007962:	b29a      	uxth	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e017      	b.n	800799a <USB_ActivateEndpoint+0x2e6>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	663b      	str	r3, [r7, #96]	; 0x60
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <USB_ActivateEndpoint+0x2d0>
 800797e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007980:	3b01      	subs	r3, #1
 8007982:	663b      	str	r3, [r7, #96]	; 0x60
 8007984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007986:	b29b      	uxth	r3, r3
 8007988:	029b      	lsls	r3, r3, #10
 800798a:	b29b      	uxth	r3, r3
 800798c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007994:	b29a      	uxth	r2, r3
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	83fb      	strh	r3, [r7, #30]
 80079a8:	8bfb      	ldrh	r3, [r7, #30]
 80079aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01b      	beq.n	80079ea <USB_ActivateEndpoint+0x336>
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c8:	83bb      	strh	r3, [r7, #28]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	441a      	add	r2, r3
 80079d4:	8bbb      	ldrh	r3, [r7, #28]
 80079d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a00:	837b      	strh	r3, [r7, #26]
 8007a02:	8b7b      	ldrh	r3, [r7, #26]
 8007a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a08:	837b      	strh	r3, [r7, #26]
 8007a0a:	8b7b      	ldrh	r3, [r7, #26]
 8007a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a10:	837b      	strh	r3, [r7, #26]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	441a      	add	r2, r3
 8007a1c:	8b7b      	ldrh	r3, [r7, #26]
 8007a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	8013      	strh	r3, [r2, #0]
 8007a32:	e1a2      	b.n	8007d7a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a80:	4413      	add	r3, r2
 8007a82:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	011a      	lsls	r2, r3, #4
 8007a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a92:	657b      	str	r3, [r7, #84]	; 0x54
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	891b      	ldrh	r3, [r3, #8]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab4:	4413      	add	r3, r2
 8007ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	011a      	lsls	r2, r3, #4
 8007abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	895b      	ldrh	r3, [r3, #10]
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8091 	bne.w	8007c04 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007af0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01b      	beq.n	8007b32 <USB_ActivateEndpoint+0x47e>
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	441a      	add	r2, r3
 8007b1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01b      	beq.n	8007b82 <USB_ActivateEndpoint+0x4ce>
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	441a      	add	r2, r3
 8007b6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ba0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ba4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ba8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	441a      	add	r2, r3
 8007bb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	867b      	strh	r3, [r7, #50]	; 0x32
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	441a      	add	r2, r3
 8007bec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8013      	strh	r3, [r2, #0]
 8007c02:	e0ba      	b.n	8007d7a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01d      	beq.n	8007c5c <USB_ActivateEndpoint+0x5a8>
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	441a      	add	r2, r3
 8007c44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01d      	beq.n	8007cb4 <USB_ActivateEndpoint+0x600>
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	441a      	add	r2, r3
 8007c9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	78db      	ldrb	r3, [r3, #3]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d024      	beq.n	8007d06 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007cd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007cda:	f083 0320 	eor.w	r3, r3, #32
 8007cde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]
 8007d04:	e01d      	b.n	8007d42 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	441a      	add	r2, r3
 8007d2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	441a      	add	r2, r3
 8007d64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	376c      	adds	r7, #108	; 0x6c
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b08d      	sub	sp, #52	; 0x34
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	7b1b      	ldrb	r3, [r3, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 808e 	bne.w	8007eb8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d044      	beq.n	8007e2e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	81bb      	strh	r3, [r7, #12]
 8007db2:	89bb      	ldrh	r3, [r7, #12]
 8007db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01b      	beq.n	8007df4 <USB_DeactivateEndpoint+0x6c>
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	817b      	strh	r3, [r7, #10]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	897b      	ldrh	r3, [r7, #10]
 8007de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e0a:	813b      	strh	r3, [r7, #8]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	893b      	ldrh	r3, [r7, #8]
 8007e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]
 8007e2c:	e192      	b.n	8008154 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	827b      	strh	r3, [r7, #18]
 8007e3c:	8a7b      	ldrh	r3, [r7, #18]
 8007e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01b      	beq.n	8007e7e <USB_DeactivateEndpoint+0xf6>
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5c:	823b      	strh	r3, [r7, #16]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	441a      	add	r2, r3
 8007e68:	8a3b      	ldrh	r3, [r7, #16]
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e94:	81fb      	strh	r3, [r7, #14]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	441a      	add	r2, r3
 8007ea0:	89fb      	ldrh	r3, [r7, #14]
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]
 8007eb6:	e14d      	b.n	8008154 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 80a5 	bne.w	800800c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	843b      	strh	r3, [r7, #32]
 8007ed0:	8c3b      	ldrh	r3, [r7, #32]
 8007ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01b      	beq.n	8007f12 <USB_DeactivateEndpoint+0x18a>
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef0:	83fb      	strh	r3, [r7, #30]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	8bfb      	ldrh	r3, [r7, #30]
 8007efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	83bb      	strh	r3, [r7, #28]
 8007f20:	8bbb      	ldrh	r3, [r7, #28]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01b      	beq.n	8007f62 <USB_DeactivateEndpoint+0x1da>
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	837b      	strh	r3, [r7, #26]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	8b7b      	ldrh	r3, [r7, #26]
 8007f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f78:	833b      	strh	r3, [r7, #24]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	441a      	add	r2, r3
 8007f84:	8b3b      	ldrh	r3, [r7, #24]
 8007f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb0:	82fb      	strh	r3, [r7, #22]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	8afb      	ldrh	r3, [r7, #22]
 8007fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe8:	82bb      	strh	r3, [r7, #20]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	441a      	add	r2, r3
 8007ff4:	8abb      	ldrh	r3, [r7, #20]
 8007ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008006:	b29b      	uxth	r3, r3
 8008008:	8013      	strh	r3, [r2, #0]
 800800a:	e0a3      	b.n	8008154 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800801a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800801c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01b      	beq.n	800805c <USB_DeactivateEndpoint+0x2d4>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	857b      	strh	r3, [r7, #42]	; 0x2a
 800806a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800806c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01b      	beq.n	80080ac <USB_DeactivateEndpoint+0x324>
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808a:	853b      	strh	r3, [r7, #40]	; 0x28
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	441a      	add	r2, r3
 8008096:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800809c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	441a      	add	r2, r3
 80080ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	441a      	add	r2, r3
 8008106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800810c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	b29b      	uxth	r3, r3
 800811a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	847b      	strh	r3, [r7, #34]	; 0x22
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008150:	b29b      	uxth	r3, r3
 8008152:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3734      	adds	r7, #52	; 0x34
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr

08008160 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b0cc      	sub	sp, #304	; 0x130
 8008164:	af00      	add	r7, sp, #0
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	463b      	mov	r3, r7
 800816c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800816e:	463b      	mov	r3, r7
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b01      	cmp	r3, #1
 8008176:	f040 872e 	bne.w	8008fd6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699a      	ldr	r2, [r3, #24]
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	d905      	bls.n	8008196 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800818a:	463b      	mov	r3, r7
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008194:	e004      	b.n	80081a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008196:	463b      	mov	r3, r7
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081a0:	463b      	mov	r3, r7
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	7b1b      	ldrb	r3, [r3, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d134      	bne.n	8008214 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081aa:	463b      	mov	r3, r7
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6959      	ldr	r1, [r3, #20]
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	88da      	ldrh	r2, [r3, #6]
 80081b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	1d38      	adds	r0, r7, #4
 80081be:	6800      	ldr	r0, [r0, #0]
 80081c0:	f001 fc03 	bl	80099ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081c4:	f107 0310 	add.w	r3, r7, #16
 80081c8:	1d3a      	adds	r2, r7, #4
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4619      	mov	r1, r3
 80081da:	f107 0310 	add.w	r3, r7, #16
 80081de:	f107 0210 	add.w	r2, r7, #16
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	440a      	add	r2, r1
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	011a      	lsls	r2, r3, #4
 80081f0:	f107 0310 	add.w	r3, r7, #16
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4413      	add	r3, r2
 80081f8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008206:	b29a      	uxth	r2, r3
 8008208:	f107 030c 	add.w	r3, r7, #12
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	f000 beac 	b.w	8008f6c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008214:	463b      	mov	r3, r7
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	78db      	ldrb	r3, [r3, #3]
 800821a:	2b02      	cmp	r3, #2
 800821c:	f040 838c 	bne.w	8008938 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008220:	463b      	mov	r3, r7
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6a1a      	ldr	r2, [r3, #32]
 8008226:	463b      	mov	r3, r7
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	f240 8330 	bls.w	8008892 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008232:	1d3b      	adds	r3, r7, #4
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	463b      	mov	r3, r7
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	463b      	mov	r3, r7
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	441a      	add	r2, r3
 800825e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008272:	b29b      	uxth	r3, r3
 8008274:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6a1a      	ldr	r2, [r3, #32]
 800827c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	463b      	mov	r3, r7
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	463b      	mov	r3, r7
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 819e 	beq.w	80085e0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082a8:	1d3a      	adds	r2, r7, #4
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	463b      	mov	r3, r7
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d17a      	bne.n	80083ae <USB_EPStartXfer+0x24e>
 80082b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082bc:	1d3a      	adds	r2, r7, #4
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	1d3b      	adds	r3, r7, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4619      	mov	r1, r3
 80082ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	440a      	add	r2, r1
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	463b      	mov	r3, r7
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	011a      	lsls	r2, r3, #4
 80082e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80082f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d11a      	bne.n	8008334 <USB_EPStartXfer+0x1d4>
 80082fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800830c:	b29a      	uxth	r2, r3
 800830e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008328:	b29a      	uxth	r2, r3
 800832a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	e062      	b.n	80083fa <USB_EPStartXfer+0x29a>
 8008334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008338:	2b3e      	cmp	r3, #62	; 0x3e
 800833a:	d819      	bhi.n	8008370 <USB_EPStartXfer+0x210>
 800833c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008340:	085b      	lsrs	r3, r3, #1
 8008342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <USB_EPStartXfer+0x1fc>
 8008352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008356:	3301      	adds	r3, #1
 8008358:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800835c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008360:	b29b      	uxth	r3, r3
 8008362:	029b      	lsls	r3, r3, #10
 8008364:	b29a      	uxth	r2, r3
 8008366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	e044      	b.n	80083fa <USB_EPStartXfer+0x29a>
 8008370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800837a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <USB_EPStartXfer+0x230>
 8008386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800838a:	3b01      	subs	r3, #1
 800838c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008394:	b29b      	uxth	r3, r3
 8008396:	029b      	lsls	r3, r3, #10
 8008398:	b29b      	uxth	r3, r3
 800839a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e025      	b.n	80083fa <USB_EPStartXfer+0x29a>
 80083ae:	463b      	mov	r3, r7
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d120      	bne.n	80083fa <USB_EPStartXfer+0x29a>
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4619      	mov	r1, r3
 80083c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80083cc:	6812      	ldr	r2, [r2, #0]
 80083ce:	440a      	add	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	463b      	mov	r3, r7
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	011a      	lsls	r2, r3, #4
 80083da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4413      	add	r3, r2
 80083e2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80083e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083fa:	463b      	mov	r3, r7
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	895b      	ldrh	r3, [r3, #10]
 8008400:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008404:	463b      	mov	r3, r7
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6959      	ldr	r1, [r3, #20]
 800840a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840e:	b29b      	uxth	r3, r3
 8008410:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008414:	1d38      	adds	r0, r7, #4
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	f001 fad7 	bl	80099ca <USB_WritePMA>
            ep->xfer_buff += len;
 800841c:	463b      	mov	r3, r7
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008426:	441a      	add	r2, r3
 8008428:	463b      	mov	r3, r7
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800842e:	463b      	mov	r3, r7
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6a1a      	ldr	r2, [r3, #32]
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	429a      	cmp	r2, r3
 800843c:	d909      	bls.n	8008452 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800843e:	463b      	mov	r3, r7
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008448:	1ad2      	subs	r2, r2, r3
 800844a:	463b      	mov	r3, r7
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	621a      	str	r2, [r3, #32]
 8008450:	e008      	b.n	8008464 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800845c:	463b      	mov	r3, r7
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2200      	movs	r2, #0
 8008462:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008464:	463b      	mov	r3, r7
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d17a      	bne.n	8008564 <USB_EPStartXfer+0x404>
 800846e:	f107 0318 	add.w	r3, r7, #24
 8008472:	1d3a      	adds	r2, r7, #4
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	1d3b      	adds	r3, r7, #4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008480:	b29b      	uxth	r3, r3
 8008482:	4619      	mov	r1, r3
 8008484:	f107 0318 	add.w	r3, r7, #24
 8008488:	f107 0218 	add.w	r2, r7, #24
 800848c:	6812      	ldr	r2, [r2, #0]
 800848e:	440a      	add	r2, r1
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	463b      	mov	r3, r7
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	011a      	lsls	r2, r3, #4
 800849a:	f107 0318 	add.w	r3, r7, #24
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4413      	add	r3, r2
 80084a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084a6:	f107 0314 	add.w	r3, r7, #20
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11a      	bne.n	80084ea <USB_EPStartXfer+0x38a>
 80084b4:	f107 0314 	add.w	r3, r7, #20
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	f107 0314 	add.w	r3, r7, #20
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	f107 0314 	add.w	r3, r7, #20
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084de:	b29a      	uxth	r2, r3
 80084e0:	f107 0314 	add.w	r3, r7, #20
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	801a      	strh	r2, [r3, #0]
 80084e8:	e067      	b.n	80085ba <USB_EPStartXfer+0x45a>
 80084ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ee:	2b3e      	cmp	r3, #62	; 0x3e
 80084f0:	d819      	bhi.n	8008526 <USB_EPStartXfer+0x3c6>
 80084f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f6:	085b      	lsrs	r3, r3, #1
 80084f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80084fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <USB_EPStartXfer+0x3b2>
 8008508:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800850c:	3301      	adds	r3, #1
 800850e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008512:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008516:	b29b      	uxth	r3, r3
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	b29a      	uxth	r2, r3
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e049      	b.n	80085ba <USB_EPStartXfer+0x45a>
 8008526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <USB_EPStartXfer+0x3e6>
 800853c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008540:	3b01      	subs	r3, #1
 8008542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008546:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800854a:	b29b      	uxth	r3, r3
 800854c:	029b      	lsls	r3, r3, #10
 800854e:	b29b      	uxth	r3, r3
 8008550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008558:	b29a      	uxth	r2, r3
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	e02a      	b.n	80085ba <USB_EPStartXfer+0x45a>
 8008564:	463b      	mov	r3, r7
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d125      	bne.n	80085ba <USB_EPStartXfer+0x45a>
 800856e:	f107 0320 	add.w	r3, r7, #32
 8008572:	1d3a      	adds	r2, r7, #4
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	1d3b      	adds	r3, r7, #4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008580:	b29b      	uxth	r3, r3
 8008582:	4619      	mov	r1, r3
 8008584:	f107 0320 	add.w	r3, r7, #32
 8008588:	f107 0220 	add.w	r2, r7, #32
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	440a      	add	r2, r1
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	463b      	mov	r3, r7
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	011a      	lsls	r2, r3, #4
 800859a:	f107 0320 	add.w	r3, r7, #32
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4413      	add	r3, r2
 80085a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80085a6:	f107 031c 	add.w	r3, r7, #28
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f107 031c 	add.w	r3, r7, #28
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085ba:	463b      	mov	r3, r7
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	891b      	ldrh	r3, [r3, #8]
 80085c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085c4:	463b      	mov	r3, r7
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6959      	ldr	r1, [r3, #20]
 80085ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80085d4:	1d38      	adds	r0, r7, #4
 80085d6:	6800      	ldr	r0, [r0, #0]
 80085d8:	f001 f9f7 	bl	80099ca <USB_WritePMA>
 80085dc:	f000 bcc6 	b.w	8008f6c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085e0:	463b      	mov	r3, r7
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d164      	bne.n	80086b4 <USB_EPStartXfer+0x554>
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f0:	1d3b      	adds	r3, r7, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085fe:	4413      	add	r3, r2
 8008600:	64bb      	str	r3, [r7, #72]	; 0x48
 8008602:	463b      	mov	r3, r7
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	011a      	lsls	r2, r3, #4
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860c:	4413      	add	r3, r2
 800860e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008612:	647b      	str	r3, [r7, #68]	; 0x44
 8008614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d112      	bne.n	8008642 <USB_EPStartXfer+0x4e2>
 800861c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008626:	b29a      	uxth	r2, r3
 8008628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862a:	801a      	strh	r2, [r3, #0]
 800862c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800863a:	b29a      	uxth	r2, r3
 800863c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	e057      	b.n	80086f2 <USB_EPStartXfer+0x592>
 8008642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008646:	2b3e      	cmp	r3, #62	; 0x3e
 8008648:	d817      	bhi.n	800867a <USB_EPStartXfer+0x51a>
 800864a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864e:	085b      	lsrs	r3, r3, #1
 8008650:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <USB_EPStartXfer+0x50a>
 8008660:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008664:	3301      	adds	r3, #1
 8008666:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800866a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800866e:	b29b      	uxth	r3, r3
 8008670:	029b      	lsls	r3, r3, #10
 8008672:	b29a      	uxth	r2, r3
 8008674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	e03b      	b.n	80086f2 <USB_EPStartXfer+0x592>
 800867a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867e:	095b      	lsrs	r3, r3, #5
 8008680:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008688:	f003 031f 	and.w	r3, r3, #31
 800868c:	2b00      	cmp	r3, #0
 800868e:	d104      	bne.n	800869a <USB_EPStartXfer+0x53a>
 8008690:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008694:	3b01      	subs	r3, #1
 8008696:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800869a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800869e:	b29b      	uxth	r3, r3
 80086a0:	029b      	lsls	r3, r3, #10
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b0:	801a      	strh	r2, [r3, #0]
 80086b2:	e01e      	b.n	80086f2 <USB_EPStartXfer+0x592>
 80086b4:	463b      	mov	r3, r7
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d119      	bne.n	80086f2 <USB_EPStartXfer+0x592>
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	653b      	str	r3, [r7, #80]	; 0x50
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d2:	4413      	add	r3, r2
 80086d4:	653b      	str	r3, [r7, #80]	; 0x50
 80086d6:	463b      	mov	r3, r7
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	011a      	lsls	r2, r3, #4
 80086de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086f2:	463b      	mov	r3, r7
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	891b      	ldrh	r3, [r3, #8]
 80086f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086fc:	463b      	mov	r3, r7
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6959      	ldr	r1, [r3, #20]
 8008702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008706:	b29b      	uxth	r3, r3
 8008708:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800870c:	1d38      	adds	r0, r7, #4
 800870e:	6800      	ldr	r0, [r0, #0]
 8008710:	f001 f95b 	bl	80099ca <USB_WritePMA>
            ep->xfer_buff += len;
 8008714:	463b      	mov	r3, r7
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800871e:	441a      	add	r2, r3
 8008720:	463b      	mov	r3, r7
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008726:	463b      	mov	r3, r7
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6a1a      	ldr	r2, [r3, #32]
 800872c:	463b      	mov	r3, r7
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	429a      	cmp	r2, r3
 8008734:	d909      	bls.n	800874a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008736:	463b      	mov	r3, r7
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6a1a      	ldr	r2, [r3, #32]
 800873c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	621a      	str	r2, [r3, #32]
 8008748:	e008      	b.n	800875c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800874a:	463b      	mov	r3, r7
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008754:	463b      	mov	r3, r7
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2200      	movs	r2, #0
 800875a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800875c:	1d3b      	adds	r3, r7, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	643b      	str	r3, [r7, #64]	; 0x40
 8008762:	463b      	mov	r3, r7
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d164      	bne.n	8008836 <USB_EPStartXfer+0x6d6>
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	63bb      	str	r3, [r7, #56]	; 0x38
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800877a:	b29b      	uxth	r3, r3
 800877c:	461a      	mov	r2, r3
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	4413      	add	r3, r2
 8008782:	63bb      	str	r3, [r7, #56]	; 0x38
 8008784:	463b      	mov	r3, r7
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	011a      	lsls	r2, r3, #4
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	4413      	add	r3, r2
 8008790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
 8008796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d112      	bne.n	80087c4 <USB_EPStartXfer+0x664>
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087bc:	b29a      	uxth	r2, r3
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	e054      	b.n	800886e <USB_EPStartXfer+0x70e>
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	2b3e      	cmp	r3, #62	; 0x3e
 80087ca:	d817      	bhi.n	80087fc <USB_EPStartXfer+0x69c>
 80087cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80087d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <USB_EPStartXfer+0x68c>
 80087e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80087e6:	3301      	adds	r3, #1
 80087e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80087ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	029b      	lsls	r3, r3, #10
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	e038      	b.n	800886e <USB_EPStartXfer+0x70e>
 80087fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880a:	f003 031f 	and.w	r3, r3, #31
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <USB_EPStartXfer+0x6bc>
 8008812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008816:	3b01      	subs	r3, #1
 8008818:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800881c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008820:	b29b      	uxth	r3, r3
 8008822:	029b      	lsls	r3, r3, #10
 8008824:	b29b      	uxth	r3, r3
 8008826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800882e:	b29a      	uxth	r2, r3
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	e01b      	b.n	800886e <USB_EPStartXfer+0x70e>
 8008836:	463b      	mov	r3, r7
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d116      	bne.n	800886e <USB_EPStartXfer+0x70e>
 8008840:	1d3b      	adds	r3, r7, #4
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008848:	b29b      	uxth	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884e:	4413      	add	r3, r2
 8008850:	643b      	str	r3, [r7, #64]	; 0x40
 8008852:	463b      	mov	r3, r7
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	011a      	lsls	r2, r3, #4
 800885a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885c:	4413      	add	r3, r2
 800885e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008868:	b29a      	uxth	r2, r3
 800886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800886e:	463b      	mov	r3, r7
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	895b      	ldrh	r3, [r3, #10]
 8008874:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008878:	463b      	mov	r3, r7
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6959      	ldr	r1, [r3, #20]
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	b29b      	uxth	r3, r3
 8008884:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008888:	1d38      	adds	r0, r7, #4
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	f001 f89d 	bl	80099ca <USB_WritePMA>
 8008890:	e36c      	b.n	8008f6c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008892:	463b      	mov	r3, r7
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800889c:	1d3b      	adds	r3, r7, #4
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80088ba:	1d3b      	adds	r3, r7, #4
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	463b      	mov	r3, r7
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80088cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088dc:	b29b      	uxth	r3, r3
 80088de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088e6:	1d3b      	adds	r3, r7, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f4:	4413      	add	r3, r2
 80088f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088f8:	463b      	mov	r3, r7
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	011a      	lsls	r2, r3, #4
 8008900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008902:	4413      	add	r3, r2
 8008904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008908:	65bb      	str	r3, [r7, #88]	; 0x58
 800890a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890e:	b29a      	uxth	r2, r3
 8008910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008912:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008914:	463b      	mov	r3, r7
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	891b      	ldrh	r3, [r3, #8]
 800891a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800891e:	463b      	mov	r3, r7
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6959      	ldr	r1, [r3, #20]
 8008924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008928:	b29b      	uxth	r3, r3
 800892a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800892e:	1d38      	adds	r0, r7, #4
 8008930:	6800      	ldr	r0, [r0, #0]
 8008932:	f001 f84a 	bl	80099ca <USB_WritePMA>
 8008936:	e319      	b.n	8008f6c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008938:	1d3b      	adds	r3, r7, #4
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	463b      	mov	r3, r7
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008952:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008956:	1d3b      	adds	r3, r7, #4
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	463b      	mov	r3, r7
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	441a      	add	r2, r3
 8008964:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800896c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008970:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008978:	b29b      	uxth	r3, r3
 800897a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008986:	1ad2      	subs	r2, r2, r3
 8008988:	463b      	mov	r3, r7
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	463b      	mov	r3, r7
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8162 	beq.w	8008c6e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089aa:	1d3b      	adds	r3, r7, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089b2:	463b      	mov	r3, r7
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d164      	bne.n	8008a86 <USB_EPStartXfer+0x926>
 80089bc:	1d3b      	adds	r3, r7, #4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089d0:	4413      	add	r3, r2
 80089d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80089d4:	463b      	mov	r3, r7
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	011a      	lsls	r2, r3, #4
 80089dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089de:	4413      	add	r3, r2
 80089e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089e4:	677b      	str	r3, [r7, #116]	; 0x74
 80089e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d112      	bne.n	8008a14 <USB_EPStartXfer+0x8b4>
 80089ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fc:	801a      	strh	r2, [r3, #0]
 80089fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	e057      	b.n	8008ac4 <USB_EPStartXfer+0x964>
 8008a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a18:	2b3e      	cmp	r3, #62	; 0x3e
 8008a1a:	d817      	bhi.n	8008a4c <USB_EPStartXfer+0x8ec>
 8008a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <USB_EPStartXfer+0x8dc>
 8008a32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a36:	3301      	adds	r3, #1
 8008a38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	029b      	lsls	r3, r3, #10
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	e03b      	b.n	8008ac4 <USB_EPStartXfer+0x964>
 8008a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a50:	095b      	lsrs	r3, r3, #5
 8008a52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5a:	f003 031f 	and.w	r3, r3, #31
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <USB_EPStartXfer+0x90c>
 8008a62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a66:	3b01      	subs	r3, #1
 8008a68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	029b      	lsls	r3, r3, #10
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a82:	801a      	strh	r2, [r3, #0]
 8008a84:	e01e      	b.n	8008ac4 <USB_EPStartXfer+0x964>
 8008a86:	463b      	mov	r3, r7
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d119      	bne.n	8008ac4 <USB_EPStartXfer+0x964>
 8008a90:	1d3b      	adds	r3, r7, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	011a      	lsls	r2, r3, #4
 8008aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ac2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	895b      	ldrh	r3, [r3, #10]
 8008aca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ace:	463b      	mov	r3, r7
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6959      	ldr	r1, [r3, #20]
 8008ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ade:	1d38      	adds	r0, r7, #4
 8008ae0:	6800      	ldr	r0, [r0, #0]
 8008ae2:	f000 ff72 	bl	80099ca <USB_WritePMA>
          ep->xfer_buff += len;
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695a      	ldr	r2, [r3, #20]
 8008aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af0:	441a      	add	r2, r3
 8008af2:	463b      	mov	r3, r7
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008af8:	463b      	mov	r3, r7
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6a1a      	ldr	r2, [r3, #32]
 8008afe:	463b      	mov	r3, r7
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d909      	bls.n	8008b1c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008b08:	463b      	mov	r3, r7
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	463b      	mov	r3, r7
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	621a      	str	r2, [r3, #32]
 8008b1a:	e008      	b.n	8008b2e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008b26:	463b      	mov	r3, r7
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 821a 	beq.w	8008f6c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b38:	463b      	mov	r3, r7
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d164      	bne.n	8008c0c <USB_EPStartXfer+0xaac>
 8008b42:	1d3b      	adds	r3, r7, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b56:	4413      	add	r3, r2
 8008b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	011a      	lsls	r2, r3, #4
 8008b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b64:	4413      	add	r3, r2
 8008b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d112      	bne.n	8008b9a <USB_EPStartXfer+0xa3a>
 8008b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b82:	801a      	strh	r2, [r3, #0]
 8008b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	e057      	b.n	8008c4a <USB_EPStartXfer+0xaea>
 8008b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008ba0:	d817      	bhi.n	8008bd2 <USB_EPStartXfer+0xa72>
 8008ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <USB_EPStartXfer+0xa62>
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	029b      	lsls	r3, r3, #10
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	e03b      	b.n	8008c4a <USB_EPStartXfer+0xaea>
 8008bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd6:	095b      	lsrs	r3, r3, #5
 8008bd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be0:	f003 031f 	and.w	r3, r3, #31
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <USB_EPStartXfer+0xa92>
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bec:	3b01      	subs	r3, #1
 8008bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	029b      	lsls	r3, r3, #10
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c08:	801a      	strh	r2, [r3, #0]
 8008c0a:	e01e      	b.n	8008c4a <USB_EPStartXfer+0xaea>
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d119      	bne.n	8008c4a <USB_EPStartXfer+0xaea>
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c1c:	1d3b      	adds	r3, r7, #4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	461a      	mov	r2, r3
 8008c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c2a:	4413      	add	r3, r2
 8008c2c:	673b      	str	r3, [r7, #112]	; 0x70
 8008c2e:	463b      	mov	r3, r7
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	011a      	lsls	r2, r3, #4
 8008c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c38:	4413      	add	r3, r2
 8008c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	891b      	ldrh	r3, [r3, #8]
 8008c50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c54:	463b      	mov	r3, r7
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6959      	ldr	r1, [r3, #20]
 8008c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c64:	1d38      	adds	r0, r7, #4
 8008c66:	6800      	ldr	r0, [r0, #0]
 8008c68:	f000 feaf 	bl	80099ca <USB_WritePMA>
 8008c6c:	e17e      	b.n	8008f6c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c6e:	463b      	mov	r3, r7
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d16f      	bne.n	8008d58 <USB_EPStartXfer+0xbf8>
 8008c78:	1d3b      	adds	r3, r7, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c80:	1d3b      	adds	r3, r7, #4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c90:	4413      	add	r3, r2
 8008c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c96:	463b      	mov	r3, r7
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	011a      	lsls	r2, r3, #4
 8008c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d116      	bne.n	8008ce2 <USB_EPStartXfer+0xb82>
 8008cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	e05f      	b.n	8008da2 <USB_EPStartXfer+0xc42>
 8008ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ce8:	d818      	bhi.n	8008d1c <USB_EPStartXfer+0xbbc>
 8008cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cee:	085b      	lsrs	r3, r3, #1
 8008cf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <USB_EPStartXfer+0xbaa>
 8008d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d04:	3301      	adds	r3, #1
 8008d06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	029b      	lsls	r3, r3, #10
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d18:	801a      	strh	r2, [r3, #0]
 8008d1a:	e042      	b.n	8008da2 <USB_EPStartXfer+0xc42>
 8008d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2a:	f003 031f 	and.w	r3, r3, #31
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d104      	bne.n	8008d3c <USB_EPStartXfer+0xbdc>
 8008d32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d36:	3b01      	subs	r3, #1
 8008d38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	029b      	lsls	r3, r3, #10
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	e024      	b.n	8008da2 <USB_EPStartXfer+0xc42>
 8008d58:	463b      	mov	r3, r7
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d11f      	bne.n	8008da2 <USB_EPStartXfer+0xc42>
 8008d62:	1d3b      	adds	r3, r7, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d6a:	1d3b      	adds	r3, r7, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d80:	463b      	mov	r3, r7
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	011a      	lsls	r2, r3, #4
 8008d88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008da2:	463b      	mov	r3, r7
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	891b      	ldrh	r3, [r3, #8]
 8008da8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dac:	463b      	mov	r3, r7
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6959      	ldr	r1, [r3, #20]
 8008db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008dbc:	1d38      	adds	r0, r7, #4
 8008dbe:	6800      	ldr	r0, [r0, #0]
 8008dc0:	f000 fe03 	bl	80099ca <USB_WritePMA>
          ep->xfer_buff += len;
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	695a      	ldr	r2, [r3, #20]
 8008dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dce:	441a      	add	r2, r3
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	463b      	mov	r3, r7
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d909      	bls.n	8008dfa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008de6:	463b      	mov	r3, r7
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6a1a      	ldr	r2, [r3, #32]
 8008dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df0:	1ad2      	subs	r2, r2, r3
 8008df2:	463b      	mov	r3, r7
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	621a      	str	r2, [r3, #32]
 8008df8:	e008      	b.n	8008e0c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008e04:	463b      	mov	r3, r7
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80ab 	beq.w	8008f6c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e16:	1d3b      	adds	r3, r7, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e1e:	463b      	mov	r3, r7
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	785b      	ldrb	r3, [r3, #1]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d16f      	bne.n	8008f08 <USB_EPStartXfer+0xda8>
 8008e28:	1d3b      	adds	r3, r7, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e30:	1d3b      	adds	r3, r7, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e40:	4413      	add	r3, r2
 8008e42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e46:	463b      	mov	r3, r7
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	011a      	lsls	r2, r3, #4
 8008e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e52:	4413      	add	r3, r2
 8008e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d116      	bne.n	8008e92 <USB_EPStartXfer+0xd32>
 8008e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e76:	801a      	strh	r2, [r3, #0]
 8008e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	e05b      	b.n	8008f4a <USB_EPStartXfer+0xdea>
 8008e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e96:	2b3e      	cmp	r3, #62	; 0x3e
 8008e98:	d818      	bhi.n	8008ecc <USB_EPStartXfer+0xd6c>
 8008e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <USB_EPStartXfer+0xd5a>
 8008eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	029b      	lsls	r3, r3, #10
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	e03e      	b.n	8008f4a <USB_EPStartXfer+0xdea>
 8008ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d104      	bne.n	8008eec <USB_EPStartXfer+0xd8c>
 8008ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	e020      	b.n	8008f4a <USB_EPStartXfer+0xdea>
 8008f08:	463b      	mov	r3, r7
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d11b      	bne.n	8008f4a <USB_EPStartXfer+0xdea>
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f22:	4413      	add	r3, r2
 8008f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f28:	463b      	mov	r3, r7
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	011a      	lsls	r2, r3, #4
 8008f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f34:	4413      	add	r3, r2
 8008f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	895b      	ldrh	r3, [r3, #10]
 8008f50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f54:	463b      	mov	r3, r7
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6959      	ldr	r1, [r3, #20]
 8008f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f64:	1d38      	adds	r0, r7, #4
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	f000 fd2f 	bl	80099ca <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f6c:	1d3b      	adds	r3, r7, #4
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	463b      	mov	r3, r7
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	f107 020a 	add.w	r2, r7, #10
 8008f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8a:	8013      	strh	r3, [r2, #0]
 8008f8c:	f107 030a 	add.w	r3, r7, #10
 8008f90:	f107 020a 	add.w	r2, r7, #10
 8008f94:	8812      	ldrh	r2, [r2, #0]
 8008f96:	f082 0210 	eor.w	r2, r2, #16
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	f107 030a 	add.w	r3, r7, #10
 8008fa0:	f107 020a 	add.w	r2, r7, #10
 8008fa4:	8812      	ldrh	r2, [r2, #0]
 8008fa6:	f082 0220 	eor.w	r2, r2, #32
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	1d3b      	adds	r3, r7, #4
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	463b      	mov	r3, r7
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	f107 030a 	add.w	r3, r7, #10
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	8013      	strh	r3, [r2, #0]
 8008fd4:	e3b5      	b.n	8009742 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	7b1b      	ldrb	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f040 8090 	bne.w	8009102 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	463b      	mov	r3, r7
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d90e      	bls.n	8009010 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699a      	ldr	r2, [r3, #24]
 8009002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009006:	1ad2      	subs	r2, r2, r3
 8009008:	463b      	mov	r3, r7
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	619a      	str	r2, [r3, #24]
 800900e:	e008      	b.n	8009022 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009010:	463b      	mov	r3, r7
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800901a:	463b      	mov	r3, r7
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009022:	1d3b      	adds	r3, r7, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800902a:	1d3b      	adds	r3, r7, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009032:	b29b      	uxth	r3, r3
 8009034:	461a      	mov	r2, r3
 8009036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800903a:	4413      	add	r3, r2
 800903c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009040:	463b      	mov	r3, r7
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	011a      	lsls	r2, r3, #4
 8009048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800904c:	4413      	add	r3, r2
 800904e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d116      	bne.n	800908c <USB_EPStartXfer+0xf2c>
 800905e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	e32c      	b.n	80096e6 <USB_EPStartXfer+0x1586>
 800908c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009090:	2b3e      	cmp	r3, #62	; 0x3e
 8009092:	d818      	bhi.n	80090c6 <USB_EPStartXfer+0xf66>
 8009094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800909e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <USB_EPStartXfer+0xf54>
 80090aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090ae:	3301      	adds	r3, #1
 80090b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	029b      	lsls	r3, r3, #10
 80090bc:	b29a      	uxth	r2, r3
 80090be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	e30f      	b.n	80096e6 <USB_EPStartXfer+0x1586>
 80090c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <USB_EPStartXfer+0xf86>
 80090dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090e0:	3b01      	subs	r3, #1
 80090e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e2f1      	b.n	80096e6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009102:	463b      	mov	r3, r7
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	78db      	ldrb	r3, [r3, #3]
 8009108:	2b02      	cmp	r3, #2
 800910a:	f040 818f 	bne.w	800942c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800910e:	463b      	mov	r3, r7
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d175      	bne.n	8009204 <USB_EPStartXfer+0x10a4>
 8009118:	1d3b      	adds	r3, r7, #4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009120:	1d3b      	adds	r3, r7, #4
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009128:	b29b      	uxth	r3, r3
 800912a:	461a      	mov	r2, r3
 800912c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009130:	4413      	add	r3, r2
 8009132:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009136:	463b      	mov	r3, r7
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	011a      	lsls	r2, r3, #4
 800913e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009142:	4413      	add	r3, r2
 8009144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009148:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800914c:	463b      	mov	r3, r7
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d116      	bne.n	8009184 <USB_EPStartXfer+0x1024>
 8009156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009162:	b29a      	uxth	r2, r3
 8009164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009168:	801a      	strh	r2, [r3, #0]
 800916a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917a:	b29a      	uxth	r2, r3
 800917c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009180:	801a      	strh	r2, [r3, #0]
 8009182:	e065      	b.n	8009250 <USB_EPStartXfer+0x10f0>
 8009184:	463b      	mov	r3, r7
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b3e      	cmp	r3, #62	; 0x3e
 800918c:	d81a      	bhi.n	80091c4 <USB_EPStartXfer+0x1064>
 800918e:	463b      	mov	r3, r7
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800919a:	463b      	mov	r3, r7
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <USB_EPStartXfer+0x1052>
 80091a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ac:	3301      	adds	r3, #1
 80091ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	029b      	lsls	r3, r3, #10
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	e045      	b.n	8009250 <USB_EPStartXfer+0x10f0>
 80091c4:	463b      	mov	r3, r7
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091d0:	463b      	mov	r3, r7
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 031f 	and.w	r3, r3, #31
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <USB_EPStartXfer+0x1088>
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e2:	3b01      	subs	r3, #1
 80091e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	029b      	lsls	r3, r3, #10
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	e025      	b.n	8009250 <USB_EPStartXfer+0x10f0>
 8009204:	463b      	mov	r3, r7
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d120      	bne.n	8009250 <USB_EPStartXfer+0x10f0>
 800920e:	1d3b      	adds	r3, r7, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009216:	1d3b      	adds	r3, r7, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921e:	b29b      	uxth	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009226:	4413      	add	r3, r2
 8009228:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800922c:	463b      	mov	r3, r7
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	011a      	lsls	r2, r3, #4
 8009234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009238:	4413      	add	r3, r2
 800923a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800923e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009242:	463b      	mov	r3, r7
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	b29a      	uxth	r2, r3
 800924a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009258:	463b      	mov	r3, r7
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	785b      	ldrb	r3, [r3, #1]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d175      	bne.n	800934e <USB_EPStartXfer+0x11ee>
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800926a:	1d3b      	adds	r3, r7, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009272:	b29b      	uxth	r3, r3
 8009274:	461a      	mov	r2, r3
 8009276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800927a:	4413      	add	r3, r2
 800927c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009280:	463b      	mov	r3, r7
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	011a      	lsls	r2, r3, #4
 8009288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800928c:	4413      	add	r3, r2
 800928e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009296:	463b      	mov	r3, r7
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d116      	bne.n	80092ce <USB_EPStartXfer+0x116e>
 80092a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092ca:	801a      	strh	r2, [r3, #0]
 80092cc:	e061      	b.n	8009392 <USB_EPStartXfer+0x1232>
 80092ce:	463b      	mov	r3, r7
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b3e      	cmp	r3, #62	; 0x3e
 80092d6:	d81a      	bhi.n	800930e <USB_EPStartXfer+0x11ae>
 80092d8:	463b      	mov	r3, r7
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092e4:	463b      	mov	r3, r7
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <USB_EPStartXfer+0x119c>
 80092f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092f6:	3301      	adds	r3, #1
 80092f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009300:	b29b      	uxth	r3, r3
 8009302:	029b      	lsls	r3, r3, #10
 8009304:	b29a      	uxth	r2, r3
 8009306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	e041      	b.n	8009392 <USB_EPStartXfer+0x1232>
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800931a:	463b      	mov	r3, r7
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f003 031f 	and.w	r3, r3, #31
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <USB_EPStartXfer+0x11d2>
 8009328:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800932c:	3b01      	subs	r3, #1
 800932e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009336:	b29b      	uxth	r3, r3
 8009338:	029b      	lsls	r3, r3, #10
 800933a:	b29b      	uxth	r3, r3
 800933c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009344:	b29a      	uxth	r2, r3
 8009346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800934a:	801a      	strh	r2, [r3, #0]
 800934c:	e021      	b.n	8009392 <USB_EPStartXfer+0x1232>
 800934e:	463b      	mov	r3, r7
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d11c      	bne.n	8009392 <USB_EPStartXfer+0x1232>
 8009358:	1d3b      	adds	r3, r7, #4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009360:	b29b      	uxth	r3, r3
 8009362:	461a      	mov	r2, r3
 8009364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009368:	4413      	add	r3, r2
 800936a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800936e:	463b      	mov	r3, r7
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	011a      	lsls	r2, r3, #4
 8009376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800937a:	4413      	add	r3, r2
 800937c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009384:	463b      	mov	r3, r7
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	b29a      	uxth	r2, r3
 800938c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009390:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009392:	463b      	mov	r3, r7
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 81a4 	beq.w	80096e6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800939e:	1d3b      	adds	r3, r7, #4
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	463b      	mov	r3, r7
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80093b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <USB_EPStartXfer+0x126a>
 80093be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80093c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10d      	bne.n	80093e6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80093ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 8187 	bne.w	80096e6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80093dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f040 8180 	bne.w	80096e6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80093e6:	1d3b      	adds	r3, r7, #4
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	463b      	mov	r3, r7
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009400:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009404:	1d3b      	adds	r3, r7, #4
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	463b      	mov	r3, r7
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	441a      	add	r2, r3
 8009412:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800941a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800941e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009422:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009426:	b29b      	uxth	r3, r3
 8009428:	8013      	strh	r3, [r2, #0]
 800942a:	e15c      	b.n	80096e6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800942c:	463b      	mov	r3, r7
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	78db      	ldrb	r3, [r3, #3]
 8009432:	2b01      	cmp	r3, #1
 8009434:	f040 8155 	bne.w	80096e2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009438:	463b      	mov	r3, r7
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	463b      	mov	r3, r7
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	429a      	cmp	r2, r3
 8009446:	d90e      	bls.n	8009466 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009448:	463b      	mov	r3, r7
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009452:	463b      	mov	r3, r7
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945c:	1ad2      	subs	r2, r2, r3
 800945e:	463b      	mov	r3, r7
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	619a      	str	r2, [r3, #24]
 8009464:	e008      	b.n	8009478 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009466:	463b      	mov	r3, r7
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009470:	463b      	mov	r3, r7
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2200      	movs	r2, #0
 8009476:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009478:	463b      	mov	r3, r7
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d16f      	bne.n	8009562 <USB_EPStartXfer+0x1402>
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800948a:	1d3b      	adds	r3, r7, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009492:	b29b      	uxth	r3, r3
 8009494:	461a      	mov	r2, r3
 8009496:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800949a:	4413      	add	r3, r2
 800949c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094a0:	463b      	mov	r3, r7
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	011a      	lsls	r2, r3, #4
 80094a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094ac:	4413      	add	r3, r2
 80094ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d116      	bne.n	80094ec <USB_EPStartXfer+0x138c>
 80094be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094d0:	801a      	strh	r2, [r3, #0]
 80094d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094e8:	801a      	strh	r2, [r3, #0]
 80094ea:	e05f      	b.n	80095ac <USB_EPStartXfer+0x144c>
 80094ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f0:	2b3e      	cmp	r3, #62	; 0x3e
 80094f2:	d818      	bhi.n	8009526 <USB_EPStartXfer+0x13c6>
 80094f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f8:	085b      	lsrs	r3, r3, #1
 80094fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80094fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <USB_EPStartXfer+0x13b4>
 800950a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800950e:	3301      	adds	r3, #1
 8009510:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009518:	b29b      	uxth	r3, r3
 800951a:	029b      	lsls	r3, r3, #10
 800951c:	b29a      	uxth	r2, r3
 800951e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009522:	801a      	strh	r2, [r3, #0]
 8009524:	e042      	b.n	80095ac <USB_EPStartXfer+0x144c>
 8009526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <USB_EPStartXfer+0x13e6>
 800953c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009540:	3b01      	subs	r3, #1
 8009542:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800954a:	b29b      	uxth	r3, r3
 800954c:	029b      	lsls	r3, r3, #10
 800954e:	b29b      	uxth	r3, r3
 8009550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009558:	b29a      	uxth	r2, r3
 800955a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e024      	b.n	80095ac <USB_EPStartXfer+0x144c>
 8009562:	463b      	mov	r3, r7
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d11f      	bne.n	80095ac <USB_EPStartXfer+0x144c>
 800956c:	1d3b      	adds	r3, r7, #4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009574:	1d3b      	adds	r3, r7, #4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957c:	b29b      	uxth	r3, r3
 800957e:	461a      	mov	r2, r3
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	4413      	add	r3, r2
 8009586:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800958a:	463b      	mov	r3, r7
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	011a      	lsls	r2, r3, #4
 8009592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009596:	4413      	add	r3, r2
 8009598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800959c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095aa:	801a      	strh	r2, [r3, #0]
 80095ac:	1d3b      	adds	r3, r7, #4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095b4:	463b      	mov	r3, r7
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d16f      	bne.n	800969e <USB_EPStartXfer+0x153e>
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095c6:	1d3b      	adds	r3, r7, #4
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	461a      	mov	r2, r3
 80095d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d6:	4413      	add	r3, r2
 80095d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095dc:	463b      	mov	r3, r7
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	011a      	lsls	r2, r3, #4
 80095e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095e8:	4413      	add	r3, r2
 80095ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80095f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d116      	bne.n	8009628 <USB_EPStartXfer+0x14c8>
 80095fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29b      	uxth	r3, r3
 8009602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009606:	b29a      	uxth	r2, r3
 8009608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800961a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800961e:	b29a      	uxth	r2, r3
 8009620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009624:	801a      	strh	r2, [r3, #0]
 8009626:	e05e      	b.n	80096e6 <USB_EPStartXfer+0x1586>
 8009628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962c:	2b3e      	cmp	r3, #62	; 0x3e
 800962e:	d818      	bhi.n	8009662 <USB_EPStartXfer+0x1502>
 8009630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800963a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <USB_EPStartXfer+0x14f0>
 8009646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800964a:	3301      	adds	r3, #1
 800964c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009650:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009654:	b29b      	uxth	r3, r3
 8009656:	029b      	lsls	r3, r3, #10
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800965e:	801a      	strh	r2, [r3, #0]
 8009660:	e041      	b.n	80096e6 <USB_EPStartXfer+0x1586>
 8009662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800966c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009670:	f003 031f 	and.w	r3, r3, #31
 8009674:	2b00      	cmp	r3, #0
 8009676:	d104      	bne.n	8009682 <USB_EPStartXfer+0x1522>
 8009678:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800967c:	3b01      	subs	r3, #1
 800967e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009686:	b29b      	uxth	r3, r3
 8009688:	029b      	lsls	r3, r3, #10
 800968a:	b29b      	uxth	r3, r3
 800968c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009694:	b29a      	uxth	r2, r3
 8009696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	e023      	b.n	80096e6 <USB_EPStartXfer+0x1586>
 800969e:	463b      	mov	r3, r7
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d11e      	bne.n	80096e6 <USB_EPStartXfer+0x1586>
 80096a8:	1d3b      	adds	r3, r7, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b8:	4413      	add	r3, r2
 80096ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096be:	463b      	mov	r3, r7
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	011a      	lsls	r2, r3, #4
 80096c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ca:	4413      	add	r3, r2
 80096cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d8:	b29a      	uxth	r2, r3
 80096da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	e001      	b.n	80096e6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e02e      	b.n	8009744 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096e6:	1d3b      	adds	r3, r7, #4
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	463b      	mov	r3, r7
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009700:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009704:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800970c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009710:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009714:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009718:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	463b      	mov	r3, r7
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	441a      	add	r2, r3
 800972a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800972e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973e:	b29b      	uxth	r3, r3
 8009740:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800974e:	b480      	push	{r7}
 8009750:	b085      	sub	sp, #20
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d020      	beq.n	80097a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009776:	81bb      	strh	r3, [r7, #12]
 8009778:	89bb      	ldrh	r3, [r7, #12]
 800977a:	f083 0310 	eor.w	r3, r3, #16
 800977e:	81bb      	strh	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	441a      	add	r2, r3
 800978a:	89bb      	ldrh	r3, [r7, #12]
 800978c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979c:	b29b      	uxth	r3, r3
 800979e:	8013      	strh	r3, [r2, #0]
 80097a0:	e01f      	b.n	80097e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b8:	81fb      	strh	r3, [r7, #14]
 80097ba:	89fb      	ldrh	r3, [r7, #14]
 80097bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097c0:	81fb      	strh	r3, [r7, #14]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	441a      	add	r2, r3
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097de:	b29b      	uxth	r3, r3
 80097e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bc80      	pop	{r7}
 80097ec:	4770      	bx	lr

080097ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	7b1b      	ldrb	r3, [r3, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 809d 	bne.w	800993c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d04c      	beq.n	80098a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	823b      	strh	r3, [r7, #16]
 8009818:	8a3b      	ldrh	r3, [r7, #16]
 800981a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981e:	2b00      	cmp	r3, #0
 8009820:	d01b      	beq.n	800985a <USB_EPClearStall+0x6c>
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009838:	81fb      	strh	r3, [r7, #14]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	441a      	add	r2, r3
 8009844:	89fb      	ldrh	r3, [r7, #14]
 8009846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800984a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800984e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009856:	b29b      	uxth	r3, r3
 8009858:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	78db      	ldrb	r3, [r3, #3]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d06c      	beq.n	800993c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009878:	81bb      	strh	r3, [r7, #12]
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	f083 0320 	eor.w	r3, r3, #32
 8009880:	81bb      	strh	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	441a      	add	r2, r3
 800988c:	89bb      	ldrh	r3, [r7, #12]
 800988e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800989e:	b29b      	uxth	r3, r3
 80098a0:	8013      	strh	r3, [r2, #0]
 80098a2:	e04b      	b.n	800993c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	82fb      	strh	r3, [r7, #22]
 80098b2:	8afb      	ldrh	r3, [r7, #22]
 80098b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01b      	beq.n	80098f4 <USB_EPClearStall+0x106>
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d2:	82bb      	strh	r3, [r7, #20]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	441a      	add	r2, r3
 80098de:	8abb      	ldrh	r3, [r7, #20]
 80098e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29b      	uxth	r3, r3
 8009902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990a:	827b      	strh	r3, [r7, #18]
 800990c:	8a7b      	ldrh	r3, [r7, #18]
 800990e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009912:	827b      	strh	r3, [r7, #18]
 8009914:	8a7b      	ldrh	r3, [r7, #18]
 8009916:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800991a:	827b      	strh	r3, [r7, #18]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	441a      	add	r2, r3
 8009926:	8a7b      	ldrh	r3, [r7, #18]
 8009928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800992c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	b29b      	uxth	r3, r3
 800993a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	bc80      	pop	{r7}
 8009946:	4770      	bx	lr

08009948 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d103      	bne.n	8009962 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2280      	movs	r2, #128	; 0x80
 800995e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr

0800996e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr

08009982 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	bc80      	pop	{r7}
 8009994:	4770      	bx	lr

08009996 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80099a8:	68fb      	ldr	r3, [r7, #12]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr

080099b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bc80      	pop	{r7}
 80099c8:	4770      	bx	lr

080099ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b08d      	sub	sp, #52	; 0x34
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	4611      	mov	r1, r2
 80099d6:	461a      	mov	r2, r3
 80099d8:	460b      	mov	r3, r1
 80099da:	80fb      	strh	r3, [r7, #6]
 80099dc:	4613      	mov	r3, r2
 80099de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80099e0:	88bb      	ldrh	r3, [r7, #4]
 80099e2:	3301      	adds	r3, #1
 80099e4:	085b      	lsrs	r3, r3, #1
 80099e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	005a      	lsls	r2, r3, #1
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a02:	e01e      	b.n	8009a42 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	3302      	adds	r3, #2
 8009a34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	3301      	adds	r3, #1
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1dd      	bne.n	8009a04 <USB_WritePMA+0x3a>
  }
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	3734      	adds	r7, #52	; 0x34
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bc80      	pop	{r7}
 8009a52:	4770      	bx	lr

08009a54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b08b      	sub	sp, #44	; 0x2c
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	460b      	mov	r3, r1
 8009a64:	80fb      	strh	r3, [r7, #6]
 8009a66:	4613      	mov	r3, r2
 8009a68:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009a6a:	88bb      	ldrh	r3, [r7, #4]
 8009a6c:	085b      	lsrs	r3, r3, #1
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	005a      	lsls	r2, r3, #1
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a86:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8c:	e01b      	b.n	8009ac6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	3302      	adds	r3, #2
 8009a9a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	0a1b      	lsrs	r3, r3, #8
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	3302      	adds	r3, #2
 8009abe:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e0      	bne.n	8009a8e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009acc:	88bb      	ldrh	r3, [r7, #4]
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	701a      	strb	r2, [r3, #0]
  }
}
 8009ae8:	bf00      	nop
 8009aea:	372c      	adds	r7, #44	; 0x2c
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr

08009af2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	7c1b      	ldrb	r3, [r3, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d115      	bne.n	8009b36 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b0e:	2202      	movs	r2, #2
 8009b10:	2181      	movs	r1, #129	; 0x81
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 fea1 	bl	800b85a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b22:	2202      	movs	r2, #2
 8009b24:	2101      	movs	r1, #1
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 fe97 	bl	800b85a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009b34:	e012      	b.n	8009b5c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b36:	2340      	movs	r3, #64	; 0x40
 8009b38:	2202      	movs	r2, #2
 8009b3a:	2181      	movs	r1, #129	; 0x81
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f001 fe8c 	bl	800b85a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b48:	2340      	movs	r3, #64	; 0x40
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 fe83 	bl	800b85a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b5c:	2308      	movs	r3, #8
 8009b5e:	2203      	movs	r2, #3
 8009b60:	2182      	movs	r1, #130	; 0x82
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 fe79 	bl	800b85a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b72:	f001 ff99 	bl	800baa8 <USBD_static_malloc>
 8009b76:	4602      	mov	r2, r0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
 8009b8c:	e026      	b.n	8009bdc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b94:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7c1b      	ldrb	r3, [r3, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 ff39 	bl	800ba3c <USBD_LL_PrepareReceive>
 8009bca:	e007      	b.n	8009bdc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bd2:	2340      	movs	r3, #64	; 0x40
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 ff30 	bl	800ba3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009bf6:	2181      	movs	r1, #129	; 0x81
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 fe54 	bl	800b8a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c04:	2101      	movs	r1, #1
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 fe4d 	bl	800b8a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009c14:	2182      	movs	r1, #130	; 0x82
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fe45 	bl	800b8a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00e      	beq.n	8009c4a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 ff3f 	bl	800bac0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d039      	beq.n	8009cf2 <USBD_CDC_Setup+0x9e>
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d17f      	bne.n	8009d82 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	88db      	ldrh	r3, [r3, #6]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d029      	beq.n	8009cde <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	b25b      	sxtb	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da11      	bge.n	8009cb8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009ca0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	88d2      	ldrh	r2, [r2, #6]
 8009ca6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ca8:	6939      	ldr	r1, [r7, #16]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	88db      	ldrh	r3, [r3, #6]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 fa0a 	bl	800b0ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009cb6:	e06b      	b.n	8009d90 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	785a      	ldrb	r2, [r3, #1]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	88db      	ldrh	r3, [r3, #6]
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cce:	6939      	ldr	r1, [r7, #16]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	88db      	ldrh	r3, [r3, #6]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 fa25 	bl	800b126 <USBD_CtlPrepareRx>
      break;
 8009cdc:	e058      	b.n	8009d90 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	7850      	ldrb	r0, [r2, #1]
 8009cea:	2200      	movs	r2, #0
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	4798      	blx	r3
      break;
 8009cf0:	e04e      	b.n	8009d90 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	2b0b      	cmp	r3, #11
 8009cf8:	d02e      	beq.n	8009d58 <USBD_CDC_Setup+0x104>
 8009cfa:	2b0b      	cmp	r3, #11
 8009cfc:	dc38      	bgt.n	8009d70 <USBD_CDC_Setup+0x11c>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <USBD_CDC_Setup+0xb4>
 8009d02:	2b0a      	cmp	r3, #10
 8009d04:	d014      	beq.n	8009d30 <USBD_CDC_Setup+0xdc>
 8009d06:	e033      	b.n	8009d70 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d107      	bne.n	8009d22 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009d12:	f107 030c 	add.w	r3, r7, #12
 8009d16:	2202      	movs	r2, #2
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f9d5 	bl	800b0ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d20:	e02e      	b.n	8009d80 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 f966 	bl	800aff6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d2e:	e027      	b.n	8009d80 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d107      	bne.n	8009d4a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d3a:	f107 030f 	add.w	r3, r7, #15
 8009d3e:	2201      	movs	r2, #1
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 f9c1 	bl	800b0ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d48:	e01a      	b.n	8009d80 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 f952 	bl	800aff6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	75fb      	strb	r3, [r7, #23]
          break;
 8009d56:	e013      	b.n	8009d80 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d00d      	beq.n	8009d7e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 f946 	bl	800aff6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d6e:	e006      	b.n	8009d7e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f93f 	bl	800aff6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8009d7c:	e000      	b.n	8009d80 <USBD_CDC_Setup+0x12c>
          break;
 8009d7e:	bf00      	nop
      }
      break;
 8009d80:	e006      	b.n	8009d90 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f936 	bl	800aff6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8e:	bf00      	nop
  }

  return ret;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d03a      	beq.n	8009e36 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	440b      	add	r3, r1
 8009dce:	331c      	adds	r3, #28
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d029      	beq.n	8009e2a <USBD_CDC_DataIn+0x90>
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	440b      	add	r3, r1
 8009de4:	331c      	adds	r3, #28
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	78f9      	ldrb	r1, [r7, #3]
 8009dea:	68b8      	ldr	r0, [r7, #8]
 8009dec:	460b      	mov	r3, r1
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	4403      	add	r3, r0
 8009df6:	3338      	adds	r3, #56	; 0x38
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	fbb2 f1f3 	udiv	r1, r2, r3
 8009dfe:	fb03 f301 	mul.w	r3, r3, r1
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d110      	bne.n	8009e2a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009e08:	78fa      	ldrb	r2, [r7, #3]
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	440b      	add	r3, r1
 8009e16:	331c      	adds	r3, #28
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e1c:	78f9      	ldrb	r1, [r7, #3]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2200      	movs	r2, #0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 fde7 	bl	800b9f6 <USBD_LL_Transmit>
 8009e28:	e003      	b.n	8009e32 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e000      	b.n	8009e38 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009e36:	2302      	movs	r3, #2
  }
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fe12 	bl	800ba82 <USBD_LL_GetRxDataSize>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00d      	beq.n	8009e8c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e84:	4611      	mov	r1, r2
 8009e86:	4798      	blx	r3

    return USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e000      	b.n	8009e8e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009e8c:	2302      	movs	r3, #2
  }
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d015      	beq.n	8009edc <USBD_CDC_EP0_RxReady+0x46>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009eb6:	2bff      	cmp	r3, #255	; 0xff
 8009eb8:	d010      	beq.n	8009edc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009ec8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ed0:	b292      	uxth	r2, r2
 8009ed2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	22ff      	movs	r2, #255	; 0xff
 8009ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2243      	movs	r2, #67	; 0x43
 8009ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009ef6:	4b03      	ldr	r3, [pc, #12]	; (8009f04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bc80      	pop	{r7}
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000094 	.word	0x20000094

08009f08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2243      	movs	r2, #67	; 0x43
 8009f14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009f16:	4b03      	ldr	r3, [pc, #12]	; (8009f24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	20000050 	.word	0x20000050

08009f28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2243      	movs	r2, #67	; 0x43
 8009f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009f36:	4b03      	ldr	r3, [pc, #12]	; (8009f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	200000d8 	.word	0x200000d8

08009f48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	220a      	movs	r2, #10
 8009f54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009f56:	4b03      	ldr	r3, [pc, #12]	; (8009f64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	2000000c 	.word	0x2000000c

08009f68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009f72:	2302      	movs	r3, #2
 8009f74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr

08009f94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bc80      	pop	{r7}
 8009fc4:	4770      	bx	lr

08009fc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr

08009fec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a002:	2b00      	cmp	r3, #0
 800a004:	d01c      	beq.n	800a040 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d115      	bne.n	800a03c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2181      	movs	r1, #129	; 0x81
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fcdf 	bl	800b9f6 <USBD_LL_Transmit>

      return USBD_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	e002      	b.n	800a042 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a040:	2302      	movs	r3, #2
  }
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a058:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a060:	2b00      	cmp	r3, #0
 800a062:	d017      	beq.n	800a094 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7c1b      	ldrb	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a072:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a076:	2101      	movs	r1, #1
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 fcdf 	bl	800ba3c <USBD_LL_PrepareReceive>
 800a07e:	e007      	b.n	800a090 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	2101      	movs	r1, #1
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 fcd6 	bl	800ba3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	e000      	b.n	800a096 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a094:	2302      	movs	r3, #2
  }
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e01a      	b.n	800a0ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	79fa      	ldrb	r2, [r7, #7]
 800a0e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f001 fb43 	bl	800b770 <USBD_LL_Init>

  return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d006      	beq.n	800a116 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
 800a114:	e001      	b.n	800a11a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a116:	2302      	movs	r3, #2
 800a118:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr

0800a126 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fb78 	bl	800b824 <USBD_LL_Start>

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bc80      	pop	{r7}
 800a150:	4770      	bx	lr

0800a152 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a15e:	2302      	movs	r3, #2
 800a160:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00c      	beq.n	800a186 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	78fa      	ldrb	r2, [r7, #3]
 800a176:	4611      	mov	r1, r2
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	4798      	blx	r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 fed8 	bl	800af7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1dc:	461a      	mov	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a1ea:	f003 031f 	and.w	r3, r3, #31
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d016      	beq.n	800a220 <USBD_LL_SetupStage+0x6a>
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d81c      	bhi.n	800a230 <USBD_LL_SetupStage+0x7a>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <USBD_LL_SetupStage+0x4a>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d008      	beq.n	800a210 <USBD_LL_SetupStage+0x5a>
 800a1fe:	e017      	b.n	800a230 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f9cb 	bl	800a5a4 <USBD_StdDevReq>
      break;
 800a20e:	e01a      	b.n	800a246 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fa2d 	bl	800a678 <USBD_StdItfReq>
      break;
 800a21e:	e012      	b.n	800a246 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fa6d 	bl	800a708 <USBD_StdEPReq>
      break;
 800a22e:	e00a      	b.n	800a246 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a236:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 fb50 	bl	800b8e4 <USBD_LL_StallEP>
      break;
 800a244:	bf00      	nop
  }

  return USBD_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	460b      	mov	r3, r1
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d14b      	bne.n	800a2fc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a26a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a272:	2b03      	cmp	r3, #3
 800a274:	d134      	bne.n	800a2e0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d919      	bls.n	800a2b6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	68da      	ldr	r2, [r3, #12]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a298:	429a      	cmp	r2, r3
 800a29a:	d203      	bcs.n	800a2a4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	e002      	b.n	800a2aa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 ff57 	bl	800b162 <USBD_CtlContinueRx>
 800a2b4:	e038      	b.n	800a328 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d105      	bne.n	800a2d8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 ff54 	bl	800b186 <USBD_CtlSendStatus>
 800a2de:	e023      	b.n	800a328 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2e6:	2b05      	cmp	r3, #5
 800a2e8:	d11e      	bne.n	800a328 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f001 faf5 	bl	800b8e4 <USBD_LL_StallEP>
 800a2fa:	e015      	b.n	800a328 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00d      	beq.n	800a324 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d108      	bne.n	800a324 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	7afa      	ldrb	r2, [r7, #11]
 800a31c:	4611      	mov	r1, r2
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	4798      	blx	r3
 800a322:	e001      	b.n	800a328 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a324:	2302      	movs	r3, #2
 800a326:	e000      	b.n	800a32a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b086      	sub	sp, #24
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	460b      	mov	r3, r1
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d17f      	bne.n	800a446 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3314      	adds	r3, #20
 800a34a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a352:	2b02      	cmp	r3, #2
 800a354:	d15c      	bne.n	800a410 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d915      	bls.n	800a38e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	1ad2      	subs	r2, r2, r3
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	b29b      	uxth	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 fec1 	bl	800b102 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a380:	2300      	movs	r3, #0
 800a382:	2200      	movs	r2, #0
 800a384:	2100      	movs	r1, #0
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f001 fb58 	bl	800ba3c <USBD_LL_PrepareReceive>
 800a38c:	e04e      	b.n	800a42c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	6912      	ldr	r2, [r2, #16]
 800a396:	fbb3 f1f2 	udiv	r1, r3, r2
 800a39a:	fb02 f201 	mul.w	r2, r2, r1
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d11c      	bne.n	800a3de <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d316      	bcc.n	800a3de <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d20f      	bcs.n	800a3de <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 fe9d 	bl	800b102 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f001 fb30 	bl	800ba3c <USBD_LL_PrepareReceive>
 800a3dc:	e026      	b.n	800a42c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d105      	bne.n	800a400 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a400:	2180      	movs	r1, #128	; 0x80
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f001 fa6e 	bl	800b8e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 fecf 	bl	800b1ac <USBD_CtlReceiveStatus>
 800a40e:	e00d      	b.n	800a42c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a416:	2b04      	cmp	r3, #4
 800a418:	d004      	beq.n	800a424 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a420:	2b00      	cmp	r3, #0
 800a422:	d103      	bne.n	800a42c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a424:	2180      	movs	r1, #128	; 0x80
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f001 fa5c 	bl	800b8e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a432:	2b01      	cmp	r3, #1
 800a434:	d11d      	bne.n	800a472 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff fe81 	bl	800a13e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a444:	e015      	b.n	800a472 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00d      	beq.n	800a46e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d108      	bne.n	800a46e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	7afa      	ldrb	r2, [r7, #11]
 800a466:	4611      	mov	r1, r2
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	4798      	blx	r3
 800a46c:	e001      	b.n	800a472 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a46e:	2302      	movs	r3, #2
 800a470:	e000      	b.n	800a474 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a484:	2340      	movs	r3, #64	; 0x40
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 f9e5 	bl	800b85a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2240      	movs	r2, #64	; 0x40
 800a49c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4a0:	2340      	movs	r3, #64	; 0x40
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2180      	movs	r1, #128	; 0x80
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 f9d7 	bl	800b85a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2240      	movs	r2, #64	; 0x40
 800a4b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d009      	beq.n	800a4f4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6852      	ldr	r2, [r2, #4]
 800a4ec:	b2d2      	uxtb	r2, r2
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	4798      	blx	r3
  }

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	78fa      	ldrb	r2, [r7, #3]
 800a50e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr

0800a51c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2204      	movs	r2, #4
 800a534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	bc80      	pop	{r7}
 800a542:	4770      	bx	lr

0800a544 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a552:	2b04      	cmp	r3, #4
 800a554:	d105      	bne.n	800a562 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr

0800a56e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d10b      	bne.n	800a598 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d005      	beq.n	800a598 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a592:	69db      	ldr	r3, [r3, #28]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d005      	beq.n	800a5ca <USBD_StdDevReq+0x26>
 800a5be:	2b40      	cmp	r3, #64	; 0x40
 800a5c0:	d84f      	bhi.n	800a662 <USBD_StdDevReq+0xbe>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d009      	beq.n	800a5da <USBD_StdDevReq+0x36>
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	d14b      	bne.n	800a662 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
      break;
 800a5d8:	e048      	b.n	800a66c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b09      	cmp	r3, #9
 800a5e0:	d839      	bhi.n	800a656 <USBD_StdDevReq+0xb2>
 800a5e2:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <USBD_StdDevReq+0x44>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a639 	.word	0x0800a639
 800a5ec:	0800a64d 	.word	0x0800a64d
 800a5f0:	0800a657 	.word	0x0800a657
 800a5f4:	0800a643 	.word	0x0800a643
 800a5f8:	0800a657 	.word	0x0800a657
 800a5fc:	0800a61b 	.word	0x0800a61b
 800a600:	0800a611 	.word	0x0800a611
 800a604:	0800a657 	.word	0x0800a657
 800a608:	0800a62f 	.word	0x0800a62f
 800a60c:	0800a625 	.word	0x0800a625
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9dc 	bl	800a9d0 <USBD_GetDescriptor>
          break;
 800a618:	e022      	b.n	800a660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fb3f 	bl	800aca0 <USBD_SetAddress>
          break;
 800a622:	e01d      	b.n	800a660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fb7e 	bl	800ad28 <USBD_SetConfig>
          break;
 800a62c:	e018      	b.n	800a660 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fc07 	bl	800ae44 <USBD_GetConfig>
          break;
 800a636:	e013      	b.n	800a660 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc37 	bl	800aeae <USBD_GetStatus>
          break;
 800a640:	e00e      	b.n	800a660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fc65 	bl	800af14 <USBD_SetFeature>
          break;
 800a64a:	e009      	b.n	800a660 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fc74 	bl	800af3c <USBD_ClrFeature>
          break;
 800a654:	e004      	b.n	800a660 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fccc 	bl	800aff6 <USBD_CtlError>
          break;
 800a65e:	bf00      	nop
      }
      break;
 800a660:	e004      	b.n	800a66c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fcc6 	bl	800aff6 <USBD_CtlError>
      break;
 800a66a:	bf00      	nop
  }

  return ret;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop

0800a678 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a68e:	2b40      	cmp	r3, #64	; 0x40
 800a690:	d005      	beq.n	800a69e <USBD_StdItfReq+0x26>
 800a692:	2b40      	cmp	r3, #64	; 0x40
 800a694:	d82e      	bhi.n	800a6f4 <USBD_StdItfReq+0x7c>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <USBD_StdItfReq+0x26>
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d12a      	bne.n	800a6f4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d81d      	bhi.n	800a6e6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	889b      	ldrh	r3, [r3, #4]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d813      	bhi.n	800a6dc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	88db      	ldrh	r3, [r3, #6]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d110      	bne.n	800a6f0 <USBD_StdItfReq+0x78>
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10d      	bne.n	800a6f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fd56 	bl	800b186 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6da:	e009      	b.n	800a6f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fc89 	bl	800aff6 <USBD_CtlError>
          break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc84 	bl	800aff6 <USBD_CtlError>
          break;
 800a6ee:	e000      	b.n	800a6f2 <USBD_StdItfReq+0x7a>
          break;
 800a6f0:	bf00      	nop
      }
      break;
 800a6f2:	e004      	b.n	800a6fe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fc7d 	bl	800aff6 <USBD_CtlError>
      break;
 800a6fc:	bf00      	nop
  }

  return USBD_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	889b      	ldrh	r3, [r3, #4]
 800a71a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a724:	2b40      	cmp	r3, #64	; 0x40
 800a726:	d007      	beq.n	800a738 <USBD_StdEPReq+0x30>
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	f200 8146 	bhi.w	800a9ba <USBD_StdEPReq+0x2b2>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <USBD_StdEPReq+0x40>
 800a732:	2b20      	cmp	r3, #32
 800a734:	f040 8141 	bne.w	800a9ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	4798      	blx	r3
      break;
 800a746:	e13d      	b.n	800a9c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a750:	2b20      	cmp	r3, #32
 800a752:	d10a      	bne.n	800a76a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4798      	blx	r3
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	e12d      	b.n	800a9c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d007      	beq.n	800a782 <USBD_StdEPReq+0x7a>
 800a772:	2b03      	cmp	r3, #3
 800a774:	f300 811b 	bgt.w	800a9ae <USBD_StdEPReq+0x2a6>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d072      	beq.n	800a862 <USBD_StdEPReq+0x15a>
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d03a      	beq.n	800a7f6 <USBD_StdEPReq+0xee>
 800a780:	e115      	b.n	800a9ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d002      	beq.n	800a792 <USBD_StdEPReq+0x8a>
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d015      	beq.n	800a7bc <USBD_StdEPReq+0xb4>
 800a790:	e02b      	b.n	800a7ea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <USBD_StdEPReq+0xaa>
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	2b80      	cmp	r3, #128	; 0x80
 800a79c:	d009      	beq.n	800a7b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f89e 	bl	800b8e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a7a8:	2180      	movs	r1, #128	; 0x80
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f89a 	bl	800b8e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7b0:	e020      	b.n	800a7f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fc1e 	bl	800aff6 <USBD_CtlError>
              break;
 800a7ba:	e01b      	b.n	800a7f4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	885b      	ldrh	r3, [r3, #2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10e      	bne.n	800a7e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <USBD_StdEPReq+0xda>
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d008      	beq.n	800a7e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	88db      	ldrh	r3, [r3, #6]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 f881 	bl	800b8e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fccf 	bl	800b186 <USBD_CtlSendStatus>

              break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc02 	bl	800aff6 <USBD_CtlError>
              break;
 800a7f2:	bf00      	nop
          }
          break;
 800a7f4:	e0e0      	b.n	800a9b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d002      	beq.n	800a806 <USBD_StdEPReq+0xfe>
 800a800:	2b03      	cmp	r3, #3
 800a802:	d015      	beq.n	800a830 <USBD_StdEPReq+0x128>
 800a804:	e026      	b.n	800a854 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00c      	beq.n	800a826 <USBD_StdEPReq+0x11e>
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b80      	cmp	r3, #128	; 0x80
 800a810:	d009      	beq.n	800a826 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 f864 	bl	800b8e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a81c:	2180      	movs	r1, #128	; 0x80
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f860 	bl	800b8e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a824:	e01c      	b.n	800a860 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fbe4 	bl	800aff6 <USBD_CtlError>
              break;
 800a82e:	e017      	b.n	800a860 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	885b      	ldrh	r3, [r3, #2]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d112      	bne.n	800a85e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 f86b 	bl	800b922 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc9a 	bl	800b186 <USBD_CtlSendStatus>
              }
              break;
 800a852:	e004      	b.n	800a85e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fbcd 	bl	800aff6 <USBD_CtlError>
              break;
 800a85c:	e000      	b.n	800a860 <USBD_StdEPReq+0x158>
              break;
 800a85e:	bf00      	nop
          }
          break;
 800a860:	e0aa      	b.n	800a9b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d002      	beq.n	800a872 <USBD_StdEPReq+0x16a>
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d032      	beq.n	800a8d6 <USBD_StdEPReq+0x1ce>
 800a870:	e097      	b.n	800a9a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d007      	beq.n	800a888 <USBD_StdEPReq+0x180>
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b80      	cmp	r3, #128	; 0x80
 800a87c:	d004      	beq.n	800a888 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fbb8 	bl	800aff6 <USBD_CtlError>
                break;
 800a886:	e091      	b.n	800a9ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da0b      	bge.n	800a8a8 <USBD_StdEPReq+0x1a0>
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	3310      	adds	r3, #16
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	e00b      	b.n	800a8c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	4413      	add	r3, r2
 800a8be:	3304      	adds	r3, #4
 800a8c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fbfb 	bl	800b0ca <USBD_CtlSendData>
              break;
 800a8d4:	e06a      	b.n	800a9ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da11      	bge.n	800a902 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3318      	adds	r3, #24
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d117      	bne.n	800a928 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fb7b 	bl	800aff6 <USBD_CtlError>
                  break;
 800a900:	e054      	b.n	800a9ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	f003 020f 	and.w	r2, r3, #15
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	4613      	mov	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	440b      	add	r3, r1
 800a914:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fb68 	bl	800aff6 <USBD_CtlError>
                  break;
 800a926:	e041      	b.n	800a9ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da0b      	bge.n	800a948 <USBD_StdEPReq+0x240>
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	3310      	adds	r3, #16
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4413      	add	r3, r2
 800a944:	3304      	adds	r3, #4
 800a946:	e00b      	b.n	800a960 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	3304      	adds	r3, #4
 800a960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <USBD_StdEPReq+0x266>
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b80      	cmp	r3, #128	; 0x80
 800a96c:	d103      	bne.n	800a976 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e00e      	b.n	800a994 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fff0 	bl	800b960 <USBD_LL_IsStallEP>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	e002      	b.n	800a994 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2202      	movs	r2, #2
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fb95 	bl	800b0ca <USBD_CtlSendData>
              break;
 800a9a0:	e004      	b.n	800a9ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fb26 	bl	800aff6 <USBD_CtlError>
              break;
 800a9aa:	bf00      	nop
          }
          break;
 800a9ac:	e004      	b.n	800a9b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fb20 	bl	800aff6 <USBD_CtlError>
          break;
 800a9b6:	bf00      	nop
      }
      break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb1a 	bl	800aff6 <USBD_CtlError>
      break;
 800a9c2:	bf00      	nop
  }

  return ret;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	2b06      	cmp	r3, #6
 800a9f2:	f200 8128 	bhi.w	800ac46 <USBD_GetDescriptor+0x276>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <USBD_GetDescriptor+0x2c>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa19 	.word	0x0800aa19
 800aa00:	0800aa31 	.word	0x0800aa31
 800aa04:	0800aa71 	.word	0x0800aa71
 800aa08:	0800ac47 	.word	0x0800ac47
 800aa0c:	0800ac47 	.word	0x0800ac47
 800aa10:	0800abe7 	.word	0x0800abe7
 800aa14:	0800ac13 	.word	0x0800ac13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7c12      	ldrb	r2, [r2, #16]
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
      break;
 800aa2e:	e112      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	7c1b      	ldrb	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10d      	bne.n	800aa54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa40:	f107 0208 	add.w	r2, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	2202      	movs	r2, #2
 800aa50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa52:	e100      	b.n	800ac56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	f107 0208 	add.w	r2, r7, #8
 800aa60:	4610      	mov	r0, r2
 800aa62:	4798      	blx	r3
 800aa64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	701a      	strb	r2, [r3, #0]
      break;
 800aa6e:	e0f2      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	885b      	ldrh	r3, [r3, #2]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	f200 80ac 	bhi.w	800abd4 <USBD_GetDescriptor+0x204>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <USBD_GetDescriptor+0xb4>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aa9d 	.word	0x0800aa9d
 800aa88:	0800aad1 	.word	0x0800aad1
 800aa8c:	0800ab05 	.word	0x0800ab05
 800aa90:	0800ab39 	.word	0x0800ab39
 800aa94:	0800ab6d 	.word	0x0800ab6d
 800aa98:	0800aba1 	.word	0x0800aba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7c12      	ldrb	r2, [r2, #16]
 800aab4:	f107 0108 	add.w	r1, r7, #8
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aabe:	e091      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fa97 	bl	800aff6 <USBD_CtlError>
            err++;
 800aac8:	7afb      	ldrb	r3, [r7, #11]
 800aaca:	3301      	adds	r3, #1
 800aacc:	72fb      	strb	r3, [r7, #11]
          break;
 800aace:	e089      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	7c12      	ldrb	r2, [r2, #16]
 800aae8:	f107 0108 	add.w	r1, r7, #8
 800aaec:	4610      	mov	r0, r2
 800aaee:	4798      	blx	r3
 800aaf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaf2:	e077      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fa7d 	bl	800aff6 <USBD_CtlError>
            err++;
 800aafc:	7afb      	ldrb	r3, [r7, #11]
 800aafe:	3301      	adds	r3, #1
 800ab00:	72fb      	strb	r3, [r7, #11]
          break;
 800ab02:	e06f      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	7c12      	ldrb	r2, [r2, #16]
 800ab1c:	f107 0108 	add.w	r1, r7, #8
 800ab20:	4610      	mov	r0, r2
 800ab22:	4798      	blx	r3
 800ab24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab26:	e05d      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fa63 	bl	800aff6 <USBD_CtlError>
            err++;
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	3301      	adds	r3, #1
 800ab34:	72fb      	strb	r3, [r7, #11]
          break;
 800ab36:	e055      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	7c12      	ldrb	r2, [r2, #16]
 800ab50:	f107 0108 	add.w	r1, r7, #8
 800ab54:	4610      	mov	r0, r2
 800ab56:	4798      	blx	r3
 800ab58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab5a:	e043      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fa49 	bl	800aff6 <USBD_CtlError>
            err++;
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	3301      	adds	r3, #1
 800ab68:	72fb      	strb	r3, [r7, #11]
          break;
 800ab6a:	e03b      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	7c12      	ldrb	r2, [r2, #16]
 800ab84:	f107 0108 	add.w	r1, r7, #8
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
 800ab8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8e:	e029      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa2f 	bl	800aff6 <USBD_CtlError>
            err++;
 800ab98:	7afb      	ldrb	r3, [r7, #11]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9e:	e021      	b.n	800abe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	7c12      	ldrb	r2, [r2, #16]
 800abb8:	f107 0108 	add.w	r1, r7, #8
 800abbc:	4610      	mov	r0, r2
 800abbe:	4798      	blx	r3
 800abc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abc2:	e00f      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fa15 	bl	800aff6 <USBD_CtlError>
            err++;
 800abcc:	7afb      	ldrb	r3, [r7, #11]
 800abce:	3301      	adds	r3, #1
 800abd0:	72fb      	strb	r3, [r7, #11]
          break;
 800abd2:	e007      	b.n	800abe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa0d 	bl	800aff6 <USBD_CtlError>
          err++;
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	3301      	adds	r3, #1
 800abe0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800abe2:	e038      	b.n	800ac56 <USBD_GetDescriptor+0x286>
 800abe4:	e037      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7c1b      	ldrb	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d109      	bne.n	800ac02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf6:	f107 0208 	add.w	r2, r7, #8
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
 800abfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac00:	e029      	b.n	800ac56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f9f6 	bl	800aff6 <USBD_CtlError>
        err++;
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac10:	e021      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7c1b      	ldrb	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	f107 0208 	add.w	r2, r7, #8
 800ac26:	4610      	mov	r0, r2
 800ac28:	4798      	blx	r3
 800ac2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	2207      	movs	r2, #7
 800ac32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac34:	e00f      	b.n	800ac56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f9dc 	bl	800aff6 <USBD_CtlError>
        err++;
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	3301      	adds	r3, #1
 800ac42:	72fb      	strb	r3, [r7, #11]
      break;
 800ac44:	e007      	b.n	800ac56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f9d4 	bl	800aff6 <USBD_CtlError>
      err++;
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	3301      	adds	r3, #1
 800ac52:	72fb      	strb	r3, [r7, #11]
      break;
 800ac54:	bf00      	nop
  }

  if (err != 0U)
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11c      	bne.n	800ac96 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ac5c:	893b      	ldrh	r3, [r7, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d011      	beq.n	800ac86 <USBD_GetDescriptor+0x2b6>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	88db      	ldrh	r3, [r3, #6]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00d      	beq.n	800ac86 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	88da      	ldrh	r2, [r3, #6]
 800ac6e:	893b      	ldrh	r3, [r7, #8]
 800ac70:	4293      	cmp	r3, r2
 800ac72:	bf28      	it	cs
 800ac74:	4613      	movcs	r3, r2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac7a:	893b      	ldrh	r3, [r7, #8]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	68f9      	ldr	r1, [r7, #12]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa22 	bl	800b0ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	88db      	ldrh	r3, [r3, #6]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d104      	bne.n	800ac98 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa79 	bl	800b186 <USBD_CtlSendStatus>
 800ac94:	e000      	b.n	800ac98 <USBD_GetDescriptor+0x2c8>
    return;
 800ac96:	bf00      	nop
    }
  }
}
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop

0800aca0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	889b      	ldrh	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d130      	bne.n	800ad14 <USBD_SetAddress+0x74>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	88db      	ldrh	r3, [r3, #6]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d12c      	bne.n	800ad14 <USBD_SetAddress+0x74>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	885b      	ldrh	r3, [r3, #2]
 800acbe:	2b7f      	cmp	r3, #127	; 0x7f
 800acc0:	d828      	bhi.n	800ad14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	885b      	ldrh	r3, [r3, #2]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800accc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d104      	bne.n	800ace2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f98b 	bl	800aff6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace0:	e01d      	b.n	800ad1e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	7bfa      	ldrb	r2, [r7, #15]
 800ace6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fe62 	bl	800b9b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fa46 	bl	800b186 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2202      	movs	r2, #2
 800ad04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad08:	e009      	b.n	800ad1e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad12:	e004      	b.n	800ad1e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f96d 	bl	800aff6 <USBD_CtlError>
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	885b      	ldrh	r3, [r3, #2]
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	4b41      	ldr	r3, [pc, #260]	; (800ae40 <USBD_SetConfig+0x118>)
 800ad3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad3c:	4b40      	ldr	r3, [pc, #256]	; (800ae40 <USBD_SetConfig+0x118>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d904      	bls.n	800ad4e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f955 	bl	800aff6 <USBD_CtlError>
 800ad4c:	e075      	b.n	800ae3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d002      	beq.n	800ad5e <USBD_SetConfig+0x36>
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d023      	beq.n	800ada4 <USBD_SetConfig+0x7c>
 800ad5c:	e062      	b.n	800ae24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ad5e:	4b38      	ldr	r3, [pc, #224]	; (800ae40 <USBD_SetConfig+0x118>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d01a      	beq.n	800ad9c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ad66:	4b36      	ldr	r3, [pc, #216]	; (800ae40 <USBD_SetConfig+0x118>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2203      	movs	r2, #3
 800ad74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad78:	4b31      	ldr	r3, [pc, #196]	; (800ae40 <USBD_SetConfig+0x118>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7ff f9e7 	bl	800a152 <USBD_SetClassConfig>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d104      	bne.n	800ad94 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f932 	bl	800aff6 <USBD_CtlError>
            return;
 800ad92:	e052      	b.n	800ae3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f9f6 	bl	800b186 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ad9a:	e04e      	b.n	800ae3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f9f2 	bl	800b186 <USBD_CtlSendStatus>
        break;
 800ada2:	e04a      	b.n	800ae3a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ada4:	4b26      	ldr	r3, [pc, #152]	; (800ae40 <USBD_SetConfig+0x118>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d112      	bne.n	800add2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800adb4:	4b22      	ldr	r3, [pc, #136]	; (800ae40 <USBD_SetConfig+0x118>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800adbe:	4b20      	ldr	r3, [pc, #128]	; (800ae40 <USBD_SetConfig+0x118>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7ff f9e3 	bl	800a190 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f9db 	bl	800b186 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800add0:	e033      	b.n	800ae3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800add2:	4b1b      	ldr	r3, [pc, #108]	; (800ae40 <USBD_SetConfig+0x118>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d01d      	beq.n	800ae1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff f9d1 	bl	800a190 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800adee:	4b14      	ldr	r3, [pc, #80]	; (800ae40 <USBD_SetConfig+0x118>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800adf8:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <USBD_SetConfig+0x118>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff f9a7 	bl	800a152 <USBD_SetClassConfig>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d104      	bne.n	800ae14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f8f2 	bl	800aff6 <USBD_CtlError>
            return;
 800ae12:	e012      	b.n	800ae3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f9b6 	bl	800b186 <USBD_CtlSendStatus>
        break;
 800ae1a:	e00e      	b.n	800ae3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f9b2 	bl	800b186 <USBD_CtlSendStatus>
        break;
 800ae22:	e00a      	b.n	800ae3a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f8e5 	bl	800aff6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <USBD_SetConfig+0x118>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff f9ac 	bl	800a190 <USBD_ClrClassConfig>
        break;
 800ae38:	bf00      	nop
    }
  }
}
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	2000029c 	.word	0x2000029c

0800ae44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	88db      	ldrh	r3, [r3, #6]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d004      	beq.n	800ae60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f8cc 	bl	800aff6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae5e:	e022      	b.n	800aea6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	dc02      	bgt.n	800ae70 <USBD_GetConfig+0x2c>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dc03      	bgt.n	800ae76 <USBD_GetConfig+0x32>
 800ae6e:	e015      	b.n	800ae9c <USBD_GetConfig+0x58>
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d00b      	beq.n	800ae8c <USBD_GetConfig+0x48>
 800ae74:	e012      	b.n	800ae9c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	2201      	movs	r2, #1
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f920 	bl	800b0ca <USBD_CtlSendData>
        break;
 800ae8a:	e00c      	b.n	800aea6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	2201      	movs	r2, #1
 800ae92:	4619      	mov	r1, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f918 	bl	800b0ca <USBD_CtlSendData>
        break;
 800ae9a:	e004      	b.n	800aea6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f8a9 	bl	800aff6 <USBD_CtlError>
        break;
 800aea4:	bf00      	nop
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aebe:	3b01      	subs	r3, #1
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d81e      	bhi.n	800af02 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	88db      	ldrh	r3, [r3, #6]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d004      	beq.n	800aed6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f891 	bl	800aff6 <USBD_CtlError>
        break;
 800aed4:	e01a      	b.n	800af0c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f043 0202 	orr.w	r2, r3, #2
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	330c      	adds	r3, #12
 800aef6:	2202      	movs	r2, #2
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f8e5 	bl	800b0ca <USBD_CtlSendData>
      break;
 800af00:	e004      	b.n	800af0c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f876 	bl	800aff6 <USBD_CtlError>
      break;
 800af0a:	bf00      	nop
  }
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	885b      	ldrh	r3, [r3, #2]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d106      	bne.n	800af34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f929 	bl	800b186 <USBD_CtlSendStatus>
  }
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4c:	3b01      	subs	r3, #1
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d80b      	bhi.n	800af6a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	885b      	ldrh	r3, [r3, #2]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d10c      	bne.n	800af74 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f90f 	bl	800b186 <USBD_CtlSendStatus>
      }
      break;
 800af68:	e004      	b.n	800af74 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f842 	bl	800aff6 <USBD_CtlError>
      break;
 800af72:	e000      	b.n	800af76 <USBD_ClrFeature+0x3a>
      break;
 800af74:	bf00      	nop
  }
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	785a      	ldrb	r2, [r3, #1]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	3302      	adds	r3, #2
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	3303      	adds	r3, #3
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	021b      	lsls	r3, r3, #8
 800afaa:	b29b      	uxth	r3, r3
 800afac:	4413      	add	r3, r2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	3304      	adds	r3, #4
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	b29a      	uxth	r2, r3
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	3305      	adds	r3, #5
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	4413      	add	r3, r2
 800afca:	b29a      	uxth	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	3306      	adds	r3, #6
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	3307      	adds	r3, #7
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	021b      	lsls	r3, r3, #8
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	4413      	add	r3, r2
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	80da      	strh	r2, [r3, #6]

}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bc80      	pop	{r7}
 800aff4:	4770      	bx	lr

0800aff6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b000:	2180      	movs	r1, #128	; 0x80
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fc6e 	bl	800b8e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b008:	2100      	movs	r1, #0
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fc6a 	bl	800b8e4 <USBD_LL_StallEP>
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d032      	beq.n	800b094 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 f834 	bl	800b09c <USBD_GetLen>
 800b034:	4603      	mov	r3, r0
 800b036:	3301      	adds	r3, #1
 800b038:	b29b      	uxth	r3, r3
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	75fa      	strb	r2, [r7, #23]
 800b048:	461a      	mov	r2, r3
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	4413      	add	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	7812      	ldrb	r2, [r2, #0]
 800b052:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	75fa      	strb	r2, [r7, #23]
 800b05a:	461a      	mov	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4413      	add	r3, r2
 800b060:	2203      	movs	r2, #3
 800b062:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b064:	e012      	b.n	800b08c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	60fa      	str	r2, [r7, #12]
 800b06c:	7dfa      	ldrb	r2, [r7, #23]
 800b06e:	1c51      	adds	r1, r2, #1
 800b070:	75f9      	strb	r1, [r7, #23]
 800b072:	4611      	mov	r1, r2
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	440a      	add	r2, r1
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	75fa      	strb	r2, [r7, #23]
 800b082:	461a      	mov	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4413      	add	r3, r2
 800b088:	2200      	movs	r2, #0
 800b08a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e8      	bne.n	800b066 <USBD_GetString+0x4e>
    }
  }
}
 800b094:	bf00      	nop
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b0a8:	e005      	b.n	800b0b6 <USBD_GetLen+0x1a>
  {
    len++;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1f5      	bne.n	800b0aa <USBD_GetLen+0xe>
  }

  return len;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bc80      	pop	{r7}
 800b0c8:	4770      	bx	lr

0800b0ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2202      	movs	r2, #2
 800b0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b0e0:	88fa      	ldrh	r2, [r7, #6]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b0e6:	88fa      	ldrh	r2, [r7, #6]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fc7f 	bl	800b9f6 <USBD_LL_Transmit>

  return USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	4613      	mov	r3, r2
 800b10e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	2100      	movs	r1, #0
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 fc6d 	bl	800b9f6 <USBD_LL_Transmit>

  return USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	60b9      	str	r1, [r7, #8]
 800b130:	4613      	mov	r3, r2
 800b132:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2203      	movs	r2, #3
 800b138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b13c:	88fa      	ldrh	r2, [r7, #6]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b144:	88fa      	ldrh	r2, [r7, #6]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b14c:	88fb      	ldrh	r3, [r7, #6]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	2100      	movs	r1, #0
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 fc72 	bl	800ba3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	4613      	mov	r3, r2
 800b16e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	2100      	movs	r1, #0
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 fc60 	bl	800ba3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2204      	movs	r2, #4
 800b192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b196:	2300      	movs	r3, #0
 800b198:	2200      	movs	r2, #0
 800b19a:	2100      	movs	r1, #0
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fc2a 	bl	800b9f6 <USBD_LL_Transmit>

  return USBD_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2205      	movs	r2, #5
 800b1b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1bc:	2300      	movs	r3, #0
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fc3a 	bl	800ba3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4912      	ldr	r1, [pc, #72]	; (800b224 <MX_USB_DEVICE_Init+0x50>)
 800b1dc:	4812      	ldr	r0, [pc, #72]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b1de:	f7fe ff5e 	bl	800a09e <USBD_Init>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1e8:	f7f6 ff0c 	bl	8002004 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1ec:	490f      	ldr	r1, [pc, #60]	; (800b22c <MX_USB_DEVICE_Init+0x58>)
 800b1ee:	480e      	ldr	r0, [pc, #56]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b1f0:	f7fe ff80 	bl	800a0f4 <USBD_RegisterClass>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1fa:	f7f6 ff03 	bl	8002004 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1fe:	490c      	ldr	r1, [pc, #48]	; (800b230 <MX_USB_DEVICE_Init+0x5c>)
 800b200:	4809      	ldr	r0, [pc, #36]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b202:	f7fe feb1 	bl	8009f68 <USBD_CDC_RegisterInterface>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b20c:	f7f6 fefa 	bl	8002004 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b210:	4805      	ldr	r0, [pc, #20]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b212:	f7fe ff88 	bl	800a126 <USBD_Start>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b21c:	f7f6 fef2 	bl	8002004 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b220:	bf00      	nop
 800b222:	bd80      	pop	{r7, pc}
 800b224:	2000012c 	.word	0x2000012c
 800b228:	20000c38 	.word	0x20000c38
 800b22c:	20000018 	.word	0x20000018
 800b230:	2000011c 	.word	0x2000011c

0800b234 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b238:	2200      	movs	r2, #0
 800b23a:	4905      	ldr	r1, [pc, #20]	; (800b250 <CDC_Init_FS+0x1c>)
 800b23c:	4805      	ldr	r0, [pc, #20]	; (800b254 <CDC_Init_FS+0x20>)
 800b23e:	f7fe fea9 	bl	8009f94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b242:	4905      	ldr	r1, [pc, #20]	; (800b258 <CDC_Init_FS+0x24>)
 800b244:	4803      	ldr	r0, [pc, #12]	; (800b254 <CDC_Init_FS+0x20>)
 800b246:	f7fe febe 	bl	8009fc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b24a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	200010fc 	.word	0x200010fc
 800b254:	20000c38 	.word	0x20000c38
 800b258:	20000efc 	.word	0x20000efc

0800b25c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b260:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b262:	4618      	mov	r0, r3
 800b264:	46bd      	mov	sp, r7
 800b266:	bc80      	pop	{r7}
 800b268:	4770      	bx	lr
	...

0800b26c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	6039      	str	r1, [r7, #0]
 800b276:	71fb      	strb	r3, [r7, #7]
 800b278:	4613      	mov	r3, r2
 800b27a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	2b23      	cmp	r3, #35	; 0x23
 800b280:	d84a      	bhi.n	800b318 <CDC_Control_FS+0xac>
 800b282:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <CDC_Control_FS+0x1c>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b319 	.word	0x0800b319
 800b28c:	0800b319 	.word	0x0800b319
 800b290:	0800b319 	.word	0x0800b319
 800b294:	0800b319 	.word	0x0800b319
 800b298:	0800b319 	.word	0x0800b319
 800b29c:	0800b319 	.word	0x0800b319
 800b2a0:	0800b319 	.word	0x0800b319
 800b2a4:	0800b319 	.word	0x0800b319
 800b2a8:	0800b319 	.word	0x0800b319
 800b2ac:	0800b319 	.word	0x0800b319
 800b2b0:	0800b319 	.word	0x0800b319
 800b2b4:	0800b319 	.word	0x0800b319
 800b2b8:	0800b319 	.word	0x0800b319
 800b2bc:	0800b319 	.word	0x0800b319
 800b2c0:	0800b319 	.word	0x0800b319
 800b2c4:	0800b319 	.word	0x0800b319
 800b2c8:	0800b319 	.word	0x0800b319
 800b2cc:	0800b319 	.word	0x0800b319
 800b2d0:	0800b319 	.word	0x0800b319
 800b2d4:	0800b319 	.word	0x0800b319
 800b2d8:	0800b319 	.word	0x0800b319
 800b2dc:	0800b319 	.word	0x0800b319
 800b2e0:	0800b319 	.word	0x0800b319
 800b2e4:	0800b319 	.word	0x0800b319
 800b2e8:	0800b319 	.word	0x0800b319
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	0800b319 	.word	0x0800b319
 800b2f4:	0800b319 	.word	0x0800b319
 800b2f8:	0800b319 	.word	0x0800b319
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b319 	.word	0x0800b319
 800b304:	0800b319 	.word	0x0800b319
 800b308:	0800b319 	.word	0x0800b319
 800b30c:	0800b319 	.word	0x0800b319
 800b310:	0800b319 	.word	0x0800b319
 800b314:	0800b319 	.word	0x0800b319
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b318:	bf00      	nop
  }

  return (USBD_OK);
 800b31a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	bc80      	pop	{r7}
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop

0800b328 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800b332:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <CDC_Receive_FS+0x38>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d006      	beq.n	800b348 <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800b33a:	4b09      	ldr	r3, [pc, #36]	; (800b360 <CDC_Receive_FS+0x38>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	4611      	mov	r1, r2
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	4806      	ldr	r0, [pc, #24]	; (800b364 <CDC_Receive_FS+0x3c>)
 800b34c:	f7fe fe3b 	bl	8009fc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b350:	4804      	ldr	r0, [pc, #16]	; (800b364 <CDC_Receive_FS+0x3c>)
 800b352:	f7fe fe7a 	bl	800a04a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b356:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	200002a0 	.word	0x200002a0
 800b364:	20000c38 	.word	0x20000c38

0800b368 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b378:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <CDC_Transmit_FS+0x48>)
 800b37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b37e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e00b      	b.n	800b3a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b38e:	887b      	ldrh	r3, [r7, #2]
 800b390:	461a      	mov	r2, r3
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	4806      	ldr	r0, [pc, #24]	; (800b3b0 <CDC_Transmit_FS+0x48>)
 800b396:	f7fe fdfd 	bl	8009f94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b39a:	4805      	ldr	r0, [pc, #20]	; (800b3b0 <CDC_Transmit_FS+0x48>)
 800b39c:	f7fe fe26 	bl	8009fec <USBD_CDC_TransmitPacket>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000c38 	.word	0x20000c38

0800b3b4 <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800b3bc:	4a03      	ldr	r2, [pc, #12]	; (800b3cc <CDC_AttachOnUSBData+0x18>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
}
 800b3c2:	bf00      	nop
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bc80      	pop	{r7}
 800b3ca:	4770      	bx	lr
 800b3cc:	200002a0 	.word	0x200002a0

0800b3d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2212      	movs	r2, #18
 800b3e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3e2:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bc80      	pop	{r7}
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	20000148 	.word	0x20000148

0800b3f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	6039      	str	r1, [r7, #0]
 800b3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2204      	movs	r2, #4
 800b404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b406:	4b03      	ldr	r3, [pc, #12]	; (800b414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	2000015c 	.word	0x2000015c

0800b418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	6039      	str	r1, [r7, #0]
 800b422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	4907      	ldr	r1, [pc, #28]	; (800b44c <USBD_FS_ProductStrDescriptor+0x34>)
 800b42e:	4808      	ldr	r0, [pc, #32]	; (800b450 <USBD_FS_ProductStrDescriptor+0x38>)
 800b430:	f7ff fdf2 	bl	800b018 <USBD_GetString>
 800b434:	e004      	b.n	800b440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	4904      	ldr	r1, [pc, #16]	; (800b44c <USBD_FS_ProductStrDescriptor+0x34>)
 800b43a:	4805      	ldr	r0, [pc, #20]	; (800b450 <USBD_FS_ProductStrDescriptor+0x38>)
 800b43c:	f7ff fdec 	bl	800b018 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b440:	4b02      	ldr	r3, [pc, #8]	; (800b44c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	200012fc 	.word	0x200012fc
 800b450:	0800bbd8 	.word	0x0800bbd8

0800b454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	6039      	str	r1, [r7, #0]
 800b45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	4904      	ldr	r1, [pc, #16]	; (800b474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b464:	4804      	ldr	r0, [pc, #16]	; (800b478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b466:	f7ff fdd7 	bl	800b018 <USBD_GetString>
  return USBD_StrDesc;
 800b46a:	4b02      	ldr	r3, [pc, #8]	; (800b474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	200012fc 	.word	0x200012fc
 800b478:	0800bbf0 	.word	0x0800bbf0

0800b47c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	221a      	movs	r2, #26
 800b48c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b48e:	f000 f843 	bl	800b518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b492:	4b02      	ldr	r3, [pc, #8]	; (800b49c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000160 	.word	0x20000160

0800b4a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d105      	bne.n	800b4be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4907      	ldr	r1, [pc, #28]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4b6:	4808      	ldr	r0, [pc, #32]	; (800b4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4b8:	f7ff fdae 	bl	800b018 <USBD_GetString>
 800b4bc:	e004      	b.n	800b4c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	4904      	ldr	r1, [pc, #16]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4c2:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4c4:	f7ff fda8 	bl	800b018 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c8:	4b02      	ldr	r3, [pc, #8]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200012fc 	.word	0x200012fc
 800b4d8:	0800bc04 	.word	0x0800bc04

0800b4dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	4907      	ldr	r1, [pc, #28]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4f2:	4808      	ldr	r0, [pc, #32]	; (800b514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4f4:	f7ff fd90 	bl	800b018 <USBD_GetString>
 800b4f8:	e004      	b.n	800b504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	4904      	ldr	r1, [pc, #16]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4fe:	4805      	ldr	r0, [pc, #20]	; (800b514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b500:	f7ff fd8a 	bl	800b018 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b504:	4b02      	ldr	r3, [pc, #8]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	200012fc 	.word	0x200012fc
 800b514:	0800bc10 	.word	0x0800bc10

0800b518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <Get_SerialNum+0x44>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b524:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <Get_SerialNum+0x48>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b52a:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <Get_SerialNum+0x4c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4413      	add	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b53e:	2208      	movs	r2, #8
 800b540:	4909      	ldr	r1, [pc, #36]	; (800b568 <Get_SerialNum+0x50>)
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 f814 	bl	800b570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b548:	2204      	movs	r2, #4
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <Get_SerialNum+0x54>)
 800b54c:	68b8      	ldr	r0, [r7, #8]
 800b54e:	f000 f80f 	bl	800b570 <IntToUnicode>
  }
}
 800b552:	bf00      	nop
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	1ffff7e8 	.word	0x1ffff7e8
 800b560:	1ffff7ec 	.word	0x1ffff7ec
 800b564:	1ffff7f0 	.word	0x1ffff7f0
 800b568:	20000162 	.word	0x20000162
 800b56c:	20000172 	.word	0x20000172

0800b570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
 800b586:	e027      	b.n	800b5d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	0f1b      	lsrs	r3, r3, #28
 800b58c:	2b09      	cmp	r3, #9
 800b58e:	d80b      	bhi.n	800b5a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	0f1b      	lsrs	r3, r3, #28
 800b594:	b2da      	uxtb	r2, r3
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	4619      	mov	r1, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	440b      	add	r3, r1
 800b5a0:	3230      	adds	r2, #48	; 0x30
 800b5a2:	b2d2      	uxtb	r2, r2
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e00a      	b.n	800b5be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	0f1b      	lsrs	r3, r3, #28
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3237      	adds	r2, #55	; 0x37
 800b5ba:	b2d2      	uxtb	r2, r2
 800b5bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	75fb      	strb	r3, [r7, #23]
 800b5d8:	7dfa      	ldrb	r2, [r7, #23]
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d3d3      	bcc.n	800b588 <IntToUnicode+0x18>
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bc80      	pop	{r7}
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a0d      	ldr	r2, [pc, #52]	; (800b630 <HAL_PCD_MspInit+0x44>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d113      	bne.n	800b626 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <HAL_PCD_MspInit+0x48>)
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	4a0c      	ldr	r2, [pc, #48]	; (800b634 <HAL_PCD_MspInit+0x48>)
 800b604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b608:	61d3      	str	r3, [r2, #28]
 800b60a:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <HAL_PCD_MspInit+0x48>)
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	2014      	movs	r0, #20
 800b61c:	f7f7 fc1d 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b620:	2014      	movs	r0, #20
 800b622:	f7f7 fc36 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	40005c00 	.word	0x40005c00
 800b634:	40021000 	.word	0x40021000

0800b638 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f7fe fdb1 	bl	800a1b6 <USBD_LL_SetupStage>
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	460b      	mov	r3, r1
 800b666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b66e:	78fa      	ldrb	r2, [r7, #3]
 800b670:	6879      	ldr	r1, [r7, #4]
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	440b      	add	r3, r1
 800b67c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	4619      	mov	r1, r3
 800b686:	f7fe fde3 	bl	800a250 <USBD_LL_DataOutStage>
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b6a4:	78fa      	ldrb	r2, [r7, #3]
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	00db      	lsls	r3, r3, #3
 800b6b0:	440b      	add	r3, r1
 800b6b2:	333c      	adds	r3, #60	; 0x3c
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7fe fe3a 	bl	800a332 <USBD_LL_DataInStage>
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe ff4a 	bl	800a56e <USBD_LL_SOF>
}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d001      	beq.n	800b6fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6f6:	f7f6 fc85 	bl	8002004 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b700:	7bfa      	ldrb	r2, [r7, #15]
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe fefa 	bl	800a4fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe feb3 	bl	800a47c <USBD_LL_Reset>
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fef4 	bl	800a51c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d005      	beq.n	800b748 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b73c:	4b04      	ldr	r3, [pc, #16]	; (800b750 <HAL_PCD_SuspendCallback+0x30>)
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	4a03      	ldr	r2, [pc, #12]	; (800b750 <HAL_PCD_SuspendCallback+0x30>)
 800b742:	f043 0306 	orr.w	r3, r3, #6
 800b746:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b748:	bf00      	nop
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	e000ed00 	.word	0xe000ed00

0800b754 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe feee 	bl	800a544 <USBD_LL_Resume>
}
 800b768:	bf00      	nop
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b778:	4a28      	ldr	r2, [pc, #160]	; (800b81c <USBD_LL_Init+0xac>)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a26      	ldr	r2, [pc, #152]	; (800b81c <USBD_LL_Init+0xac>)
 800b784:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b788:	4b24      	ldr	r3, [pc, #144]	; (800b81c <USBD_LL_Init+0xac>)
 800b78a:	4a25      	ldr	r2, [pc, #148]	; (800b820 <USBD_LL_Init+0xb0>)
 800b78c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b78e:	4b23      	ldr	r3, [pc, #140]	; (800b81c <USBD_LL_Init+0xac>)
 800b790:	2208      	movs	r2, #8
 800b792:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b794:	4b21      	ldr	r3, [pc, #132]	; (800b81c <USBD_LL_Init+0xac>)
 800b796:	2202      	movs	r2, #2
 800b798:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b79a:	4b20      	ldr	r3, [pc, #128]	; (800b81c <USBD_LL_Init+0xac>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7a0:	4b1e      	ldr	r3, [pc, #120]	; (800b81c <USBD_LL_Init+0xac>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7a6:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <USBD_LL_Init+0xac>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7ac:	481b      	ldr	r0, [pc, #108]	; (800b81c <USBD_LL_Init+0xac>)
 800b7ae:	f7f8 f939 	bl	8003a24 <HAL_PCD_Init>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b7b8:	f7f6 fc24 	bl	8002004 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7c2:	2318      	movs	r3, #24
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	f7f9 fdaf 	bl	800532a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7d2:	2358      	movs	r3, #88	; 0x58
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2180      	movs	r1, #128	; 0x80
 800b7d8:	f7f9 fda7 	bl	800532a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7e2:	23c0      	movs	r3, #192	; 0xc0
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2181      	movs	r1, #129	; 0x81
 800b7e8:	f7f9 fd9f 	bl	800532a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	f7f9 fd96 	bl	800532a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b804:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b808:	2200      	movs	r2, #0
 800b80a:	2182      	movs	r1, #130	; 0x82
 800b80c:	f7f9 fd8d 	bl	800532a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	200014fc 	.word	0x200014fc
 800b820:	40005c00 	.word	0x40005c00

0800b824 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f8 f9fd 	bl	8003c3a <HAL_PCD_Start>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f94e 	bl	800bae8 <USBD_Get_USB_Status>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b850:	7bbb      	ldrb	r3, [r7, #14]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	4608      	mov	r0, r1
 800b864:	4611      	mov	r1, r2
 800b866:	461a      	mov	r2, r3
 800b868:	4603      	mov	r3, r0
 800b86a:	70fb      	strb	r3, [r7, #3]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70bb      	strb	r3, [r7, #2]
 800b870:	4613      	mov	r3, r2
 800b872:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b882:	78bb      	ldrb	r3, [r7, #2]
 800b884:	883a      	ldrh	r2, [r7, #0]
 800b886:	78f9      	ldrb	r1, [r7, #3]
 800b888:	f7f8 fb77 	bl	8003f7a <HAL_PCD_EP_Open>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	4618      	mov	r0, r3
 800b894:	f000 f928 	bl	800bae8 <USBD_Get_USB_Status>
 800b898:	4603      	mov	r3, r0
 800b89a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b89c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8c0:	78fa      	ldrb	r2, [r7, #3]
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f8 fbbe 	bl	8004046 <HAL_PCD_EP_Close>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f909 	bl	800bae8 <USBD_Get_USB_Status>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8fe:	78fa      	ldrb	r2, [r7, #3]
 800b900:	4611      	mov	r1, r2
 800b902:	4618      	mov	r0, r3
 800b904:	f7f8 fc7e 	bl	8004204 <HAL_PCD_EP_SetStall>
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 f8ea 	bl	800bae8 <USBD_Get_USB_Status>
 800b914:	4603      	mov	r3, r0
 800b916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b918:	7bbb      	ldrb	r3, [r7, #14]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b93c:	78fa      	ldrb	r2, [r7, #3]
 800b93e:	4611      	mov	r1, r2
 800b940:	4618      	mov	r0, r3
 800b942:	f7f8 fcbf 	bl	80042c4 <HAL_PCD_EP_ClrStall>
 800b946:	4603      	mov	r3, r0
 800b948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 f8cb 	bl	800bae8 <USBD_Get_USB_Status>
 800b952:	4603      	mov	r3, r0
 800b954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b956:	7bbb      	ldrb	r3, [r7, #14]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b972:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	da0c      	bge.n	800b996 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b982:	68f9      	ldr	r1, [r7, #12]
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	4613      	mov	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	440b      	add	r3, r1
 800b990:	3302      	adds	r3, #2
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	e00b      	b.n	800b9ae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b99c:	68f9      	ldr	r1, [r7, #12]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	440b      	add	r3, r1
 800b9a8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b9ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bc80      	pop	{r7}
 800b9b6:	4770      	bx	lr

0800b9b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9d2:	78fa      	ldrb	r2, [r7, #3]
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f8 faaa 	bl	8003f30 <HAL_PCD_SetAddress>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f880 	bl	800bae8 <USBD_Get_USB_Status>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b086      	sub	sp, #24
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	461a      	mov	r2, r3
 800ba02:	460b      	mov	r3, r1
 800ba04:	72fb      	strb	r3, [r7, #11]
 800ba06:	4613      	mov	r3, r2
 800ba08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba18:	893b      	ldrh	r3, [r7, #8]
 800ba1a:	7af9      	ldrb	r1, [r7, #11]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	f7f8 fbae 	bl	800417e <HAL_PCD_EP_Transmit>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 f85d 	bl	800bae8 <USBD_Get_USB_Status>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	607a      	str	r2, [r7, #4]
 800ba46:	461a      	mov	r2, r3
 800ba48:	460b      	mov	r3, r1
 800ba4a:	72fb      	strb	r3, [r7, #11]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba5e:	893b      	ldrh	r3, [r7, #8]
 800ba60:	7af9      	ldrb	r1, [r7, #11]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	f7f8 fb37 	bl	80040d6 <HAL_PCD_EP_Receive>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f83a 	bl	800bae8 <USBD_Get_USB_Status>
 800ba74:	4603      	mov	r3, r0
 800ba76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba94:	78fa      	ldrb	r2, [r7, #3]
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7f8 fb59 	bl	8004150 <HAL_PCD_EP_GetRxCount>
 800ba9e:	4603      	mov	r3, r0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bab0:	4b02      	ldr	r3, [pc, #8]	; (800babc <USBD_static_malloc+0x14>)
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bc80      	pop	{r7}
 800baba:	4770      	bx	lr
 800babc:	200002a4 	.word	0x200002a4

0800bac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]

}
 800bac8:	bf00      	nop
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	bc80      	pop	{r7}
 800bad0:	4770      	bx	lr

0800bad2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	460b      	mov	r3, r1
 800badc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bc80      	pop	{r7}
 800bae6:	4770      	bx	lr

0800bae8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	2b03      	cmp	r3, #3
 800bafa:	d817      	bhi.n	800bb2c <USBD_Get_USB_Status+0x44>
 800bafc:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <USBD_Get_USB_Status+0x1c>)
 800bafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb02:	bf00      	nop
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bb1b 	.word	0x0800bb1b
 800bb0c:	0800bb21 	.word	0x0800bb21
 800bb10:	0800bb27 	.word	0x0800bb27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]
    break;
 800bb18:	e00b      	b.n	800bb32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb1e:	e008      	b.n	800bb32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb20:	2301      	movs	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]
    break;
 800bb24:	e005      	b.n	800bb32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb26:	2302      	movs	r3, #2
 800bb28:	73fb      	strb	r3, [r7, #15]
    break;
 800bb2a:	e002      	b.n	800bb32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb30:	bf00      	nop
  }
  return usb_status;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bc80      	pop	{r7}
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop

0800bb40 <__libc_init_array>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	2600      	movs	r6, #0
 800bb44:	4d0c      	ldr	r5, [pc, #48]	; (800bb78 <__libc_init_array+0x38>)
 800bb46:	4c0d      	ldr	r4, [pc, #52]	; (800bb7c <__libc_init_array+0x3c>)
 800bb48:	1b64      	subs	r4, r4, r5
 800bb4a:	10a4      	asrs	r4, r4, #2
 800bb4c:	42a6      	cmp	r6, r4
 800bb4e:	d109      	bne.n	800bb64 <__libc_init_array+0x24>
 800bb50:	f000 f82a 	bl	800bba8 <_init>
 800bb54:	2600      	movs	r6, #0
 800bb56:	4d0a      	ldr	r5, [pc, #40]	; (800bb80 <__libc_init_array+0x40>)
 800bb58:	4c0a      	ldr	r4, [pc, #40]	; (800bb84 <__libc_init_array+0x44>)
 800bb5a:	1b64      	subs	r4, r4, r5
 800bb5c:	10a4      	asrs	r4, r4, #2
 800bb5e:	42a6      	cmp	r6, r4
 800bb60:	d105      	bne.n	800bb6e <__libc_init_array+0x2e>
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb68:	4798      	blx	r3
 800bb6a:	3601      	adds	r6, #1
 800bb6c:	e7ee      	b.n	800bb4c <__libc_init_array+0xc>
 800bb6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb72:	4798      	blx	r3
 800bb74:	3601      	adds	r6, #1
 800bb76:	e7f2      	b.n	800bb5e <__libc_init_array+0x1e>
 800bb78:	0800bdb0 	.word	0x0800bdb0
 800bb7c:	0800bdb0 	.word	0x0800bdb0
 800bb80:	0800bdb0 	.word	0x0800bdb0
 800bb84:	0800bdb4 	.word	0x0800bdb4

0800bb88 <memset>:
 800bb88:	4603      	mov	r3, r0
 800bb8a:	4402      	add	r2, r0
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d100      	bne.n	800bb92 <memset+0xa>
 800bb90:	4770      	bx	lr
 800bb92:	f803 1b01 	strb.w	r1, [r3], #1
 800bb96:	e7f9      	b.n	800bb8c <memset+0x4>

0800bb98 <strcpy>:
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb9e:	f803 2b01 	strb.w	r2, [r3], #1
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	d1f9      	bne.n	800bb9a <strcpy+0x2>
 800bba6:	4770      	bx	lr

0800bba8 <_init>:
 800bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbaa:	bf00      	nop
 800bbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbae:	bc08      	pop	{r3}
 800bbb0:	469e      	mov	lr, r3
 800bbb2:	4770      	bx	lr

0800bbb4 <_fini>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	bf00      	nop
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr
