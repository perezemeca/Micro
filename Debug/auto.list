
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800bad4  0800bad4  0001bad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd28  0800bd28  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd28  0800bd28  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd28  0800bd28  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd2c  0800bd2c  0001bd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bd30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000166c  2000017c  0800beac  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e8  0800beac  000217e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e52d  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d43  00000000  00000000  0003e6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00043af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbfb  00000000  00000000  00045078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf22  00000000  00000000  00060c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009709b  00000000  00000000  0007db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114c30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006074  00000000  00000000  00114c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800babc 	.word	0x0800babc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800babc 	.word	0x0800babc

0800014c <InitEsp>:
		error=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
	}
/***********************************************************************************/
}

void InitEsp(_Rx *RXUSART1){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(RXUSART1->state){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	7a1b      	ldrb	r3, [r3, #8]
 8000158:	2b05      	cmp	r3, #5
 800015a:	d85d      	bhi.n	8000218 <InitEsp+0xcc>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <InitEsp+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000195 	.word	0x08000195
 800016c:	080001ad 	.word	0x080001ad
 8000170:	080001c5 	.word	0x080001c5
 8000174:	080001dd 	.word	0x080001dd
 8000178:	080001fb 	.word	0x080001fb
		case 0:
			PutStrOnTx(&TXUSART1,AT); //Envio comando AT para ver si responde el ESP
 800017c:	492b      	ldr	r1, [pc, #172]	; (800022c <InitEsp+0xe0>)
 800017e:	482c      	ldr	r0, [pc, #176]	; (8000230 <InitEsp+0xe4>)
 8000180:	f001 f9b8 	bl	80014f4 <PutStrOnTx>
			PutStrOnTx(&TXUSB,AT);    // Depuracion por USB
 8000184:	4929      	ldr	r1, [pc, #164]	; (800022c <InitEsp+0xe0>)
 8000186:	482b      	ldr	r0, [pc, #172]	; (8000234 <InitEsp+0xe8>)
 8000188:	f001 f9b4 	bl	80014f4 <PutStrOnTx>
			Count500ms = 5;
 800018c:	4b2a      	ldr	r3, [pc, #168]	; (8000238 <InitEsp+0xec>)
 800018e:	2205      	movs	r2, #5
 8000190:	801a      	strh	r2, [r3, #0]
		break;
 8000192:	e041      	b.n	8000218 <InitEsp+0xcc>

		case 1:
			PutStrOnTx(&TXUSART1,CWMODE); //Envio comando CWMODE
 8000194:	4929      	ldr	r1, [pc, #164]	; (800023c <InitEsp+0xf0>)
 8000196:	4826      	ldr	r0, [pc, #152]	; (8000230 <InitEsp+0xe4>)
 8000198:	f001 f9ac 	bl	80014f4 <PutStrOnTx>
			PutStrOnTx(&TXUSB,CWMODE);    // Depuracion por USB
 800019c:	4927      	ldr	r1, [pc, #156]	; (800023c <InitEsp+0xf0>)
 800019e:	4825      	ldr	r0, [pc, #148]	; (8000234 <InitEsp+0xe8>)
 80001a0:	f001 f9a8 	bl	80014f4 <PutStrOnTx>
			Count500ms = 5;
 80001a4:	4b24      	ldr	r3, [pc, #144]	; (8000238 <InitEsp+0xec>)
 80001a6:	2205      	movs	r2, #5
 80001a8:	801a      	strh	r2, [r3, #0]
		break;
 80001aa:	e035      	b.n	8000218 <InitEsp+0xcc>

		case 2:
			PutStrOnTx(&TXUSART1,CWJAP_); //Envio comando CWJAP con los datos de la red
 80001ac:	4924      	ldr	r1, [pc, #144]	; (8000240 <InitEsp+0xf4>)
 80001ae:	4820      	ldr	r0, [pc, #128]	; (8000230 <InitEsp+0xe4>)
 80001b0:	f001 f9a0 	bl	80014f4 <PutStrOnTx>
			PutStrOnTx(&TXUSB,CWJAP_);    // Depuracion por USB
 80001b4:	4922      	ldr	r1, [pc, #136]	; (8000240 <InitEsp+0xf4>)
 80001b6:	481f      	ldr	r0, [pc, #124]	; (8000234 <InitEsp+0xe8>)
 80001b8:	f001 f99c 	bl	80014f4 <PutStrOnTx>
			Count3000ms = 30;
 80001bc:	4b21      	ldr	r3, [pc, #132]	; (8000244 <InitEsp+0xf8>)
 80001be:	221e      	movs	r2, #30
 80001c0:	801a      	strh	r2, [r3, #0]
		break;
 80001c2:	e029      	b.n	8000218 <InitEsp+0xcc>

		case 3:
			PutStrOnTx(&TXUSART1,CIFSR);
 80001c4:	4920      	ldr	r1, [pc, #128]	; (8000248 <InitEsp+0xfc>)
 80001c6:	481a      	ldr	r0, [pc, #104]	; (8000230 <InitEsp+0xe4>)
 80001c8:	f001 f994 	bl	80014f4 <PutStrOnTx>
			PutStrOnTx(&TXUSB,CIFSR);    // Depuracion por USB
 80001cc:	491e      	ldr	r1, [pc, #120]	; (8000248 <InitEsp+0xfc>)
 80001ce:	4819      	ldr	r0, [pc, #100]	; (8000234 <InitEsp+0xe8>)
 80001d0:	f001 f990 	bl	80014f4 <PutStrOnTx>
			Count500ms = 5;
 80001d4:	4b18      	ldr	r3, [pc, #96]	; (8000238 <InitEsp+0xec>)
 80001d6:	2205      	movs	r2, #5
 80001d8:	801a      	strh	r2, [r3, #0]
		break;
 80001da:	e01d      	b.n	8000218 <InitEsp+0xcc>

		case 4:
			PutStrOnTx(&TXUSART1,CIPMUX);
 80001dc:	491b      	ldr	r1, [pc, #108]	; (800024c <InitEsp+0x100>)
 80001de:	4814      	ldr	r0, [pc, #80]	; (8000230 <InitEsp+0xe4>)
 80001e0:	f001 f988 	bl	80014f4 <PutStrOnTx>
			PutStrOnTx(&TXUSB,CIPMUX);    // Depuracion por USB
 80001e4:	4919      	ldr	r1, [pc, #100]	; (800024c <InitEsp+0x100>)
 80001e6:	4813      	ldr	r0, [pc, #76]	; (8000234 <InitEsp+0xe8>)
 80001e8:	f001 f984 	bl	80014f4 <PutStrOnTx>
			RXUSART1->state = 9;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2209      	movs	r2, #9
 80001f0:	721a      	strb	r2, [r3, #8]
			Count500ms = 5;
 80001f2:	4b11      	ldr	r3, [pc, #68]	; (8000238 <InitEsp+0xec>)
 80001f4:	2205      	movs	r2, #5
 80001f6:	801a      	strh	r2, [r3, #0]
		break;
 80001f8:	e00e      	b.n	8000218 <InitEsp+0xcc>

		case 5:
			PutStrOnTx(&TXUSART1,CIPSTART);
 80001fa:	4915      	ldr	r1, [pc, #84]	; (8000250 <InitEsp+0x104>)
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <InitEsp+0xe4>)
 80001fe:	f001 f979 	bl	80014f4 <PutStrOnTx>
			PutStrOnTx(&TXUSB,CIPSTART);    // Depuracion por USB
 8000202:	4913      	ldr	r1, [pc, #76]	; (8000250 <InitEsp+0x104>)
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <InitEsp+0xe8>)
 8000206:	f001 f975 	bl	80014f4 <PutStrOnTx>
			RXUSART1->state = 11;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	220b      	movs	r2, #11
 800020e:	721a      	strb	r2, [r3, #8]
			Count3000ms = 30;
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <InitEsp+0xf8>)
 8000212:	221e      	movs	r2, #30
 8000214:	801a      	strh	r2, [r3, #0]
		break;
 8000216:	bf00      	nop
	}
	ESPReadyToRecyb = 1;
 8000218:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <InitEsp+0x108>)
 800021a:	7813      	ldrb	r3, [r2, #0]
 800021c:	f043 0320 	orr.w	r3, r3, #32
 8000220:	7013      	strb	r3, [r2, #0]
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	0800bb2c 	.word	0x0800bb2c
 8000230:	20000c20 	.word	0x20000c20
 8000234:	200005ac 	.word	0x200005ac
 8000238:	200005a8 	.word	0x200005a8
 800023c:	0800bbb4 	.word	0x0800bbb4
 8000240:	0800bb34 	.word	0x0800bb34
 8000244:	200003c0 	.word	0x200003c0
 8000248:	0800bb5c 	.word	0x0800bb5c
 800024c:	0800bb68 	.word	0x0800bb68
 8000250:	0800bb78 	.word	0x0800bb78
 8000254:	20000790 	.word	0x20000790

08000258 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
/***************** Contadores para control del flujo de tiempo ********************/
/*
 * Instancia cada 1ms
 *
 */
	if(htim->Instance == TIM4){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a3b      	ldr	r2, [pc, #236]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d15f      	bne.n	800032a <HAL_TIM_PeriodElapsedCallback+0xd2>
		Count100ms--;
 800026a:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	b29b      	uxth	r3, r3
 8000270:	3b01      	subs	r3, #1
 8000272:	b29a      	uxth	r2, r3
 8000274:	4b38      	ldr	r3, [pc, #224]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000276:	801a      	strh	r2, [r3, #0]

		if(!Count100ms){
 8000278:	4b37      	ldr	r3, [pc, #220]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2b00      	cmp	r3, #0
 8000280:	d12d      	bne.n	80002de <HAL_TIM_PeriodElapsedCallback+0x86>
			Count100ms = 100;
 8000282:	4b35      	ldr	r3, [pc, #212]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000284:	2264      	movs	r2, #100	; 0x64
 8000286:	801a      	strh	r2, [r3, #0]
			On100ms = 1;
 8000288:	4b34      	ldr	r3, [pc, #208]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800028a:	2201      	movs	r2, #1
 800028c:	801a      	strh	r2, [r3, #0]

			if(Count3000ms > 0) Count3000ms--;
 800028e:	4b34      	ldr	r3, [pc, #208]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000298:	4b31      	ldr	r3, [pc, #196]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b29b      	uxth	r3, r3
 800029e:	3b01      	subs	r3, #1
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	4b2f      	ldr	r3, [pc, #188]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80002a4:	801a      	strh	r2, [r3, #0]
			if(!Count3000ms){
 80002a6:	4b2e      	ldr	r3, [pc, #184]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d102      	bne.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x5e>
				On3000ms = 1;
 80002b0:	4b2c      	ldr	r3, [pc, #176]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	801a      	strh	r2, [r3, #0]
			}

			if(Count500ms > 0)Count500ms--;
 80002b6:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d006      	beq.n	80002ce <HAL_TIM_PeriodElapsedCallback+0x76>
 80002c0:	4b29      	ldr	r3, [pc, #164]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	3b01      	subs	r3, #1
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	4b27      	ldr	r3, [pc, #156]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80002cc:	801a      	strh	r2, [r3, #0]
			if(!Count500ms){
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d102      	bne.n	80002de <HAL_TIM_PeriodElapsedCallback+0x86>
				On500ms = 1;
 80002d8:	4b24      	ldr	r3, [pc, #144]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80002da:	2201      	movs	r2, #1
 80002dc:	801a      	strh	r2, [r3, #0]
			}
		}
		if(Count100ms % 10 == 0){
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80002e6:	fba3 1302 	umull	r1, r3, r3, r2
 80002ea:	08d9      	lsrs	r1, r3, #3
 80002ec:	460b      	mov	r3, r1
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	440b      	add	r3, r1
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <HAL_TIM_PeriodElapsedCallback+0xaa>
			On10ms = 1;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80002fe:	2201      	movs	r2, #1
 8000300:	801a      	strh	r2, [r3, #0]
		}

		if(RXUSB.header) {
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000304:	79db      	ldrb	r3, [r3, #7]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00e      	beq.n	800032a <HAL_TIM_PeriodElapsedCallback+0xd2>
			RXUSB.timeout--;
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800030e:	7bdb      	ldrb	r3, [r3, #15]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	3b01      	subs	r3, #1
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000318:	73da      	strb	r2, [r3, #15]
			if(!RXUSB.timeout)
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800031c:	7bdb      	ldrb	r3, [r3, #15]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d102      	bne.n	800032a <HAL_TIM_PeriodElapsedCallback+0xd2>
				RXUSB.header = 0;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000326:	2200      	movs	r2, #0
 8000328:	71da      	strb	r2, [r3, #7]
/************************* Incio lectura analogica por DMA *************************/
/*
 * Instancia cada 500us
 *
 */
	if(htim->Instance == TIM3){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d10a      	bne.n	800034a <HAL_TIM_PeriodElapsedCallback+0xf2>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &bufADC[iAdc], 8);
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	011b      	lsls	r3, r3, #4
 800033c:	4a11      	ldr	r2, [pc, #68]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800033e:	4413      	add	r3, r2
 8000340:	2208      	movs	r2, #8
 8000342:	4619      	mov	r1, r3
 8000344:	4810      	ldr	r0, [pc, #64]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000346:	f002 f96f 	bl	8002628 <HAL_ADC_Start_DMA>
	}
/***********************************************************************************/

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40000800 	.word	0x40000800
 8000358:	20000af0 	.word	0x20000af0
 800035c:	2000047a 	.word	0x2000047a
 8000360:	200003c0 	.word	0x200003c0
 8000364:	20000c0a 	.word	0x20000c0a
 8000368:	200005a8 	.word	0x200005a8
 800036c:	20000c00 	.word	0x20000c00
 8000370:	cccccccd 	.word	0xcccccccd
 8000374:	20000648 	.word	0x20000648
 8000378:	20000c0c 	.word	0x20000c0c
 800037c:	40000400 	.word	0x40000400
 8000380:	20000604 	.word	0x20000604
 8000384:	200007e0 	.word	0x200007e0
 8000388:	20000618 	.word	0x20000618

0800038c <DecodeESP>:

void DecodeESP(_Rx *RXUSART1){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	if(!espConnected){
 8000394:	4b9d      	ldr	r3, [pc, #628]	; (800060c <DecodeESP+0x280>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8280 	bne.w	80008a4 <DecodeESP+0x518>
		switch(RXUSART1->state){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7a1b      	ldrb	r3, [r3, #8]
 80003a8:	2b0a      	cmp	r3, #10
 80003aa:	f200 82a4 	bhi.w	80008f6 <DecodeESP+0x56a>
 80003ae:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <DecodeESP+0x28>)
 80003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b4:	080003e1 	.word	0x080003e1
 80003b8:	08000459 	.word	0x08000459
 80003bc:	080004d1 	.word	0x080004d1
 80003c0:	08000549 	.word	0x08000549
 80003c4:	080006f3 	.word	0x080006f3
 80003c8:	08000775 	.word	0x08000775
 80003cc:	080008f7 	.word	0x080008f7
 80003d0:	080008f7 	.word	0x080008f7
 80003d4:	080008f7 	.word	0x080008f7
 80003d8:	080008f7 	.word	0x080008f7
 80003dc:	080007e7 	.word	0x080007e7
			case 0:
				if(On500ms){
 80003e0:	4b8b      	ldr	r3, [pc, #556]	; (8000610 <DecodeESP+0x284>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f000 825e 	beq.w	80008a8 <DecodeESP+0x51c>
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_AT[RXUSART1->i]){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	7952      	ldrb	r2, [r2, #5]
 80003f4:	4413      	add	r3, r2
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7c1b      	ldrb	r3, [r3, #16]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4b85      	ldr	r3, [pc, #532]	; (8000614 <DecodeESP+0x288>)
 8000400:	5c5b      	ldrb	r3, [r3, r1]
 8000402:	429a      	cmp	r2, r3
 8000404:	d119      	bne.n	800043a <DecodeESP+0xae>
						RXUSART1->i ++;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	7c1b      	ldrb	r3, [r3, #16]
 800040a:	3301      	adds	r3, #1
 800040c:	b2da      	uxtb	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	741a      	strb	r2, [r3, #16]
						if(RXUSART1->i ==10){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	7c1b      	ldrb	r3, [r3, #16]
 8000416:	2b0a      	cmp	r3, #10
 8000418:	f040 8246 	bne.w	80008a8 <DecodeESP+0x51c>
							RXUSART1->i =0;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2200      	movs	r2, #0
 8000420:	741a      	strb	r2, [r3, #16]
							RXUSART1->state = 1;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	721a      	strb	r2, [r3, #8]
							On500ms = 0;
 8000428:	4b79      	ldr	r3, [pc, #484]	; (8000610 <DecodeESP+0x284>)
 800042a:	2200      	movs	r2, #0
 800042c:	801a      	strh	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 800042e:	4a77      	ldr	r2, [pc, #476]	; (800060c <DecodeESP+0x280>)
 8000430:	7813      	ldrb	r3, [r2, #0]
 8000432:	f36f 1345 	bfc	r3, #5, #1
 8000436:	7013      	strb	r3, [r2, #0]
							RXUSART1->i =0;
						}
						RXUSART1->state = 10;	//Restart ESP8266
					}
				}
			break;
 8000438:	e236      	b.n	80008a8 <DecodeESP+0x51c>
						if(RXUSART1->i > 0){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7c1b      	ldrb	r3, [r3, #16]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d006      	beq.n	8000450 <DecodeESP+0xc4>
							RXUSART1->ir = RXUSART1->iw;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791a      	ldrb	r2, [r3, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	715a      	strb	r2, [r3, #5]
							RXUSART1->i =0;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 10;	//Restart ESP8266
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	220a      	movs	r2, #10
 8000454:	721a      	strb	r2, [r3, #8]
			break;
 8000456:	e227      	b.n	80008a8 <DecodeESP+0x51c>

			case 1:
				if(On500ms){
 8000458:	4b6d      	ldr	r3, [pc, #436]	; (8000610 <DecodeESP+0x284>)
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	b29b      	uxth	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	f000 8224 	beq.w	80008ac <DecodeESP+0x520>
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWMODE[RXUSART1->i]){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7952      	ldrb	r2, [r2, #5]
 800046c:	4413      	add	r3, r2
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7c1b      	ldrb	r3, [r3, #16]
 8000474:	4619      	mov	r1, r3
 8000476:	4b68      	ldr	r3, [pc, #416]	; (8000618 <DecodeESP+0x28c>)
 8000478:	5c5b      	ldrb	r3, [r3, r1]
 800047a:	429a      	cmp	r2, r3
 800047c:	d119      	bne.n	80004b2 <DecodeESP+0x126>
						RXUSART1->i++;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	7c1b      	ldrb	r3, [r3, #16]
 8000482:	3301      	adds	r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	741a      	strb	r2, [r3, #16]
						if(RXUSART1->i==19){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	7c1b      	ldrb	r3, [r3, #16]
 800048e:	2b13      	cmp	r3, #19
 8000490:	f040 820c 	bne.w	80008ac <DecodeESP+0x520>
							RXUSART1->i=0;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	741a      	strb	r2, [r3, #16]
							RXUSART1->state = 2;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2202      	movs	r2, #2
 800049e:	721a      	strb	r2, [r3, #8]
							On500ms = 0;
 80004a0:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <DecodeESP+0x284>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	801a      	strh	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 80004a6:	4a59      	ldr	r2, [pc, #356]	; (800060c <DecodeESP+0x280>)
 80004a8:	7813      	ldrb	r3, [r2, #0]
 80004aa:	f36f 1345 	bfc	r3, #5, #1
 80004ae:	7013      	strb	r3, [r2, #0]
							RXUSART1->i=0;
						}
						RXUSART1->state = 10;
					}
				}
			break;
 80004b0:	e1fc      	b.n	80008ac <DecodeESP+0x520>
						if(RXUSART1->i>0){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7c1b      	ldrb	r3, [r3, #16]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d006      	beq.n	80004c8 <DecodeESP+0x13c>
							RXUSART1->ir = RXUSART1->iw;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791a      	ldrb	r2, [r3, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	715a      	strb	r2, [r3, #5]
							RXUSART1->i=0;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 10;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	220a      	movs	r2, #10
 80004cc:	721a      	strb	r2, [r3, #8]
			break;
 80004ce:	e1ed      	b.n	80008ac <DecodeESP+0x520>

			case 2:
				if(On3000ms){
 80004d0:	4b52      	ldr	r3, [pc, #328]	; (800061c <DecodeESP+0x290>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	f000 81ea 	beq.w	80008b0 <DecodeESP+0x524>
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CWJAP_[RXUSART1->i]){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7952      	ldrb	r2, [r2, #5]
 80004e4:	4413      	add	r3, r2
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7c1b      	ldrb	r3, [r3, #16]
 80004ec:	4619      	mov	r1, r3
 80004ee:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <DecodeESP+0x294>)
 80004f0:	5c5b      	ldrb	r3, [r3, r1]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d119      	bne.n	800052a <DecodeESP+0x19e>
						RXUSART1->i++;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7c1b      	ldrb	r3, [r3, #16]
 80004fa:	3301      	adds	r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	741a      	strb	r2, [r3, #16]
						if(RXUSART1->i==LONG_ANS_CWJAP_){
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	7c1b      	ldrb	r3, [r3, #16]
 8000506:	2b47      	cmp	r3, #71	; 0x47
 8000508:	f040 81d2 	bne.w	80008b0 <DecodeESP+0x524>
							RXUSART1->i=0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	741a      	strb	r2, [r3, #16]
							RXUSART1->state = 3;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2203      	movs	r2, #3
 8000516:	721a      	strb	r2, [r3, #8]
							On3000ms = 0;
 8000518:	4b40      	ldr	r3, [pc, #256]	; (800061c <DecodeESP+0x290>)
 800051a:	2200      	movs	r2, #0
 800051c:	801a      	strh	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 800051e:	4a3b      	ldr	r2, [pc, #236]	; (800060c <DecodeESP+0x280>)
 8000520:	7813      	ldrb	r3, [r2, #0]
 8000522:	f36f 1345 	bfc	r3, #5, #1
 8000526:	7013      	strb	r3, [r2, #0]
							RXUSART1->i=0;
						}
						RXUSART1->state = 10;
					}
				}
			break;
 8000528:	e1c2      	b.n	80008b0 <DecodeESP+0x524>
						if(RXUSART1->i>0){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	7c1b      	ldrb	r3, [r3, #16]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d006      	beq.n	8000540 <DecodeESP+0x1b4>
							RXUSART1->ir = RXUSART1->iw;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791a      	ldrb	r2, [r3, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	715a      	strb	r2, [r3, #5]
							RXUSART1->i=0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 10;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	220a      	movs	r2, #10
 8000544:	721a      	strb	r2, [r3, #8]
			break;
 8000546:	e1b3      	b.n	80008b0 <DecodeESP+0x524>

			case 3:
				if(On500ms){
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <DecodeESP+0x284>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	b29b      	uxth	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	f000 80c5 	beq.w	80006de <DecodeESP+0x352>
					switch(DecodeCIFSR){
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <DecodeESP+0x298>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b03      	cmp	r3, #3
 800055a:	f200 81ab 	bhi.w	80008b4 <DecodeESP+0x528>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <DecodeESP+0x1d8>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000575 	.word	0x08000575
 8000568:	080005d1 	.word	0x080005d1
 800056c:	08000631 	.word	0x08000631
 8000570:	0800068d 	.word	0x0800068d
						case 0:
							if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIFSR[RXUSART1->i]){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7952      	ldrb	r2, [r2, #5]
 800057c:	4413      	add	r3, r2
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7c1b      	ldrb	r3, [r3, #16]
 8000584:	4619      	mov	r1, r3
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <DecodeESP+0x29c>)
 8000588:	5c5b      	ldrb	r3, [r3, r1]
 800058a:	429a      	cmp	r2, r3
 800058c:	d111      	bne.n	80005b2 <DecodeESP+0x226>
								RXUSART1->i++;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7c1b      	ldrb	r3, [r3, #16]
 8000592:	3301      	adds	r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	741a      	strb	r2, [r3, #16]
								if(RXUSART1->i==10){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7c1b      	ldrb	r3, [r3, #16]
 800059e:	2b0a      	cmp	r3, #10
 80005a0:	f040 809f 	bne.w	80006e2 <DecodeESP+0x356>
									RXUSART1->i=0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	741a      	strb	r2, [r3, #16]
									DecodeCIFSR = 1;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <DecodeESP+0x298>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
									RXUSART1->i=0;
								}
								RXUSART1->state = 2;
							}

						break;
 80005b0:	e097      	b.n	80006e2 <DecodeESP+0x356>
								if(RXUSART1->i>0){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7c1b      	ldrb	r3, [r3, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d006      	beq.n	80005c8 <DecodeESP+0x23c>
									RXUSART1->ir = RXUSART1->iw;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791a      	ldrb	r2, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	715a      	strb	r2, [r3, #5]
									RXUSART1->i=0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	741a      	strb	r2, [r3, #16]
								RXUSART1->state = 2;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2202      	movs	r2, #2
 80005cc:	721a      	strb	r2, [r3, #8]
						break;
 80005ce:	e088      	b.n	80006e2 <DecodeESP+0x356>
						case 1:
							if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIFSR_STAIP[RXUSART1->i]){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7952      	ldrb	r2, [r2, #5]
 80005d8:	4413      	add	r3, r2
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7c1b      	ldrb	r3, [r3, #16]
 80005e0:	4619      	mov	r1, r3
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <DecodeESP+0x2a0>)
 80005e4:	5c5b      	ldrb	r3, [r3, r1]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d17d      	bne.n	80006e6 <DecodeESP+0x35a>
								RXUSART1->i++;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7c1b      	ldrb	r3, [r3, #16]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	741a      	strb	r2, [r3, #16]
								if(RXUSART1->i == 14){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c1b      	ldrb	r3, [r3, #16]
 80005fa:	2b0e      	cmp	r3, #14
 80005fc:	d173      	bne.n	80006e6 <DecodeESP+0x35a>
									DecodeCIFSR = 2;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <DecodeESP+0x298>)
 8000600:	2202      	movs	r2, #2
 8000602:	701a      	strb	r2, [r3, #0]
									RXUSART1->i = 0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	741a      	strb	r2, [r3, #16]
								}
							}
						break;
 800060a:	e06c      	b.n	80006e6 <DecodeESP+0x35a>
 800060c:	20000790 	.word	0x20000790
 8000610:	20000c00 	.word	0x20000c00
 8000614:	0800bc8c 	.word	0x0800bc8c
 8000618:	0800bbc4 	.word	0x0800bbc4
 800061c:	20000c0a 	.word	0x20000c0a
 8000620:	0800bbd8 	.word	0x0800bbd8
 8000624:	200009e0 	.word	0x200009e0
 8000628:	0800bc34 	.word	0x0800bc34
 800062c:	0800bc40 	.word	0x0800bc40

						case 2:
							EspIp[RXUSART1->i] = RXUSART1->Buff[RXUSART1->ir];
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7952      	ldrb	r2, [r2, #5]
 8000638:	4413      	add	r3, r2
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7c12      	ldrb	r2, [r2, #16]
 800063e:	7819      	ldrb	r1, [r3, #0]
 8000640:	4b9f      	ldr	r3, [pc, #636]	; (80008c0 <DecodeESP+0x534>)
 8000642:	5499      	strb	r1, [r3, r2]
							RXUSART1->i++;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7c1b      	ldrb	r3, [r3, #16]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	741a      	strb	r2, [r3, #16]
							LengthIp++;
 8000650:	4b9c      	ldr	r3, [pc, #624]	; (80008c4 <DecodeESP+0x538>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b9a      	ldr	r3, [pc, #616]	; (80008c4 <DecodeESP+0x538>)
 800065a:	701a      	strb	r2, [r3, #0]
							if(LengthIp > 0 && RXUSART1->Buff[RXUSART1->ir] == '"'){
 800065c:	4b99      	ldr	r3, [pc, #612]	; (80008c4 <DecodeESP+0x538>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d042      	beq.n	80006ea <DecodeESP+0x35e>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7952      	ldrb	r2, [r2, #5]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b22      	cmp	r3, #34	; 0x22
 8000672:	d13a      	bne.n	80006ea <DecodeESP+0x35e>
								RXUSART1->i = 0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	741a      	strb	r2, [r3, #16]
								ESPGotIP = 1;
 800067a:	4a93      	ldr	r2, [pc, #588]	; (80008c8 <DecodeESP+0x53c>)
 800067c:	7813      	ldrb	r3, [r2, #0]
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	7013      	strb	r3, [r2, #0]
								DecodeCIFSR = 3;
 8000684:	4b91      	ldr	r3, [pc, #580]	; (80008cc <DecodeESP+0x540>)
 8000686:	2203      	movs	r2, #3
 8000688:	701a      	strb	r2, [r3, #0]
							}
						break;
 800068a:	e02e      	b.n	80006ea <DecodeESP+0x35e>

						case 3:
							if(RXUSART1->Buff[RXUSART1->ir]==OK[RXUSART1->i]){
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7952      	ldrb	r2, [r2, #5]
 8000694:	4413      	add	r3, r2
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7c1b      	ldrb	r3, [r3, #16]
 800069c:	4619      	mov	r1, r3
 800069e:	4b8c      	ldr	r3, [pc, #560]	; (80008d0 <DecodeESP+0x544>)
 80006a0:	5c5b      	ldrb	r3, [r3, r1]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d123      	bne.n	80006ee <DecodeESP+0x362>
								RXUSART1->i++;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7c1b      	ldrb	r3, [r3, #16]
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	741a      	strb	r2, [r3, #16]
								if(RXUSART1->i == 6){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7c1b      	ldrb	r3, [r3, #16]
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d119      	bne.n	80006ee <DecodeESP+0x362>
									DecodeCIFSR = 0;
 80006ba:	4b84      	ldr	r3, [pc, #528]	; (80008cc <DecodeESP+0x540>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
									RXUSART1->i = 0;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	741a      	strb	r2, [r3, #16]
									RXUSART1->state = 5;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2205      	movs	r2, #5
 80006ca:	721a      	strb	r2, [r3, #8]
									ESPReadyToRecyb = 0;
 80006cc:	4a7e      	ldr	r2, [pc, #504]	; (80008c8 <DecodeESP+0x53c>)
 80006ce:	7813      	ldrb	r3, [r2, #0]
 80006d0:	f36f 1345 	bfc	r3, #5, #1
 80006d4:	7013      	strb	r3, [r2, #0]
									On500ms = 0;
 80006d6:	4b7f      	ldr	r3, [pc, #508]	; (80008d4 <DecodeESP+0x548>)
 80006d8:	2200      	movs	r2, #0
 80006da:	801a      	strh	r2, [r3, #0]
								}
							}
						break;
 80006dc:	e007      	b.n	80006ee <DecodeESP+0x362>
					}
				}
 80006de:	bf00      	nop
 80006e0:	e0e8      	b.n	80008b4 <DecodeESP+0x528>
						break;
 80006e2:	bf00      	nop
 80006e4:	e0e6      	b.n	80008b4 <DecodeESP+0x528>
						break;
 80006e6:	bf00      	nop
 80006e8:	e0e4      	b.n	80008b4 <DecodeESP+0x528>
						break;
 80006ea:	bf00      	nop
 80006ec:	e0e2      	b.n	80008b4 <DecodeESP+0x528>
						break;
 80006ee:	bf00      	nop
			break;
 80006f0:	e0e0      	b.n	80008b4 <DecodeESP+0x528>

			case 4:
				if(On500ms){
 80006f2:	4b78      	ldr	r3, [pc, #480]	; (80008d4 <DecodeESP+0x548>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f000 80dd 	beq.w	80008b8 <DecodeESP+0x52c>
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPMUX[RXUSART1->i]){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7952      	ldrb	r2, [r2, #5]
 8000706:	4413      	add	r3, r2
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7c1b      	ldrb	r3, [r3, #16]
 800070e:	4619      	mov	r1, r3
 8000710:	4b71      	ldr	r3, [pc, #452]	; (80008d8 <DecodeESP+0x54c>)
 8000712:	5c5b      	ldrb	r3, [r3, r1]
 8000714:	429a      	cmp	r2, r3
 8000716:	d119      	bne.n	800074c <DecodeESP+0x3c0>
						RXUSART1->i++;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7c1b      	ldrb	r3, [r3, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	741a      	strb	r2, [r3, #16]
						if(RXUSART1->i==19){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7c1b      	ldrb	r3, [r3, #16]
 8000728:	2b13      	cmp	r3, #19
 800072a:	f040 80c5 	bne.w	80008b8 <DecodeESP+0x52c>
							RXUSART1->i=0;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	741a      	strb	r2, [r3, #16]
							RXUSART1->state = 5;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2205      	movs	r2, #5
 8000738:	721a      	strb	r2, [r3, #8]
							On500ms = 0;
 800073a:	4b66      	ldr	r3, [pc, #408]	; (80008d4 <DecodeESP+0x548>)
 800073c:	2200      	movs	r2, #0
 800073e:	801a      	strh	r2, [r3, #0]
							ESPReadyToRecyb = 0;
 8000740:	4a61      	ldr	r2, [pc, #388]	; (80008c8 <DecodeESP+0x53c>)
 8000742:	7813      	ldrb	r3, [r2, #0]
 8000744:	f36f 1345 	bfc	r3, #5, #1
 8000748:	7013      	strb	r3, [r2, #0]
						}
						RXUSART1->state = 10;
						ESPReadyToRecyb = 0;
					}
				}
			break;
 800074a:	e0b5      	b.n	80008b8 <DecodeESP+0x52c>
						if(RXUSART1->i>0){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7c1b      	ldrb	r3, [r3, #16]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <DecodeESP+0x3d6>
							RXUSART1->ir = RXUSART1->iw;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791a      	ldrb	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	715a      	strb	r2, [r3, #5]
							RXUSART1->i=0;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 10;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	220a      	movs	r2, #10
 8000766:	721a      	strb	r2, [r3, #8]
						ESPReadyToRecyb = 0;
 8000768:	4a57      	ldr	r2, [pc, #348]	; (80008c8 <DecodeESP+0x53c>)
 800076a:	7813      	ldrb	r3, [r2, #0]
 800076c:	f36f 1345 	bfc	r3, #5, #1
 8000770:	7013      	strb	r3, [r2, #0]
			break;
 8000772:	e0a1      	b.n	80008b8 <DecodeESP+0x52c>
			case 5:
				if(On3000ms){
 8000774:	4b59      	ldr	r3, [pc, #356]	; (80008dc <DecodeESP+0x550>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	f000 809e 	beq.w	80008bc <DecodeESP+0x530>
					if(RXUSART1->Buff[RXUSART1->ir]==ANS_CIPSTART[RXUSART1->i]){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7952      	ldrb	r2, [r2, #5]
 8000788:	4413      	add	r3, r2
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7c1b      	ldrb	r3, [r3, #16]
 8000790:	4619      	mov	r1, r3
 8000792:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <DecodeESP+0x554>)
 8000794:	5c5b      	ldrb	r3, [r3, r1]
 8000796:	429a      	cmp	r2, r3
 8000798:	d116      	bne.n	80007c8 <DecodeESP+0x43c>
						RXUSART1->i++;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7c1b      	ldrb	r3, [r3, #16]
 800079e:	3301      	adds	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	741a      	strb	r2, [r3, #16]
						if(RXUSART1->i==59){
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7c1b      	ldrb	r3, [r3, #16]
 80007aa:	2b3b      	cmp	r3, #59	; 0x3b
 80007ac:	f040 8086 	bne.w	80008bc <DecodeESP+0x530>
							RXUSART1->i=0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	741a      	strb	r2, [r3, #16]
							espConnected = 1;
 80007b6:	4a44      	ldr	r2, [pc, #272]	; (80008c8 <DecodeESP+0x53c>)
 80007b8:	7813      	ldrb	r3, [r2, #0]
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	7013      	strb	r3, [r2, #0]
							On3000ms = 0;
 80007c0:	4b46      	ldr	r3, [pc, #280]	; (80008dc <DecodeESP+0x550>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	801a      	strh	r2, [r3, #0]
							RXUSART1->i=0;
						}
						RXUSART1->state = 10;
					}
				}
			break;
 80007c6:	e079      	b.n	80008bc <DecodeESP+0x530>
						if(RXUSART1->i>0){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7c1b      	ldrb	r3, [r3, #16]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <DecodeESP+0x452>
							RXUSART1->ir = RXUSART1->iw;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791a      	ldrb	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	715a      	strb	r2, [r3, #5]
							RXUSART1->i=0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 10;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	220a      	movs	r2, #10
 80007e2:	721a      	strb	r2, [r3, #8]
			break;
 80007e4:	e06a      	b.n	80008bc <DecodeESP+0x530>

			case 10:
				if(RXUSART1->Buff[RXUSART1->ir]==AUTOMATIC_WIFI_CONNECTED[RXUSART1->i]){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7952      	ldrb	r2, [r2, #5]
 80007ee:	4413      	add	r3, r2
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7c1b      	ldrb	r3, [r3, #16]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4b3a      	ldr	r3, [pc, #232]	; (80008e4 <DecodeESP+0x558>)
 80007fa:	5c5b      	ldrb	r3, [r3, r1]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d113      	bne.n	8000828 <DecodeESP+0x49c>
					RXUSART1->i++;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7c1b      	ldrb	r3, [r3, #16]
 8000804:	3301      	adds	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	741a      	strb	r2, [r3, #16]
					if(RXUSART1->i==29){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7c1b      	ldrb	r3, [r3, #16]
 8000810:	2b1d      	cmp	r3, #29
 8000812:	d16f      	bne.n	80008f4 <DecodeESP+0x568>
						RXUSART1->i=0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 4;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2204      	movs	r2, #4
 800081e:	721a      	strb	r2, [r3, #8]
						On500ms = 0;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <DecodeESP+0x548>)
 8000822:	2200      	movs	r2, #0
 8000824:	801a      	strh	r2, [r3, #0]
						RXUSART1->i=0;
						RXUSART1->state = 0;
					}

				}
			break;
 8000826:	e065      	b.n	80008f4 <DecodeESP+0x568>
					if(RXUSART1->Buff[RXUSART1->ir]==WIFI_DISCONNECT[RXUSART1->i]){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	7952      	ldrb	r2, [r2, #5]
 8000830:	4413      	add	r3, r2
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7c1b      	ldrb	r3, [r3, #16]
 8000838:	4619      	mov	r1, r3
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <DecodeESP+0x55c>)
 800083c:	5c5b      	ldrb	r3, [r3, r1]
 800083e:	429a      	cmp	r2, r3
 8000840:	d125      	bne.n	800088e <DecodeESP+0x502>
						RXUSART1->i++;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7c1b      	ldrb	r3, [r3, #16]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	741a      	strb	r2, [r3, #16]
						if(RXUSART1->i==17){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7c1b      	ldrb	r3, [r3, #16]
 8000852:	2b11      	cmp	r3, #17
 8000854:	d14e      	bne.n	80008f4 <DecodeESP+0x568>
							RXUSART1->i=0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	741a      	strb	r2, [r3, #16]
							RXUSART1->state = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	721a      	strb	r2, [r3, #8]
							On500ms = 0;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <DecodeESP+0x548>)
 8000864:	2200      	movs	r2, #0
 8000866:	801a      	strh	r2, [r3, #0]
							espConnected = 0;
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <DecodeESP+0x53c>)
 800086a:	7813      	ldrb	r3, [r2, #0]
 800086c:	f36f 0300 	bfc	r3, #0, #1
 8000870:	7013      	strb	r3, [r2, #0]
							ESPReadyToRecyb = 0;
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <DecodeESP+0x53c>)
 8000874:	7813      	ldrb	r3, [r2, #0]
 8000876:	f36f 1345 	bfc	r3, #5, #1
 800087a:	7013      	strb	r3, [r2, #0]
							HAL_UART_AbortReceive_IT(&huart1);
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <DecodeESP+0x560>)
 800087e:	f006 f9d5 	bl	8006c2c <HAL_UART_AbortReceive_IT>
							HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_RESET);//Reset ESP8266
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <DecodeESP+0x564>)
 8000888:	f002 fee8 	bl	800365c <HAL_GPIO_WritePin>
			break;
 800088c:	e032      	b.n	80008f4 <DecodeESP+0x568>
						RXUSART1->ir = RXUSART1->iw;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791a      	ldrb	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	715a      	strb	r2, [r3, #5]
						RXUSART1->i=0;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	741a      	strb	r2, [r3, #16]
						RXUSART1->state = 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	721a      	strb	r2, [r3, #8]
			break;
 80008a2:	e027      	b.n	80008f4 <DecodeESP+0x568>
		}
	}
 80008a4:	bf00      	nop
 80008a6:	e026      	b.n	80008f6 <DecodeESP+0x56a>
			break;
 80008a8:	bf00      	nop
 80008aa:	e024      	b.n	80008f6 <DecodeESP+0x56a>
			break;
 80008ac:	bf00      	nop
 80008ae:	e022      	b.n	80008f6 <DecodeESP+0x56a>
			break;
 80008b0:	bf00      	nop
 80008b2:	e020      	b.n	80008f6 <DecodeESP+0x56a>
			break;
 80008b4:	bf00      	nop
 80008b6:	e01e      	b.n	80008f6 <DecodeESP+0x56a>
			break;
 80008b8:	bf00      	nop
 80008ba:	e01c      	b.n	80008f6 <DecodeESP+0x56a>
			break;
 80008bc:	bf00      	nop
 80008be:	e01a      	b.n	80008f6 <DecodeESP+0x56a>
 80008c0:	20000608 	.word	0x20000608
 80008c4:	20000c08 	.word	0x20000c08
 80008c8:	20000790 	.word	0x20000790
 80008cc:	200009e0 	.word	0x200009e0
 80008d0:	0800bccc 	.word	0x0800bccc
 80008d4:	20000c00 	.word	0x20000c00
 80008d8:	0800bc20 	.word	0x0800bc20
 80008dc:	20000c0a 	.word	0x20000c0a
 80008e0:	0800bc50 	.word	0x0800bc50
 80008e4:	0800bc98 	.word	0x0800bc98
 80008e8:	0800bcb8 	.word	0x0800bcb8
 80008ec:	2000074c 	.word	0x2000074c
 80008f0:	40010c00 	.word	0x40010c00
			break;
 80008f4:	bf00      	nop
	if(ECOCIPSEND){
 80008f6:	4b8b      	ldr	r3, [pc, #556]	; (8000b24 <DecodeESP+0x798>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 8107 	beq.w	8000b14 <DecodeESP+0x788>
		switch(DecodeCIPSEND){
 8000906:	4b88      	ldr	r3, [pc, #544]	; (8000b28 <DecodeESP+0x79c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b05      	cmp	r3, #5
 800090c:	f200 8119 	bhi.w	8000b42 <DecodeESP+0x7b6>
 8000910:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <DecodeESP+0x58c>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000931 	.word	0x08000931
 800091c:	08000989 	.word	0x08000989
 8000920:	080009bf 	.word	0x080009bf
 8000924:	08000a1d 	.word	0x08000a1d
 8000928:	08000a79 	.word	0x08000a79
 800092c:	08000aaf 	.word	0x08000aaf
			case 0:
				if(RXUSART1->Buff[RXUSART1->ir] == CIPSEND1[RXUSART1->i]){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7952      	ldrb	r2, [r2, #5]
 8000938:	4413      	add	r3, r2
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7c1b      	ldrb	r3, [r3, #16]
 8000940:	4619      	mov	r1, r3
 8000942:	4b7a      	ldr	r3, [pc, #488]	; (8000b2c <DecodeESP+0x7a0>)
 8000944:	5c5b      	ldrb	r3, [r3, r1]
 8000946:	429a      	cmp	r2, r3
 8000948:	f040 80e6 	bne.w	8000b18 <DecodeESP+0x78c>
					RXUSART1->i++;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7c1b      	ldrb	r3, [r3, #16]
 8000950:	3301      	adds	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	741a      	strb	r2, [r3, #16]
					if(RXUSART1->i == 11){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7c1b      	ldrb	r3, [r3, #16]
 800095c:	2b0b      	cmp	r3, #11
 800095e:	d106      	bne.n	800096e <DecodeESP+0x5e2>
						RXUSART1->i = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	741a      	strb	r2, [r3, #16]
						DecodeCIPSEND = 1;
 8000966:	4b70      	ldr	r3, [pc, #448]	; (8000b28 <DecodeESP+0x79c>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
						ECOCIPSEND = 0;
						RXUSART1->i = 0;
						RXUSART1->ir = RXUSART1->iw;
					}
				}
			break;
 800096c:	e0d4      	b.n	8000b18 <DecodeESP+0x78c>
						ECOCIPSEND = 0;
 800096e:	4a6d      	ldr	r2, [pc, #436]	; (8000b24 <DecodeESP+0x798>)
 8000970:	7813      	ldrb	r3, [r2, #0]
 8000972:	f36f 13c7 	bfc	r3, #7, #1
 8000976:	7013      	strb	r3, [r2, #0]
						RXUSART1->i = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	741a      	strb	r2, [r3, #16]
						RXUSART1->ir = RXUSART1->iw;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	791a      	ldrb	r2, [r3, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	715a      	strb	r2, [r3, #5]
			break;
 8000986:	e0c7      	b.n	8000b18 <DecodeESP+0x78c>

			case 1:
				if(RXUSART1->Buff[RXUSART1->ir] == TXUSART1.OutPutBytes){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	7952      	ldrb	r2, [r2, #5]
 8000990:	4413      	add	r3, r2
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b66      	ldr	r3, [pc, #408]	; (8000b30 <DecodeESP+0x7a4>)
 8000996:	79db      	ldrb	r3, [r3, #7]
 8000998:	429a      	cmp	r2, r3
 800099a:	d103      	bne.n	80009a4 <DecodeESP+0x618>
					DecodeCIPSEND = 2;
 800099c:	4b62      	ldr	r3, [pc, #392]	; (8000b28 <DecodeESP+0x79c>)
 800099e:	2202      	movs	r2, #2
 80009a0:	701a      	strb	r2, [r3, #0]
				else{
					ECOCIPSEND = 0;
					RXUSART1->ir = RXUSART1->iw;
					DecodeCIPSEND = 0;
				}
			break;
 80009a2:	e0ce      	b.n	8000b42 <DecodeESP+0x7b6>
					ECOCIPSEND = 0;
 80009a4:	4a5f      	ldr	r2, [pc, #380]	; (8000b24 <DecodeESP+0x798>)
 80009a6:	7813      	ldrb	r3, [r2, #0]
 80009a8:	f36f 13c7 	bfc	r3, #7, #1
 80009ac:	7013      	strb	r3, [r2, #0]
					RXUSART1->ir = RXUSART1->iw;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	791a      	ldrb	r2, [r3, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	715a      	strb	r2, [r3, #5]
					DecodeCIPSEND = 0;
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <DecodeESP+0x79c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			break;
 80009bc:	e0c1      	b.n	8000b42 <DecodeESP+0x7b6>

			case 2:
				if(RXUSART1->Buff[RXUSART1->ir] == CIPSEND2[RXUSART1->i]){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	7952      	ldrb	r2, [r2, #5]
 80009c6:	4413      	add	r3, r2
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7c1b      	ldrb	r3, [r3, #16]
 80009ce:	4619      	mov	r1, r3
 80009d0:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <DecodeESP+0x7a8>)
 80009d2:	5c5b      	ldrb	r3, [r3, r1]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f040 80a1 	bne.w	8000b1c <DecodeESP+0x790>
					RXUSART1->i++;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7c1b      	ldrb	r3, [r3, #16]
 80009de:	3301      	adds	r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	741a      	strb	r2, [r3, #16]
					if(RXUSART1->i == 10){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7c1b      	ldrb	r3, [r3, #16]
 80009ea:	2b0a      	cmp	r3, #10
 80009ec:	d106      	bne.n	80009fc <DecodeESP+0x670>
						RXUSART1->i = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	741a      	strb	r2, [r3, #16]
						DecodeCIPSEND = 3;
 80009f4:	4b4c      	ldr	r3, [pc, #304]	; (8000b28 <DecodeESP+0x79c>)
 80009f6:	2203      	movs	r2, #3
 80009f8:	701a      	strb	r2, [r3, #0]
						DecodeCIPSEND = 0;
						RXUSART1->i = 0;
						RXUSART1->ir = RXUSART1->iw;
					}
				}
			break;
 80009fa:	e08f      	b.n	8000b1c <DecodeESP+0x790>
						ECOCIPSEND = 0;
 80009fc:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <DecodeESP+0x798>)
 80009fe:	7813      	ldrb	r3, [r2, #0]
 8000a00:	f36f 13c7 	bfc	r3, #7, #1
 8000a04:	7013      	strb	r3, [r2, #0]
						DecodeCIPSEND = 0;
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <DecodeESP+0x79c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
						RXUSART1->i = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	741a      	strb	r2, [r3, #16]
						RXUSART1->ir = RXUSART1->iw;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	791a      	ldrb	r2, [r3, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	715a      	strb	r2, [r3, #5]
			break;
 8000a1a:	e07f      	b.n	8000b1c <DecodeESP+0x790>

			case 3:
				if(RXUSART1->Buff[RXUSART1->ir] == CIPSEND3[RXUSART1->i]){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	7952      	ldrb	r2, [r2, #5]
 8000a24:	4413      	add	r3, r2
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7c1b      	ldrb	r3, [r3, #16]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <DecodeESP+0x7ac>)
 8000a30:	5c5b      	ldrb	r3, [r3, r1]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d174      	bne.n	8000b20 <DecodeESP+0x794>
					RXUSART1->i++;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7c1b      	ldrb	r3, [r3, #16]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	741a      	strb	r2, [r3, #16]
					if(RXUSART1->i == 7){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7c1b      	ldrb	r3, [r3, #16]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d106      	bne.n	8000a58 <DecodeESP+0x6cc>
						RXUSART1->i = 0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	741a      	strb	r2, [r3, #16]
						DecodeCIPSEND = 4;
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <DecodeESP+0x79c>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	701a      	strb	r2, [r3, #0]
						DecodeCIPSEND = 0;
						RXUSART1->i = 0;
						RXUSART1->ir = RXUSART1->iw;
					}
				}
			break;
 8000a56:	e063      	b.n	8000b20 <DecodeESP+0x794>
						ECOCIPSEND = 0;
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <DecodeESP+0x798>)
 8000a5a:	7813      	ldrb	r3, [r2, #0]
 8000a5c:	f36f 13c7 	bfc	r3, #7, #1
 8000a60:	7013      	strb	r3, [r2, #0]
						DecodeCIPSEND = 0;
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <DecodeESP+0x79c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
						RXUSART1->i = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	741a      	strb	r2, [r3, #16]
						RXUSART1->ir = RXUSART1->iw;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791a      	ldrb	r2, [r3, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	715a      	strb	r2, [r3, #5]
			break;
 8000a76:	e053      	b.n	8000b20 <DecodeESP+0x794>

			case 4:
				if(RXUSART1->Buff[RXUSART1->ir] == TXUSART1.OutPutBytes){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	7952      	ldrb	r2, [r2, #5]
 8000a80:	4413      	add	r3, r2
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <DecodeESP+0x7a4>)
 8000a86:	79db      	ldrb	r3, [r3, #7]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d103      	bne.n	8000a94 <DecodeESP+0x708>
					DecodeCIPSEND = 5;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <DecodeESP+0x79c>)
 8000a8e:	2205      	movs	r2, #5
 8000a90:	701a      	strb	r2, [r3, #0]
				else{
					ECOCIPSEND = 0;
					RXUSART1->ir = RXUSART1->iw;
					DecodeCIPSEND = 0;
				}
			break;
 8000a92:	e056      	b.n	8000b42 <DecodeESP+0x7b6>
					ECOCIPSEND = 0;
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <DecodeESP+0x798>)
 8000a96:	7813      	ldrb	r3, [r2, #0]
 8000a98:	f36f 13c7 	bfc	r3, #7, #1
 8000a9c:	7013      	strb	r3, [r2, #0]
					RXUSART1->ir = RXUSART1->iw;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	791a      	ldrb	r2, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	715a      	strb	r2, [r3, #5]
					DecodeCIPSEND = 0;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <DecodeESP+0x79c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
			break;
 8000aac:	e049      	b.n	8000b42 <DecodeESP+0x7b6>

			case 5:
				if(RXUSART1->Buff[RXUSART1->ir] == CIPSEND4[RXUSART1->i]){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	7952      	ldrb	r2, [r2, #5]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7c1b      	ldrb	r3, [r3, #16]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <DecodeESP+0x7b0>)
 8000ac2:	5c5b      	ldrb	r3, [r3, r1]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d115      	bne.n	8000af4 <DecodeESP+0x768>
					RXUSART1->i++;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7c1b      	ldrb	r3, [r3, #16]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	741a      	strb	r2, [r3, #16]
					if(RXUSART1->i == 19){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7c1b      	ldrb	r3, [r3, #16]
 8000ad8:	2b13      	cmp	r3, #19
 8000ada:	d131      	bne.n	8000b40 <DecodeESP+0x7b4>
						RXUSART1->i = 0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	741a      	strb	r2, [r3, #16]
						DecodeCIPSEND = 0;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <DecodeESP+0x79c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
						DataSentESP = 1;
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <DecodeESP+0x798>)
 8000aea:	7813      	ldrb	r3, [r2, #0]
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	7013      	strb	r3, [r2, #0]
					ECOCIPSEND = 0;
					DecodeCIPSEND = 0;
					RXUSART1->i = 0;
					RXUSART1->ir = RXUSART1->iw;
				}
			break;
 8000af2:	e025      	b.n	8000b40 <DecodeESP+0x7b4>
					ECOCIPSEND = 0;
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <DecodeESP+0x798>)
 8000af6:	7813      	ldrb	r3, [r2, #0]
 8000af8:	f36f 13c7 	bfc	r3, #7, #1
 8000afc:	7013      	strb	r3, [r2, #0]
					DecodeCIPSEND = 0;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <DecodeESP+0x79c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
					RXUSART1->i = 0;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	741a      	strb	r2, [r3, #16]
					RXUSART1->ir = RXUSART1->iw;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791a      	ldrb	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	715a      	strb	r2, [r3, #5]
			break;
 8000b12:	e015      	b.n	8000b40 <DecodeESP+0x7b4>
		}
	}
 8000b14:	bf00      	nop
 8000b16:	e014      	b.n	8000b42 <DecodeESP+0x7b6>
			break;
 8000b18:	bf00      	nop
 8000b1a:	e012      	b.n	8000b42 <DecodeESP+0x7b6>
			break;
 8000b1c:	bf00      	nop
 8000b1e:	e010      	b.n	8000b42 <DecodeESP+0x7b6>
			break;
 8000b20:	bf00      	nop
 8000b22:	e00e      	b.n	8000b42 <DecodeESP+0x7b6>
 8000b24:	20000790 	.word	0x20000790
 8000b28:	20000478 	.word	0x20000478
 8000b2c:	0800bcd4 	.word	0x0800bcd4
 8000b30:	20000c20 	.word	0x20000c20
 8000b34:	0800bce0 	.word	0x0800bce0
 8000b38:	0800bcec 	.word	0x0800bcec
 8000b3c:	0800bcf4 	.word	0x0800bcf4
			break;
 8000b40:	bf00      	nop
	if(DecodeIPD){
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <DecodeESP+0x860>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d03e      	beq.n	8000bce <DecodeESP+0x842>
		if(RXUSART1->Buff[RXUSART1->ir]==IPD[RXUSART1->i]){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	7952      	ldrb	r2, [r2, #5]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7c1b      	ldrb	r3, [r3, #16]
 8000b60:	4619      	mov	r1, r3
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <DecodeESP+0x864>)
 8000b64:	5c5b      	ldrb	r3, [r3, r1]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d125      	bne.n	8000bb6 <DecodeESP+0x82a>
			RXUSART1->i++;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7c1b      	ldrb	r3, [r3, #16]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	741a      	strb	r2, [r3, #16]
			if(RXUSART1->i == 6){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7c1b      	ldrb	r3, [r3, #16]
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d127      	bne.n	8000bce <DecodeESP+0x842>
				RXUSART1->i = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	741a      	strb	r2, [r3, #16]
				RXUSART1->ir++;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	795b      	ldrb	r3, [r3, #5]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	715a      	strb	r2, [r3, #5]
				if(RXUSART1->Buff[RXUSART1->ir]==':'){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7952      	ldrb	r2, [r2, #5]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b3a      	cmp	r3, #58	; 0x3a
 8000b9e:	d116      	bne.n	8000bce <DecodeESP+0x842>
					DecodeHeaderESP = 1;
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <DecodeESP+0x860>)
 8000ba2:	7813      	ldrb	r3, [r2, #0]
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	7013      	strb	r3, [r2, #0]
					DecodeIPD = 0;
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <DecodeESP+0x860>)
 8000bac:	7813      	ldrb	r3, [r2, #0]
 8000bae:	f36f 1386 	bfc	r3, #6, #1
 8000bb2:	7013      	strb	r3, [r2, #0]
 8000bb4:	e00b      	b.n	8000bce <DecodeESP+0x842>
				}
			}
		}
		else{
			DecodeIPD = 0;
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <DecodeESP+0x860>)
 8000bb8:	7813      	ldrb	r3, [r2, #0]
 8000bba:	f36f 1386 	bfc	r3, #6, #1
 8000bbe:	7013      	strb	r3, [r2, #0]
			RXUSART1->i = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	741a      	strb	r2, [r3, #16]
			RXUSART1->ir = RXUSART1->iw;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	791a      	ldrb	r2, [r3, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	715a      	strb	r2, [r3, #5]
		}
	}

	ESPReadyToRecyb = 0;
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <DecodeESP+0x860>)
 8000bd0:	7813      	ldrb	r3, [r2, #0]
 8000bd2:	f36f 1345 	bfc	r3, #5, #1
 8000bd6:	7013      	strb	r3, [r2, #0]

	RXUSART1->ir++;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	795b      	ldrb	r3, [r3, #5]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	715a      	strb	r2, [r3, #5]
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000790 	.word	0x20000790
 8000bf0:	0800bd08 	.word	0x0800bd08

08000bf4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	RXUSART1.iw++;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_UART_RxCpltCallback+0x34>)
 8000bfe:	791b      	ldrb	r3, [r3, #4]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_UART_RxCpltCallback+0x34>)
 8000c08:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive_IT(&huart1, &rxUSART1Buff[RXUSART1.iw], 1);
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_UART_RxCpltCallback+0x34>)
 8000c0c:	791b      	ldrb	r3, [r3, #4]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_UART_RxCpltCallback+0x38>)
 8000c14:	4413      	add	r3, r2
 8000c16:	2201      	movs	r2, #1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_RxCpltCallback+0x3c>)
 8000c1c:	f005 ffd5 	bl	8006bca <HAL_UART_Receive_IT>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000410 	.word	0x20000410
 8000c2c:	200009e4 	.word	0x200009e4
 8000c30:	2000074c 	.word	0x2000074c

08000c34 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	volatile uint8_t c;
/********************* Media movil de las 3 primeras lecturas **********************/
	if(FirtScan){
 8000c3c:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <HAL_ADC_ConvCpltCallback+0x270>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d063      	beq.n	8000d0c <HAL_ADC_ConvCpltCallback+0xd8>
		switch(iAdc){
 8000c44:	4b98      	ldr	r3, [pc, #608]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d002      	beq.n	8000c54 <HAL_ADC_ConvCpltCallback+0x20>
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d028      	beq.n	8000ca4 <HAL_ADC_ConvCpltCallback+0x70>
				}
				FirtScan = 0;
			break;

			default:
			break;
 8000c52:	e112      	b.n	8000e7a <HAL_ADC_ConvCpltCallback+0x246>
				for(c=0;c<8;c++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e01f      	b.n	8000c9a <HAL_ADC_ConvCpltCallback+0x66>
					bufADC[1][c]=(bufADC[0][c]+bufADC[1][c]) / 2 ;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b92      	ldr	r3, [pc, #584]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000c62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4619      	mov	r1, r3
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4a8f      	ldr	r2, [pc, #572]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000c70:	3308      	adds	r3, #8
 8000c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	440b      	add	r3, r1
 8000c7a:	0fda      	lsrs	r2, r3, #31
 8000c7c:	4413      	add	r3, r2
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	461a      	mov	r2, r3
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	b291      	uxth	r1, r2
 8000c88:	4a88      	ldr	r2, [pc, #544]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d9db      	bls.n	8000c5a <HAL_ADC_ConvCpltCallback+0x26>
			break;
 8000ca2:	e0ea      	b.n	8000e7a <HAL_ADC_ConvCpltCallback+0x246>
				for(c=0;c<8;c++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e028      	b.n	8000cfc <HAL_ADC_ConvCpltCallback+0xc8>
					bufADC[2][c]=(bufADC[0][c]+bufADC[1][c]+bufADC[2][c]) / 3;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b7e      	ldr	r3, [pc, #504]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000cb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4a7b      	ldr	r2, [pc, #492]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	440b      	add	r3, r1
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	4977      	ldr	r1, [pc, #476]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000cd0:	3210      	adds	r2, #16
 8000cd2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a75      	ldr	r2, [pc, #468]	; (8000eb0 <HAL_ADC_ConvCpltCallback+0x27c>)
 8000cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce0:	17db      	asrs	r3, r3, #31
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	b291      	uxth	r1, r2
 8000cea:	4a70      	ldr	r2, [pc, #448]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000cec:	3310      	adds	r3, #16
 8000cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(c=0;c<8;c++){
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9d2      	bls.n	8000caa <HAL_ADC_ConvCpltCallback+0x76>
				FirtScan = 0;
 8000d04:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <HAL_ADC_ConvCpltCallback+0x270>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
			break;
 8000d0a:	e0b6      	b.n	8000e7a <HAL_ADC_ConvCpltCallback+0x246>
	}

/***********************************************************************************/
/********************* Media movil de las siguientes lecturas **********************/
	else{
		if(iAdc >= 0 && iAdc <= 1){
 8000d0c:	4b66      	ldr	r3, [pc, #408]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d869      	bhi.n	8000dee <HAL_ADC_ConvCpltCallback+0x1ba>
			// Cruce por 0 y 1 donde se toman dos valores anteriores para hacer la media
			switch(iAdc){
 8000d1a:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <HAL_ADC_ConvCpltCallback+0xf6>
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d030      	beq.n	8000d8a <HAL_ADC_ConvCpltCallback+0x156>
 8000d28:	e0a7      	b.n	8000e7a <HAL_ADC_ConvCpltCallback+0x246>
				case 0:
					for(c = 0; c<8; c++){
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e027      	b.n	8000d80 <HAL_ADC_ConvCpltCallback+0x14c>
						bufADC[0][c]=( bufADC[0][c]+bufADC[31][c]+bufADC[30][c]) / 3 ;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000d38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4a59      	ldr	r2, [pc, #356]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000d46:	33f8      	adds	r3, #248	; 0xf8
 8000d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	440b      	add	r3, r1
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	4955      	ldr	r1, [pc, #340]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000d56:	32f0      	adds	r2, #240	; 0xf0
 8000d58:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d5c:	b292      	uxth	r2, r2
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a53      	ldr	r2, [pc, #332]	; (8000eb0 <HAL_ADC_ConvCpltCallback+0x27c>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	17db      	asrs	r3, r3, #31
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	b299      	uxth	r1, r3
 8000d70:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000d72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					for(c = 0; c<8; c++){
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d9d3      	bls.n	8000d30 <HAL_ADC_ConvCpltCallback+0xfc>
					}
				break;
 8000d88:	e030      	b.n	8000dec <HAL_ADC_ConvCpltCallback+0x1b8>
				case 1:
					for(c = 0; c<8; c++){
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e028      	b.n	8000de2 <HAL_ADC_ConvCpltCallback+0x1ae>
						bufADC[1][c]=(bufADC[0][c]+bufADC[1][c]+bufADC[31][c]) / 3;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000d98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4a41      	ldr	r2, [pc, #260]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000da6:	3308      	adds	r3, #8
 8000da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	440b      	add	r3, r1
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	493d      	ldr	r1, [pc, #244]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000db6:	32f8      	adds	r2, #248	; 0xf8
 8000db8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dbc:	b292      	uxth	r2, r2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a3b      	ldr	r2, [pc, #236]	; (8000eb0 <HAL_ADC_ConvCpltCallback+0x27c>)
 8000dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc6:	17db      	asrs	r3, r3, #31
 8000dc8:	1ad2      	subs	r2, r2, r3
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	b291      	uxth	r1, r2
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(c = 0; c<8; c++){
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d9d2      	bls.n	8000d90 <HAL_ADC_ConvCpltCallback+0x15c>
					}
				break;
 8000dea:	bf00      	nop
			switch(iAdc){
 8000dec:	e045      	b.n	8000e7a <HAL_ADC_ConvCpltCallback+0x246>
			}
		}
		else{
			// Cálculo comprendido entre bufADC[2] y bufADC[31]
			for(c = 0; c<8; c++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e03e      	b.n	8000e72 <HAL_ADC_ConvCpltCallback+0x23e>
				bufADC[iAdc][c] = (bufADC[iAdc-2][c] + bufADC[iAdc-1][c] + bufADC[iAdc][c])/3;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	4611      	mov	r1, r2
 8000e02:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3b01      	subs	r3, #1
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4a23      	ldr	r2, [pc, #140]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4403      	add	r3, r0
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	7bf9      	ldrb	r1, [r7, #15]
 8000e34:	b2c9      	uxtb	r1, r1
 8000e36:	4608      	mov	r0, r1
 8000e38:	491c      	ldr	r1, [pc, #112]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000e3a:	00d2      	lsls	r2, r2, #3
 8000e3c:	4402      	add	r2, r0
 8000e3e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e42:	b292      	uxth	r2, r2
 8000e44:	4413      	add	r3, r2
 8000e46:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_ADC_ConvCpltCallback+0x27c>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	17db      	asrs	r3, r3, #31
 8000e4e:	1ad2      	subs	r2, r2, r3
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	7bf9      	ldrb	r1, [r7, #15]
 8000e58:	b2c9      	uxtb	r1, r1
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	b291      	uxth	r1, r2
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <HAL_ADC_ConvCpltCallback+0x278>)
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4403      	add	r3, r0
 8000e64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(c = 0; c<8; c++){
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b07      	cmp	r3, #7
 8000e78:	d9bc      	bls.n	8000df4 <HAL_ADC_ConvCpltCallback+0x1c0>
			}
		}
	}
/***********************************************************************************/
	// Incrento indice del buffer
	iAdc++;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	3301      	adds	r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e86:	701a      	strb	r2, [r3, #0]
	if(iAdc == 32){
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b20      	cmp	r3, #32
 8000e90:	d102      	bne.n	8000e98 <HAL_ADC_ConvCpltCallback+0x264>
		iAdc = 0;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	}
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000198 	.word	0x20000198
 8000ea8:	20000604 	.word	0x20000604
 8000eac:	200007e0 	.word	0x200007e0
 8000eb0:	55555556 	.word	0x55555556

08000eb4 <MyCallBackOnUSBData>:

void MyCallBackOnUSBData(uint8_t *buf, uint32_t len){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	for(uint32_t i=0; i<len; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e010      	b.n	8000ee6 <MyCallBackOnUSBData+0x32>
		rxUSBBuff[RXUSB.iw++] = buf[i];
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	441a      	add	r2, r3
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MyCallBackOnUSBData+0x48>)
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	1c59      	adds	r1, r3, #1
 8000ed2:	b2c8      	uxtb	r0, r1
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <MyCallBackOnUSBData+0x48>)
 8000ed6:	7108      	strb	r0, [r1, #4]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MyCallBackOnUSBData+0x4c>)
 8000ede:	545a      	strb	r2, [r3, r1]
	for(uint32_t i=0; i<len; i++){
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3ea      	bcc.n	8000ec4 <MyCallBackOnUSBData+0x10>
	}
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000c0c 	.word	0x20000c0c
 8000f00:	200004a4 	.word	0x200004a4

08000f04 <DecodeHeader>:

    return aux;
}

void DecodeHeader(_Rx *RX)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    i = RX->iw;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i) {
 8000f12:	e0e3      	b.n	80010dc <DecodeHeader+0x1d8>
        switch(RX->header) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	79db      	ldrb	r3, [r3, #7]
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	f200 80c2 	bhi.w	80010a2 <DecodeHeader+0x19e>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <DecodeHeader+0x20>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f41 	.word	0x08000f41
 8000f28:	08000f61 	.word	0x08000f61
 8000f2c:	08000f8d 	.word	0x08000f8d
 8000f30:	08000fb9 	.word	0x08000fb9
 8000f34:	08000fe5 	.word	0x08000fe5
 8000f38:	08000ffd 	.word	0x08000ffd
 8000f3c:	08001053 	.word	0x08001053
            case 0:
                if(RX->Buff[RX->ir] == 'U') {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	7952      	ldrb	r2, [r2, #5]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b55      	cmp	r3, #85	; 0x55
 8000f4e:	f040 80ac 	bne.w	80010aa <DecodeHeader+0x1a6>
                    RX->header = 1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	71da      	strb	r2, [r3, #7]
                    RX->timeout = 5;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	73da      	strb	r2, [r3, #15]
                }
                break;
 8000f5e:	e0a4      	b.n	80010aa <DecodeHeader+0x1a6>
            case 1:
                if(RX->Buff[RX->ir] == 'N') {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	7952      	ldrb	r2, [r2, #5]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b4e      	cmp	r3, #78	; 0x4e
 8000f6e:	d103      	bne.n	8000f78 <DecodeHeader+0x74>
                    RX->header = 2;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000f76:	e09b      	b.n	80010b0 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	795b      	ldrb	r3, [r3, #5]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	715a      	strb	r2, [r3, #5]
                break;
 8000f8a:	e091      	b.n	80010b0 <DecodeHeader+0x1ac>
            case 2:
                if(RX->Buff[RX->ir] == 'E') {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	7952      	ldrb	r2, [r2, #5]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b45      	cmp	r3, #69	; 0x45
 8000f9a:	d103      	bne.n	8000fa4 <DecodeHeader+0xa0>
                    RX->header = 3;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0;
                    RX->ir --;
                }
                break;
 8000fa2:	e085      	b.n	80010b0 <DecodeHeader+0x1ac>
                    RX->header = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	715a      	strb	r2, [r3, #5]
                break;
 8000fb6:	e07b      	b.n	80010b0 <DecodeHeader+0x1ac>
            case 3:
                if(RX->Buff[RX->ir] == 'R') {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	7952      	ldrb	r2, [r2, #5]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b52      	cmp	r3, #82	; 0x52
 8000fc6:	d103      	bne.n	8000fd0 <DecodeHeader+0xcc>
                    RX->header = 4;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	71da      	strb	r2, [r3, #7]
                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 8000fce:	e06f      	b.n	80010b0 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	715a      	strb	r2, [r3, #5]
                break;
 8000fe2:	e065      	b.n	80010b0 <DecodeHeader+0x1ac>
            case 4:
                RX->nbytes = RX->Buff[RX->ir];
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	7952      	ldrb	r2, [r2, #5]
 8000fec:	4413      	add	r3, r2
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	72da      	strb	r2, [r3, #11]
                RX->header = 5;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	71da      	strb	r2, [r3, #7]
                break;
 8000ffa:	e059      	b.n	80010b0 <DecodeHeader+0x1ac>
            case 5:
                if(RX->Buff[RX->ir] == ':') {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	7952      	ldrb	r2, [r2, #5]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b3a      	cmp	r3, #58	; 0x3a
 800100a:	d118      	bne.n	800103e <DecodeHeader+0x13a>
                    RX->header = 6;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2206      	movs	r2, #6
 8001010:	71da      	strb	r2, [r3, #7]
                    RX->iData = RX->ir + 1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	735a      	strb	r2, [r3, #13]
                    RX->iData &= RX->maskSize;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7b5a      	ldrb	r2, [r3, #13]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7b9b      	ldrb	r3, [r3, #14]
 8001026:	4013      	ands	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	735a      	strb	r2, [r3, #13]
                    RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7adb      	ldrb	r3, [r3, #11]
 8001032:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	725a      	strb	r2, [r3, #9]

                } else {
                    RX->header = 0 ;
                    RX->ir --;
                }
                break;
 800103c:	e038      	b.n	80010b0 <DecodeHeader+0x1ac>
                    RX->header = 0 ;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	71da      	strb	r2, [r3, #7]
                    RX->ir --;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	795b      	ldrb	r3, [r3, #5]
 8001048:	3b01      	subs	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	715a      	strb	r2, [r3, #5]
                break;
 8001050:	e02e      	b.n	80010b0 <DecodeHeader+0x1ac>
            case 6:
                RX->nbytes--;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7adb      	ldrb	r3, [r3, #11]
 8001056:	3b01      	subs	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	72da      	strb	r2, [r3, #11]
                if(RX->nbytes > 0) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7adb      	ldrb	r3, [r3, #11]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00c      	beq.n	8001080 <DecodeHeader+0x17c>
                    RX->cks ^= RX->Buff[RX->ir];
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7a5a      	ldrb	r2, [r3, #9]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	7949      	ldrb	r1, [r1, #5]
 8001072:	440b      	add	r3, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4053      	eors	r3, r2
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	725a      	strb	r2, [r3, #9]
                    RX->header = 0 ;
                    if(RX->cks == RX->Buff[RX->ir]) {
                        RX->ISCMD = 1;
                    }
                }
                break;
 800107e:	e016      	b.n	80010ae <DecodeHeader+0x1aa>
                    RX->header = 0 ;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	71da      	strb	r2, [r3, #7]
                    if(RX->cks == RX->Buff[RX->ir]) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a5a      	ldrb	r2, [r3, #9]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	7949      	ldrb	r1, [r1, #5]
 8001092:	440b      	add	r3, r1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d109      	bne.n	80010ae <DecodeHeader+0x1aa>
                        RX->ISCMD = 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	719a      	strb	r2, [r3, #6]
                break;
 80010a0:	e005      	b.n	80010ae <DecodeHeader+0x1aa>

            default:
                RX->header = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	71da      	strb	r2, [r3, #7]
                break;
 80010a8:	e002      	b.n	80010b0 <DecodeHeader+0x1ac>
                break;
 80010aa:	bf00      	nop
 80010ac:	e000      	b.n	80010b0 <DecodeHeader+0x1ac>
                break;
 80010ae:	bf00      	nop
        }
        RX->ir &= RX->maskSize;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	795a      	ldrb	r2, [r3, #5]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7b9b      	ldrb	r3, [r3, #14]
 80010b8:	4013      	ands	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	715a      	strb	r2, [r3, #5]
        RX->ir ++;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	795b      	ldrb	r3, [r3, #5]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	715a      	strb	r2, [r3, #5]
        RX->ir &= RX->maskSize;                                                // Enmascaro el indice de lectura - Cuando llega a 63 se pone en 0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	795a      	ldrb	r2, [r3, #5]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7b9b      	ldrb	r3, [r3, #14]
 80010d4:	4013      	ands	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	715a      	strb	r2, [r3, #5]
    while(RX->ir != i) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f47f af16 	bne.w	8000f14 <DecodeHeader+0x10>
    }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <DecodeCmd>:

void DecodeCmd(_Rx *RX, _Tx *TX){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    RX->ISCMD = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	719a      	strb	r2, [r3, #6]

    switch(RX->Buff[RX->iData]){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	7b52      	ldrb	r2, [r2, #13]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2ba0      	cmp	r3, #160	; 0xa0
 8001112:	d002      	beq.n	800111a <DecodeCmd+0x26>
 8001114:	2bf0      	cmp	r3, #240	; 0xf0
 8001116:	d01f      	beq.n	8001158 <DecodeCmd+0x64>
 8001118:	e035      	b.n	8001186 <DecodeCmd+0x92>

    	/*
		 * Comando para enviar datos IR
		 */
		case 0xA0:                                                              //Sensores analogicos
			if(espConnected)PutCIPSENDOnTx(24);
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <DecodeCmd+0xc0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <DecodeCmd+0x3a>
 8001128:	2018      	movs	r0, #24
 800112a:	f000 f8d9 	bl	80012e0 <PutCIPSENDOnTx>
				PutHeaderOnTx(TX, 0xA0, 17);
 800112e:	2211      	movs	r2, #17
 8001130:	21a0      	movs	r1, #160	; 0xa0
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f000 f906 	bl	8001344 <PutHeaderOnTx>
				PutBuffOnTx(TX, (uint8_t *)&bufADC[iAdc-2], 16);
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <DecodeCmd+0xc4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3b02      	subs	r3, #2
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <DecodeCmd+0xc8>)
 8001144:	4413      	add	r3, r2
 8001146:	2210      	movs	r2, #16
 8001148:	4619      	mov	r1, r3
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	f000 f89a 	bl	8001284 <PutBuffOnTx>
				PutcksOnTx(TX);
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f000 f98e 	bl	8001472 <PutcksOnTx>
		break;
 8001156:	e029      	b.n	80011ac <DecodeCmd+0xb8>

    	/*
         * Comando para enviar alive
         */
        case 0xF0:                                                              //Alive
			if(espConnected)PutCIPSENDOnTx(10);
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <DecodeCmd+0xc0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <DecodeCmd+0x78>
 8001166:	200a      	movs	r0, #10
 8001168:	f000 f8ba 	bl	80012e0 <PutCIPSENDOnTx>
        	PutHeaderOnTx(TX, 0xF0, 2);
 800116c:	2202      	movs	r2, #2
 800116e:	21f0      	movs	r1, #240	; 0xf0
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f000 f8e7 	bl	8001344 <PutHeaderOnTx>
            PutByteOnTx(TX, 0x0D);
 8001176:	210d      	movs	r1, #13
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f000 f865 	bl	8001248 <PutByteOnTx>
            PutcksOnTx(TX);
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f000 f977 	bl	8001472 <PutcksOnTx>
            break;
 8001184:	e012      	b.n	80011ac <DecodeCmd+0xb8>
        /*
         * Comando para enviar aviso de error
         */
        default:
			if(espConnected)PutCIPSENDOnTx(9);
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <DecodeCmd+0xc0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <DecodeCmd+0xa6>
 8001194:	2009      	movs	r0, #9
 8001196:	f000 f8a3 	bl	80012e0 <PutCIPSENDOnTx>
        	PutHeaderOnTx(TX, 0xFF, 1);
 800119a:	2201      	movs	r2, #1
 800119c:	21ff      	movs	r1, #255	; 0xff
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f000 f8d0 	bl	8001344 <PutHeaderOnTx>
            PutcksOnTx(TX);
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f000 f964 	bl	8001472 <PutcksOnTx>
            break;
 80011aa:	bf00      	nop
    }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000790 	.word	0x20000790
 80011b8:	20000604 	.word	0x20000604
 80011bc:	200007e0 	.word	0x200007e0

080011c0 <SendUDPData>:

void SendUDPData(uint8_t cmd){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	switch(cmd){
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2bb0      	cmp	r3, #176	; 0xb0
 80011ce:	d018      	beq.n	8001202 <SendUDPData+0x42>
 80011d0:	2bf0      	cmp	r3, #240	; 0xf0
 80011d2:	d12e      	bne.n	8001232 <SendUDPData+0x72>
		/*Alive ESP*/
		case 0xF0:
			if(espConnected)PutCIPSENDOnTx(10);
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <SendUDPData+0x7c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <SendUDPData+0x28>
 80011e2:	200a      	movs	r0, #10
 80011e4:	f000 f87c 	bl	80012e0 <PutCIPSENDOnTx>
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xF0, 2);
 80011e8:	2202      	movs	r2, #2
 80011ea:	21f0      	movs	r1, #240	; 0xf0
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <SendUDPData+0x80>)
 80011ee:	f000 f8a9 	bl	8001344 <PutHeaderOnTx>
			PutByteOnTx((_Tx *)&TXUSART1, 0x0D);
 80011f2:	210d      	movs	r1, #13
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <SendUDPData+0x80>)
 80011f6:	f000 f827 	bl	8001248 <PutByteOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <SendUDPData+0x80>)
 80011fc:	f000 f939 	bl	8001472 <PutcksOnTx>
		break;
 8001200:	e017      	b.n	8001232 <SendUDPData+0x72>
		/*ESP8266 IP*/
		case 0xB0:
			if(espConnected)PutCIPSENDOnTx(24);
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <SendUDPData+0x7c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <SendUDPData+0x56>
 8001210:	2018      	movs	r0, #24
 8001212:	f000 f865 	bl	80012e0 <PutCIPSENDOnTx>
			PutHeaderOnTx((_Tx *)&TXUSART1, 0xB0, 16);
 8001216:	2210      	movs	r2, #16
 8001218:	21b0      	movs	r1, #176	; 0xb0
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <SendUDPData+0x80>)
 800121c:	f000 f892 	bl	8001344 <PutHeaderOnTx>
			PutBuffOnTx((_Tx *)&TXUSART1, (uint8_t *)&EspIp, 15);
 8001220:	220f      	movs	r2, #15
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <SendUDPData+0x84>)
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <SendUDPData+0x80>)
 8001226:	f000 f82d 	bl	8001284 <PutBuffOnTx>
			PutcksOnTx((_Tx *)&TXUSART1);
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <SendUDPData+0x80>)
 800122c:	f000 f921 	bl	8001472 <PutcksOnTx>
		break;
 8001230:	bf00      	nop
	}
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000790 	.word	0x20000790
 8001240:	20000c20 	.word	0x20000c20
 8001244:	20000608 	.word	0x20000608

08001248 <PutByteOnTx>:

void PutByteOnTx(_Tx *TX, uint8_t value)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
    TX->Buff[TX->iw++] = value;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	791b      	ldrb	r3, [r3, #4]
 800125c:	1c59      	adds	r1, r3, #1
 800125e:	b2c8      	uxtb	r0, r1
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	7108      	strb	r0, [r1, #4]
 8001264:	4413      	add	r3, r2
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	791a      	ldrb	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7a1b      	ldrb	r3, [r3, #8]
 8001272:	4013      	ands	r3, r2
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	711a      	strb	r2, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <PutBuffOnTx>:

void PutBuffOnTx(_Tx *TX, uint8_t *buf, uint8_t length)
{
 8001284:	b490      	push	{r4, r7}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	4613      	mov	r3, r2
 8001290:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0; i<length; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]
 8001296:	e018      	b.n	80012ca <PutBuffOnTx+0x46>

    	TX->Buff[TX->iw++] = buf[i];
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	441a      	add	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6819      	ldr	r1, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	791b      	ldrb	r3, [r3, #4]
 80012a6:	1c58      	adds	r0, r3, #1
 80012a8:	b2c4      	uxtb	r4, r0
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	7104      	strb	r4, [r0, #4]
 80012ae:	440b      	add	r3, r1
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	701a      	strb	r2, [r3, #0]
    	TX->iw &= TX->maskSize;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	791a      	ldrb	r2, [r3, #4]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	7a1b      	ldrb	r3, [r3, #8]
 80012bc:	4013      	ands	r3, r2
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	711a      	strb	r2, [r3, #4]
    for(i=0; i<length; i++) {
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	3301      	adds	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	7dfa      	ldrb	r2, [r7, #23]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3e2      	bcc.n	8001298 <PutBuffOnTx+0x14>
    }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <PutCIPSENDOnTx>:

void PutCIPSENDOnTx(uint8_t length){
 80012e0:	b490      	push	{r4, r7}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<11; i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e00f      	b.n	8001310 <PutCIPSENDOnTx+0x30>
		TXUSART1.Buff[TXUSART1.iw++] = CIPSEND[i];
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <PutCIPSENDOnTx+0x5c>)
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <PutCIPSENDOnTx+0x5c>)
 80012f8:	791b      	ldrb	r3, [r3, #4]
 80012fa:	1c58      	adds	r0, r3, #1
 80012fc:	b2c4      	uxtb	r4, r0
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <PutCIPSENDOnTx+0x5c>)
 8001300:	7104      	strb	r4, [r0, #4]
 8001302:	440b      	add	r3, r1
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <PutCIPSENDOnTx+0x60>)
 8001306:	5c8a      	ldrb	r2, [r1, r2]
 8001308:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<11; i++){
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d9ec      	bls.n	80012f0 <PutCIPSENDOnTx+0x10>
	}
	TXUSART1.Buff[TXUSART1.iw++] = length;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <PutCIPSENDOnTx+0x5c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <PutCIPSENDOnTx+0x5c>)
 800131c:	791b      	ldrb	r3, [r3, #4]
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	b2c8      	uxtb	r0, r1
 8001322:	4906      	ldr	r1, [pc, #24]	; (800133c <PutCIPSENDOnTx+0x5c>)
 8001324:	7108      	strb	r0, [r1, #4]
 8001326:	4413      	add	r3, r2
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	701a      	strb	r2, [r3, #0]
	TXUSART1.OutPutBytes = length;
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <PutCIPSENDOnTx+0x5c>)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	71d3      	strb	r3, [r2, #7]
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bc90      	pop	{r4, r7}
 800133a:	4770      	bx	lr
 800133c:	20000c20 	.word	0x20000c20
 8001340:	0800bba8 	.word	0x0800bba8

08001344 <PutHeaderOnTx>:

void PutHeaderOnTx(_Tx *TX, uint8_t cmd, uint8_t CantDatos)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
 8001350:	4613      	mov	r3, r2
 8001352:	70bb      	strb	r3, [r7, #2]
    TX->Buff[TX->iw++] = 'U';
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	1c59      	adds	r1, r3, #1
 800135e:	b2c8      	uxtb	r0, r1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	7108      	strb	r0, [r1, #4]
 8001364:	4413      	add	r3, r2
 8001366:	2255      	movs	r2, #85	; 0x55
 8001368:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791a      	ldrb	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7a1b      	ldrb	r3, [r3, #8]
 8001372:	4013      	ands	r3, r2
 8001374:	b2da      	uxtb	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'N';
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	1c59      	adds	r1, r3, #1
 8001384:	b2c8      	uxtb	r0, r1
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	7108      	strb	r0, [r1, #4]
 800138a:	4413      	add	r3, r2
 800138c:	224e      	movs	r2, #78	; 0x4e
 800138e:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	791a      	ldrb	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7a1b      	ldrb	r3, [r3, #8]
 8001398:	4013      	ands	r3, r2
 800139a:	b2da      	uxtb	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'E';
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	791b      	ldrb	r3, [r3, #4]
 80013a8:	1c59      	adds	r1, r3, #1
 80013aa:	b2c8      	uxtb	r0, r1
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	7108      	strb	r0, [r1, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	2245      	movs	r2, #69	; 0x45
 80013b4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	791a      	ldrb	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7a1b      	ldrb	r3, [r3, #8]
 80013be:	4013      	ands	r3, r2
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = 'R';
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	b2c8      	uxtb	r0, r1
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	7108      	strb	r0, [r1, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	2252      	movs	r2, #82	; 0x52
 80013da:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	791a      	ldrb	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7a1b      	ldrb	r3, [r3, #8]
 80013e4:	4013      	ands	r3, r2
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	711a      	strb	r2, [r3, #4]
    //lcmd cantidad de datos: id+payload+cks
    TX->length = CantDatos;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	78ba      	ldrb	r2, [r7, #2]
 80013f0:	719a      	strb	r2, [r3, #6]
    TX->Buff[TX->iw++] = CantDatos + 1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	1c59      	adds	r1, r3, #1
 80013fc:	b2c8      	uxtb	r0, r1
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	7108      	strb	r0, [r1, #4]
 8001402:	4413      	add	r3, r2
 8001404:	78ba      	ldrb	r2, [r7, #2]
 8001406:	3201      	adds	r2, #1
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	791a      	ldrb	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7a1b      	ldrb	r3, [r3, #8]
 8001414:	4013      	ands	r3, r2
 8001416:	b2da      	uxtb	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = ':';
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	1c59      	adds	r1, r3, #1
 8001426:	b2c8      	uxtb	r0, r1
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	7108      	strb	r0, [r1, #4]
 800142c:	4413      	add	r3, r2
 800142e:	223a      	movs	r2, #58	; 0x3a
 8001430:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	791a      	ldrb	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a1b      	ldrb	r3, [r3, #8]
 800143a:	4013      	ands	r3, r2
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	711a      	strb	r2, [r3, #4]
    TX->Buff[TX->iw++] = cmd;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	791b      	ldrb	r3, [r3, #4]
 800144a:	1c59      	adds	r1, r3, #1
 800144c:	b2c8      	uxtb	r0, r1
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	7108      	strb	r0, [r1, #4]
 8001452:	4413      	add	r3, r2
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	791a      	ldrb	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7a1b      	ldrb	r3, [r3, #8]
 8001460:	4013      	ands	r3, r2
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	711a      	strb	r2, [r3, #4]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <PutcksOnTx>:

void PutcksOnTx(_Tx *TX)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
    uint8_t cks, i;

    cks = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
    i = TX->length + 6;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	799b      	ldrb	r3, [r3, #6]
 8001482:	3306      	adds	r3, #6
 8001484:	73bb      	strb	r3, [r7, #14]
    i = TX->iw - i;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	791a      	ldrb	r2, [r3, #4]
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	73bb      	strb	r3, [r7, #14]
    i &= TX->maskSize;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7a1a      	ldrb	r2, [r3, #8]
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	4013      	ands	r3, r2
 8001498:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 800149a:	e00e      	b.n	80014ba <PutcksOnTx+0x48>
        cks ^= TX->Buff[i++];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	1c59      	adds	r1, r3, #1
 80014a4:	73b9      	strb	r1, [r7, #14]
 80014a6:	4413      	add	r3, r2
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	4053      	eors	r3, r2
 80014ae:	73fb      	strb	r3, [r7, #15]
        i &= TX->maskSize;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7a1a      	ldrb	r2, [r3, #8]
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	4013      	ands	r3, r2
 80014b8:	73bb      	strb	r3, [r7, #14]
    while(i != TX->iw) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <PutcksOnTx+0x2a>
    }

    TX->Buff[TX->iw++] = cks;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	1c59      	adds	r1, r3, #1
 80014ce:	b2c8      	uxtb	r0, r1
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	7108      	strb	r0, [r1, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	791a      	ldrb	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7a1b      	ldrb	r3, [r3, #8]
 80014e2:	4013      	ands	r3, r2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	711a      	strb	r2, [r3, #4]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <PutStrOnTx>:

void PutStrOnTx(_Tx *TX, const char *str)
{
 80014f4:	b490      	push	{r4, r7}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]

    while(str[i]) {
 8001502:	e018      	b.n	8001536 <PutStrOnTx+0x42>
        TX->Buff[TX->iw++] = str[i++];
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	73fa      	strb	r2, [r7, #15]
 800150a:	461a      	mov	r2, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	441a      	add	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	1c58      	adds	r0, r3, #1
 800151a:	b2c4      	uxtb	r4, r0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	7104      	strb	r4, [r0, #4]
 8001520:	440b      	add	r3, r1
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	791a      	ldrb	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	4013      	ands	r3, r2
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	711a      	strb	r2, [r3, #4]
    while(str[i]) {
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e0      	bne.n	8001504 <PutStrOnTx+0x10>
    }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bc90      	pop	{r4, r7}
 800154c:	4770      	bx	lr
	...

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 ff0a 	bl	800236c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 fa04 	bl	8001964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 fc5e 	bl	8001e1c <MX_GPIO_Init>
  MX_TIM4_Init();
 8001560:	f000 fb7c 	bl	8001c5c <MX_TIM4_Init>
  MX_I2C2_Init();
 8001564:	f000 fafe 	bl	8001b64 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001568:	f000 fc10 	bl	8001d8c <MX_USART1_UART_Init>
  MX_DMA_Init();
 800156c:	f000 fc38 	bl	8001de0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001570:	f000 fa56 	bl	8001a20 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001574:	f009 fdc0 	bl	800b0f8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001578:	f000 fb22 	bl	8001bc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachOnUSBData(MyCallBackOnUSBData);
 800157c:	4897      	ldr	r0, [pc, #604]	; (80017dc <main+0x28c>)
 800157e:	f009 feab 	bl	800b2d8 <CDC_AttachOnUSBData>

  HAL_TIM_Base_Start_IT(&htim4);
 8001582:	4897      	ldr	r0, [pc, #604]	; (80017e0 <main+0x290>)
 8001584:	f004 fbc6 	bl	8005d14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001588:	4896      	ldr	r0, [pc, #600]	; (80017e4 <main+0x294>)
 800158a:	f004 fbc3 	bl	8005d14 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, ENABLE_ESP_Pin, GPIO_PIN_SET);//Enable ESP8266
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	4895      	ldr	r0, [pc, #596]	; (80017e8 <main+0x298>)
 8001594:	f002 f862 	bl	800365c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001598:	2100      	movs	r1, #0
 800159a:	4891      	ldr	r0, [pc, #580]	; (80017e0 <main+0x290>)
 800159c:	f004 fc64 	bl	8005e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015a0:	2104      	movs	r1, #4
 80015a2:	488f      	ldr	r0, [pc, #572]	; (80017e0 <main+0x290>)
 80015a4:	f004 fc60 	bl	8005e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015a8:	2108      	movs	r1, #8
 80015aa:	488d      	ldr	r0, [pc, #564]	; (80017e0 <main+0x290>)
 80015ac:	f004 fc5c 	bl	8005e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015b0:	210c      	movs	r1, #12
 80015b2:	488b      	ldr	r0, [pc, #556]	; (80017e0 <main+0x290>)
 80015b4:	f004 fc58 	bl	8005e68 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015b8:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <main+0x290>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015c0:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <main+0x290>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015c8:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <main+0x290>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80015d0:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <main+0x290>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  //Delay de 4000ms para esperar a que inicie la ESP8266
  HAL_Delay(4000);
 80015d8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80015dc:	f000 ff28 	bl	8002430 <HAL_Delay>
  //Interrupcion para recibir datos desde ESP8266
  HAL_UART_Receive_IT(&huart1,rxUSART1Buff,1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	4982      	ldr	r1, [pc, #520]	; (80017ec <main+0x29c>)
 80015e4:	4882      	ldr	r0, [pc, #520]	; (80017f0 <main+0x2a0>)
 80015e6:	f005 faf0 	bl	8006bca <HAL_UART_Receive_IT>

/***********************************************************************************/
/************************** Inicializacion de contadores ***************************/
/***********************************************************************************/
  Count100ms = 100;
 80015ea:	4b82      	ldr	r3, [pc, #520]	; (80017f4 <main+0x2a4>)
 80015ec:	2264      	movs	r2, #100	; 0x64
 80015ee:	801a      	strh	r2, [r3, #0]
  Count200ms = 0;
 80015f0:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <main+0x2a8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
  Count3000ms = 0;
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <main+0x2ac>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	801a      	strh	r2, [r3, #0]
  Count500ms = 0;
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <main+0x2b0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/*************************** Inicializacion de variables USB ***********************/
/***********************************************************************************/
  RXUSB.Buff = (uint8_t *)rxUSBBuff;
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <main+0x2b4>)
 8001604:	4a80      	ldr	r2, [pc, #512]	; (8001808 <main+0x2b8>)
 8001606:	601a      	str	r2, [r3, #0]
  RXUSB.iw = 0;
 8001608:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <main+0x2b4>)
 800160a:	2200      	movs	r2, #0
 800160c:	711a      	strb	r2, [r3, #4]
  RXUSB.ir = 0;
 800160e:	4b7d      	ldr	r3, [pc, #500]	; (8001804 <main+0x2b4>)
 8001610:	2200      	movs	r2, #0
 8001612:	715a      	strb	r2, [r3, #5]
  RXUSB.header = 0;
 8001614:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <main+0x2b4>)
 8001616:	2200      	movs	r2, #0
 8001618:	71da      	strb	r2, [r3, #7]
  RXUSB.maskSize = 255;
 800161a:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <main+0x2b4>)
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	739a      	strb	r2, [r3, #14]
  RXUSB.ISCMD = 0;
 8001620:	4b78      	ldr	r3, [pc, #480]	; (8001804 <main+0x2b4>)
 8001622:	2200      	movs	r2, #0
 8001624:	719a      	strb	r2, [r3, #6]

  TXUSB.Buff = txUSBBuff;
 8001626:	4b79      	ldr	r3, [pc, #484]	; (800180c <main+0x2bc>)
 8001628:	4a79      	ldr	r2, [pc, #484]	; (8001810 <main+0x2c0>)
 800162a:	601a      	str	r2, [r3, #0]
  TXUSB.iw = 0;
 800162c:	4b77      	ldr	r3, [pc, #476]	; (800180c <main+0x2bc>)
 800162e:	2200      	movs	r2, #0
 8001630:	711a      	strb	r2, [r3, #4]
  TXUSB.ir = 0;
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <main+0x2bc>)
 8001634:	2200      	movs	r2, #0
 8001636:	715a      	strb	r2, [r3, #5]
  TXUSB.maskSize = 255;
 8001638:	4b74      	ldr	r3, [pc, #464]	; (800180c <main+0x2bc>)
 800163a:	22ff      	movs	r2, #255	; 0xff
 800163c:	721a      	strb	r2, [r3, #8]
  TXUSB.maskBuf = 255;
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <main+0x2bc>)
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	725a      	strb	r2, [r3, #9]
/***********************************************************************************/

/***********************************************************************************/
/********************** Inicialización de  ESP8266 ************************/
/***********************************************************************************/
  RXUSART1.Buff = (uint8_t *)rxUSART1Buff;
 8001644:	4b73      	ldr	r3, [pc, #460]	; (8001814 <main+0x2c4>)
 8001646:	4a69      	ldr	r2, [pc, #420]	; (80017ec <main+0x29c>)
 8001648:	601a      	str	r2, [r3, #0]
  RXUSART1.iw = 0;
 800164a:	4b72      	ldr	r3, [pc, #456]	; (8001814 <main+0x2c4>)
 800164c:	2200      	movs	r2, #0
 800164e:	711a      	strb	r2, [r3, #4]
  RXUSART1.ir = 0;
 8001650:	4b70      	ldr	r3, [pc, #448]	; (8001814 <main+0x2c4>)
 8001652:	2200      	movs	r2, #0
 8001654:	715a      	strb	r2, [r3, #5]
  RXUSART1.header = 0;
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <main+0x2c4>)
 8001658:	2200      	movs	r2, #0
 800165a:	71da      	strb	r2, [r3, #7]
  RXUSART1.maskSize = 255;
 800165c:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <main+0x2c4>)
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	739a      	strb	r2, [r3, #14]
  RXUSART1.ISCMD = 0;
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <main+0x2c4>)
 8001664:	2200      	movs	r2, #0
 8001666:	719a      	strb	r2, [r3, #6]
  //RXUSART1.state indica en que estado se encuentra la ESP8266
  RXUSART1.state = 0;
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <main+0x2c4>)
 800166a:	2200      	movs	r2, #0
 800166c:	721a      	strb	r2, [r3, #8]

  TXUSART1.Buff = txUSART1Buff;
 800166e:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <main+0x2c8>)
 8001670:	4a6a      	ldr	r2, [pc, #424]	; (800181c <main+0x2cc>)
 8001672:	601a      	str	r2, [r3, #0]
  TXUSART1.iw = 0;
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <main+0x2c8>)
 8001676:	2200      	movs	r2, #0
 8001678:	711a      	strb	r2, [r3, #4]
  TXUSART1.ir = 0;
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <main+0x2c8>)
 800167c:	2200      	movs	r2, #0
 800167e:	715a      	strb	r2, [r3, #5]
  TXUSART1.maskSize = 255;
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <main+0x2c8>)
 8001682:	22ff      	movs	r2, #255	; 0xff
 8001684:	721a      	strb	r2, [r3, #8]
  TXUSART1.maskBuf = 255;
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <main+0x2c8>)
 8001688:	22ff      	movs	r2, #255	; 0xff
 800168a:	725a      	strb	r2, [r3, #9]

  /*Bits de control*/
  DecodeIPD = 0;
 800168c:	4a64      	ldr	r2, [pc, #400]	; (8001820 <main+0x2d0>)
 800168e:	7813      	ldrb	r3, [r2, #0]
 8001690:	f36f 1386 	bfc	r3, #6, #1
 8001694:	7013      	strb	r3, [r2, #0]
  DecodeCIPSEND = 0;
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <main+0x2d4>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
  DecodeHeaderESP = 0;
 800169c:	4a60      	ldr	r2, [pc, #384]	; (8001820 <main+0x2d0>)
 800169e:	7813      	ldrb	r3, [r2, #0]
 80016a0:	f36f 03c3 	bfc	r3, #3, #1
 80016a4:	7013      	strb	r3, [r2, #0]
  ESPReadyToRecyb = 0;
 80016a6:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <main+0x2d0>)
 80016a8:	7813      	ldrb	r3, [r2, #0]
 80016aa:	f36f 1345 	bfc	r3, #5, #1
 80016ae:	7013      	strb	r3, [r2, #0]
  ECOCIPSEND = 0;
 80016b0:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <main+0x2d0>)
 80016b2:	7813      	ldrb	r3, [r2, #0]
 80016b4:	f36f 13c7 	bfc	r3, #7, #1
 80016b8:	7013      	strb	r3, [r2, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************ Inicializacion de variables ADC **************************/
/***********************************************************************************/
  iAdc = 0;
 80016ba:	4b5b      	ldr	r3, [pc, #364]	; (8001828 <main+0x2d8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
  FirtScan=1;
 80016c0:	4b5a      	ldr	r3, [pc, #360]	; (800182c <main+0x2dc>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]


/***********************************************************************************/
/***************** Inicializacion de variables error cuadratico ********************/
/***********************************************************************************/
  posMINCenter = 0;
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <main+0x2e0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
  posMINDerecha = 0;
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <main+0x2e4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
  posMINIzquierda = 0;
 80016d2:	4b59      	ldr	r3, [pc, #356]	; (8001838 <main+0x2e8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
  sensorValue = 0;
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <main+0x2ec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	801a      	strh	r2, [r3, #0]
  error = 0;
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <main+0x2f0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
/***********************************************************************************/

/***********************************************************************************/
/************************* Inicialización de variables PID *************************/
/***********************************************************************************/
  Kp = 0;
 80016e4:	4b57      	ldr	r3, [pc, #348]	; (8001844 <main+0x2f4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  Ki = 0;
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <main+0x2f8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
  Kd = 0;
 80016f0:	4b56      	ldr	r3, [pc, #344]	; (800184c <main+0x2fc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
  Proporcional = 0;
 80016f6:	4b56      	ldr	r3, [pc, #344]	; (8001850 <main+0x300>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
  Integral = 0;
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <main+0x304>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
  Derivativo = 0;
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <main+0x308>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED de estado - Parpadea cada 100ms
	  if(On100ms){
 8001708:	4b54      	ldr	r3, [pc, #336]	; (800185c <main+0x30c>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <main+0x1d8>
		  On100ms = 0;
 8001712:	4b52      	ldr	r3, [pc, #328]	; (800185c <main+0x30c>)
 8001714:	2200      	movs	r2, #0
 8001716:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	4850      	ldr	r0, [pc, #320]	; (8001860 <main+0x310>)
 800171e:	f001 ffb5 	bl	800368c <HAL_GPIO_TogglePin>
		  SendUDPData(0xF0);
 8001722:	20f0      	movs	r0, #240	; 0xf0
 8001724:	f7ff fd4c 	bl	80011c0 <SendUDPData>
	  }
	  if((!espConnected) && (!ESPReadyToRecyb)){
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <main+0x2d0>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <main+0x1fa>
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <main+0x2d0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <main+0x1fa>
		  InitEsp((_Rx *)&RXUSART1);
 8001744:	4833      	ldr	r0, [pc, #204]	; (8001814 <main+0x2c4>)
 8001746:	f7fe fd01 	bl	800014c <InitEsp>
	  }
	  if(ESPGotIP){
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <main+0x2d0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <main+0x218>
		  ESPGotIP = 0;
 8001758:	4a31      	ldr	r2, [pc, #196]	; (8001820 <main+0x2d0>)
 800175a:	7813      	ldrb	r3, [r2, #0]
 800175c:	f36f 1304 	bfc	r3, #4, #1
 8001760:	7013      	strb	r3, [r2, #0]
		  SendUDPData(0xB0);
 8001762:	20b0      	movs	r0, #176	; 0xb0
 8001764:	f7ff fd2c 	bl	80011c0 <SendUDPData>
	  }
	  //Recepcion por USB - Decodifica header
	  if(RXUSB.iw != RXUSB.ir) {
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <main+0x2b4>)
 800176a:	791b      	ldrb	r3, [r3, #4]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <main+0x2b4>)
 8001770:	795b      	ldrb	r3, [r3, #5]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	429a      	cmp	r2, r3
 8001776:	d002      	beq.n	800177e <main+0x22e>
		  DecodeHeader((_Rx *)&RXUSB);
 8001778:	4822      	ldr	r0, [pc, #136]	; (8001804 <main+0x2b4>)
 800177a:	f7ff fbc3 	bl	8000f04 <DecodeHeader>
	  }
	  //Recepcion por USB - Decodifica comando
	  if(RXUSB.ISCMD) {
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <main+0x2b4>)
 8001780:	799b      	ldrb	r3, [r3, #6]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <main+0x240>
		  DecodeCmd((_Rx *)&RXUSB, (_Tx *)&TXUSB);
 8001788:	4920      	ldr	r1, [pc, #128]	; (800180c <main+0x2bc>)
 800178a:	481e      	ldr	r0, [pc, #120]	; (8001804 <main+0x2b4>)
 800178c:	f7ff fcb2 	bl	80010f4 <DecodeCmd>
	  }
	  //Transmision por USB
	  if(TXUSB.iw != TXUSB.ir) {
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <main+0x2bc>)
 8001792:	791a      	ldrb	r2, [r3, #4]
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <main+0x2bc>)
 8001796:	795b      	ldrb	r3, [r3, #5]
 8001798:	429a      	cmp	r2, r3
 800179a:	f000 8088 	beq.w	80018ae <main+0x35e>
		  if(TXUSB.iw > TXUSB.ir){
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <main+0x2bc>)
 80017a0:	791a      	ldrb	r2, [r3, #4]
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <main+0x2bc>)
 80017a4:	795b      	ldrb	r3, [r3, #5]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d95c      	bls.n	8001864 <main+0x314>
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], (TXUSB.iw-TXUSB.ir)))
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <main+0x2bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <main+0x2bc>)
 80017b0:	7952      	ldrb	r2, [r2, #5]
 80017b2:	1898      	adds	r0, r3, r2
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <main+0x2bc>)
 80017b6:	791b      	ldrb	r3, [r3, #4]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <main+0x2bc>)
 80017bc:	795b      	ldrb	r3, [r3, #5]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	f009 fd61 	bl	800b28c <CDC_Transmit_FS>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d166      	bne.n	800189e <main+0x34e>
				  TXUSB.ir=TXUSB.iw;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <main+0x2bc>)
 80017d2:	791a      	ldrb	r2, [r3, #4]
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <main+0x2bc>)
 80017d6:	715a      	strb	r2, [r3, #5]
 80017d8:	e061      	b.n	800189e <main+0x34e>
 80017da:	bf00      	nop
 80017dc:	08000eb5 	.word	0x08000eb5
 80017e0:	200003c4 	.word	0x200003c4
 80017e4:	200005bc 	.word	0x200005bc
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	200009e4 	.word	0x200009e4
 80017f0:	2000074c 	.word	0x2000074c
 80017f4:	20000af0 	.word	0x20000af0
 80017f8:	20000ae4 	.word	0x20000ae4
 80017fc:	200003c0 	.word	0x200003c0
 8001800:	200005a8 	.word	0x200005a8
 8001804:	20000c0c 	.word	0x20000c0c
 8001808:	200004a4 	.word	0x200004a4
 800180c:	200005ac 	.word	0x200005ac
 8001810:	2000064c 	.word	0x2000064c
 8001814:	20000410 	.word	0x20000410
 8001818:	20000c20 	.word	0x20000c20
 800181c:	20000af4 	.word	0x20000af4
 8001820:	20000790 	.word	0x20000790
 8001824:	20000478 	.word	0x20000478
 8001828:	20000604 	.word	0x20000604
 800182c:	20000198 	.word	0x20000198
 8001830:	20000605 	.word	0x20000605
 8001834:	200005b8 	.word	0x200005b8
 8001838:	20000c2c 	.word	0x20000c2c
 800183c:	20000bf8 	.word	0x20000bf8
 8001840:	20000aec 	.word	0x20000aec
 8001844:	20000c02 	.word	0x20000c02
 8001848:	2000040c 	.word	0x2000040c
 800184c:	20000ae6 	.word	0x20000ae6
 8001850:	20000c04 	.word	0x20000c04
 8001854:	20000bfc 	.word	0x20000bfc
 8001858:	2000047c 	.word	0x2000047c
 800185c:	2000047a 	.word	0x2000047a
 8001860:	40011000 	.word	0x40011000
		  }
		  else{
			  w.u16[0] = (TXUSB.maskBuf+1)-TXUSB.ir;
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <main+0x3f8>)
 8001866:	7a5b      	ldrb	r3, [r3, #9]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <main+0x3f8>)
 800186c:	795b      	ldrb	r3, [r3, #5]
 800186e:	b29b      	uxth	r3, r3
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b29b      	uxth	r3, r3
 8001874:	3301      	adds	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <main+0x3fc>)
 800187a:	801a      	strh	r2, [r3, #0]
			  if(USBD_OK==CDC_Transmit_FS(&TXUSB.Buff[TXUSB.ir], w.u16[0]))
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <main+0x3f8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a31      	ldr	r2, [pc, #196]	; (8001948 <main+0x3f8>)
 8001882:	7952      	ldrb	r2, [r2, #5]
 8001884:	4413      	add	r3, r2
 8001886:	4a31      	ldr	r2, [pc, #196]	; (800194c <main+0x3fc>)
 8001888:	8812      	ldrh	r2, [r2, #0]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f009 fcfd 	bl	800b28c <CDC_Transmit_FS>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <main+0x34e>
				  TXUSB.ir = 0;
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <main+0x3f8>)
 800189a:	2200      	movs	r2, #0
 800189c:	715a      	strb	r2, [r3, #5]
		  }
		  TXUSB.ir &= TXUSB.maskSize;
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <main+0x3f8>)
 80018a0:	795a      	ldrb	r2, [r3, #5]
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <main+0x3f8>)
 80018a4:	7a1b      	ldrb	r3, [r3, #8]
 80018a6:	4013      	ands	r3, r2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <main+0x3f8>)
 80018ac:	715a      	strb	r2, [r3, #5]
	  }
	  //Recepcion por ESP8266 - Decodifica comandos provenientes de ESP8266
	  if(RXUSART1.iw != RXUSART1.ir) {
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <main+0x400>)
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <main+0x400>)
 80018b6:	795b      	ldrb	r3, [r3, #5]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d002      	beq.n	80018c4 <main+0x374>
		  DecodeESP((_Rx *)&RXUSART1);
 80018be:	4824      	ldr	r0, [pc, #144]	; (8001950 <main+0x400>)
 80018c0:	f7fe fd64 	bl	800038c <DecodeESP>
	  }
	  //Si la decodificacion resulta de un dato proveniente de PC, se decodifica header
	  if(DecodeHeaderESP){
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <main+0x404>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <main+0x392>
		  DecodeHeader((_Rx *)&RXUSART1);
 80018d2:	481f      	ldr	r0, [pc, #124]	; (8001950 <main+0x400>)
 80018d4:	f7ff fb16 	bl	8000f04 <DecodeHeader>
		  DecodeHeaderESP = 0;
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <main+0x404>)
 80018da:	7813      	ldrb	r3, [r2, #0]
 80018dc:	f36f 03c3 	bfc	r3, #3, #1
 80018e0:	7013      	strb	r3, [r2, #0]
	  }
	  //Recepcion por ESP8266 - Decodifica comando
	  if(RXUSART1.ISCMD) {
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <main+0x400>)
 80018e4:	799b      	ldrb	r3, [r3, #6]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <main+0x3a4>
		  DecodeCmd((_Rx *)&RXUSART1, (_Tx *)&TXUSART1);
 80018ec:	491a      	ldr	r1, [pc, #104]	; (8001958 <main+0x408>)
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <main+0x400>)
 80018f0:	f7ff fc00 	bl	80010f4 <DecodeCmd>
	  }

	  //Transmision por ESP8266
	  if(TXUSART1.iw != TXUSART1.ir) {
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <main+0x408>)
 80018f6:	791a      	ldrb	r2, [r3, #4]
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <main+0x408>)
 80018fa:	795b      	ldrb	r3, [r3, #5]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f43f af03 	beq.w	8001708 <main+0x1b8>
		  if(huart1.Instance->SR){
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <main+0x40c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <main+0x3de>
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <main+0x408>)
 800190e:	795b      	ldrb	r3, [r3, #5]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	b2d1      	uxtb	r1, r2
 8001914:	4a10      	ldr	r2, [pc, #64]	; (8001958 <main+0x408>)
 8001916:	7151      	strb	r1, [r2, #5]
 8001918:	461a      	mov	r2, r3
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <main+0x410>)
 800191c:	5c9a      	ldrb	r2, [r3, r2]
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <main+0x40c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
			  TXUSART1.ir=TXUSART1.iw;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <main+0x408>)
 8001926:	791a      	ldrb	r2, [r3, #4]
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <main+0x408>)
 800192a:	715a      	strb	r2, [r3, #5]
 800192c:	e6ec      	b.n	8001708 <main+0x1b8>
		  }
		  else{
			  huart1.Instance->DR = txUSART1Buff[TXUSART1.ir++];
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <main+0x408>)
 8001930:	795b      	ldrb	r3, [r3, #5]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	b2d1      	uxtb	r1, r2
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <main+0x408>)
 8001938:	7151      	strb	r1, [r2, #5]
 800193a:	461a      	mov	r2, r3
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <main+0x410>)
 800193e:	5c9a      	ldrb	r2, [r3, r2]
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <main+0x40c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
	  if(On100ms){
 8001946:	e6df      	b.n	8001708 <main+0x1b8>
 8001948:	200005ac 	.word	0x200005ac
 800194c:	20000480 	.word	0x20000480
 8001950:	20000410 	.word	0x20000410
 8001954:	20000790 	.word	0x20000790
 8001958:	20000c20 	.word	0x20000c20
 800195c:	2000074c 	.word	0x2000074c
 8001960:	20000af4 	.word	0x20000af4

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f00a f89a 	bl	800baac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001994:	2301      	movs	r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a2:	2301      	movs	r3, #1
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a6:	2302      	movs	r3, #2
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fc8a 	bl	80052d4 <HAL_RCC_OscConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019c6:	f000 faa1 	bl	8001f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ca:	230f      	movs	r3, #15
 80019cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fef4 	bl	80057d4 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019f2:	f000 fa8b 	bl	8001f0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80019f6:	2312      	movs	r3, #18
 80019f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 f87e 	bl	8005b08 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a12:	f000 fa7b 	bl	8001f0c <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	; 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <MX_ADC1_Init+0x140>)
 8001a34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a36:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a44:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a4c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a5e:	483f      	ldr	r0, [pc, #252]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a60:	f000 fd0a 	bl	8002478 <HAL_ADC_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001a6a:	f000 fa4f 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001a76:	2302      	movs	r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4837      	ldr	r0, [pc, #220]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a80:	f000 fec2 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a8a:	f000 fa3f 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4830      	ldr	r0, [pc, #192]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001a9c:	f000 feb4 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001aa6:	f000 fa31 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4829      	ldr	r0, [pc, #164]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001ab8:	f000 fea6 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ac2:	f000 fa23 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001aca:	2304      	movs	r3, #4
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4822      	ldr	r0, [pc, #136]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001ad4:	f000 fe98 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001ade:	f000 fa15 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	481b      	ldr	r0, [pc, #108]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001af0:	f000 fe8a 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001afa:	f000 fa07 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001afe:	2305      	movs	r3, #5
 8001b00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001b02:	2306      	movs	r3, #6
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001b0c:	f000 fe7c 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001b16:	f000 f9f9 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001b28:	f000 fe6e 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001b32:	f000 f9eb 	bl	8001f0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b36:	2307      	movs	r3, #7
 8001b38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_ADC1_Init+0x13c>)
 8001b44:	f000 fe60 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001b4e:	f000 f9dd 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000618 	.word	0x20000618
 8001b60:	40012400 	.word	0x40012400

08001b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <MX_I2C2_Init+0x54>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b70:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_I2C2_Init+0x58>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_I2C2_Init+0x50>)
 8001ba2:	f001 fd8d 	bl	80036c0 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 f9ae 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000424 	.word	0x20000424
 8001bb8:	40005800 	.word	0x40005800
 8001bbc:	000186a0 	.word	0x000186a0

08001bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <MX_TIM3_Init+0x98>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18000;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001bf0:	f244 6250 	movw	r2, #18000	; 0x4650
 8001bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001c04:	f004 f836 	bl	8005c74 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f000 f97d 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001c20:	f004 fb8a 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c2a:	f000 f96f 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c36:	463b      	mov	r3, r7
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <MX_TIM3_Init+0x94>)
 8001c3c:	f004 ff08 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c46:	f000 f961 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200005bc 	.word	0x200005bc
 8001c58:	40000400 	.word	0x40000400

08001c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <MX_TIM4_Init+0x12c>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001c92:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001ca0:	f242 3228 	movw	r2, #9000	; 0x2328
 8001ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb2:	4834      	ldr	r0, [pc, #208]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001cb4:	f003 ffde 	bl	8005c74 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001cbe:	f000 f925 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482d      	ldr	r0, [pc, #180]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001cd0:	f004 fb32 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001cda:	f000 f917 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cde:	4829      	ldr	r0, [pc, #164]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001ce0:	f004 f86a 	bl	8005db8 <HAL_TIM_PWM_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001cea:	f000 f90f 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4821      	ldr	r0, [pc, #132]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001cfe:	f004 fea7 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d08:	f000 f900 	bl	8001f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0c:	2360      	movs	r3, #96	; 0x60
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	4818      	ldr	r0, [pc, #96]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001d24:	f004 fa4a 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001d2e:	f000 f8ed 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2204      	movs	r2, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001d3a:	f004 fa3f 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001d44:	f000 f8e2 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480d      	ldr	r0, [pc, #52]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001d50:	f004 fa34 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001d5a:	f000 f8d7 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	220c      	movs	r2, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001d66:	f004 fa29 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001d70:	f000 f8cc 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <MX_TIM4_Init+0x128>)
 8001d76:	f000 f9eb 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001d7a:	bf00      	nop
 8001d7c:	3738      	adds	r7, #56	; 0x38
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200003c4 	.word	0x200003c4
 8001d88:	40000800 	.word	0x40000800

08001d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <MX_USART1_UART_Init+0x50>)
 8001d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_USART1_UART_Init+0x4c>)
 8001dc4:	f004 feb4 	bl	8006b30 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dce:	f000 f89d 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000074c 	.word	0x2000074c
 8001ddc:	40013800 	.word	0x40013800

08001de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_DMA_Init+0x38>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <MX_DMA_Init+0x38>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6153      	str	r3, [r2, #20]
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_DMA_Init+0x38>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	200b      	movs	r0, #11
 8001e04:	f000 ffd1 	bl	8002daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e08:	200b      	movs	r0, #11
 8001e0a:	f000 ffea 	bl	8002de2 <HAL_NVIC_EnableIRQ>

}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a31      	ldr	r2, [pc, #196]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e4e:	f043 0320 	orr.w	r3, r3, #32
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a25      	ldr	r2, [pc, #148]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_GPIO_Init+0xe0>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e96:	481a      	ldr	r0, [pc, #104]	; (8001f00 <MX_GPIO_Init+0xe4>)
 8001e98:	f001 fbe0 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_ESP_GPIO_Port, ENABLE_ESP_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	4818      	ldr	r0, [pc, #96]	; (8001f04 <MX_GPIO_Init+0xe8>)
 8001ea2:	f001 fbdb 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4810      	ldr	r0, [pc, #64]	; (8001f00 <MX_GPIO_Init+0xe4>)
 8001ec0:	f001 fa48 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ec4:	23ff      	movs	r3, #255	; 0xff
 8001ec6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480d      	ldr	r0, [pc, #52]	; (8001f08 <MX_GPIO_Init+0xec>)
 8001ed4:	f001 fa3e 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_ESP_Pin */
  GPIO_InitStruct.Pin = ENABLE_ESP_Pin;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENABLE_ESP_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_GPIO_Init+0xe8>)
 8001ef0:	f001 fa30 	bl	8003354 <HAL_GPIO_Init>

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40010800 	.word	0x40010800

08001f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <Error_Handler+0x8>
	...

08001f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_MspInit+0x5c>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_MspInit+0x5c>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6193      	str	r3, [r2, #24]
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_MspInit+0x5c>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_MspInit+0x5c>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <HAL_MspInit+0x5c>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_MspInit+0x5c>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_MspInit+0x60>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_MspInit+0x60>)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000

08001f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_ADC_MspInit+0xbc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d149      	bne.n	8002030 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_ADC_MspInit+0xc0>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_ADC_MspInit+0xc0>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_ADC_MspInit+0xc0>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_ADC_MspInit+0xc0>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_ADC_MspInit+0xc0>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_ADC_MspInit+0xc0>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001fcc:	23ff      	movs	r3, #255	; 0xff
 8001fce:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4819      	ldr	r0, [pc, #100]	; (8002040 <HAL_ADC_MspInit+0xc4>)
 8001fdc:	f001 f9ba 	bl	8003354 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8001fe2:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_ADC_MspInit+0xcc>)
 8001fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8001ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8002002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8002016:	f000 feff 	bl	8002e18 <HAL_DMA_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002020:	f7ff ff74 	bl	8001f0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 8002028:	621a      	str	r2, [r3, #32]
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_ADC_MspInit+0xc8>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40012400 	.word	0x40012400
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800
 8002044:	2000079c 	.word	0x2000079c
 8002048:	40020008 	.word	0x40020008

0800204c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <HAL_I2C_MspInit+0x74>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d124      	bne.n	80020b6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_I2C_MspInit+0x78>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_I2C_MspInit+0x78>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_I2C_MspInit+0x78>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002084:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4619      	mov	r1, r3
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <HAL_I2C_MspInit+0x7c>)
 800209a:	f001 f95b 	bl	8003354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_I2C_MspInit+0x78>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_I2C_MspInit+0x78>)
 80020a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_I2C_MspInit+0x78>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40005800 	.word	0x40005800
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010c00 	.word	0x40010c00

080020cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d114      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	201d      	movs	r0, #29
 80020fc:	f000 fe55 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002100:	201d      	movs	r0, #29
 8002102:	f000 fe6e 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002106:	e018      	b.n	800213a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_TIM_Base_MspInit+0x80>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	201e      	movs	r0, #30
 8002130:	f000 fe3b 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002134:	201e      	movs	r0, #30
 8002136:	f000 fe54 	bl	8002de2 <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40000400 	.word	0x40000400
 8002148:	40021000 	.word	0x40021000
 800214c:	40000800 	.word	0x40000800

08002150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_TIM_MspPostInit+0x5c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d118      	bne.n	80021a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_TIM_MspPostInit+0x60>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_TIM_MspPostInit+0x60>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_TIM_MspPostInit+0x60>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002188:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800218c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2302      	movs	r3, #2
 8002194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_TIM_MspPostInit+0x64>)
 800219e:	f001 f8d9 	bl	8003354 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010c00 	.word	0x40010c00

080021b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_UART_MspInit+0x9c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d139      	bne.n	800224c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_UART_MspInit+0xa0>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_UART_MspInit+0xa0>)
 80021de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_UART_MspInit+0xa0>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_UART_MspInit+0xa0>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_UART_MspInit+0xa0>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_UART_MspInit+0xa0>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4619      	mov	r1, r3
 800221c:	480f      	ldr	r0, [pc, #60]	; (800225c <HAL_UART_MspInit+0xa4>)
 800221e:	f001 f899 	bl	8003354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4619      	mov	r1, r3
 8002236:	4809      	ldr	r0, [pc, #36]	; (800225c <HAL_UART_MspInit+0xa4>)
 8002238:	f001 f88c 	bl	8003354 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	2025      	movs	r0, #37	; 0x25
 8002242:	f000 fdb2 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002246:	2025      	movs	r0, #37	; 0x25
 8002248:	f000 fdcb 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40013800 	.word	0x40013800
 8002258:	40021000 	.word	0x40021000
 800225c:	40010800 	.word	0x40010800

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a6:	f000 f8a7 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <DMA1_Channel1_IRQHandler+0x10>)
 80022b6:	f000 ff19 	bl	80030ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000079c 	.word	0x2000079c

080022c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022ca:	f001 fc6e 	bl	8003baa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200014fc 	.word	0x200014fc

080022d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <TIM3_IRQHandler+0x10>)
 80022de:	f003 fe65 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200005bc 	.word	0x200005bc

080022ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <TIM4_IRQHandler+0x10>)
 80022f2:	f003 fe5b 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003c4 	.word	0x200003c4

08002300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART1_IRQHandler+0x10>)
 8002306:	f004 fcfb 	bl	8006d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000074c 	.word	0x2000074c

08002314 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002322:	490d      	ldr	r1, [pc, #52]	; (8002358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002338:	4c0a      	ldr	r4, [pc, #40]	; (8002364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002346:	f7ff ffe5 	bl	8002314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234a:	f009 fb8b 	bl	800ba64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234e:	f7ff f8ff 	bl	8001550 <main>
  bx lr
 8002352:	4770      	bx	lr
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800235c:	0800bd30 	.word	0x0800bd30
  ldr r2, =_sbss
 8002360:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8002364:	200017e8 	.word	0x200017e8

08002368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC1_2_IRQHandler>
	...

0800236c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_Init+0x28>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_Init+0x28>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 fd09 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	200f      	movs	r0, #15
 8002384:	f000 f808 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fdc6 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x54>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fd21 	bl	8002dfe <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00e      	b.n	80023e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d80a      	bhi.n	80023e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 fce9 	bl	8002daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_InitTick+0x5c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_IncTick+0x20>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_IncTick+0x20>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20000008 	.word	0x20000008
 8002418:	20000c34 	.word	0x20000c34

0800241c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <HAL_GetTick+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	20000c34 	.word	0x20000c34

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fff0 	bl	800241c <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffe0 	bl	800241c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0be      	b.n	8002618 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fd60 	bl	8001f7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 faf5 	bl	8002aac <ADC_ConversionStop_Disable>
 80024c2:	4603      	mov	r3, r0
 80024c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8099 	bne.w	8002606 <HAL_ADC_Init+0x18e>
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 8095 	bne.w	8002606 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e4:	f023 0302 	bic.w	r3, r3, #2
 80024e8:	f043 0202 	orr.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7b1b      	ldrb	r3, [r3, #12]
 80024fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002500:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4313      	orrs	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002510:	d003      	beq.n	800251a <HAL_ADC_Init+0xa2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_ADC_Init+0xa8>
 800251a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251e:	e000      	b.n	8002522 <HAL_ADC_Init+0xaa>
 8002520:	2300      	movs	r3, #0
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7d1b      	ldrb	r3, [r3, #20]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d119      	bne.n	8002564 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7b1b      	ldrb	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	3b01      	subs	r3, #1
 800253e:	035a      	lsls	r2, r3, #13
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e00b      	b.n	8002564 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_ADC_Init+0x1a8>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	430b      	orrs	r3, r1
 800258a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002594:	d003      	beq.n	800259e <HAL_ADC_Init+0x126>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d104      	bne.n	80025a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_ADC_Init+0x1ac>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d10b      	bne.n	80025e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e2:	e018      	b.n	8002616 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f023 0312 	bic.w	r3, r3, #18
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002604:	e007      	b.n	8002616 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	ffe1f7fd 	.word	0xffe1f7fd
 8002624:	ff1f0efe 	.word	0xff1f0efe

08002628 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a64      	ldr	r2, [pc, #400]	; (80027d0 <HAL_ADC_Start_DMA+0x1a8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_ADC_Start_DMA+0x24>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_ADC_Start_DMA+0x1ac>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d106      	bne.n	800265a <HAL_ADC_Start_DMA+0x32>
 800264c:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <HAL_ADC_Start_DMA+0x1a8>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 80b3 	bne.w	80027c0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADC_Start_DMA+0x40>
 8002664:	2302      	movs	r3, #2
 8002666:	e0ae      	b.n	80027c6 <HAL_ADC_Start_DMA+0x19e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f9c1 	bl	80029f8 <ADC_Enable>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 809a 	bne.w	80027b6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_ADC_Start_DMA+0x1ac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d105      	bne.n	80026ac <HAL_ADC_Start_DMA+0x84>
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_ADC_Start_DMA+0x1a8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d115      	bne.n	80026d8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d026      	beq.n	8002714 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026d6:	e01d      	b.n	8002714 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a39      	ldr	r2, [pc, #228]	; (80027d0 <HAL_ADC_Start_DMA+0x1a8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_ADC_Start_DMA+0xd0>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <HAL_ADC_Start_DMA+0x1ac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10d      	bne.n	8002714 <HAL_ADC_Start_DMA+0xec>
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_ADC_Start_DMA+0x1a8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f023 0206 	bic.w	r2, r3, #6
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c
 800272c:	e002      	b.n	8002734 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_ADC_Start_DMA+0x1b0>)
 8002742:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <HAL_ADC_Start_DMA+0x1b4>)
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_ADC_Start_DMA+0x1b8>)
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0202 	mvn.w	r2, #2
 800275c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a18      	ldr	r0, [r3, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	334c      	adds	r3, #76	; 0x4c
 8002778:	4619      	mov	r1, r3
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f000 fba5 	bl	8002ecc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800278c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002790:	d108      	bne.n	80027a4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027a0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027a2:	e00f      	b.n	80027c4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027b2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027b4:	e006      	b.n	80027c4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80027be:	e001      	b.n	80027c4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40012400 	.word	0x40012400
 80027d4:	40012800 	.word	0x40012800
 80027d8:	08002b2f 	.word	0x08002b2f
 80027dc:	08002bab 	.word	0x08002bab
 80027e0:	08002bc7 	.word	0x08002bc7

080027e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x20>
 8002824:	2302      	movs	r3, #2
 8002826:	e0dc      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1da>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d81c      	bhi.n	8002872 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b05      	subs	r3, #5
 800284a:	221f      	movs	r2, #31
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	4019      	ands	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b05      	subs	r3, #5
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	635a      	str	r2, [r3, #52]	; 0x34
 8002870:	e03c      	b.n	80028ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d81c      	bhi.n	80028b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b23      	subs	r3, #35	; 0x23
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	4019      	ands	r1, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b23      	subs	r3, #35	; 0x23
 80028a6:	fa00 f203 	lsl.w	r2, r0, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
 80028b2:	e01b      	b.n	80028ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b41      	subs	r3, #65	; 0x41
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	4019      	ands	r1, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b41      	subs	r3, #65	; 0x41
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	d91c      	bls.n	800292e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68d9      	ldr	r1, [r3, #12]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	3b1e      	subs	r3, #30
 8002906:	2207      	movs	r2, #7
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	4019      	ands	r1, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6898      	ldr	r0, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	3b1e      	subs	r3, #30
 8002920:	fa00 f203 	lsl.w	r2, r0, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	e019      	b.n	8002962 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6919      	ldr	r1, [r3, #16]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	2207      	movs	r2, #7
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	4019      	ands	r1, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6898      	ldr	r0, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d003      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800296e:	2b11      	cmp	r3, #17
 8002970:	d132      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_ADC_ConfigChannel+0x1e4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d125      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d126      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002998:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d11a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	0c9a      	lsrs	r2, r3, #18
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x1b2>
 80029c6:	e007      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40012400 	.word	0x40012400
 80029f0:	20000000 	.word	0x20000000
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d040      	beq.n	8002a98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a26:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <ADC_Enable+0xac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <ADC_Enable+0xb0>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	0c9b      	lsrs	r3, r3, #18
 8002a32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a34:	e002      	b.n	8002a3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a42:	f7ff fceb 	bl	800241c <HAL_GetTick>
 8002a46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a48:	e01f      	b.n	8002a8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a4a:	f7ff fce7 	bl	800241c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d918      	bls.n	8002a8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d011      	beq.n	8002a8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e007      	b.n	8002a9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d1d8      	bne.n	8002a4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	431bde83 	.word	0x431bde83

08002aac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d12e      	bne.n	8002b24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ad6:	f7ff fca1 	bl	800241c <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002adc:	e01b      	b.n	8002b16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ade:	f7ff fc9d 	bl	800241c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d914      	bls.n	8002b16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10d      	bne.n	8002b16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e007      	b.n	8002b26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d0dc      	beq.n	8002ade <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d127      	bne.n	8002b98 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b62:	d115      	bne.n	8002b90 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7fe f84f 	bl	8000c34 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002b96:	e004      	b.n	8002ba2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff fe13 	bl	80027e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff fe02 	bl	80027f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4906      	ldr	r1, [pc, #24]	; (8002c94 <__NVIC_EnableIRQ+0x34>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d60:	d301      	bcc.n	8002d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00f      	b.n	8002d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <SysTick_Config+0x40>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295
 8002d74:	f7ff ff90 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <SysTick_Config+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <SysTick_Config+0x40>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff2d 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dbc:	f7ff ff42 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6978      	ldr	r0, [r7, #20]
 8002dc8:	f7ff ff90 	bl	8002cec <NVIC_EncodePriority>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff5f 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff35 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffa2 	bl	8002d50 <SysTick_Config>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e043      	b.n	8002eb6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_DMA_Init+0xa8>)
 8002e36:	4413      	add	r3, r2
 8002e38:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <HAL_DMA_Init+0xac>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	009a      	lsls	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <HAL_DMA_Init+0xb0>)
 8002e4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	bffdfff8 	.word	0xbffdfff8
 8002ec4:	cccccccd 	.word	0xcccccccd
 8002ec8:	40020000 	.word	0x40020000

08002ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_DMA_Start_IT+0x20>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e04a      	b.n	8002f82 <HAL_DMA_Start_IT+0xb6>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d13a      	bne.n	8002f74 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f9e8 	bl	80032f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 020e 	orr.w	r2, r2, #14
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e00f      	b.n	8002f62 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0204 	bic.w	r2, r2, #4
 8002f50:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 020a 	orr.w	r2, r2, #10
 8002f60:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e005      	b.n	8002f80 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e020      	b.n	8002ff4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 020e 	bic.w	r2, r2, #14
 8002fc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003012:	2b02      	cmp	r3, #2
 8003014:	d005      	beq.n	8003022 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e051      	b.n	80030c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020e 	bic.w	r2, r2, #14
 8003030:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_DMA_Abort_IT+0xd0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d029      	beq.n	80030a0 <HAL_DMA_Abort_IT+0xa0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_DMA_Abort_IT+0xd4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_DMA_Abort_IT+0x9c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_DMA_Abort_IT+0xd8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d01a      	beq.n	8003096 <HAL_DMA_Abort_IT+0x96>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_DMA_Abort_IT+0xdc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d012      	beq.n	8003090 <HAL_DMA_Abort_IT+0x90>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_DMA_Abort_IT+0xe0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00a      	beq.n	800308a <HAL_DMA_Abort_IT+0x8a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_DMA_Abort_IT+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d102      	bne.n	8003084 <HAL_DMA_Abort_IT+0x84>
 800307e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003082:	e00e      	b.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 8003084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003088:	e00b      	b.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 800308a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800308e:	e008      	b.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 8003090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003094:	e005      	b.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 8003096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309a:	e002      	b.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 800309c:	2310      	movs	r3, #16
 800309e:	e000      	b.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 80030a0:	2301      	movs	r3, #1
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_DMA_Abort_IT+0xe8>)
 80030a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
    } 
  }
  return status;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40020008 	.word	0x40020008
 80030d4:	4002001c 	.word	0x4002001c
 80030d8:	40020030 	.word	0x40020030
 80030dc:	40020044 	.word	0x40020044
 80030e0:	40020058 	.word	0x40020058
 80030e4:	4002006c 	.word	0x4002006c
 80030e8:	40020000 	.word	0x40020000

080030ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2204      	movs	r2, #4
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d04f      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xc8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04a      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a66      	ldr	r2, [pc, #408]	; (80032dc <HAL_DMA_IRQHandler+0x1f0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d029      	beq.n	800319a <HAL_DMA_IRQHandler+0xae>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_DMA_IRQHandler+0x1f4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_DMA_IRQHandler+0xaa>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a63      	ldr	r2, [pc, #396]	; (80032e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01a      	beq.n	8003190 <HAL_DMA_IRQHandler+0xa4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a62      	ldr	r2, [pc, #392]	; (80032e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d012      	beq.n	800318a <HAL_DMA_IRQHandler+0x9e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a60      	ldr	r2, [pc, #384]	; (80032ec <HAL_DMA_IRQHandler+0x200>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00a      	beq.n	8003184 <HAL_DMA_IRQHandler+0x98>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_DMA_IRQHandler+0x204>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d102      	bne.n	800317e <HAL_DMA_IRQHandler+0x92>
 8003178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800317c:	e00e      	b.n	800319c <HAL_DMA_IRQHandler+0xb0>
 800317e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003182:	e00b      	b.n	800319c <HAL_DMA_IRQHandler+0xb0>
 8003184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003188:	e008      	b.n	800319c <HAL_DMA_IRQHandler+0xb0>
 800318a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800318e:	e005      	b.n	800319c <HAL_DMA_IRQHandler+0xb0>
 8003190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003194:	e002      	b.n	800319c <HAL_DMA_IRQHandler+0xb0>
 8003196:	2340      	movs	r3, #64	; 0x40
 8003198:	e000      	b.n	800319c <HAL_DMA_IRQHandler+0xb0>
 800319a:	2304      	movs	r3, #4
 800319c:	4a55      	ldr	r2, [pc, #340]	; (80032f4 <HAL_DMA_IRQHandler+0x208>)
 800319e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8094 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031b2:	e08e      	b.n	80032d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2202      	movs	r2, #2
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d056      	beq.n	8003272 <HAL_DMA_IRQHandler+0x186>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d051      	beq.n	8003272 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 020a 	bic.w	r2, r2, #10
 80031ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_DMA_IRQHandler+0x1f0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d029      	beq.n	8003252 <HAL_DMA_IRQHandler+0x166>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a37      	ldr	r2, [pc, #220]	; (80032e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_IRQHandler+0x162>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a35      	ldr	r2, [pc, #212]	; (80032e4 <HAL_DMA_IRQHandler+0x1f8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01a      	beq.n	8003248 <HAL_DMA_IRQHandler+0x15c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a34      	ldr	r2, [pc, #208]	; (80032e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d012      	beq.n	8003242 <HAL_DMA_IRQHandler+0x156>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a32      	ldr	r2, [pc, #200]	; (80032ec <HAL_DMA_IRQHandler+0x200>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00a      	beq.n	800323c <HAL_DMA_IRQHandler+0x150>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <HAL_DMA_IRQHandler+0x204>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d102      	bne.n	8003236 <HAL_DMA_IRQHandler+0x14a>
 8003230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003234:	e00e      	b.n	8003254 <HAL_DMA_IRQHandler+0x168>
 8003236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323a:	e00b      	b.n	8003254 <HAL_DMA_IRQHandler+0x168>
 800323c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003240:	e008      	b.n	8003254 <HAL_DMA_IRQHandler+0x168>
 8003242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003246:	e005      	b.n	8003254 <HAL_DMA_IRQHandler+0x168>
 8003248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324c:	e002      	b.n	8003254 <HAL_DMA_IRQHandler+0x168>
 800324e:	2320      	movs	r3, #32
 8003250:	e000      	b.n	8003254 <HAL_DMA_IRQHandler+0x168>
 8003252:	2302      	movs	r3, #2
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_DMA_IRQHandler+0x208>)
 8003256:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d034      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003270:	e02f      	b.n	80032d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2208      	movs	r2, #8
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x1e8>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d023      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 020e 	bic.w	r2, r2, #14
 800329a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
    }
  }
  return;
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
}
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40020008 	.word	0x40020008
 80032e0:	4002001c 	.word	0x4002001c
 80032e4:	40020030 	.word	0x40020030
 80032e8:	40020044 	.word	0x40020044
 80032ec:	40020058 	.word	0x40020058
 80032f0:	4002006c 	.word	0x4002006c
 80032f4:	40020000 	.word	0x40020000

080032f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d108      	bne.n	8003338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003336:	e007      	b.n	8003348 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	; 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003366:	e169      	b.n	800363c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003368:	2201      	movs	r2, #1
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8158 	bne.w	8003636 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a9a      	ldr	r2, [pc, #616]	; (80035f4 <HAL_GPIO_Init+0x2a0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d05e      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 8003390:	4a98      	ldr	r2, [pc, #608]	; (80035f4 <HAL_GPIO_Init+0x2a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d875      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 8003396:	4a98      	ldr	r2, [pc, #608]	; (80035f8 <HAL_GPIO_Init+0x2a4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d058      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 800339c:	4a96      	ldr	r2, [pc, #600]	; (80035f8 <HAL_GPIO_Init+0x2a4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d86f      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033a2:	4a96      	ldr	r2, [pc, #600]	; (80035fc <HAL_GPIO_Init+0x2a8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d052      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033a8:	4a94      	ldr	r2, [pc, #592]	; (80035fc <HAL_GPIO_Init+0x2a8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d869      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ae:	4a94      	ldr	r2, [pc, #592]	; (8003600 <HAL_GPIO_Init+0x2ac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04c      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033b4:	4a92      	ldr	r2, [pc, #584]	; (8003600 <HAL_GPIO_Init+0x2ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d863      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ba:	4a92      	ldr	r2, [pc, #584]	; (8003604 <HAL_GPIO_Init+0x2b0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d046      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033c0:	4a90      	ldr	r2, [pc, #576]	; (8003604 <HAL_GPIO_Init+0x2b0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d85d      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d82a      	bhi.n	8003420 <HAL_GPIO_Init+0xcc>
 80033ca:	2b12      	cmp	r3, #18
 80033cc:	d859      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_GPIO_Init+0x80>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	0800344f 	.word	0x0800344f
 80033d8:	08003429 	.word	0x08003429
 80033dc:	0800343b 	.word	0x0800343b
 80033e0:	0800347d 	.word	0x0800347d
 80033e4:	08003483 	.word	0x08003483
 80033e8:	08003483 	.word	0x08003483
 80033ec:	08003483 	.word	0x08003483
 80033f0:	08003483 	.word	0x08003483
 80033f4:	08003483 	.word	0x08003483
 80033f8:	08003483 	.word	0x08003483
 80033fc:	08003483 	.word	0x08003483
 8003400:	08003483 	.word	0x08003483
 8003404:	08003483 	.word	0x08003483
 8003408:	08003483 	.word	0x08003483
 800340c:	08003483 	.word	0x08003483
 8003410:	08003483 	.word	0x08003483
 8003414:	08003483 	.word	0x08003483
 8003418:	08003431 	.word	0x08003431
 800341c:	08003445 	.word	0x08003445
 8003420:	4a79      	ldr	r2, [pc, #484]	; (8003608 <HAL_GPIO_Init+0x2b4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003426:	e02c      	b.n	8003482 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e029      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	3304      	adds	r3, #4
 8003436:	623b      	str	r3, [r7, #32]
          break;
 8003438:	e024      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	3308      	adds	r3, #8
 8003440:	623b      	str	r3, [r7, #32]
          break;
 8003442:	e01f      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	330c      	adds	r3, #12
 800344a:	623b      	str	r3, [r7, #32]
          break;
 800344c:	e01a      	b.n	8003484 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003456:	2304      	movs	r3, #4
 8003458:	623b      	str	r3, [r7, #32]
          break;
 800345a:	e013      	b.n	8003484 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003464:	2308      	movs	r3, #8
 8003466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	611a      	str	r2, [r3, #16]
          break;
 800346e:	e009      	b.n	8003484 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003470:	2308      	movs	r3, #8
 8003472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	615a      	str	r2, [r3, #20]
          break;
 800347a:	e003      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
          break;
 8003480:	e000      	b.n	8003484 <HAL_GPIO_Init+0x130>
          break;
 8003482:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2bff      	cmp	r3, #255	; 0xff
 8003488:	d801      	bhi.n	800348e <HAL_GPIO_Init+0x13a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	e001      	b.n	8003492 <HAL_GPIO_Init+0x13e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2bff      	cmp	r3, #255	; 0xff
 8003498:	d802      	bhi.n	80034a0 <HAL_GPIO_Init+0x14c>
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x152>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	3b08      	subs	r3, #8
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	210f      	movs	r1, #15
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80b1 	beq.w	8003636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034d4:	4b4d      	ldr	r3, [pc, #308]	; (800360c <HAL_GPIO_Init+0x2b8>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	; (800360c <HAL_GPIO_Init+0x2b8>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6193      	str	r3, [r2, #24]
 80034e0:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_GPIO_Init+0x2b8>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034ec:	4a48      	ldr	r2, [pc, #288]	; (8003610 <HAL_GPIO_Init+0x2bc>)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a40      	ldr	r2, [pc, #256]	; (8003614 <HAL_GPIO_Init+0x2c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_GPIO_Init+0x1ec>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3f      	ldr	r2, [pc, #252]	; (8003618 <HAL_GPIO_Init+0x2c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_GPIO_Init+0x1e8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3e      	ldr	r2, [pc, #248]	; (800361c <HAL_GPIO_Init+0x2c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x1e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_GPIO_Init+0x2cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_GPIO_Init+0x1e0>
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003534:	2304      	movs	r3, #4
 8003536:	e004      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003538:	2302      	movs	r3, #2
 800353a:	e002      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003540:	2300      	movs	r3, #0
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	f002 0203 	and.w	r2, r2, #3
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	4093      	lsls	r3, r2
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003552:	492f      	ldr	r1, [pc, #188]	; (8003610 <HAL_GPIO_Init+0x2bc>)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	492c      	ldr	r1, [pc, #176]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	43db      	mvns	r3, r3
 8003582:	4928      	ldr	r1, [pc, #160]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003584:	4013      	ands	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4922      	ldr	r1, [pc, #136]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	491e      	ldr	r1, [pc, #120]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	4918      	ldr	r1, [pc, #96]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4914      	ldr	r1, [pc, #80]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d021      	beq.n	8003628 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60cb      	str	r3, [r1, #12]
 80035f0:	e021      	b.n	8003636 <HAL_GPIO_Init+0x2e2>
 80035f2:	bf00      	nop
 80035f4:	10320000 	.word	0x10320000
 80035f8:	10310000 	.word	0x10310000
 80035fc:	10220000 	.word	0x10220000
 8003600:	10210000 	.word	0x10210000
 8003604:	10120000 	.word	0x10120000
 8003608:	10110000 	.word	0x10110000
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_GPIO_Init+0x304>)
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	43db      	mvns	r3, r3
 8003630:	4909      	ldr	r1, [pc, #36]	; (8003658 <HAL_GPIO_Init+0x304>)
 8003632:	4013      	ands	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f ae8e 	bne.w	8003368 <HAL_GPIO_Init+0x14>
  }
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	372c      	adds	r7, #44	; 0x2c
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
 8003668:	4613      	mov	r3, r2
 800366a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800366c:	787b      	ldrb	r3, [r7, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003678:	e003      	b.n	8003682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	041a      	lsls	r2, r3, #16
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43d9      	mvns	r1, r3
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	400b      	ands	r3, r1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	611a      	str	r2, [r3, #16]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e12b      	b.n	800392a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fcb0 	bl	800204c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003724:	f002 f9aa 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a81      	ldr	r2, [pc, #516]	; (8003934 <HAL_I2C_Init+0x274>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d807      	bhi.n	8003744 <HAL_I2C_Init+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a80      	ldr	r2, [pc, #512]	; (8003938 <HAL_I2C_Init+0x278>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e006      	b.n	8003752 <HAL_I2C_Init+0x92>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7d      	ldr	r2, [pc, #500]	; (800393c <HAL_I2C_Init+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0e7      	b.n	800392a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a78      	ldr	r2, [pc, #480]	; (8003940 <HAL_I2C_Init+0x280>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_I2C_Init+0x274>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <HAL_I2C_Init+0xd4>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	e009      	b.n	80037a8 <HAL_I2C_Init+0xe8>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_I2C_Init+0x284>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	495c      	ldr	r1, [pc, #368]	; (8003934 <HAL_I2C_Init+0x274>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d819      	bhi.n	80037fc <HAL_I2C_Init+0x13c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e59      	subs	r1, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037dc:	400b      	ands	r3, r1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_I2C_Init+0x138>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e59      	subs	r1, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	e051      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x168>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x18e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x196>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1dc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b08b      	sub	sp, #44	; 0x2c
 800394c:	af06      	add	r7, sp, #24
 800394e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0fd      	b.n	8003b56 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f007 fdce 	bl	800b510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fde3 	bl	800754c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	687e      	ldr	r6, [r7, #4]
 800398e:	466d      	mov	r5, sp
 8003990:	f106 0410 	add.w	r4, r6, #16
 8003994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	1d33      	adds	r3, r6, #4
 800399e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a0:	6838      	ldr	r0, [r7, #0]
 80039a2:	f003 fdad 	bl	8007500 <USB_CoreInit>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0ce      	b.n	8003b56 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fdde 	bl	8007580 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e04c      	b.n	8003a64 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	3301      	adds	r3, #1
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	b298      	uxth	r0, r3
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	3336      	adds	r3, #54	; 0x36
 8003a08:	4602      	mov	r2, r0
 8003a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	3338      	adds	r3, #56	; 0x38
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	333c      	adds	r3, #60	; 0x3c
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	3340      	adds	r3, #64	; 0x40
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	3301      	adds	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3ad      	bcc.n	80039ca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e044      	b.n	8003afe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	440b      	add	r3, r1
 8003a82:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3301      	adds	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3b5      	bcc.n	8003a74 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	687e      	ldr	r6, [r7, #4]
 8003b10:	466d      	mov	r5, sp
 8003b12:	f106 0410 	add.w	r4, r6, #16
 8003b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	1d33      	adds	r3, r6, #4
 8003b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	f003 fd38 	bl	8007598 <USB_DevInit>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00d      	b.n	8003b56 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f005 fea9 	bl	80098a6 <USB_DevDisconnect>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_PCD_Start+0x16>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e016      	b.n	8003ba2 <HAL_PCD_Start+0x44>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fccd 	bl	8007520 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003b86:	2101      	movs	r1, #1
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f007 ff34 	bl	800b9f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fe7d 	bl	8009892 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b088      	sub	sp, #32
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f005 fe7f 	bl	80098ba <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d102      	bne.n	8003bce <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb61 	bl	8004290 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f005 fe71 	bl	80098ba <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d112      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f007 fd02 	bl	800b606 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c02:	2100      	movs	r1, #0
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f925 	bl	8003e54 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f005 fe53 	bl	80098ba <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f005 fe3c 	bl	80098ba <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4c:	d10b      	bne.n	8003c66 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c60:	b292      	uxth	r2, r2
 8003c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f005 fe25 	bl	80098ba <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d126      	bne.n	8003cca <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0208 	bic.w	r2, r2, #8
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f007 fce3 	bl	800b678 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cc4:	b292      	uxth	r2, r2
 8003cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f005 fdf3 	bl	80098ba <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cde:	f040 8084 	bne.w	8003dea <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e011      	b.n	8003d0c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	8812      	ldrh	r2, [r2, #0]
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f107 0120 	add.w	r1, r7, #32
 8003d00:	440b      	add	r3, r1
 8003d02:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003d06:	7ffb      	ldrb	r3, [r7, #31]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	2b07      	cmp	r3, #7
 8003d10:	d9ea      	bls.n	8003ce8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	b292      	uxth	r2, r2
 8003d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003d42:	bf00      	nop
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f6      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e010      	b.n	8003d96 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	7ffa      	ldrb	r2, [r7, #31]
 8003d7e:	0092      	lsls	r2, r2, #2
 8003d80:	440a      	add	r2, r1
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	f107 0120 	add.w	r1, r7, #32
 8003d88:	440b      	add	r3, r1
 8003d8a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003d8e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003d90:	7ffb      	ldrb	r3, [r7, #31]
 8003d92:	3301      	adds	r3, #1
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	2b07      	cmp	r3, #7
 8003d9a:	d9eb      	bls.n	8003d74 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0208 	orr.w	r2, r2, #8
 8003dae:	b292      	uxth	r2, r2
 8003db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0204 	orr.w	r2, r2, #4
 8003dde:	b292      	uxth	r2, r2
 8003de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f007 fc2d 	bl	800b644 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 fd63 	bl	80098ba <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfe:	d10e      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e12:	b292      	uxth	r2, r2
 8003e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f007 fbe6 	bl	800b5ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f005 fd49 	bl	80098ba <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d10b      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e46:	b292      	uxth	r2, r2
 8003e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_PCD_SetAddress+0x1a>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e013      	b.n	8003e96 <HAL_PCD_SetAddress+0x42>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	4611      	mov	r1, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f005 fcf0 	bl	800986c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4603      	mov	r3, r0
 8003eae:	70fb      	strb	r3, [r7, #3]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	803b      	strh	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	da0e      	bge.n	8003ee2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	705a      	strb	r2, [r3, #1]
 8003ee0:	e00e      	b.n	8003f00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 0207 	and.w	r2, r3, #7
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f0c:	883a      	ldrh	r2, [r7, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	78ba      	ldrb	r2, [r7, #2]
 8003f16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f2a:	78bb      	ldrb	r3, [r7, #2]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d102      	bne.n	8003f36 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_PCD_EP_Open+0xa6>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e00e      	b.n	8003f62 <HAL_PCD_EP_Open+0xc4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fb40 	bl	80075d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003f60:	7afb      	ldrb	r3, [r7, #11]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da0e      	bge.n	8003f9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	705a      	strb	r2, [r3, #1]
 8003f9a:	e00e      	b.n	8003fba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 0207 	and.w	r2, r3, #7
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_PCD_EP_Close+0x6a>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00e      	b.n	8003ff2 <HAL_PCD_EP_Close+0x88>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 fe62 	bl	8007cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	460b      	mov	r3, r1
 8004008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 0207 	and.w	r2, r3, #7
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2200      	movs	r2, #0
 8004038:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800403a:	7afb      	ldrb	r3, [r7, #11]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	b2da      	uxtb	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 f814 	bl	8008084 <USB_EPStartXfer>
 800405c:	e005      	b.n	800406a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6979      	ldr	r1, [r7, #20]
 8004064:	4618      	mov	r0, r3
 8004066:	f004 f80d 	bl	8008084 <USB_EPStartXfer>
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 0207 	and.w	r2, r3, #7
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	460b      	mov	r3, r1
 80040b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2201      	movs	r2, #1
 80040ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	4618      	mov	r0, r3
 800410c:	f003 ffba 	bl	8008084 <USB_EPStartXfer>
 8004110:	e005      	b.n	800411e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6979      	ldr	r1, [r7, #20]
 8004118:	4618      	mov	r0, r3
 800411a:	f003 ffb3 	bl	8008084 <USB_EPStartXfer>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 0207 	and.w	r2, r3, #7
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d901      	bls.n	8004146 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e04c      	b.n	80041e0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da0e      	bge.n	800416c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	705a      	strb	r2, [r3, #1]
 800416a:	e00c      	b.n	8004186 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_PCD_EP_SetStall+0x7e>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e01c      	b.n	80041e0 <HAL_PCD_EP_SetStall+0xb8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f005 fa5c 	bl	8009672 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f005 fb81 	bl	80098d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d901      	bls.n	8004206 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e040      	b.n	8004288 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	da0e      	bge.n	800422c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	705a      	strb	r2, [r3, #1]
 800422a:	e00e      	b.n	800424a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 0207 	and.w	r2, r3, #7
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_PCD_EP_ClrStall+0x82>
 8004266:	2302      	movs	r3, #2
 8004268:	e00e      	b.n	8004288 <HAL_PCD_EP_ClrStall+0xa0>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	4618      	mov	r0, r3
 800427a:	f005 fa4a 	bl	8009712 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004298:	e2ec      	b.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80042a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80042b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8161 	bne.w	800457c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80042ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d152      	bne.n	800436a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	81fb      	strh	r3, [r7, #14]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	89fb      	ldrh	r3, [r7, #14]
 80042dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3328      	adds	r3, #40	; 0x28
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	3302      	adds	r3, #2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	441a      	add	r2, r3
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004328:	2100      	movs	r1, #0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f007 f943 	bl	800b5b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 829b 	beq.w	8004874 <PCD_EP_ISR_Handler+0x5e4>
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 8296 	bne.w	8004874 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	b292      	uxth	r2, r2
 800435c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004368:	e284      	b.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800437a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800437c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004380:	2b00      	cmp	r3, #0
 8004382:	d034      	beq.n	80043ee <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	3306      	adds	r3, #6
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f005 fad8 	bl	8009978 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043d4:	4013      	ands	r3, r2
 80043d6:	823b      	strh	r3, [r7, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	8a3a      	ldrh	r2, [r7, #16]
 80043de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043e2:	b292      	uxth	r2, r2
 80043e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f007 f8b8 	bl	800b55c <HAL_PCD_SetupStageCallback>
 80043ec:	e242      	b.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f280 823e 	bge.w	8004874 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004404:	4013      	ands	r3, r2
 8004406:	83bb      	strh	r3, [r7, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	8bba      	ldrh	r2, [r7, #28]
 800440e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004412:	b292      	uxth	r2, r2
 8004414:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	3306      	adds	r3, #6
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d019      	beq.n	800447e <PCD_EP_ISR_Handler+0x1ee>
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d015      	beq.n	800447e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	6959      	ldr	r1, [r3, #20]
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004462:	b29b      	uxth	r3, r3
 8004464:	f005 fa88 	bl	8009978 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	441a      	add	r2, r3
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004476:	2100      	movs	r1, #0
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f007 f881 	bl	800b580 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 81f2 	bne.w	8004874 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d112      	bne.n	80044de <PCD_EP_ISR_Handler+0x24e>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e02f      	b.n	800453e <PCD_EP_ISR_Handler+0x2ae>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b3e      	cmp	r3, #62	; 0x3e
 80044e4:	d813      	bhi.n	800450e <PCD_EP_ISR_Handler+0x27e>
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <PCD_EP_ISR_Handler+0x270>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	3301      	adds	r3, #1
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	b29b      	uxth	r3, r3
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	b29a      	uxth	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e017      	b.n	800453e <PCD_EP_ISR_Handler+0x2ae>
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	633b      	str	r3, [r7, #48]	; 0x30
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <PCD_EP_ISR_Handler+0x298>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	3b01      	subs	r3, #1
 8004526:	633b      	str	r3, [r7, #48]	; 0x30
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	b29b      	uxth	r3, r3
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	827b      	strh	r3, [r7, #18]
 8004550:	8a7b      	ldrh	r3, [r7, #18]
 8004552:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004556:	827b      	strh	r3, [r7, #18]
 8004558:	8a7b      	ldrh	r3, [r7, #18]
 800455a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800455e:	827b      	strh	r3, [r7, #18]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	8a7b      	ldrh	r3, [r7, #18]
 8004566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004576:	b29b      	uxth	r3, r3
 8004578:	8013      	strh	r3, [r2, #0]
 800457a:	e17b      	b.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800458e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004592:	2b00      	cmp	r3, #0
 8004594:	f280 80ea 	bge.w	800476c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045ae:	4013      	ands	r3, r2
 80045b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80045c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045c6:	b292      	uxth	r2, r2
 80045c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80045ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	7b1b      	ldrb	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d122      	bne.n	800462e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	3306      	adds	r3, #6
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004610:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8087 	beq.w	8004728 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	6959      	ldr	r1, [r3, #20]
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	88da      	ldrh	r2, [r3, #6]
 8004626:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004628:	f005 f9a6 	bl	8009978 <USB_ReadPMA>
 800462c:	e07c      	b.n	8004728 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d108      	bne.n	8004648 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004638:	461a      	mov	r2, r3
 800463a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f927 	bl	8004890 <HAL_PCD_EP_DB_Receive>
 8004642:	4603      	mov	r3, r0
 8004644:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004646:	e06f      	b.n	8004728 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	847b      	strh	r3, [r7, #34]	; 0x22
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d021      	beq.n	80046e6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	3302      	adds	r3, #2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80046cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02a      	beq.n	8004728 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	6959      	ldr	r1, [r3, #20]
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	891a      	ldrh	r2, [r3, #8]
 80046de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046e0:	f005 f94a 	bl	8009978 <USB_ReadPMA>
 80046e4:	e020      	b.n	8004728 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	3306      	adds	r3, #6
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	6959      	ldr	r1, [r3, #20]
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	895a      	ldrh	r2, [r3, #10]
 8004722:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004724:	f005 f928 	bl	8009978 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800472e:	441a      	add	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800473a:	441a      	add	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <PCD_EP_ISR_Handler+0x4c2>
 8004748:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	d206      	bcs.n	8004760 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f006 ff11 	bl	800b580 <HAL_PCD_DataOutStageCallback>
 800475e:	e005      	b.n	800476c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f003 fc8c 	bl	8008084 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800476c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d07e      	beq.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004776:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4413      	add	r3, r2
 8004788:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	843b      	strh	r3, [r7, #32]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	8c3b      	ldrh	r3, [r7, #32]
 80047b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	78db      	ldrb	r3, [r3, #3]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d00c      	beq.n	80047e4 <PCD_EP_ISR_Handler+0x554>
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d146      	bne.n	8004868 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80047da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d141      	bne.n	8004868 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	3302      	adds	r3, #2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	8bfb      	ldrh	r3, [r7, #30]
 8004814:	429a      	cmp	r2, r3
 8004816:	d906      	bls.n	8004826 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	8bfb      	ldrh	r3, [r7, #30]
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	619a      	str	r2, [r3, #24]
 8004824:	e002      	b.n	800482c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f006 febb 	bl	800b5b6 <HAL_PCD_DataInStageCallback>
 8004840:	e018      	b.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	8bfb      	ldrh	r3, [r7, #30]
 8004848:	441a      	add	r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	8bfb      	ldrh	r3, [r7, #30]
 8004854:	441a      	add	r2, r3
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fc0f 	bl	8008084 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004866:	e005      	b.n	8004874 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004868:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800486a:	461a      	mov	r2, r3
 800486c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f91b 	bl	8004aaa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800487c:	b29b      	uxth	r3, r3
 800487e:	b21b      	sxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f6ff ad0a 	blt.w	800429a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3738      	adds	r7, #56	; 0x38
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d07e      	beq.n	80049a6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	3302      	adds	r3, #2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	8b7b      	ldrh	r3, [r7, #26]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d306      	bcc.n	80048ea <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	619a      	str	r2, [r3, #24]
 80048e8:	e002      	b.n	80048f0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2200      	movs	r2, #0
 80048ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d123      	bne.n	8004940 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	833b      	strh	r3, [r7, #24]
 8004914:	8b3b      	ldrh	r3, [r7, #24]
 8004916:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800491a:	833b      	strh	r3, [r7, #24]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	8b3b      	ldrh	r3, [r7, #24]
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01f      	beq.n	800498a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	82fb      	strh	r3, [r7, #22]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	441a      	add	r2, r3
 8004974:	8afb      	ldrh	r3, [r7, #22]
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800498a:	8b7b      	ldrh	r3, [r7, #26]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8087 	beq.w	8004aa0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6959      	ldr	r1, [r3, #20]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	891a      	ldrh	r2, [r3, #8]
 800499e:	8b7b      	ldrh	r3, [r7, #26]
 80049a0:	f004 ffea 	bl	8009978 <USB_ReadPMA>
 80049a4:	e07c      	b.n	8004aa0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4413      	add	r3, r2
 80049ba:	3306      	adds	r3, #6
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	8b7b      	ldrh	r3, [r7, #26]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d306      	bcc.n	80049e8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	8b7b      	ldrh	r3, [r7, #26]
 80049e0:	1ad2      	subs	r2, r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	619a      	str	r2, [r3, #24]
 80049e6:	e002      	b.n	80049ee <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d123      	bne.n	8004a3e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	83fb      	strh	r3, [r7, #30]
 8004a12:	8bfb      	ldrh	r3, [r7, #30]
 8004a14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a18:	83fb      	strh	r3, [r7, #30]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	8bfb      	ldrh	r3, [r7, #30]
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11f      	bne.n	8004a88 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	83bb      	strh	r3, [r7, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	441a      	add	r2, r3
 8004a72:	8bbb      	ldrh	r3, [r7, #28]
 8004a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a88:	8b7b      	ldrh	r3, [r7, #26]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6959      	ldr	r1, [r3, #20]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	895a      	ldrh	r2, [r3, #10]
 8004a9a:	8b7b      	ldrh	r3, [r7, #26]
 8004a9c:	f004 ff6c 	bl	8009978 <USB_ReadPMA>
    }
  }

  return count;
 8004aa0:	8b7b      	ldrh	r3, [r7, #26]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b0a2      	sub	sp, #136	; 0x88
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 81c7 	beq.w	8004e52 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d907      	bls.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b04:	1ad2      	subs	r2, r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	619a      	str	r2, [r3, #24]
 8004b0a:	e002      	b.n	8004b12 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 80b9 	bne.w	8004c8e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d126      	bne.n	8004b72 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	4413      	add	r3, r2
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	011a      	lsls	r2, r3, #4
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	4413      	add	r3, r2
 8004b46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e01a      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d116      	bne.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	4413      	add	r3, r2
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	011a      	lsls	r2, r3, #4
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d126      	bne.n	8004c04 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4413      	add	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	011a      	lsls	r2, r3, #4
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	e017      	b.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d113      	bne.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	011a      	lsls	r2, r3, #4
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	4413      	add	r3, r2
 8004c28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2200      	movs	r2, #0
 8004c32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f006 fcbb 	bl	800b5b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 82d4 	beq.w	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	827b      	strh	r3, [r7, #18]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	8a7b      	ldrh	r3, [r7, #18]
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]
 8004c8c:	e2b2      	b.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d021      	beq.n	8004cdc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	441a      	add	r2, r3
 8004cc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	f040 8286 	bne.w	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cf0:	441a      	add	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cfe:	441a      	add	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6a1a      	ldr	r2, [r3, #32]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d309      	bcc.n	8004d24 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1c:	1ad2      	subs	r2, r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	621a      	str	r2, [r3, #32]
 8004d22:	e015      	b.n	8004d50 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004d2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d3a:	e009      	b.n	8004d50 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d155      	bne.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	4413      	add	r3, r2
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	4413      	add	r3, r2
 8004d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d112      	bne.n	8004dac <HAL_PCD_EP_DB_Transmit+0x302>
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e047      	b.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x392>
 8004dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dae:	2b3e      	cmp	r3, #62	; 0x3e
 8004db0:	d811      	bhi.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	e032      	b.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x392>
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dde:	f003 031f 	and.w	r3, r3, #31
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_PCD_EP_DB_Transmit+0x342>
 8004de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de8:	3b01      	subs	r3, #1
 8004dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	029b      	lsls	r3, r3, #10
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	e01b      	b.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x392>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d117      	bne.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x392>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	643b      	str	r3, [r7, #64]	; 0x40
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e20:	4413      	add	r3, r2
 8004e22:	643b      	str	r3, [r7, #64]	; 0x40
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	011a      	lsls	r2, r3, #4
 8004e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6959      	ldr	r1, [r3, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	891a      	ldrh	r2, [r3, #8]
 8004e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f004 fd4f 	bl	80098ee <USB_WritePMA>
 8004e50:	e1d0      	b.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	3306      	adds	r3, #6
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d307      	bcc.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	619a      	str	r2, [r3, #24]
 8004e98:	e002      	b.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f040 80c4 	bne.w	8005032 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d126      	bne.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x456>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	4413      	add	r3, r2
 8004ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	011a      	lsls	r2, r3, #4
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	e01a      	b.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d116      	bne.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	677b      	str	r3, [r7, #116]	; 0x74
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f1c:	4413      	add	r3, r2
 8004f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f32:	2200      	movs	r2, #0
 8004f34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12f      	bne.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	011a      	lsls	r2, r3, #4
 8004f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	e017      	b.n	8004fd4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d113      	bne.n	8004fd4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fba:	4413      	add	r3, r2
 8004fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	011a      	lsls	r2, r3, #4
 8004fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f006 faeb 	bl	800b5b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 8104 	bne.w	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800501c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	b29b      	uxth	r3, r3
 800502e:	8013      	strh	r3, [r2, #0]
 8005030:	e0e0      	b.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d121      	bne.n	8005080 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800506c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	b29b      	uxth	r3, r3
 800507e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005086:	2b01      	cmp	r3, #1
 8005088:	f040 80b4 	bne.w	80051f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005094:	441a      	add	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050a2:	441a      	add	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d309      	bcc.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c0:	1ad2      	subs	r2, r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	621a      	str	r2, [r3, #32]
 80050c6:	e015      	b.n	80050f4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80050d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050de:	e009      	b.n	80050f4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2200      	movs	r2, #0
 80050ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	667b      	str	r3, [r7, #100]	; 0x64
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d155      	bne.n	80051ae <HAL_PCD_EP_DB_Transmit+0x704>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005116:	4413      	add	r3, r2
 8005118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	011a      	lsls	r2, r3, #4
 8005120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005122:	4413      	add	r3, r2
 8005124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005128:	65bb      	str	r3, [r7, #88]	; 0x58
 800512a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512c:	2b00      	cmp	r3, #0
 800512e:	d112      	bne.n	8005156 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800513a:	b29a      	uxth	r2, r3
 800513c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514e:	b29a      	uxth	r2, r3
 8005150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	e044      	b.n	80051e0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005158:	2b3e      	cmp	r3, #62	; 0x3e
 800515a:	d811      	bhi.n	8005180 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800515c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	657b      	str	r3, [r7, #84]	; 0x54
 8005162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800516c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800516e:	3301      	adds	r3, #1
 8005170:	657b      	str	r3, [r7, #84]	; 0x54
 8005172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29a      	uxth	r2, r3
 800517a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e02f      	b.n	80051e0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	657b      	str	r3, [r7, #84]	; 0x54
 8005186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005192:	3b01      	subs	r3, #1
 8005194:	657b      	str	r3, [r7, #84]	; 0x54
 8005196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005198:	b29b      	uxth	r3, r3
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e018      	b.n	80051e0 <HAL_PCD_EP_DB_Transmit+0x736>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d114      	bne.n	80051e0 <HAL_PCD_EP_DB_Transmit+0x736>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051be:	b29b      	uxth	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c4:	4413      	add	r3, r2
 80051c6:	667b      	str	r3, [r7, #100]	; 0x64
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	011a      	lsls	r2, r3, #4
 80051ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051d6:	663b      	str	r3, [r7, #96]	; 0x60
 80051d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6959      	ldr	r1, [r3, #20]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	895a      	ldrh	r2, [r3, #10]
 80051ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f004 fb7d 	bl	80098ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520e:	823b      	strh	r3, [r7, #16]
 8005210:	8a3b      	ldrh	r3, [r7, #16]
 8005212:	f083 0310 	eor.w	r3, r3, #16
 8005216:	823b      	strh	r3, [r7, #16]
 8005218:	8a3b      	ldrh	r3, [r7, #16]
 800521a:	f083 0320 	eor.w	r3, r3, #32
 800521e:	823b      	strh	r3, [r7, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	8a3b      	ldrh	r3, [r7, #16]
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3788      	adds	r7, #136	; 0x88
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	817b      	strh	r3, [r7, #10]
 800525c:	4613      	mov	r3, r2
 800525e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005260:	897b      	ldrh	r3, [r7, #10]
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800526c:	897b      	ldrh	r3, [r7, #10]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e009      	b.n	8005298 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005284:	897a      	ldrh	r2, [r7, #10]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005298:	893b      	ldrh	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	80da      	strh	r2, [r3, #6]
 80052ac:	e00b      	b.n	80052c6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2201      	movs	r2, #1
 80052b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0c1b      	lsrs	r3, r3, #16
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e26c      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8087 	beq.w	8005402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f4:	4b92      	ldr	r3, [pc, #584]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 030c 	and.w	r3, r3, #12
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d00c      	beq.n	800531a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005300:	4b8f      	ldr	r3, [pc, #572]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b08      	cmp	r3, #8
 800530a:	d112      	bne.n	8005332 <HAL_RCC_OscConfig+0x5e>
 800530c:	4b8c      	ldr	r3, [pc, #560]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005318:	d10b      	bne.n	8005332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531a:	4b89      	ldr	r3, [pc, #548]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d06c      	beq.n	8005400 <HAL_RCC_OscConfig+0x12c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d168      	bne.n	8005400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e246      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x76>
 800533c:	4b80      	ldr	r3, [pc, #512]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a7f      	ldr	r2, [pc, #508]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e02e      	b.n	80053a8 <HAL_RCC_OscConfig+0xd4>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x98>
 8005352:	4b7b      	ldr	r3, [pc, #492]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a7a      	ldr	r2, [pc, #488]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b78      	ldr	r3, [pc, #480]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a77      	ldr	r2, [pc, #476]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e01d      	b.n	80053a8 <HAL_RCC_OscConfig+0xd4>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0xbc>
 8005376:	4b72      	ldr	r3, [pc, #456]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a71      	ldr	r2, [pc, #452]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800537c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	4b6f      	ldr	r3, [pc, #444]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a6e      	ldr	r2, [pc, #440]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_OscConfig+0xd4>
 8005390:	4b6b      	ldr	r3, [pc, #428]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a6a      	ldr	r2, [pc, #424]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b68      	ldr	r3, [pc, #416]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a67      	ldr	r2, [pc, #412]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 80053a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7fd f834 	bl	800241c <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fd f830 	bl	800241c <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e1fa      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ca:	4b5d      	ldr	r3, [pc, #372]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0xe4>
 80053d6:	e014      	b.n	8005402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fd f820 	bl	800241c <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fd f81c 	bl	800241c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e1e6      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f2:	4b53      	ldr	r3, [pc, #332]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x10c>
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d063      	beq.n	80054d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800540e:	4b4c      	ldr	r3, [pc, #304]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800541a:	4b49      	ldr	r3, [pc, #292]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b08      	cmp	r3, #8
 8005424:	d11c      	bne.n	8005460 <HAL_RCC_OscConfig+0x18c>
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	4b43      	ldr	r3, [pc, #268]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x176>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d001      	beq.n	800544a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e1ba      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	4b3d      	ldr	r3, [pc, #244]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4939      	ldr	r1, [pc, #228]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545e:	e03a      	b.n	80054d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d020      	beq.n	80054aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_RCC_OscConfig+0x270>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546e:	f7fc ffd5 	bl	800241c <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005476:	f7fc ffd1 	bl	800241c <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e19b      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005494:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4927      	ldr	r1, [pc, #156]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]
 80054a8:	e015      	b.n	80054d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054aa:	4b26      	ldr	r3, [pc, #152]	; (8005544 <HAL_RCC_OscConfig+0x270>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b0:	f7fc ffb4 	bl	800241c <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b8:	f7fc ffb0 	bl	800241c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e17a      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d03a      	beq.n	8005558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d019      	beq.n	800551e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <HAL_RCC_OscConfig+0x274>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f0:	f7fc ff94 	bl	800241c <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f8:	f7fc ff90 	bl	800241c <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e15a      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <HAL_RCC_OscConfig+0x26c>)
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005516:	2001      	movs	r0, #1
 8005518:	f000 fad8 	bl	8005acc <RCC_Delay>
 800551c:	e01c      	b.n	8005558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_RCC_OscConfig+0x274>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005524:	f7fc ff7a 	bl	800241c <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800552a:	e00f      	b.n	800554c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552c:	f7fc ff76 	bl	800241c <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d908      	bls.n	800554c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e140      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	42420000 	.word	0x42420000
 8005548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	4b9e      	ldr	r3, [pc, #632]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e9      	bne.n	800552c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a6 	beq.w	80056b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005566:	2300      	movs	r3, #0
 8005568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556a:	4b97      	ldr	r3, [pc, #604]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	4b94      	ldr	r3, [pc, #592]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	4a93      	ldr	r2, [pc, #588]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	61d3      	str	r3, [r2, #28]
 8005582:	4b91      	ldr	r3, [pc, #580]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005592:	4b8e      	ldr	r3, [pc, #568]	; (80057cc <HAL_RCC_OscConfig+0x4f8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d118      	bne.n	80055d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800559e:	4b8b      	ldr	r3, [pc, #556]	; (80057cc <HAL_RCC_OscConfig+0x4f8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a8a      	ldr	r2, [pc, #552]	; (80057cc <HAL_RCC_OscConfig+0x4f8>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055aa:	f7fc ff37 	bl	800241c <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b2:	f7fc ff33 	bl	800241c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b64      	cmp	r3, #100	; 0x64
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e0fd      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c4:	4b81      	ldr	r3, [pc, #516]	; (80057cc <HAL_RCC_OscConfig+0x4f8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d106      	bne.n	80055e6 <HAL_RCC_OscConfig+0x312>
 80055d8:	4b7b      	ldr	r3, [pc, #492]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	4a7a      	ldr	r2, [pc, #488]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6213      	str	r3, [r2, #32]
 80055e4:	e02d      	b.n	8005642 <HAL_RCC_OscConfig+0x36e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10c      	bne.n	8005608 <HAL_RCC_OscConfig+0x334>
 80055ee:	4b76      	ldr	r3, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	4a75      	ldr	r2, [pc, #468]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	6213      	str	r3, [r2, #32]
 80055fa:	4b73      	ldr	r3, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4a72      	ldr	r2, [pc, #456]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005600:	f023 0304 	bic.w	r3, r3, #4
 8005604:	6213      	str	r3, [r2, #32]
 8005606:	e01c      	b.n	8005642 <HAL_RCC_OscConfig+0x36e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b05      	cmp	r3, #5
 800560e:	d10c      	bne.n	800562a <HAL_RCC_OscConfig+0x356>
 8005610:	4b6d      	ldr	r3, [pc, #436]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	4a6c      	ldr	r2, [pc, #432]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	6213      	str	r3, [r2, #32]
 800561c:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	6213      	str	r3, [r2, #32]
 8005628:	e00b      	b.n	8005642 <HAL_RCC_OscConfig+0x36e>
 800562a:	4b67      	ldr	r3, [pc, #412]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	4a66      	ldr	r2, [pc, #408]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	6213      	str	r3, [r2, #32]
 8005636:	4b64      	ldr	r3, [pc, #400]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	4a63      	ldr	r2, [pc, #396]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800563c:	f023 0304 	bic.w	r3, r3, #4
 8005640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d015      	beq.n	8005676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564a:	f7fc fee7 	bl	800241c <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fc fee3 	bl	800241c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e0ab      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005668:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ee      	beq.n	8005652 <HAL_RCC_OscConfig+0x37e>
 8005674:	e014      	b.n	80056a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005676:	f7fc fed1 	bl	800241c <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567c:	e00a      	b.n	8005694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567e:	f7fc fecd 	bl	800241c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f241 3288 	movw	r2, #5000	; 0x1388
 800568c:	4293      	cmp	r3, r2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e095      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ee      	bne.n	800567e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d105      	bne.n	80056b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a6:	4b48      	ldr	r3, [pc, #288]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	4a47      	ldr	r2, [pc, #284]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80056ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8081 	beq.w	80057be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056bc:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d061      	beq.n	800578c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d146      	bne.n	800575e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d0:	4b3f      	ldr	r3, [pc, #252]	; (80057d0 <HAL_RCC_OscConfig+0x4fc>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fc fea1 	bl	800241c <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056de:	f7fc fe9d 	bl	800241c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e067      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f0:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f0      	bne.n	80056de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d108      	bne.n	8005718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005706:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	492d      	ldr	r1, [pc, #180]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a19      	ldr	r1, [r3, #32]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	430b      	orrs	r3, r1
 800572a:	4927      	ldr	r1, [pc, #156]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <HAL_RCC_OscConfig+0x4fc>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005736:	f7fc fe71 	bl	800241c <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573e:	f7fc fe6d 	bl	800241c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e037      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005750:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x46a>
 800575c:	e02f      	b.n	80057be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <HAL_RCC_OscConfig+0x4fc>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fc fe5a 	bl	800241c <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576c:	f7fc fe56 	bl	800241c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e020      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x498>
 800578a:	e018      	b.n	80057be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e013      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_OscConfig+0x4f4>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
 80057d0:	42420060 	.word	0x42420060

080057d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0d0      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057e8:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d910      	bls.n	8005818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f6:	4b67      	ldr	r3, [pc, #412]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 0207 	bic.w	r2, r3, #7
 80057fe:	4965      	ldr	r1, [pc, #404]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	4313      	orrs	r3, r2
 8005804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005806:	4b63      	ldr	r3, [pc, #396]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0b8      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005830:	4b59      	ldr	r3, [pc, #356]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a58      	ldr	r2, [pc, #352]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800583a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005848:	4b53      	ldr	r3, [pc, #332]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a52      	ldr	r2, [pc, #328]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800584e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005854:	4b50      	ldr	r3, [pc, #320]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	494d      	ldr	r1, [pc, #308]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d040      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	4b47      	ldr	r3, [pc, #284]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d115      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e07f      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d107      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005892:	4b41      	ldr	r3, [pc, #260]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e073      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a2:	4b3d      	ldr	r3, [pc, #244]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e06b      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058b2:	4b39      	ldr	r3, [pc, #228]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f023 0203 	bic.w	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4936      	ldr	r1, [pc, #216]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fc fdaa 	bl	800241c <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058cc:	f7fc fda6 	bl	800241c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e053      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e2:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 020c 	and.w	r2, r3, #12
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d1eb      	bne.n	80058cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d210      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 0207 	bic.w	r2, r3, #7
 800590a:	4922      	ldr	r1, [pc, #136]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d001      	beq.n	8005924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e032      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4916      	ldr	r1, [pc, #88]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	490e      	ldr	r1, [pc, #56]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	4313      	orrs	r3, r2
 8005960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005962:	f000 f821 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005966:	4602      	mov	r2, r0
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	490a      	ldr	r1, [pc, #40]	; (800599c <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	5ccb      	ldrb	r3, [r1, r3]
 8005976:	fa22 f303 	lsr.w	r3, r2, r3
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <HAL_RCC_ClockConfig+0x1cc>)
 800597c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fc fd08 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40022000 	.word	0x40022000
 8005998:	40021000 	.word	0x40021000
 800599c:	0800bd10 	.word	0x0800bd10
 80059a0:	20000000 	.word	0x20000000
 80059a4:	20000004 	.word	0x20000004

080059a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b490      	push	{r4, r7}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80059ae:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb0>)
 80059b0:	1d3c      	adds	r4, r7, #4
 80059b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80059b8:	f240 2301 	movw	r3, #513	; 0x201
 80059bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	2300      	movs	r3, #0
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059d2:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d002      	beq.n	80059e8 <HAL_RCC_GetSysClockFreq+0x40>
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d003      	beq.n	80059ee <HAL_RCC_GetSysClockFreq+0x46>
 80059e6:	e02d      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ea:	623b      	str	r3, [r7, #32]
      break;
 80059ec:	e02d      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	0c9b      	lsrs	r3, r3, #18
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059fa:	4413      	add	r3, r2
 80059fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005a00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	0c5b      	lsrs	r3, r3, #17
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a26:	fb02 f203 	mul.w	r2, r2, r3
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
 8005a32:	e004      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a38:	fb02 f303 	mul.w	r3, r2, r3
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	623b      	str	r3, [r7, #32]
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a46:	623b      	str	r3, [r7, #32]
      break;
 8005a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3728      	adds	r7, #40	; 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc90      	pop	{r4, r7}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	0800bad4 	.word	0x0800bad4
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	007a1200 	.word	0x007a1200
 8005a64:	003d0900 	.word	0x003d0900

08005a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a6c:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	20000000 	.word	0x20000000

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a80:	f7ff fff2 	bl	8005a68 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	0800bd20 	.word	0x0800bd20

08005aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005aa8:	f7ff ffde 	bl	8005a68 <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	0adb      	lsrs	r3, r3, #11
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4903      	ldr	r1, [pc, #12]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	0800bd20 	.word	0x0800bd20

08005acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <RCC_Delay+0x34>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <RCC_Delay+0x38>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	0a5b      	lsrs	r3, r3, #9
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ae8:	bf00      	nop
  }
  while (Delay --);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1e5a      	subs	r2, r3, #1
 8005aee:	60fa      	str	r2, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f9      	bne.n	8005ae8 <RCC_Delay+0x1c>
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr
 8005b00:	20000000 	.word	0x20000000
 8005b04:	10624dd3 	.word	0x10624dd3

08005b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d07d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b24:	2300      	movs	r3, #0
 8005b26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b28:	4b4f      	ldr	r3, [pc, #316]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10d      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b34:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	4a4b      	ldr	r2, [pc, #300]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	61d3      	str	r3, [r2, #28]
 8005b40:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b50:	4b46      	ldr	r3, [pc, #280]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d118      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b5c:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a42      	ldr	r2, [pc, #264]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b68:	f7fc fc58 	bl	800241c <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6e:	e008      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b70:	f7fc fc54 	bl	800241c <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b64      	cmp	r3, #100	; 0x64
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e06d      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b82:	4b3a      	ldr	r3, [pc, #232]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02e      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d027      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bac:	4b2e      	ldr	r3, [pc, #184]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bb6:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bbc:	4b2c      	ldr	r3, [pc, #176]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005bc2:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd2:	f7fc fc23 	bl	800241c <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bda:	f7fc fc1f 	bl	800241c <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e036      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0ee      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4917      	ldr	r1, [pc, #92]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c14:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	490b      	ldr	r1, [pc, #44]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c4a:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	4904      	ldr	r1, [pc, #16]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40007000 	.word	0x40007000
 8005c70:	42420440 	.word	0x42420440

08005c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e041      	b.n	8005d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc fa16 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f000 fc28 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d001      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e03a      	b.n	8005da2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a18      	ldr	r2, [pc, #96]	; (8005dac <HAL_TIM_Base_Start_IT+0x98>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x58>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d009      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x58>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x58>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d111      	bne.n	8005d90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	d010      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0201 	orr.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	e007      	b.n	8005da0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800

08005db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e041      	b.n	8005e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f839 	bl	8005e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 fb86 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_TIM_PWM_Start+0x24>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e022      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d109      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x3e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e015      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x58>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e008      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e05e      	b.n	8005f98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0x82>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0x92>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xa2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fd74 	bl	8006a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_TIM_PWM_Start+0x138>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <HAL_TIM_PWM_Start+0x138>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_TIM_PWM_Start+0xfa>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIM_PWM_Start+0xfa>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <HAL_TIM_PWM_Start+0x13c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIM_PWM_Start+0xfa>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_TIM_PWM_Start+0x140>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d111      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d010      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f84:	e007      	b.n	8005f96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800

08005fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0202 	mvn.w	r2, #2
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa6f 	bl	80064d2 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa62 	bl	80064c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa71 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b04      	cmp	r3, #4
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b04      	cmp	r3, #4
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0204 	mvn.w	r2, #4
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa45 	bl	80064d2 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa38 	bl	80064c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa47 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b08      	cmp	r3, #8
 8006068:	d122      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b08      	cmp	r3, #8
 8006076:	d11b      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0208 	mvn.w	r2, #8
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2204      	movs	r2, #4
 8006086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa1b 	bl	80064d2 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa0e 	bl	80064c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fa1d 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d122      	bne.n	8006104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d11b      	bne.n	8006104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0210 	mvn.w	r2, #16
 80060d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2208      	movs	r2, #8
 80060da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f9f1 	bl	80064d2 <HAL_TIM_IC_CaptureCallback>
 80060f0:	e005      	b.n	80060fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9e4 	bl	80064c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f9f3 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b01      	cmp	r3, #1
 8006110:	d10e      	bne.n	8006130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d107      	bne.n	8006130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0201 	mvn.w	r2, #1
 8006128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fa f894 	bl	8000258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b80      	cmp	r3, #128	; 0x80
 800613c:	d10e      	bne.n	800615c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d107      	bne.n	800615c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fce1 	bl	8006b1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f9b7 	bl	80064f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0220 	mvn.w	r2, #32
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fcac 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e0ac      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x174>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	f200 809f 	bhi.w	8006324 <HAL_TIM_PWM_ConfigChannel+0x168>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006221 	.word	0x08006221
 80061f0:	08006325 	.word	0x08006325
 80061f4:	08006325 	.word	0x08006325
 80061f8:	08006325 	.word	0x08006325
 80061fc:	08006261 	.word	0x08006261
 8006200:	08006325 	.word	0x08006325
 8006204:	08006325 	.word	0x08006325
 8006208:	08006325 	.word	0x08006325
 800620c:	080062a3 	.word	0x080062a3
 8006210:	08006325 	.word	0x08006325
 8006214:	08006325 	.word	0x08006325
 8006218:	08006325 	.word	0x08006325
 800621c:	080062e3 	.word	0x080062e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f9d0 	bl	80065cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0208 	orr.w	r2, r2, #8
 800623a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0204 	bic.w	r2, r2, #4
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	619a      	str	r2, [r3, #24]
      break;
 800625e:	e062      	b.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fa16 	bl	8006698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	021a      	lsls	r2, r3, #8
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]
      break;
 80062a0:	e041      	b.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fa5f 	bl	800676c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0208 	orr.w	r2, r2, #8
 80062bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0204 	bic.w	r2, r2, #4
 80062cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	61da      	str	r2, [r3, #28]
      break;
 80062e0:	e021      	b.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 faa9 	bl	8006840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	021a      	lsls	r2, r3, #8
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	61da      	str	r2, [r3, #28]
      break;
 8006322:	e000      	b.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_ConfigClockSource+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e0b3      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x180>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800636e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d03e      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0xd0>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	f200 8087 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	f000 8085 	beq.w	80064a4 <HAL_TIM_ConfigClockSource+0x16c>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639e:	d87f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d01a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xa2>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d87b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d050      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x116>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d877      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063b0:	2b50      	cmp	r3, #80	; 0x50
 80063b2:	d03c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xf6>
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d873      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d058      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x136>
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d86f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d064      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x156>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d86b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d060      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x156>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d867      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x156>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d05a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063d8:	e062      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f000 faee 	bl	80069ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	609a      	str	r2, [r3, #8]
      break;
 8006406:	e04e      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f000 fad7 	bl	80069ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e03b      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fa4e 	bl	80068dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2150      	movs	r1, #80	; 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f000 faa5 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800644c:	e02b      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fa6c 	bl	8006938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2160      	movs	r1, #96	; 0x60
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fa95 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800646c:	e01b      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fa2e 	bl	80068dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2140      	movs	r1, #64	; 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fa85 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800648c:	e00b      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fa7c 	bl	8006996 <TIM_ITRx_SetConfig>
        break;
 800649e:	e002      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064a0:	bf00      	nop
 80064a2:	e000      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr

080064d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <TIM_Base_SetConfig+0xb8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0x30>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0x30>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <TIM_Base_SetConfig+0xbc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0x30>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <TIM_Base_SetConfig+0xc0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <TIM_Base_SetConfig+0xb8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <TIM_Base_SetConfig+0x62>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d007      	beq.n	800656a <TIM_Base_SetConfig+0x62>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <TIM_Base_SetConfig+0xbc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_Base_SetConfig+0x62>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <TIM_Base_SetConfig+0xc0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d108      	bne.n	800657c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a07      	ldr	r2, [pc, #28]	; (80065c0 <TIM_Base_SetConfig+0xb8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d103      	bne.n	80065b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	615a      	str	r2, [r3, #20]
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800

080065cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <TIM_OC1_SetConfig+0xc8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10c      	bne.n	8006642 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0308 	bic.w	r3, r3, #8
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <TIM_OC1_SetConfig+0xc8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00

08006698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0210 	bic.w	r2, r3, #16
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0320 	bic.w	r3, r3, #32
 80066e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <TIM_OC2_SetConfig+0xd0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d10d      	bne.n	8006714 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a14      	ldr	r2, [pc, #80]	; (8006768 <TIM_OC2_SetConfig+0xd0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d113      	bne.n	8006744 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr
 8006768:	40012c00 	.word	0x40012c00

0800676c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1d      	ldr	r2, [pc, #116]	; (800683c <TIM_OC3_SetConfig+0xd0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d10d      	bne.n	80067e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a14      	ldr	r2, [pc, #80]	; (800683c <TIM_OC3_SetConfig+0xd0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d113      	bne.n	8006816 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	621a      	str	r2, [r3, #32]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00

08006840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800688a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	031b      	lsls	r3, r3, #12
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0f      	ldr	r2, [pc, #60]	; (80068d8 <TIM_OC4_SetConfig+0x98>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d109      	bne.n	80068b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	019b      	lsls	r3, r3, #6
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00

080068dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f023 0201 	bic.w	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f023 030a 	bic.w	r3, r3, #10
 8006918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f023 0210 	bic.w	r2, r3, #16
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006962:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	031b      	lsls	r3, r3, #12
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	621a      	str	r2, [r3, #32]
}
 800698c:	bf00      	nop
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f043 0307 	orr.w	r3, r3, #7
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	609a      	str	r2, [r3, #8]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b087      	sub	sp, #28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	021a      	lsls	r2, r3, #8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	609a      	str	r2, [r3, #8]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	401a      	ands	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a1a      	ldr	r2, [r3, #32]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e046      	b.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab4:	d009      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a12      	ldr	r2, [pc, #72]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a10      	ldr	r2, [pc, #64]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e03f      	b.n	8006bc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb fb2e 	bl	80021b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2224      	movs	r2, #36	; 0x24
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fc35 	bl	80073e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d11d      	bne.n	8006c20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_UART_Receive_IT+0x26>
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e016      	b.n	8006c22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Receive_IT+0x38>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e00f      	b.n	8006c22 <HAL_UART_Receive_IT+0x58>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	461a      	mov	r2, r3
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fa42 	bl	80070a0 <UART_Start_Receive_IT>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	e000      	b.n	8006c22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d107      	bne.n	8006c6c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0210 	bic.w	r2, r2, #16
 8006c6a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d02d      	beq.n	8006cd6 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	695a      	ldr	r2, [r3, #20]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c88:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d013      	beq.n	8006cba <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <HAL_UART_AbortReceive_IT+0xd0>)
 8006c98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fc f9ae 	bl	8003000 <HAL_DMA_Abort_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d022      	beq.n	8006cf0 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
 8006cb8:	e01a      	b.n	8006cf0 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9d2 	bl	8007078 <HAL_UART_AbortReceiveCpltCallback>
 8006cd4:	e00c      	b.n	8006cf0 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f9c4 	bl	8007078 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08007193 	.word	0x08007193

08006d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_UART_IRQHandler+0x52>
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 faa0 	bl	8007290 <UART_Receive_IT>
      return;
 8006d50:	e17b      	b.n	800704a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80b1 	beq.w	8006ebc <HAL_UART_IRQHandler+0x1bc>
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <HAL_UART_IRQHandler+0x70>
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80a6 	beq.w	8006ebc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <HAL_UART_IRQHandler+0x90>
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	f043 0201 	orr.w	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <HAL_UART_IRQHandler+0xb0>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	f043 0202 	orr.w	r2, r3, #2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <HAL_UART_IRQHandler+0xd0>
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	f043 0204 	orr.w	r2, r3, #4
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00f      	beq.n	8006dfa <HAL_UART_IRQHandler+0xfa>
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <HAL_UART_IRQHandler+0xee>
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f043 0208 	orr.w	r2, r3, #8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 811e 	beq.w	8007040 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <HAL_UART_IRQHandler+0x11e>
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa39 	bl	8007290 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bf14      	ite	ne
 8006e2c:	2301      	movne	r3, #1
 8006e2e:	2300      	moveq	r3, #0
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <HAL_UART_IRQHandler+0x146>
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d031      	beq.n	8006eaa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f963 	bl	8007112 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d023      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695a      	ldr	r2, [r3, #20]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d013      	beq.n	8006e9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	4a76      	ldr	r2, [pc, #472]	; (8007050 <HAL_UART_IRQHandler+0x350>)
 8006e78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fc f8be 	bl	8003000 <HAL_DMA_Abort_IT>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	e00e      	b.n	8006eb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8e3 	bl	8007066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	e00a      	b.n	8006eb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8df 	bl	8007066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	e006      	b.n	8006eb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8db 	bl	8007066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006eb6:	e0c3      	b.n	8007040 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	bf00      	nop
    return;
 8006eba:	e0c1      	b.n	8007040 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	f040 80a1 	bne.w	8007008 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 809b 	beq.w	8007008 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8095 	beq.w	8007008 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04e      	beq.n	8006fa0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006f0c:	8a3b      	ldrh	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8098 	beq.w	8007044 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f18:	8a3a      	ldrh	r2, [r7, #16]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f080 8092 	bcs.w	8007044 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8a3a      	ldrh	r2, [r7, #16]
 8006f24:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d02b      	beq.n	8006f88 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f3e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695a      	ldr	r2, [r3, #20]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0210 	bic.w	r2, r2, #16
 8006f7c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fc f801 	bl	8002f8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f876 	bl	800708a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f9e:	e051      	b.n	8007044 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d047      	beq.n	8007048 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006fb8:	8a7b      	ldrh	r3, [r7, #18]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d044      	beq.n	8007048 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fcc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0201 	bic.w	r2, r2, #1
 8006fdc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0210 	bic.w	r2, r2, #16
 8006ffa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ffc:	8a7b      	ldrh	r3, [r7, #18]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f842 	bl	800708a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007006:	e01f      	b.n	8007048 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <HAL_UART_IRQHandler+0x324>
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f8d0 	bl	80071c2 <UART_Transmit_IT>
    return;
 8007022:	e012      	b.n	800704a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <HAL_UART_IRQHandler+0x34a>
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f911 	bl	8007260 <UART_EndTransmit_IT>
    return;
 800703e:	e004      	b.n	800704a <HAL_UART_IRQHandler+0x34a>
    return;
 8007040:	bf00      	nop
 8007042:	e002      	b.n	800704a <HAL_UART_IRQHandler+0x34a>
      return;
 8007044:	bf00      	nop
 8007046:	e000      	b.n	800704a <HAL_UART_IRQHandler+0x34a>
      return;
 8007048:	bf00      	nop
  }
}
 800704a:	3728      	adds	r7, #40	; 0x28
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	0800716b 	.word	0x0800716b

08007054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr

08007066 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr

08007078 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr

0800708a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	460b      	mov	r3, r1
 8007094:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	88fa      	ldrh	r2, [r7, #6]
 80070b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	88fa      	ldrh	r2, [r7, #6]
 80070be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2222      	movs	r2, #34	; 0x22
 80070ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0201 	orr.w	r2, r2, #1
 80070f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0220 	orr.w	r2, r2, #32
 8007104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007128:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695a      	ldr	r2, [r3, #20]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	2b01      	cmp	r3, #1
 8007140:	d107      	bne.n	8007152 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0210 	bic.w	r2, r2, #16
 8007150:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff ff6e 	bl	8007066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff ff5f 	bl	8007078 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b21      	cmp	r3, #33	; 0x21
 80071d4:	d13e      	bne.n	8007254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d114      	bne.n	800720a <UART_Transmit_IT+0x48>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d110      	bne.n	800720a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	1c9a      	adds	r2, r3, #2
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	621a      	str	r2, [r3, #32]
 8007208:	e008      	b.n	800721c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	1c59      	adds	r1, r3, #1
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6211      	str	r1, [r2, #32]
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4619      	mov	r1, r3
 800722a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10f      	bne.n	8007250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800723e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800724e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	e000      	b.n	8007256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007254:	2302      	movs	r3, #2
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007276:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fee7 	bl	8007054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b22      	cmp	r3, #34	; 0x22
 80072a2:	f040 8099 	bne.w	80073d8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ae:	d117      	bne.n	80072e0 <UART_Receive_IT+0x50>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d113      	bne.n	80072e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	1c9a      	adds	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	629a      	str	r2, [r3, #40]	; 0x28
 80072de:	e026      	b.n	800732e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d007      	beq.n	8007304 <UART_Receive_IT+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <UART_Receive_IT+0x82>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e008      	b.n	8007324 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731e:	b2da      	uxtb	r2, r3
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29b      	uxth	r3, r3
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4619      	mov	r1, r3
 800733c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800733e:	2b00      	cmp	r3, #0
 8007340:	d148      	bne.n	80073d4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0220 	bic.w	r2, r2, #32
 8007350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695a      	ldr	r2, [r3, #20]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	2b01      	cmp	r3, #1
 8007380:	d123      	bne.n	80073ca <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0210 	bic.w	r2, r2, #16
 8007396:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d10a      	bne.n	80073bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff fe61 	bl	800708a <HAL_UARTEx_RxEventCallback>
 80073c8:	e002      	b.n	80073d0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7f9 fc12 	bl	8000bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e002      	b.n	80073da <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800741e:	f023 030c 	bic.w	r3, r3, #12
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	430b      	orrs	r3, r1
 800742a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2c      	ldr	r2, [pc, #176]	; (80074f8 <UART_SetConfig+0x114>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d103      	bne.n	8007454 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800744c:	f7fe fb2a 	bl	8005aa4 <HAL_RCC_GetPCLK2Freq>
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	e002      	b.n	800745a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007454:	f7fe fb12 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8007458:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009a      	lsls	r2, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007470:	4a22      	ldr	r2, [pc, #136]	; (80074fc <UART_SetConfig+0x118>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	095b      	lsrs	r3, r3, #5
 8007478:	0119      	lsls	r1, r3, #4
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009a      	lsls	r2, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007490:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <UART_SetConfig+0x118>)
 8007492:	fba3 0302 	umull	r0, r3, r3, r2
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2064      	movs	r0, #100	; 0x64
 800749a:	fb00 f303 	mul.w	r3, r0, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	3332      	adds	r3, #50	; 0x32
 80074a4:	4a15      	ldr	r2, [pc, #84]	; (80074fc <UART_SetConfig+0x118>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074b0:	4419      	add	r1, r3
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <UART_SetConfig+0x118>)
 80074ca:	fba3 0302 	umull	r0, r3, r3, r2
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	2064      	movs	r0, #100	; 0x64
 80074d2:	fb00 f303 	mul.w	r3, r0, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	3332      	adds	r3, #50	; 0x32
 80074dc:	4a07      	ldr	r2, [pc, #28]	; (80074fc <UART_SetConfig+0x118>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	f003 020f 	and.w	r2, r3, #15
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	440a      	add	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40013800 	.word	0x40013800
 80074fc:	51eb851f 	.word	0x51eb851f

08007500 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007500:	b084      	sub	sp, #16
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	f107 0014 	add.w	r0, r7, #20
 800750e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	b004      	add	sp, #16
 800751e:	4770      	bx	lr

08007520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007530:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007534:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	b29a      	uxth	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007554:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007558:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	b29b      	uxth	r3, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	b29b      	uxth	r3, r3
 800756a:	4013      	ands	r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007598:	b084      	sub	sp, #16
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	f107 0014 	add.w	r0, r7, #20
 80075a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	b004      	add	sp, #16
 80075d6:	4770      	bx	lr

080075d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075d8:	b480      	push	{r7}
 80075da:	b09b      	sub	sp, #108	; 0x6c
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	78db      	ldrb	r3, [r3, #3]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d81f      	bhi.n	800764a <USB_ActivateEndpoint+0x72>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <USB_ActivateEndpoint+0x38>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007621 	.word	0x08007621
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007653 	.word	0x08007653
 800761c:	0800762f 	.word	0x0800762f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007620:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007628:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800762c:	e012      	b.n	8007654 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800762e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007632:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007636:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800763a:	e00b      	b.n	8007654 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800763c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007644:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007648:	e004      	b.n	8007654 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007650:	e000      	b.n	8007654 <USB_ActivateEndpoint+0x7c>
      break;
 8007652:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	441a      	add	r2, r3
 800765e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800766e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007672:	b29b      	uxth	r3, r3
 8007674:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768c:	b29a      	uxth	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80076a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	7b1b      	ldrb	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8149 	bne.w	8007958 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8084 	beq.w	80077d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	011a      	lsls	r2, r3, #4
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	88db      	ldrh	r3, [r3, #6]
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	81fb      	strh	r3, [r7, #14]
 8007712:	89fb      	ldrh	r3, [r7, #14]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01b      	beq.n	8007754 <USB_ActivateEndpoint+0x17c>
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	81bb      	strh	r3, [r7, #12]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	441a      	add	r2, r3
 800773e:	89bb      	ldrh	r3, [r7, #12]
 8007740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d020      	beq.n	800779e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007772:	813b      	strh	r3, [r7, #8]
 8007774:	893b      	ldrh	r3, [r7, #8]
 8007776:	f083 0320 	eor.w	r3, r3, #32
 800777a:	813b      	strh	r3, [r7, #8]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	893b      	ldrh	r3, [r7, #8]
 8007788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	b29b      	uxth	r3, r3
 800779a:	8013      	strh	r3, [r2, #0]
 800779c:	e27f      	b.n	8007c9e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b4:	817b      	strh	r3, [r7, #10]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	441a      	add	r2, r3
 80077c0:	897b      	ldrh	r3, [r7, #10]
 80077c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	8013      	strh	r3, [r2, #0]
 80077d6:	e262      	b.n	8007c9e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	4413      	add	r3, r2
 80077ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	011a      	lsls	r2, r3, #4
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	88db      	ldrh	r3, [r3, #6]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	b29b      	uxth	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	4413      	add	r3, r2
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	011a      	lsls	r2, r3, #4
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	4413      	add	r3, r2
 800782a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800782e:	623b      	str	r3, [r7, #32]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d112      	bne.n	800785e <USB_ActivateEndpoint+0x286>
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007842:	b29a      	uxth	r2, r3
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007856:	b29a      	uxth	r2, r3
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e02f      	b.n	80078be <USB_ActivateEndpoint+0x2e6>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b3e      	cmp	r3, #62	; 0x3e
 8007864:	d813      	bhi.n	800788e <USB_ActivateEndpoint+0x2b6>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	663b      	str	r3, [r7, #96]	; 0x60
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <USB_ActivateEndpoint+0x2a8>
 800787a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800787c:	3301      	adds	r3, #1
 800787e:	663b      	str	r3, [r7, #96]	; 0x60
 8007880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29a      	uxth	r2, r3
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e017      	b.n	80078be <USB_ActivateEndpoint+0x2e6>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	663b      	str	r3, [r7, #96]	; 0x60
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d102      	bne.n	80078a8 <USB_ActivateEndpoint+0x2d0>
 80078a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a4:	3b01      	subs	r3, #1
 80078a6:	663b      	str	r3, [r7, #96]	; 0x60
 80078a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	029b      	lsls	r3, r3, #10
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	83fb      	strh	r3, [r7, #30]
 80078cc:	8bfb      	ldrh	r3, [r7, #30]
 80078ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01b      	beq.n	800790e <USB_ActivateEndpoint+0x336>
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ec:	83bb      	strh	r3, [r7, #28]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	441a      	add	r2, r3
 80078f8:	8bbb      	ldrh	r3, [r7, #28]
 80078fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	b29b      	uxth	r3, r3
 800790c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007924:	837b      	strh	r3, [r7, #26]
 8007926:	8b7b      	ldrh	r3, [r7, #26]
 8007928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800792c:	837b      	strh	r3, [r7, #26]
 800792e:	8b7b      	ldrh	r3, [r7, #26]
 8007930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007934:	837b      	strh	r3, [r7, #26]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	8b7b      	ldrh	r3, [r7, #26]
 8007942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007952:	b29b      	uxth	r3, r3
 8007954:	8013      	strh	r3, [r2, #0]
 8007956:	e1a2      	b.n	8007c9e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007988:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800798c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007990:	b29b      	uxth	r3, r3
 8007992:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	65bb      	str	r3, [r7, #88]	; 0x58
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a4:	4413      	add	r3, r2
 80079a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	011a      	lsls	r2, r3, #4
 80079ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b6:	657b      	str	r3, [r7, #84]	; 0x54
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	891b      	ldrh	r3, [r3, #8]
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	b29b      	uxth	r3, r3
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	653b      	str	r3, [r7, #80]	; 0x50
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d8:	4413      	add	r3, r2
 80079da:	653b      	str	r3, [r7, #80]	; 0x50
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	011a      	lsls	r2, r3, #4
 80079e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80079ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	895b      	ldrh	r3, [r3, #10]
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 8091 	bne.w	8007b28 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01b      	beq.n	8007a56 <USB_ActivateEndpoint+0x47e>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01b      	beq.n	8007aa6 <USB_ActivateEndpoint+0x4ce>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007abe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ac4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ac6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007acc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b04:	867b      	strh	r3, [r7, #50]	; 0x32
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8013      	strh	r3, [r2, #0]
 8007b26:	e0ba      	b.n	8007c9e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01d      	beq.n	8007b80 <USB_ActivateEndpoint+0x5a8>
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01d      	beq.n	8007bd8 <USB_ActivateEndpoint+0x600>
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	441a      	add	r2, r3
 8007bc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	78db      	ldrb	r3, [r3, #3]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d024      	beq.n	8007c2a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bfe:	f083 0320 	eor.w	r3, r3, #32
 8007c02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	8013      	strh	r3, [r2, #0]
 8007c28:	e01d      	b.n	8007c66 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	441a      	add	r2, r3
 8007c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	376c      	adds	r7, #108	; 0x6c
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b08d      	sub	sp, #52	; 0x34
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	7b1b      	ldrb	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 808e 	bne.w	8007ddc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d044      	beq.n	8007d52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	81bb      	strh	r3, [r7, #12]
 8007cd6:	89bb      	ldrh	r3, [r7, #12]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <USB_DeactivateEndpoint+0x6c>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	817b      	strh	r3, [r7, #10]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d2e:	813b      	strh	r3, [r7, #8]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	441a      	add	r2, r3
 8007d3a:	893b      	ldrh	r3, [r7, #8]
 8007d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	8013      	strh	r3, [r2, #0]
 8007d50:	e192      	b.n	8008078 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	827b      	strh	r3, [r7, #18]
 8007d60:	8a7b      	ldrh	r3, [r7, #18]
 8007d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01b      	beq.n	8007da2 <USB_DeactivateEndpoint+0xf6>
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	823b      	strh	r3, [r7, #16]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	8a3b      	ldrh	r3, [r7, #16]
 8007d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	81fb      	strh	r3, [r7, #14]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	8013      	strh	r3, [r2, #0]
 8007dda:	e14d      	b.n	8008078 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 80a5 	bne.w	8007f30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	843b      	strh	r3, [r7, #32]
 8007df4:	8c3b      	ldrh	r3, [r7, #32]
 8007df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d01b      	beq.n	8007e36 <USB_DeactivateEndpoint+0x18a>
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e14:	83fb      	strh	r3, [r7, #30]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	441a      	add	r2, r3
 8007e20:	8bfb      	ldrh	r3, [r7, #30]
 8007e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	83bb      	strh	r3, [r7, #28]
 8007e44:	8bbb      	ldrh	r3, [r7, #28]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01b      	beq.n	8007e86 <USB_DeactivateEndpoint+0x1da>
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e64:	837b      	strh	r3, [r7, #26]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	441a      	add	r2, r3
 8007e70:	8b7b      	ldrh	r3, [r7, #26]
 8007e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9c:	833b      	strh	r3, [r7, #24]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	441a      	add	r2, r3
 8007ea8:	8b3b      	ldrh	r3, [r7, #24]
 8007eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed4:	82fb      	strh	r3, [r7, #22]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	441a      	add	r2, r3
 8007ee0:	8afb      	ldrh	r3, [r7, #22]
 8007ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f0c:	82bb      	strh	r3, [r7, #20]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	441a      	add	r2, r3
 8007f18:	8abb      	ldrh	r3, [r7, #20]
 8007f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]
 8007f2e:	e0a3      	b.n	8008078 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d01b      	beq.n	8007f80 <USB_DeactivateEndpoint+0x2d4>
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	441a      	add	r2, r3
 8007f6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01b      	beq.n	8007fd0 <USB_DeactivateEndpoint+0x324>
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fae:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	441a      	add	r2, r3
 8007fba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	441a      	add	r2, r3
 8007ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008004:	b29b      	uxth	r3, r3
 8008006:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800801a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800802c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	b29b      	uxth	r3, r3
 800803e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	847b      	strh	r3, [r7, #34]	; 0x22
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	441a      	add	r2, r3
 8008062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008074:	b29b      	uxth	r3, r3
 8008076:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3734      	adds	r7, #52	; 0x34
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0cc      	sub	sp, #304	; 0x130
 8008088:	af00      	add	r7, sp, #0
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	6018      	str	r0, [r3, #0]
 800808e:	463b      	mov	r3, r7
 8008090:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008092:	463b      	mov	r3, r7
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b01      	cmp	r3, #1
 800809a:	f040 872e 	bne.w	8008efa <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800809e:	463b      	mov	r3, r7
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699a      	ldr	r2, [r3, #24]
 80080a4:	463b      	mov	r3, r7
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d905      	bls.n	80080ba <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80080ae:	463b      	mov	r3, r7
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80080b8:	e004      	b.n	80080c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80080ba:	463b      	mov	r3, r7
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080c4:	463b      	mov	r3, r7
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	7b1b      	ldrb	r3, [r3, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d134      	bne.n	8008138 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080ce:	463b      	mov	r3, r7
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6959      	ldr	r1, [r3, #20]
 80080d4:	463b      	mov	r3, r7
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	88da      	ldrh	r2, [r3, #6]
 80080da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080de:	b29b      	uxth	r3, r3
 80080e0:	1d38      	adds	r0, r7, #4
 80080e2:	6800      	ldr	r0, [r0, #0]
 80080e4:	f001 fc03 	bl	80098ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	1d3a      	adds	r2, r7, #4
 80080ee:	6812      	ldr	r2, [r2, #0]
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4619      	mov	r1, r3
 80080fe:	f107 0310 	add.w	r3, r7, #16
 8008102:	f107 0210 	add.w	r2, r7, #16
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	440a      	add	r2, r1
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	463b      	mov	r3, r7
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	011a      	lsls	r2, r3, #4
 8008114:	f107 0310 	add.w	r3, r7, #16
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4413      	add	r3, r2
 800811c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812a:	b29a      	uxth	r2, r3
 800812c:	f107 030c 	add.w	r3, r7, #12
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	f000 beac 	b.w	8008e90 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	78db      	ldrb	r3, [r3, #3]
 800813e:	2b02      	cmp	r3, #2
 8008140:	f040 838c 	bne.w	800885c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008144:	463b      	mov	r3, r7
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	463b      	mov	r3, r7
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	f240 8330 	bls.w	80087b6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008156:	1d3b      	adds	r3, r7, #4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008170:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008174:	1d3b      	adds	r3, r7, #4
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	463b      	mov	r3, r7
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800818a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008196:	b29b      	uxth	r3, r3
 8008198:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800819a:	463b      	mov	r3, r7
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a4:	1ad2      	subs	r2, r2, r3
 80081a6:	463b      	mov	r3, r7
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081ac:	1d3b      	adds	r3, r7, #4
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 819e 	beq.w	8008504 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081cc:	1d3a      	adds	r2, r7, #4
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d17a      	bne.n	80082d2 <USB_EPStartXfer+0x24e>
 80081dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081e0:	1d3a      	adds	r2, r7, #4
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	1d3b      	adds	r3, r7, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4619      	mov	r1, r3
 80081f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	440a      	add	r2, r1
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	463b      	mov	r3, r7
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	011a      	lsls	r2, r3, #4
 8008208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4413      	add	r3, r2
 8008210:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d11a      	bne.n	8008258 <USB_EPStartXfer+0x1d4>
 8008222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008230:	b29a      	uxth	r2, r3
 8008232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	e062      	b.n	800831e <USB_EPStartXfer+0x29a>
 8008258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800825c:	2b3e      	cmp	r3, #62	; 0x3e
 800825e:	d819      	bhi.n	8008294 <USB_EPStartXfer+0x210>
 8008260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800826a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <USB_EPStartXfer+0x1fc>
 8008276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800827a:	3301      	adds	r3, #1
 800827c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008280:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008284:	b29b      	uxth	r3, r3
 8008286:	029b      	lsls	r3, r3, #10
 8008288:	b29a      	uxth	r2, r3
 800828a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e044      	b.n	800831e <USB_EPStartXfer+0x29a>
 8008294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800829e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <USB_EPStartXfer+0x230>
 80082aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	029b      	lsls	r3, r3, #10
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	e025      	b.n	800831e <USB_EPStartXfer+0x29a>
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d120      	bne.n	800831e <USB_EPStartXfer+0x29a>
 80082dc:	1d3b      	adds	r3, r7, #4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	4619      	mov	r1, r3
 80082e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	440a      	add	r2, r1
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	463b      	mov	r3, r7
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	011a      	lsls	r2, r3, #4
 80082fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4413      	add	r3, r2
 8008306:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800830a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008314:	b29a      	uxth	r2, r3
 8008316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	895b      	ldrh	r3, [r3, #10]
 8008324:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008328:	463b      	mov	r3, r7
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6959      	ldr	r1, [r3, #20]
 800832e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008332:	b29b      	uxth	r3, r3
 8008334:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008338:	1d38      	adds	r0, r7, #4
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	f001 fad7 	bl	80098ee <USB_WritePMA>
            ep->xfer_buff += len;
 8008340:	463b      	mov	r3, r7
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	695a      	ldr	r2, [r3, #20]
 8008346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834a:	441a      	add	r2, r3
 800834c:	463b      	mov	r3, r7
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008352:	463b      	mov	r3, r7
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	463b      	mov	r3, r7
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	429a      	cmp	r2, r3
 8008360:	d909      	bls.n	8008376 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008362:	463b      	mov	r3, r7
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836c:	1ad2      	subs	r2, r2, r3
 800836e:	463b      	mov	r3, r7
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	621a      	str	r2, [r3, #32]
 8008374:	e008      	b.n	8008388 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008376:	463b      	mov	r3, r7
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008380:	463b      	mov	r3, r7
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2200      	movs	r2, #0
 8008386:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d17a      	bne.n	8008488 <USB_EPStartXfer+0x404>
 8008392:	f107 0318 	add.w	r3, r7, #24
 8008396:	1d3a      	adds	r2, r7, #4
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	1d3b      	adds	r3, r7, #4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	4619      	mov	r1, r3
 80083a8:	f107 0318 	add.w	r3, r7, #24
 80083ac:	f107 0218 	add.w	r2, r7, #24
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	440a      	add	r2, r1
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	463b      	mov	r3, r7
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	011a      	lsls	r2, r3, #4
 80083be:	f107 0318 	add.w	r3, r7, #24
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80083ca:	f107 0314 	add.w	r3, r7, #20
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11a      	bne.n	800840e <USB_EPStartXfer+0x38a>
 80083d8:	f107 0314 	add.w	r3, r7, #20
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	f107 0314 	add.w	r3, r7, #20
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008402:	b29a      	uxth	r2, r3
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	e067      	b.n	80084de <USB_EPStartXfer+0x45a>
 800840e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008412:	2b3e      	cmp	r3, #62	; 0x3e
 8008414:	d819      	bhi.n	800844a <USB_EPStartXfer+0x3c6>
 8008416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <USB_EPStartXfer+0x3b2>
 800842c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008430:	3301      	adds	r3, #1
 8008432:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008436:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800843a:	b29b      	uxth	r3, r3
 800843c:	029b      	lsls	r3, r3, #10
 800843e:	b29a      	uxth	r2, r3
 8008440:	f107 0314 	add.w	r3, r7, #20
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	e049      	b.n	80084de <USB_EPStartXfer+0x45a>
 800844a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <USB_EPStartXfer+0x3e6>
 8008460:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008464:	3b01      	subs	r3, #1
 8008466:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800846a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800846e:	b29b      	uxth	r3, r3
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	b29b      	uxth	r3, r3
 8008474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847c:	b29a      	uxth	r2, r3
 800847e:	f107 0314 	add.w	r3, r7, #20
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e02a      	b.n	80084de <USB_EPStartXfer+0x45a>
 8008488:	463b      	mov	r3, r7
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d125      	bne.n	80084de <USB_EPStartXfer+0x45a>
 8008492:	f107 0320 	add.w	r3, r7, #32
 8008496:	1d3a      	adds	r2, r7, #4
 8008498:	6812      	ldr	r2, [r2, #0]
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	1d3b      	adds	r3, r7, #4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	f107 0320 	add.w	r3, r7, #32
 80084ac:	f107 0220 	add.w	r2, r7, #32
 80084b0:	6812      	ldr	r2, [r2, #0]
 80084b2:	440a      	add	r2, r1
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	463b      	mov	r3, r7
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	011a      	lsls	r2, r3, #4
 80084be:	f107 0320 	add.w	r3, r7, #32
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4413      	add	r3, r2
 80084c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084ca:	f107 031c 	add.w	r3, r7, #28
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	f107 031c 	add.w	r3, r7, #28
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084de:	463b      	mov	r3, r7
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	891b      	ldrh	r3, [r3, #8]
 80084e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084e8:	463b      	mov	r3, r7
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6959      	ldr	r1, [r3, #20]
 80084ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80084f8:	1d38      	adds	r0, r7, #4
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	f001 f9f7 	bl	80098ee <USB_WritePMA>
 8008500:	f000 bcc6 	b.w	8008e90 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008504:	463b      	mov	r3, r7
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d164      	bne.n	80085d8 <USB_EPStartXfer+0x554>
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	64bb      	str	r3, [r7, #72]	; 0x48
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008522:	4413      	add	r3, r2
 8008524:	64bb      	str	r3, [r7, #72]	; 0x48
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	011a      	lsls	r2, r3, #4
 800852e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008530:	4413      	add	r3, r2
 8008532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008536:	647b      	str	r3, [r7, #68]	; 0x44
 8008538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d112      	bne.n	8008566 <USB_EPStartXfer+0x4e2>
 8008540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800854a:	b29a      	uxth	r2, r3
 800854c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855e:	b29a      	uxth	r2, r3
 8008560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	e057      	b.n	8008616 <USB_EPStartXfer+0x592>
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	2b3e      	cmp	r3, #62	; 0x3e
 800856c:	d817      	bhi.n	800859e <USB_EPStartXfer+0x51a>
 800856e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <USB_EPStartXfer+0x50a>
 8008584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008588:	3301      	adds	r3, #1
 800858a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800858e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008592:	b29b      	uxth	r3, r3
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	b29a      	uxth	r2, r3
 8008598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	e03b      	b.n	8008616 <USB_EPStartXfer+0x592>
 800859e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80085a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <USB_EPStartXfer+0x53a>
 80085b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085b8:	3b01      	subs	r3, #1
 80085ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80085be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	029b      	lsls	r3, r3, #10
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e01e      	b.n	8008616 <USB_EPStartXfer+0x592>
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d119      	bne.n	8008616 <USB_EPStartXfer+0x592>
 80085e2:	1d3b      	adds	r3, r7, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	653b      	str	r3, [r7, #80]	; 0x50
 80085e8:	1d3b      	adds	r3, r7, #4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f6:	4413      	add	r3, r2
 80085f8:	653b      	str	r3, [r7, #80]	; 0x50
 80085fa:	463b      	mov	r3, r7
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	011a      	lsls	r2, r3, #4
 8008602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008604:	4413      	add	r3, r2
 8008606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800860a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800860c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008610:	b29a      	uxth	r2, r3
 8008612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008614:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008616:	463b      	mov	r3, r7
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	891b      	ldrh	r3, [r3, #8]
 800861c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6959      	ldr	r1, [r3, #20]
 8008626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862a:	b29b      	uxth	r3, r3
 800862c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008630:	1d38      	adds	r0, r7, #4
 8008632:	6800      	ldr	r0, [r0, #0]
 8008634:	f001 f95b 	bl	80098ee <USB_WritePMA>
            ep->xfer_buff += len;
 8008638:	463b      	mov	r3, r7
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008642:	441a      	add	r2, r3
 8008644:	463b      	mov	r3, r7
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800864a:	463b      	mov	r3, r7
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	463b      	mov	r3, r7
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	429a      	cmp	r2, r3
 8008658:	d909      	bls.n	800866e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800865a:	463b      	mov	r3, r7
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6a1a      	ldr	r2, [r3, #32]
 8008660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008664:	1ad2      	subs	r2, r2, r3
 8008666:	463b      	mov	r3, r7
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	621a      	str	r2, [r3, #32]
 800866c:	e008      	b.n	8008680 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008678:	463b      	mov	r3, r7
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008680:	1d3b      	adds	r3, r7, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	643b      	str	r3, [r7, #64]	; 0x40
 8008686:	463b      	mov	r3, r7
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d164      	bne.n	800875a <USB_EPStartXfer+0x6d6>
 8008690:	1d3b      	adds	r3, r7, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	63bb      	str	r3, [r7, #56]	; 0x38
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800869e:	b29b      	uxth	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	4413      	add	r3, r2
 80086a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086a8:	463b      	mov	r3, r7
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	011a      	lsls	r2, r3, #4
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	4413      	add	r3, r2
 80086b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d112      	bne.n	80086e8 <USB_EPStartXfer+0x664>
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	e054      	b.n	8008792 <USB_EPStartXfer+0x70e>
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	2b3e      	cmp	r3, #62	; 0x3e
 80086ee:	d817      	bhi.n	8008720 <USB_EPStartXfer+0x69c>
 80086f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <USB_EPStartXfer+0x68c>
 8008706:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800870a:	3301      	adds	r3, #1
 800870c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008714:	b29b      	uxth	r3, r3
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	b29a      	uxth	r2, r3
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e038      	b.n	8008792 <USB_EPStartXfer+0x70e>
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800872a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	2b00      	cmp	r3, #0
 8008734:	d104      	bne.n	8008740 <USB_EPStartXfer+0x6bc>
 8008736:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800873a:	3b01      	subs	r3, #1
 800873c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008740:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008744:	b29b      	uxth	r3, r3
 8008746:	029b      	lsls	r3, r3, #10
 8008748:	b29b      	uxth	r3, r3
 800874a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008752:	b29a      	uxth	r2, r3
 8008754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e01b      	b.n	8008792 <USB_EPStartXfer+0x70e>
 800875a:	463b      	mov	r3, r7
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d116      	bne.n	8008792 <USB_EPStartXfer+0x70e>
 8008764:	1d3b      	adds	r3, r7, #4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876c:	b29b      	uxth	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008772:	4413      	add	r3, r2
 8008774:	643b      	str	r3, [r7, #64]	; 0x40
 8008776:	463b      	mov	r3, r7
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	011a      	lsls	r2, r3, #4
 800877e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008780:	4413      	add	r3, r2
 8008782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878c:	b29a      	uxth	r2, r3
 800878e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008792:	463b      	mov	r3, r7
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	895b      	ldrh	r3, [r3, #10]
 8008798:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800879c:	463b      	mov	r3, r7
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6959      	ldr	r1, [r3, #20]
 80087a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087ac:	1d38      	adds	r0, r7, #4
 80087ae:	6800      	ldr	r0, [r0, #0]
 80087b0:	f001 f89d 	bl	80098ee <USB_WritePMA>
 80087b4:	e36c      	b.n	8008e90 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80087b6:	463b      	mov	r3, r7
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80087c0:	1d3b      	adds	r3, r7, #4
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	463b      	mov	r3, r7
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80087de:	1d3b      	adds	r3, r7, #4
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	463b      	mov	r3, r7
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	441a      	add	r2, r3
 80087ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80087f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	b29b      	uxth	r3, r3
 8008802:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008804:	1d3b      	adds	r3, r7, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800880a:	1d3b      	adds	r3, r7, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008812:	b29b      	uxth	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008818:	4413      	add	r3, r2
 800881a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800881c:	463b      	mov	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	011a      	lsls	r2, r3, #4
 8008824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008826:	4413      	add	r3, r2
 8008828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800882c:	65bb      	str	r3, [r7, #88]	; 0x58
 800882e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008832:	b29a      	uxth	r2, r3
 8008834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008836:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	891b      	ldrh	r3, [r3, #8]
 800883e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6959      	ldr	r1, [r3, #20]
 8008848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884c:	b29b      	uxth	r3, r3
 800884e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008852:	1d38      	adds	r0, r7, #4
 8008854:	6800      	ldr	r0, [r0, #0]
 8008856:	f001 f84a 	bl	80098ee <USB_WritePMA>
 800885a:	e319      	b.n	8008e90 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	463b      	mov	r3, r7
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800887a:	1d3b      	adds	r3, r7, #4
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	463b      	mov	r3, r7
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	441a      	add	r2, r3
 8008888:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008894:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6a1a      	ldr	r2, [r3, #32]
 80088a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	463b      	mov	r3, r7
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	463b      	mov	r3, r7
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8162 	beq.w	8008b92 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d164      	bne.n	80089aa <USB_EPStartXfer+0x926>
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80088e6:	1d3b      	adds	r3, r7, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088f4:	4413      	add	r3, r2
 80088f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80088f8:	463b      	mov	r3, r7
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	011a      	lsls	r2, r3, #4
 8008900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008902:	4413      	add	r3, r2
 8008904:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008908:	677b      	str	r3, [r7, #116]	; 0x74
 800890a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d112      	bne.n	8008938 <USB_EPStartXfer+0x8b4>
 8008912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800891c:	b29a      	uxth	r2, r3
 800891e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008920:	801a      	strh	r2, [r3, #0]
 8008922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008930:	b29a      	uxth	r2, r3
 8008932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008934:	801a      	strh	r2, [r3, #0]
 8008936:	e057      	b.n	80089e8 <USB_EPStartXfer+0x964>
 8008938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893c:	2b3e      	cmp	r3, #62	; 0x3e
 800893e:	d817      	bhi.n	8008970 <USB_EPStartXfer+0x8ec>
 8008940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d004      	beq.n	8008960 <USB_EPStartXfer+0x8dc>
 8008956:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800895a:	3301      	adds	r3, #1
 800895c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008960:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008964:	b29b      	uxth	r3, r3
 8008966:	029b      	lsls	r3, r3, #10
 8008968:	b29a      	uxth	r2, r3
 800896a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800896c:	801a      	strh	r2, [r3, #0]
 800896e:	e03b      	b.n	80089e8 <USB_EPStartXfer+0x964>
 8008970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008974:	095b      	lsrs	r3, r3, #5
 8008976:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800897a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897e:	f003 031f 	and.w	r3, r3, #31
 8008982:	2b00      	cmp	r3, #0
 8008984:	d104      	bne.n	8008990 <USB_EPStartXfer+0x90c>
 8008986:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800898a:	3b01      	subs	r3, #1
 800898c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008990:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008994:	b29b      	uxth	r3, r3
 8008996:	029b      	lsls	r3, r3, #10
 8008998:	b29b      	uxth	r3, r3
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e01e      	b.n	80089e8 <USB_EPStartXfer+0x964>
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d119      	bne.n	80089e8 <USB_EPStartXfer+0x964>
 80089b4:	1d3b      	adds	r3, r7, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089bc:	b29b      	uxth	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089c4:	4413      	add	r3, r2
 80089c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089ca:	463b      	mov	r3, r7
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	011a      	lsls	r2, r3, #4
 80089d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089d6:	4413      	add	r3, r2
 80089d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80089e8:	463b      	mov	r3, r7
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	895b      	ldrh	r3, [r3, #10]
 80089ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089f2:	463b      	mov	r3, r7
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6959      	ldr	r1, [r3, #20]
 80089f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a02:	1d38      	adds	r0, r7, #4
 8008a04:	6800      	ldr	r0, [r0, #0]
 8008a06:	f000 ff72 	bl	80098ee <USB_WritePMA>
          ep->xfer_buff += len;
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a14:	441a      	add	r2, r3
 8008a16:	463b      	mov	r3, r7
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a1a      	ldr	r2, [r3, #32]
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d909      	bls.n	8008a40 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a1a      	ldr	r2, [r3, #32]
 8008a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	463b      	mov	r3, r7
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	621a      	str	r2, [r3, #32]
 8008a3e:	e008      	b.n	8008a52 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 821a 	beq.w	8008e90 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a5c:	463b      	mov	r3, r7
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d164      	bne.n	8008b30 <USB_EPStartXfer+0xaac>
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a6c:	1d3b      	adds	r3, r7, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a7a:	4413      	add	r3, r2
 8008a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a7e:	463b      	mov	r3, r7
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	011a      	lsls	r2, r3, #4
 8008a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a88:	4413      	add	r3, r2
 8008a8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8008a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d112      	bne.n	8008abe <USB_EPStartXfer+0xa3a>
 8008a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aba:	801a      	strh	r2, [r3, #0]
 8008abc:	e057      	b.n	8008b6e <USB_EPStartXfer+0xaea>
 8008abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ac4:	d817      	bhi.n	8008af6 <USB_EPStartXfer+0xa72>
 8008ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <USB_EPStartXfer+0xa62>
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	029b      	lsls	r3, r3, #10
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	e03b      	b.n	8008b6e <USB_EPStartXfer+0xaea>
 8008af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <USB_EPStartXfer+0xa92>
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b10:	3b01      	subs	r3, #1
 8008b12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	029b      	lsls	r3, r3, #10
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b2c:	801a      	strh	r2, [r3, #0]
 8008b2e:	e01e      	b.n	8008b6e <USB_EPStartXfer+0xaea>
 8008b30:	463b      	mov	r3, r7
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	785b      	ldrb	r3, [r3, #1]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d119      	bne.n	8008b6e <USB_EPStartXfer+0xaea>
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b4e:	4413      	add	r3, r2
 8008b50:	673b      	str	r3, [r7, #112]	; 0x70
 8008b52:	463b      	mov	r3, r7
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	011a      	lsls	r2, r3, #4
 8008b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b6e:	463b      	mov	r3, r7
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	891b      	ldrh	r3, [r3, #8]
 8008b74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b78:	463b      	mov	r3, r7
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6959      	ldr	r1, [r3, #20]
 8008b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b88:	1d38      	adds	r0, r7, #4
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	f000 feaf 	bl	80098ee <USB_WritePMA>
 8008b90:	e17e      	b.n	8008e90 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b92:	463b      	mov	r3, r7
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d16f      	bne.n	8008c7c <USB_EPStartXfer+0xbf8>
 8008b9c:	1d3b      	adds	r3, r7, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ba4:	1d3b      	adds	r3, r7, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bba:	463b      	mov	r3, r7
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	011a      	lsls	r2, r3, #4
 8008bc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d116      	bne.n	8008c06 <USB_EPStartXfer+0xb82>
 8008bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e05f      	b.n	8008cc6 <USB_EPStartXfer+0xc42>
 8008c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c0c:	d818      	bhi.n	8008c40 <USB_EPStartXfer+0xbbc>
 8008c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <USB_EPStartXfer+0xbaa>
 8008c24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	029b      	lsls	r3, r3, #10
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e042      	b.n	8008cc6 <USB_EPStartXfer+0xc42>
 8008c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c44:	095b      	lsrs	r3, r3, #5
 8008c46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c4e:	f003 031f 	and.w	r3, r3, #31
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <USB_EPStartXfer+0xbdc>
 8008c56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	029b      	lsls	r3, r3, #10
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c78:	801a      	strh	r2, [r3, #0]
 8008c7a:	e024      	b.n	8008cc6 <USB_EPStartXfer+0xc42>
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d11f      	bne.n	8008cc6 <USB_EPStartXfer+0xc42>
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	011a      	lsls	r2, r3, #4
 8008cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	891b      	ldrh	r3, [r3, #8]
 8008ccc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cd0:	463b      	mov	r3, r7
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6959      	ldr	r1, [r3, #20]
 8008cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ce0:	1d38      	adds	r0, r7, #4
 8008ce2:	6800      	ldr	r0, [r0, #0]
 8008ce4:	f000 fe03 	bl	80098ee <USB_WritePMA>
          ep->xfer_buff += len;
 8008ce8:	463b      	mov	r3, r7
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695a      	ldr	r2, [r3, #20]
 8008cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf2:	441a      	add	r2, r3
 8008cf4:	463b      	mov	r3, r7
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6a1a      	ldr	r2, [r3, #32]
 8008d00:	463b      	mov	r3, r7
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d909      	bls.n	8008d1e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6a1a      	ldr	r2, [r3, #32]
 8008d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d14:	1ad2      	subs	r2, r2, r3
 8008d16:	463b      	mov	r3, r7
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	621a      	str	r2, [r3, #32]
 8008d1c:	e008      	b.n	8008d30 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d1e:	463b      	mov	r3, r7
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d28:	463b      	mov	r3, r7
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80ab 	beq.w	8008e90 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d3a:	1d3b      	adds	r3, r7, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d42:	463b      	mov	r3, r7
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d16f      	bne.n	8008e2c <USB_EPStartXfer+0xda8>
 8008d4c:	1d3b      	adds	r3, r7, #4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d54:	1d3b      	adds	r3, r7, #4
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d64:	4413      	add	r3, r2
 8008d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	011a      	lsls	r2, r3, #4
 8008d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d76:	4413      	add	r3, r2
 8008d78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d116      	bne.n	8008db6 <USB_EPStartXfer+0xd32>
 8008d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d9a:	801a      	strh	r2, [r3, #0]
 8008d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008db2:	801a      	strh	r2, [r3, #0]
 8008db4:	e05b      	b.n	8008e6e <USB_EPStartXfer+0xdea>
 8008db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dba:	2b3e      	cmp	r3, #62	; 0x3e
 8008dbc:	d818      	bhi.n	8008df0 <USB_EPStartXfer+0xd6c>
 8008dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d004      	beq.n	8008dde <USB_EPStartXfer+0xd5a>
 8008dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd8:	3301      	adds	r3, #1
 8008dda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	029b      	lsls	r3, r3, #10
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dec:	801a      	strh	r2, [r3, #0]
 8008dee:	e03e      	b.n	8008e6e <USB_EPStartXfer+0xdea>
 8008df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfe:	f003 031f 	and.w	r3, r3, #31
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <USB_EPStartXfer+0xd8c>
 8008e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	029b      	lsls	r3, r3, #10
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e28:	801a      	strh	r2, [r3, #0]
 8008e2a:	e020      	b.n	8008e6e <USB_EPStartXfer+0xdea>
 8008e2c:	463b      	mov	r3, r7
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d11b      	bne.n	8008e6e <USB_EPStartXfer+0xdea>
 8008e36:	1d3b      	adds	r3, r7, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	461a      	mov	r2, r3
 8008e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e46:	4413      	add	r3, r2
 8008e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	011a      	lsls	r2, r3, #4
 8008e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e6e:	463b      	mov	r3, r7
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	895b      	ldrh	r3, [r3, #10]
 8008e74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e78:	463b      	mov	r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6959      	ldr	r1, [r3, #20]
 8008e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e88:	1d38      	adds	r0, r7, #4
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	f000 fd2f 	bl	80098ee <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e90:	1d3b      	adds	r3, r7, #4
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	463b      	mov	r3, r7
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f107 020a 	add.w	r2, r7, #10
 8008ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eae:	8013      	strh	r3, [r2, #0]
 8008eb0:	f107 030a 	add.w	r3, r7, #10
 8008eb4:	f107 020a 	add.w	r2, r7, #10
 8008eb8:	8812      	ldrh	r2, [r2, #0]
 8008eba:	f082 0210 	eor.w	r2, r2, #16
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	f107 030a 	add.w	r3, r7, #10
 8008ec4:	f107 020a 	add.w	r2, r7, #10
 8008ec8:	8812      	ldrh	r2, [r2, #0]
 8008eca:	f082 0220 	eor.w	r2, r2, #32
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	1d3b      	adds	r3, r7, #4
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	441a      	add	r2, r3
 8008ede:	f107 030a 	add.w	r3, r7, #10
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8013      	strh	r3, [r2, #0]
 8008ef8:	e3b5      	b.n	8009666 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008efa:	463b      	mov	r3, r7
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	7b1b      	ldrb	r3, [r3, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8090 	bne.w	8009026 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f06:	463b      	mov	r3, r7
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d90e      	bls.n	8008f34 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008f16:	463b      	mov	r3, r7
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008f20:	463b      	mov	r3, r7
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	619a      	str	r2, [r3, #24]
 8008f32:	e008      	b.n	8008f46 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008f34:	463b      	mov	r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008f3e:	463b      	mov	r3, r7
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f46:	1d3b      	adds	r3, r7, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f4e:	1d3b      	adds	r3, r7, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f5e:	4413      	add	r3, r2
 8008f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f64:	463b      	mov	r3, r7
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	011a      	lsls	r2, r3, #4
 8008f6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f70:	4413      	add	r3, r2
 8008f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d116      	bne.n	8008fb0 <USB_EPStartXfer+0xf2c>
 8008f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f94:	801a      	strh	r2, [r3, #0]
 8008f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fac:	801a      	strh	r2, [r3, #0]
 8008fae:	e32c      	b.n	800960a <USB_EPStartXfer+0x1586>
 8008fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fb6:	d818      	bhi.n	8008fea <USB_EPStartXfer+0xf66>
 8008fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fbc:	085b      	lsrs	r3, r3, #1
 8008fbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <USB_EPStartXfer+0xf54>
 8008fce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	029b      	lsls	r3, r3, #10
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	e30f      	b.n	800960a <USB_EPStartXfer+0x1586>
 8008fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d104      	bne.n	800900a <USB_EPStartXfer+0xf86>
 8009000:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009004:	3b01      	subs	r3, #1
 8009006:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800900a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29b      	uxth	r3, r3
 8009014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901c:	b29a      	uxth	r2, r3
 800901e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009022:	801a      	strh	r2, [r3, #0]
 8009024:	e2f1      	b.n	800960a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009026:	463b      	mov	r3, r7
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	78db      	ldrb	r3, [r3, #3]
 800902c:	2b02      	cmp	r3, #2
 800902e:	f040 818f 	bne.w	8009350 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009032:	463b      	mov	r3, r7
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d175      	bne.n	8009128 <USB_EPStartXfer+0x10a4>
 800903c:	1d3b      	adds	r3, r7, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009044:	1d3b      	adds	r3, r7, #4
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800904c:	b29b      	uxth	r3, r3
 800904e:	461a      	mov	r2, r3
 8009050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009054:	4413      	add	r3, r2
 8009056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800905a:	463b      	mov	r3, r7
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	011a      	lsls	r2, r3, #4
 8009062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009066:	4413      	add	r3, r2
 8009068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800906c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009070:	463b      	mov	r3, r7
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d116      	bne.n	80090a8 <USB_EPStartXfer+0x1024>
 800907a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	b29b      	uxth	r3, r3
 8009082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009086:	b29a      	uxth	r2, r3
 8009088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909e:	b29a      	uxth	r2, r3
 80090a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090a4:	801a      	strh	r2, [r3, #0]
 80090a6:	e065      	b.n	8009174 <USB_EPStartXfer+0x10f0>
 80090a8:	463b      	mov	r3, r7
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b3e      	cmp	r3, #62	; 0x3e
 80090b0:	d81a      	bhi.n	80090e8 <USB_EPStartXfer+0x1064>
 80090b2:	463b      	mov	r3, r7
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090be:	463b      	mov	r3, r7
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <USB_EPStartXfer+0x1052>
 80090cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d0:	3301      	adds	r3, #1
 80090d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090da:	b29b      	uxth	r3, r3
 80090dc:	029b      	lsls	r3, r3, #10
 80090de:	b29a      	uxth	r2, r3
 80090e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	e045      	b.n	8009174 <USB_EPStartXfer+0x10f0>
 80090e8:	463b      	mov	r3, r7
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	095b      	lsrs	r3, r3, #5
 80090f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090f4:	463b      	mov	r3, r7
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 031f 	and.w	r3, r3, #31
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <USB_EPStartXfer+0x1088>
 8009102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009106:	3b01      	subs	r3, #1
 8009108:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800910c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009110:	b29b      	uxth	r3, r3
 8009112:	029b      	lsls	r3, r3, #10
 8009114:	b29b      	uxth	r3, r3
 8009116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800911a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800911e:	b29a      	uxth	r2, r3
 8009120:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	e025      	b.n	8009174 <USB_EPStartXfer+0x10f0>
 8009128:	463b      	mov	r3, r7
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d120      	bne.n	8009174 <USB_EPStartXfer+0x10f0>
 8009132:	1d3b      	adds	r3, r7, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800913a:	1d3b      	adds	r3, r7, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009142:	b29b      	uxth	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800914a:	4413      	add	r3, r2
 800914c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009150:	463b      	mov	r3, r7
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	011a      	lsls	r2, r3, #4
 8009158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800915c:	4413      	add	r3, r2
 800915e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009162:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009166:	463b      	mov	r3, r7
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	b29a      	uxth	r2, r3
 800916e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	1d3b      	adds	r3, r7, #4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800917c:	463b      	mov	r3, r7
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d175      	bne.n	8009272 <USB_EPStartXfer+0x11ee>
 8009186:	1d3b      	adds	r3, r7, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009196:	b29b      	uxth	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800919e:	4413      	add	r3, r2
 80091a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091a4:	463b      	mov	r3, r7
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	011a      	lsls	r2, r3, #4
 80091ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80091b0:	4413      	add	r3, r2
 80091b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091ba:	463b      	mov	r3, r7
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d116      	bne.n	80091f2 <USB_EPStartXfer+0x116e>
 80091c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091d6:	801a      	strh	r2, [r3, #0]
 80091d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	e061      	b.n	80092b6 <USB_EPStartXfer+0x1232>
 80091f2:	463b      	mov	r3, r7
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	2b3e      	cmp	r3, #62	; 0x3e
 80091fa:	d81a      	bhi.n	8009232 <USB_EPStartXfer+0x11ae>
 80091fc:	463b      	mov	r3, r7
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009208:	463b      	mov	r3, r7
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <USB_EPStartXfer+0x119c>
 8009216:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800921a:	3301      	adds	r3, #1
 800921c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009220:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009224:	b29b      	uxth	r3, r3
 8009226:	029b      	lsls	r3, r3, #10
 8009228:	b29a      	uxth	r2, r3
 800922a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	e041      	b.n	80092b6 <USB_EPStartXfer+0x1232>
 8009232:	463b      	mov	r3, r7
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	095b      	lsrs	r3, r3, #5
 800923a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800923e:	463b      	mov	r3, r7
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 031f 	and.w	r3, r3, #31
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <USB_EPStartXfer+0x11d2>
 800924c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009250:	3b01      	subs	r3, #1
 8009252:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009256:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800925a:	b29b      	uxth	r3, r3
 800925c:	029b      	lsls	r3, r3, #10
 800925e:	b29b      	uxth	r3, r3
 8009260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009268:	b29a      	uxth	r2, r3
 800926a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e021      	b.n	80092b6 <USB_EPStartXfer+0x1232>
 8009272:	463b      	mov	r3, r7
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d11c      	bne.n	80092b6 <USB_EPStartXfer+0x1232>
 800927c:	1d3b      	adds	r3, r7, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009284:	b29b      	uxth	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800928c:	4413      	add	r3, r2
 800928e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009292:	463b      	mov	r3, r7
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	011a      	lsls	r2, r3, #4
 800929a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800929e:	4413      	add	r3, r2
 80092a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092a8:	463b      	mov	r3, r7
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092b4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80092b6:	463b      	mov	r3, r7
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 81a4 	beq.w	800960a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	463b      	mov	r3, r7
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092d6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <USB_EPStartXfer+0x126a>
 80092e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092ee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 8187 	bne.w	800960a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	f040 8180 	bne.w	800960a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009324:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009328:	1d3b      	adds	r3, r7, #4
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	463b      	mov	r3, r7
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	441a      	add	r2, r3
 8009336:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009346:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]
 800934e:	e15c      	b.n	800960a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009350:	463b      	mov	r3, r7
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	78db      	ldrb	r3, [r3, #3]
 8009356:	2b01      	cmp	r3, #1
 8009358:	f040 8155 	bne.w	8009606 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800935c:	463b      	mov	r3, r7
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	463b      	mov	r3, r7
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	429a      	cmp	r2, r3
 800936a:	d90e      	bls.n	800938a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800936c:	463b      	mov	r3, r7
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009376:	463b      	mov	r3, r7
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	699a      	ldr	r2, [r3, #24]
 800937c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	463b      	mov	r3, r7
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	619a      	str	r2, [r3, #24]
 8009388:	e008      	b.n	800939c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800938a:	463b      	mov	r3, r7
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009394:	463b      	mov	r3, r7
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2200      	movs	r2, #0
 800939a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800939c:	463b      	mov	r3, r7
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	785b      	ldrb	r3, [r3, #1]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d16f      	bne.n	8009486 <USB_EPStartXfer+0x1402>
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093ae:	1d3b      	adds	r3, r7, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093be:	4413      	add	r3, r2
 80093c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093c4:	463b      	mov	r3, r7
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	011a      	lsls	r2, r3, #4
 80093cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093d0:	4413      	add	r3, r2
 80093d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d116      	bne.n	8009410 <USB_EPStartXfer+0x138c>
 80093e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29a      	uxth	r2, r3
 8009408:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800940c:	801a      	strh	r2, [r3, #0]
 800940e:	e05f      	b.n	80094d0 <USB_EPStartXfer+0x144c>
 8009410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009414:	2b3e      	cmp	r3, #62	; 0x3e
 8009416:	d818      	bhi.n	800944a <USB_EPStartXfer+0x13c6>
 8009418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d004      	beq.n	8009438 <USB_EPStartXfer+0x13b4>
 800942e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009432:	3301      	adds	r3, #1
 8009434:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800943c:	b29b      	uxth	r3, r3
 800943e:	029b      	lsls	r3, r3, #10
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	e042      	b.n	80094d0 <USB_EPStartXfer+0x144c>
 800944a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USB_EPStartXfer+0x13e6>
 8009460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009464:	3b01      	subs	r3, #1
 8009466:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800946a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800946e:	b29b      	uxth	r3, r3
 8009470:	029b      	lsls	r3, r3, #10
 8009472:	b29b      	uxth	r3, r3
 8009474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	e024      	b.n	80094d0 <USB_EPStartXfer+0x144c>
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	785b      	ldrb	r3, [r3, #1]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d11f      	bne.n	80094d0 <USB_EPStartXfer+0x144c>
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a8:	4413      	add	r3, r2
 80094aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094ae:	463b      	mov	r3, r7
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	011a      	lsls	r2, r3, #4
 80094b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ba:	4413      	add	r3, r2
 80094bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094ce:	801a      	strh	r2, [r3, #0]
 80094d0:	1d3b      	adds	r3, r7, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094d8:	463b      	mov	r3, r7
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d16f      	bne.n	80095c2 <USB_EPStartXfer+0x153e>
 80094e2:	1d3b      	adds	r3, r7, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094ea:	1d3b      	adds	r3, r7, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fa:	4413      	add	r3, r2
 80094fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009500:	463b      	mov	r3, r7
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	011a      	lsls	r2, r3, #4
 8009508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800950c:	4413      	add	r3, r2
 800950e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d116      	bne.n	800954c <USB_EPStartXfer+0x14c8>
 800951e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800952a:	b29a      	uxth	r2, r3
 800952c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009542:	b29a      	uxth	r2, r3
 8009544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	e05e      	b.n	800960a <USB_EPStartXfer+0x1586>
 800954c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009550:	2b3e      	cmp	r3, #62	; 0x3e
 8009552:	d818      	bhi.n	8009586 <USB_EPStartXfer+0x1502>
 8009554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009558:	085b      	lsrs	r3, r3, #1
 800955a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800955e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <USB_EPStartXfer+0x14f0>
 800956a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800956e:	3301      	adds	r3, #1
 8009570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009574:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009578:	b29b      	uxth	r3, r3
 800957a:	029b      	lsls	r3, r3, #10
 800957c:	b29a      	uxth	r2, r3
 800957e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e041      	b.n	800960a <USB_EPStartXfer+0x1586>
 8009586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <USB_EPStartXfer+0x1522>
 800959c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095a0:	3b01      	subs	r3, #1
 80095a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	029b      	lsls	r3, r3, #10
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	e023      	b.n	800960a <USB_EPStartXfer+0x1586>
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d11e      	bne.n	800960a <USB_EPStartXfer+0x1586>
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095dc:	4413      	add	r3, r2
 80095de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095e2:	463b      	mov	r3, r7
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	011a      	lsls	r2, r3, #4
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ee:	4413      	add	r3, r2
 80095f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	e001      	b.n	800960a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e02e      	b.n	8009668 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800960a:	1d3b      	adds	r3, r7, #4
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	463b      	mov	r3, r7
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009628:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800962c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009630:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009634:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009638:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800963c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009640:	1d3b      	adds	r3, r7, #4
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	463b      	mov	r3, r7
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	441a      	add	r2, r3
 800964e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800965a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800965e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009662:	b29b      	uxth	r3, r3
 8009664:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d020      	beq.n	80096c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969a:	81bb      	strh	r3, [r7, #12]
 800969c:	89bb      	ldrh	r3, [r7, #12]
 800969e:	f083 0310 	eor.w	r3, r3, #16
 80096a2:	81bb      	strh	r3, [r7, #12]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	441a      	add	r2, r3
 80096ae:	89bb      	ldrh	r3, [r7, #12]
 80096b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	8013      	strh	r3, [r2, #0]
 80096c4:	e01f      	b.n	8009706 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096dc:	81fb      	strh	r3, [r7, #14]
 80096de:	89fb      	ldrh	r3, [r7, #14]
 80096e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096e4:	81fb      	strh	r3, [r7, #14]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr

08009712 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009712:	b480      	push	{r7}
 8009714:	b087      	sub	sp, #28
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	7b1b      	ldrb	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f040 809d 	bne.w	8009860 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d04c      	beq.n	80097c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	823b      	strh	r3, [r7, #16]
 800973c:	8a3b      	ldrh	r3, [r7, #16]
 800973e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01b      	beq.n	800977e <USB_EPClearStall+0x6c>
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29b      	uxth	r3, r3
 8009754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975c:	81fb      	strh	r3, [r7, #14]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	441a      	add	r2, r3
 8009768:	89fb      	ldrh	r3, [r7, #14]
 800976a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800976e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800977a:	b29b      	uxth	r3, r3
 800977c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	78db      	ldrb	r3, [r3, #3]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d06c      	beq.n	8009860 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800979c:	81bb      	strh	r3, [r7, #12]
 800979e:	89bb      	ldrh	r3, [r7, #12]
 80097a0:	f083 0320 	eor.w	r3, r3, #32
 80097a4:	81bb      	strh	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	441a      	add	r2, r3
 80097b0:	89bb      	ldrh	r3, [r7, #12]
 80097b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	8013      	strh	r3, [r2, #0]
 80097c6:	e04b      	b.n	8009860 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	82fb      	strh	r3, [r7, #22]
 80097d6:	8afb      	ldrh	r3, [r7, #22]
 80097d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01b      	beq.n	8009818 <USB_EPClearStall+0x106>
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f6:	82bb      	strh	r3, [r7, #20]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	441a      	add	r2, r3
 8009802:	8abb      	ldrh	r3, [r7, #20]
 8009804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800980c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009814:	b29b      	uxth	r3, r3
 8009816:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	827b      	strh	r3, [r7, #18]
 8009830:	8a7b      	ldrh	r3, [r7, #18]
 8009832:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009836:	827b      	strh	r3, [r7, #18]
 8009838:	8a7b      	ldrh	r3, [r7, #18]
 800983a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800983e:	827b      	strh	r3, [r7, #18]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	441a      	add	r2, r3
 800984a:	8a7b      	ldrh	r3, [r7, #18]
 800984c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985c:	b29b      	uxth	r3, r3
 800985e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	bc80      	pop	{r7}
 800986a:	4770      	bx	lr

0800986c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d103      	bne.n	8009886 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2280      	movs	r2, #128	; 0x80
 8009882:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	bc80      	pop	{r7}
 8009890:	4770      	bx	lr

08009892 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bc80      	pop	{r7}
 80098a4:	4770      	bx	lr

080098a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr

080098ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098cc:	68fb      	ldr	r3, [r7, #12]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr

080098d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr

080098ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b08d      	sub	sp, #52	; 0x34
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	4611      	mov	r1, r2
 80098fa:	461a      	mov	r2, r3
 80098fc:	460b      	mov	r3, r1
 80098fe:	80fb      	strh	r3, [r7, #6]
 8009900:	4613      	mov	r3, r2
 8009902:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009904:	88bb      	ldrh	r3, [r7, #4]
 8009906:	3301      	adds	r3, #1
 8009908:	085b      	lsrs	r3, r3, #1
 800990a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	005a      	lsls	r2, r3, #1
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009920:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009926:	e01e      	b.n	8009966 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	3301      	adds	r3, #1
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	b29b      	uxth	r3, r3
 800993e:	461a      	mov	r2, r3
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	b29a      	uxth	r2, r3
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	3302      	adds	r3, #2
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	3302      	adds	r3, #2
 8009958:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	3301      	adds	r3, #1
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	3b01      	subs	r3, #1
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1dd      	bne.n	8009928 <USB_WritePMA+0x3a>
  }
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	3734      	adds	r7, #52	; 0x34
 8009972:	46bd      	mov	sp, r7
 8009974:	bc80      	pop	{r7}
 8009976:	4770      	bx	lr

08009978 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009978:	b480      	push	{r7}
 800997a:	b08b      	sub	sp, #44	; 0x2c
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4611      	mov	r1, r2
 8009984:	461a      	mov	r2, r3
 8009986:	460b      	mov	r3, r1
 8009988:	80fb      	strh	r3, [r7, #6]
 800998a:	4613      	mov	r3, r2
 800998c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800998e:	88bb      	ldrh	r3, [r7, #4]
 8009990:	085b      	lsrs	r3, r3, #1
 8009992:	b29b      	uxth	r3, r3
 8009994:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	005a      	lsls	r2, r3, #1
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099aa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
 80099b0:	e01b      	b.n	80099ea <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	3302      	adds	r3, #2
 80099be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	3301      	adds	r3, #1
 80099cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	0a1b      	lsrs	r3, r3, #8
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	3301      	adds	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	3302      	adds	r3, #2
 80099e2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	3b01      	subs	r3, #1
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e0      	bne.n	80099b2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80099f0:	88bb      	ldrh	r3, [r7, #4]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	701a      	strb	r2, [r3, #0]
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	372c      	adds	r7, #44	; 0x2c
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr

08009a16 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7c1b      	ldrb	r3, [r3, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d115      	bne.n	8009a5a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a32:	2202      	movs	r2, #2
 8009a34:	2181      	movs	r1, #129	; 0x81
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fea1 	bl	800b77e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a46:	2202      	movs	r2, #2
 8009a48:	2101      	movs	r1, #1
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 fe97 	bl	800b77e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009a58:	e012      	b.n	8009a80 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	2181      	movs	r1, #129	; 0x81
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 fe8c 	bl	800b77e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	2202      	movs	r2, #2
 8009a70:	2101      	movs	r1, #1
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fe83 	bl	800b77e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a80:	2308      	movs	r3, #8
 8009a82:	2203      	movs	r2, #3
 8009a84:	2182      	movs	r1, #130	; 0x82
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fe79 	bl	800b77e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a92:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a96:	f001 ff99 	bl	800b9cc <USBD_static_malloc>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
 8009ab0:	e026      	b.n	8009b00 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7c1b      	ldrb	r3, [r3, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d109      	bne.n	8009af0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 ff39 	bl	800b960 <USBD_LL_PrepareReceive>
 8009aee:	e007      	b.n	8009b00 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009af6:	2340      	movs	r3, #64	; 0x40
 8009af8:	2101      	movs	r1, #1
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 ff30 	bl	800b960 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b1a:	2181      	movs	r1, #129	; 0x81
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 fe54 	bl	800b7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b28:	2101      	movs	r1, #1
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 fe4d 	bl	800b7ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b38:	2182      	movs	r1, #130	; 0x82
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 fe45 	bl	800b7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00e      	beq.n	8009b6e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 ff3f 	bl	800b9e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b88:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d039      	beq.n	8009c16 <USBD_CDC_Setup+0x9e>
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d17f      	bne.n	8009ca6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	88db      	ldrh	r3, [r3, #6]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d029      	beq.n	8009c02 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b25b      	sxtb	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	da11      	bge.n	8009bdc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009bc4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	88d2      	ldrh	r2, [r2, #6]
 8009bca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bcc:	6939      	ldr	r1, [r7, #16]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88db      	ldrh	r3, [r3, #6]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 fa0a 	bl	800afee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009bda:	e06b      	b.n	8009cb4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	785a      	ldrb	r2, [r3, #1]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88db      	ldrh	r3, [r3, #6]
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bf2:	6939      	ldr	r1, [r7, #16]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	88db      	ldrh	r3, [r3, #6]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 fa25 	bl	800b04a <USBD_CtlPrepareRx>
      break;
 8009c00:	e058      	b.n	8009cb4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	7850      	ldrb	r0, [r2, #1]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	4798      	blx	r3
      break;
 8009c14:	e04e      	b.n	8009cb4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	785b      	ldrb	r3, [r3, #1]
 8009c1a:	2b0b      	cmp	r3, #11
 8009c1c:	d02e      	beq.n	8009c7c <USBD_CDC_Setup+0x104>
 8009c1e:	2b0b      	cmp	r3, #11
 8009c20:	dc38      	bgt.n	8009c94 <USBD_CDC_Setup+0x11c>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <USBD_CDC_Setup+0xb4>
 8009c26:	2b0a      	cmp	r3, #10
 8009c28:	d014      	beq.n	8009c54 <USBD_CDC_Setup+0xdc>
 8009c2a:	e033      	b.n	8009c94 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d107      	bne.n	8009c46 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009c36:	f107 030c 	add.w	r3, r7, #12
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f9d5 	bl	800afee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c44:	e02e      	b.n	8009ca4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f966 	bl	800af1a <USBD_CtlError>
            ret = USBD_FAIL;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	75fb      	strb	r3, [r7, #23]
          break;
 8009c52:	e027      	b.n	8009ca4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d107      	bne.n	8009c6e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c5e:	f107 030f 	add.w	r3, r7, #15
 8009c62:	2201      	movs	r2, #1
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f9c1 	bl	800afee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c6c:	e01a      	b.n	8009ca4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f952 	bl	800af1a <USBD_CtlError>
            ret = USBD_FAIL;
 8009c76:	2302      	movs	r3, #2
 8009c78:	75fb      	strb	r3, [r7, #23]
          break;
 8009c7a:	e013      	b.n	8009ca4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d00d      	beq.n	8009ca2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f946 	bl	800af1a <USBD_CtlError>
            ret = USBD_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c92:	e006      	b.n	8009ca2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 f93f 	bl	800af1a <USBD_CtlError>
          ret = USBD_FAIL;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009ca0:	e000      	b.n	8009ca4 <USBD_CDC_Setup+0x12c>
          break;
 8009ca2:	bf00      	nop
      }
      break;
 8009ca4:	e006      	b.n	8009cb4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 f936 	bl	800af1a <USBD_CtlError>
      ret = USBD_FAIL;
 8009cae:	2302      	movs	r3, #2
 8009cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb2:	bf00      	nop
  }

  return ret;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cd8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d03a      	beq.n	8009d5a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ce4:	78fa      	ldrb	r2, [r7, #3]
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	331c      	adds	r3, #28
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d029      	beq.n	8009d4e <USBD_CDC_DataIn+0x90>
 8009cfa:	78fa      	ldrb	r2, [r7, #3]
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	440b      	add	r3, r1
 8009d08:	331c      	adds	r3, #28
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	78f9      	ldrb	r1, [r7, #3]
 8009d0e:	68b8      	ldr	r0, [r7, #8]
 8009d10:	460b      	mov	r3, r1
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	4403      	add	r3, r0
 8009d1a:	3338      	adds	r3, #56	; 0x38
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d22:	fb03 f301 	mul.w	r3, r3, r1
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d110      	bne.n	8009d4e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	331c      	adds	r3, #28
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d40:	78f9      	ldrb	r1, [r7, #3]
 8009d42:	2300      	movs	r3, #0
 8009d44:	2200      	movs	r2, #0
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 fde7 	bl	800b91a <USBD_LL_Transmit>
 8009d4c:	e003      	b.n	8009d56 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e000      	b.n	8009d5c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009d5a:	2302      	movs	r3, #2
  }
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 fe12 	bl	800b9a6 <USBD_LL_GetRxDataSize>
 8009d82:	4602      	mov	r2, r0
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00d      	beq.n	8009db0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009da8:	4611      	mov	r1, r2
 8009daa:	4798      	blx	r3

    return USBD_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	e000      	b.n	8009db2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009db0:	2302      	movs	r3, #2
  }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <USBD_CDC_EP0_RxReady+0x46>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009dda:	2bff      	cmp	r3, #255	; 0xff
 8009ddc:	d010      	beq.n	8009e00 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009dec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009df4:	b292      	uxth	r2, r2
 8009df6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	22ff      	movs	r2, #255	; 0xff
 8009dfc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2243      	movs	r2, #67	; 0x43
 8009e18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009e1a:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20000094 	.word	0x20000094

08009e2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2243      	movs	r2, #67	; 0x43
 8009e38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009e3a:	4b03      	ldr	r3, [pc, #12]	; (8009e48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000050 	.word	0x20000050

08009e4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2243      	movs	r2, #67	; 0x43
 8009e58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009e5a:	4b03      	ldr	r3, [pc, #12]	; (8009e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	200000d8 	.word	0x200000d8

08009e6c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	220a      	movs	r2, #10
 8009e78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009e7a:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc80      	pop	{r7}
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	2000000c 	.word	0x2000000c

08009e8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009e96:	2302      	movs	r3, #2
 8009e98:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ecc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ed6:	88fa      	ldrh	r2, [r7, #6]
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr

08009eea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009efa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc80      	pop	{r7}
 8009f0e:	4770      	bx	lr

08009f10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01c      	beq.n	8009f64 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d115      	bne.n	8009f60 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	2181      	movs	r1, #129	; 0x81
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 fcdf 	bl	800b91a <USBD_LL_Transmit>

      return USBD_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e002      	b.n	8009f66 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009f64:	2302      	movs	r3, #2
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d017      	beq.n	8009fb8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7c1b      	ldrb	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 fcdf 	bl	800b960 <USBD_LL_PrepareReceive>
 8009fa2:	e007      	b.n	8009fb4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	2101      	movs	r1, #1
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fcd6 	bl	800b960 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e000      	b.n	8009fba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009fb8:	2302      	movs	r3, #2
  }
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	e01a      	b.n	800a010 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	79fa      	ldrb	r2, [r7, #7]
 800a006:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f001 fb43 	bl	800b694 <USBD_LL_Init>

  return USBD_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d006      	beq.n	800a03a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
 800a038:	e001      	b.n	800a03e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	bc80      	pop	{r7}
 800a048:	4770      	bx	lr

0800a04a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f001 fb78 	bl	800b748 <USBD_LL_Start>

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr

0800a076 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a082:	2302      	movs	r3, #2
 800a084:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	78fa      	ldrb	r2, [r7, #3]
 800a09a:	4611      	mov	r1, r2
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	4798      	blx	r3

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fed8 	bl	800aea2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a100:	461a      	mov	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a10e:	f003 031f 	and.w	r3, r3, #31
 800a112:	2b02      	cmp	r3, #2
 800a114:	d016      	beq.n	800a144 <USBD_LL_SetupStage+0x6a>
 800a116:	2b02      	cmp	r3, #2
 800a118:	d81c      	bhi.n	800a154 <USBD_LL_SetupStage+0x7a>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <USBD_LL_SetupStage+0x4a>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d008      	beq.n	800a134 <USBD_LL_SetupStage+0x5a>
 800a122:	e017      	b.n	800a154 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f9cb 	bl	800a4c8 <USBD_StdDevReq>
      break;
 800a132:	e01a      	b.n	800a16a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fa2d 	bl	800a59c <USBD_StdItfReq>
      break;
 800a142:	e012      	b.n	800a16a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fa6d 	bl	800a62c <USBD_StdEPReq>
      break;
 800a152:	e00a      	b.n	800a16a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a15a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 fb50 	bl	800b808 <USBD_LL_StallEP>
      break;
 800a168:	bf00      	nop
  }

  return USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	460b      	mov	r3, r1
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d14b      	bne.n	800a220 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a18e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a196:	2b03      	cmp	r3, #3
 800a198:	d134      	bne.n	800a204 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d919      	bls.n	800a1da <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d203      	bcs.n	800a1c8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	e002      	b.n	800a1ce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 ff57 	bl	800b086 <USBD_CtlContinueRx>
 800a1d8:	e038      	b.n	800a24c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00a      	beq.n	800a1fc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d105      	bne.n	800a1fc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 ff54 	bl	800b0aa <USBD_CtlSendStatus>
 800a202:	e023      	b.n	800a24c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a20a:	2b05      	cmp	r3, #5
 800a20c:	d11e      	bne.n	800a24c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a216:	2100      	movs	r1, #0
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f001 faf5 	bl	800b808 <USBD_LL_StallEP>
 800a21e:	e015      	b.n	800a24c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00d      	beq.n	800a248 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a232:	2b03      	cmp	r3, #3
 800a234:	d108      	bne.n	800a248 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	7afa      	ldrb	r2, [r7, #11]
 800a240:	4611      	mov	r1, r2
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	4798      	blx	r3
 800a246:	e001      	b.n	800a24c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a248:	2302      	movs	r3, #2
 800a24a:	e000      	b.n	800a24e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b086      	sub	sp, #24
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	460b      	mov	r3, r1
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a264:	7afb      	ldrb	r3, [r7, #11]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d17f      	bne.n	800a36a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3314      	adds	r3, #20
 800a26e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a276:	2b02      	cmp	r3, #2
 800a278:	d15c      	bne.n	800a334 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	429a      	cmp	r2, r3
 800a284:	d915      	bls.n	800a2b2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 fec1 	bl	800b026 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f001 fb58 	bl	800b960 <USBD_LL_PrepareReceive>
 800a2b0:	e04e      	b.n	800a350 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	6912      	ldr	r2, [r2, #16]
 800a2ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2be:	fb02 f201 	mul.w	r2, r2, r1
 800a2c2:	1a9b      	subs	r3, r3, r2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11c      	bne.n	800a302 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d316      	bcc.n	800a302 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d20f      	bcs.n	800a302 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 fe9d 	bl	800b026 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f001 fb30 	bl	800b960 <USBD_LL_PrepareReceive>
 800a300:	e026      	b.n	800a350 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a314:	2b03      	cmp	r3, #3
 800a316:	d105      	bne.n	800a324 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a324:	2180      	movs	r1, #128	; 0x80
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f001 fa6e 	bl	800b808 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 fecf 	bl	800b0d0 <USBD_CtlReceiveStatus>
 800a332:	e00d      	b.n	800a350 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d004      	beq.n	800a348 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a348:	2180      	movs	r1, #128	; 0x80
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f001 fa5c 	bl	800b808 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a356:	2b01      	cmp	r3, #1
 800a358:	d11d      	bne.n	800a396 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fe81 	bl	800a062 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a368:	e015      	b.n	800a396 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00d      	beq.n	800a392 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d108      	bne.n	800a392 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	7afa      	ldrb	r2, [r7, #11]
 800a38a:	4611      	mov	r1, r2
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	4798      	blx	r3
 800a390:	e001      	b.n	800a396 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a392:	2302      	movs	r3, #2
 800a394:	e000      	b.n	800a398 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 f9e5 	bl	800b77e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2240      	movs	r2, #64	; 0x40
 800a3c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2180      	movs	r1, #128	; 0x80
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 f9d7 	bl	800b77e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2240      	movs	r2, #64	; 0x40
 800a3da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a400:	2b00      	cmp	r3, #0
 800a402:	d009      	beq.n	800a418 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	6852      	ldr	r2, [r2, #4]
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	4611      	mov	r1, r2
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	4798      	blx	r3
  }

  return USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr

0800a440 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2204      	movs	r2, #4
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	bc80      	pop	{r7}
 800a466:	4770      	bx	lr

0800a468 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a476:	2b04      	cmp	r3, #4
 800a478:	d105      	bne.n	800a486 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr

0800a492 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d10b      	bne.n	800a4bc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4de:	2b40      	cmp	r3, #64	; 0x40
 800a4e0:	d005      	beq.n	800a4ee <USBD_StdDevReq+0x26>
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	d84f      	bhi.n	800a586 <USBD_StdDevReq+0xbe>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d009      	beq.n	800a4fe <USBD_StdDevReq+0x36>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d14b      	bne.n	800a586 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	4798      	blx	r3
      break;
 800a4fc:	e048      	b.n	800a590 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	785b      	ldrb	r3, [r3, #1]
 800a502:	2b09      	cmp	r3, #9
 800a504:	d839      	bhi.n	800a57a <USBD_StdDevReq+0xb2>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <USBD_StdDevReq+0x44>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a55d 	.word	0x0800a55d
 800a510:	0800a571 	.word	0x0800a571
 800a514:	0800a57b 	.word	0x0800a57b
 800a518:	0800a567 	.word	0x0800a567
 800a51c:	0800a57b 	.word	0x0800a57b
 800a520:	0800a53f 	.word	0x0800a53f
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a57b 	.word	0x0800a57b
 800a52c:	0800a553 	.word	0x0800a553
 800a530:	0800a549 	.word	0x0800a549
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9dc 	bl	800a8f4 <USBD_GetDescriptor>
          break;
 800a53c:	e022      	b.n	800a584 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fb3f 	bl	800abc4 <USBD_SetAddress>
          break;
 800a546:	e01d      	b.n	800a584 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fb7e 	bl	800ac4c <USBD_SetConfig>
          break;
 800a550:	e018      	b.n	800a584 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fc07 	bl	800ad68 <USBD_GetConfig>
          break;
 800a55a:	e013      	b.n	800a584 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fc37 	bl	800add2 <USBD_GetStatus>
          break;
 800a564:	e00e      	b.n	800a584 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc65 	bl	800ae38 <USBD_SetFeature>
          break;
 800a56e:	e009      	b.n	800a584 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fc74 	bl	800ae60 <USBD_ClrFeature>
          break;
 800a578:	e004      	b.n	800a584 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fccc 	bl	800af1a <USBD_CtlError>
          break;
 800a582:	bf00      	nop
      }
      break;
 800a584:	e004      	b.n	800a590 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fcc6 	bl	800af1a <USBD_CtlError>
      break;
 800a58e:	bf00      	nop
  }

  return ret;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop

0800a59c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5b2:	2b40      	cmp	r3, #64	; 0x40
 800a5b4:	d005      	beq.n	800a5c2 <USBD_StdItfReq+0x26>
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d82e      	bhi.n	800a618 <USBD_StdItfReq+0x7c>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <USBD_StdItfReq+0x26>
 800a5be:	2b20      	cmp	r3, #32
 800a5c0:	d12a      	bne.n	800a618 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d81d      	bhi.n	800a60a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	889b      	ldrh	r3, [r3, #4]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d813      	bhi.n	800a600 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	88db      	ldrh	r3, [r3, #6]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d110      	bne.n	800a614 <USBD_StdItfReq+0x78>
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10d      	bne.n	800a614 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fd56 	bl	800b0aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5fe:	e009      	b.n	800a614 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fc89 	bl	800af1a <USBD_CtlError>
          break;
 800a608:	e004      	b.n	800a614 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc84 	bl	800af1a <USBD_CtlError>
          break;
 800a612:	e000      	b.n	800a616 <USBD_StdItfReq+0x7a>
          break;
 800a614:	bf00      	nop
      }
      break;
 800a616:	e004      	b.n	800a622 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fc7d 	bl	800af1a <USBD_CtlError>
      break;
 800a620:	bf00      	nop
  }

  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	889b      	ldrh	r3, [r3, #4]
 800a63e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a648:	2b40      	cmp	r3, #64	; 0x40
 800a64a:	d007      	beq.n	800a65c <USBD_StdEPReq+0x30>
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	f200 8146 	bhi.w	800a8de <USBD_StdEPReq+0x2b2>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <USBD_StdEPReq+0x40>
 800a656:	2b20      	cmp	r3, #32
 800a658:	f040 8141 	bne.w	800a8de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
      break;
 800a66a:	e13d      	b.n	800a8e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a674:	2b20      	cmp	r3, #32
 800a676:	d10a      	bne.n	800a68e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	4798      	blx	r3
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	e12d      	b.n	800a8ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	2b03      	cmp	r3, #3
 800a694:	d007      	beq.n	800a6a6 <USBD_StdEPReq+0x7a>
 800a696:	2b03      	cmp	r3, #3
 800a698:	f300 811b 	bgt.w	800a8d2 <USBD_StdEPReq+0x2a6>
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d072      	beq.n	800a786 <USBD_StdEPReq+0x15a>
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d03a      	beq.n	800a71a <USBD_StdEPReq+0xee>
 800a6a4:	e115      	b.n	800a8d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d002      	beq.n	800a6b6 <USBD_StdEPReq+0x8a>
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d015      	beq.n	800a6e0 <USBD_StdEPReq+0xb4>
 800a6b4:	e02b      	b.n	800a70e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00c      	beq.n	800a6d6 <USBD_StdEPReq+0xaa>
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	2b80      	cmp	r3, #128	; 0x80
 800a6c0:	d009      	beq.n	800a6d6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 f89e 	bl	800b808 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6cc:	2180      	movs	r1, #128	; 0x80
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 f89a 	bl	800b808 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6d4:	e020      	b.n	800a718 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fc1e 	bl	800af1a <USBD_CtlError>
              break;
 800a6de:	e01b      	b.n	800a718 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	885b      	ldrh	r3, [r3, #2]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10e      	bne.n	800a706 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <USBD_StdEPReq+0xda>
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	2b80      	cmp	r3, #128	; 0x80
 800a6f2:	d008      	beq.n	800a706 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	88db      	ldrh	r3, [r3, #6]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d104      	bne.n	800a706 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 f881 	bl	800b808 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fccf 	bl	800b0aa <USBD_CtlSendStatus>

              break;
 800a70c:	e004      	b.n	800a718 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fc02 	bl	800af1a <USBD_CtlError>
              break;
 800a716:	bf00      	nop
          }
          break;
 800a718:	e0e0      	b.n	800a8dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a720:	2b02      	cmp	r3, #2
 800a722:	d002      	beq.n	800a72a <USBD_StdEPReq+0xfe>
 800a724:	2b03      	cmp	r3, #3
 800a726:	d015      	beq.n	800a754 <USBD_StdEPReq+0x128>
 800a728:	e026      	b.n	800a778 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00c      	beq.n	800a74a <USBD_StdEPReq+0x11e>
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b80      	cmp	r3, #128	; 0x80
 800a734:	d009      	beq.n	800a74a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a736:	7bbb      	ldrb	r3, [r7, #14]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f001 f864 	bl	800b808 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a740:	2180      	movs	r1, #128	; 0x80
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f001 f860 	bl	800b808 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a748:	e01c      	b.n	800a784 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fbe4 	bl	800af1a <USBD_CtlError>
              break;
 800a752:	e017      	b.n	800a784 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	885b      	ldrh	r3, [r3, #2]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d112      	bne.n	800a782 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a762:	2b00      	cmp	r3, #0
 800a764:	d004      	beq.n	800a770 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f001 f86b 	bl	800b846 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fc9a 	bl	800b0aa <USBD_CtlSendStatus>
              }
              break;
 800a776:	e004      	b.n	800a782 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fbcd 	bl	800af1a <USBD_CtlError>
              break;
 800a780:	e000      	b.n	800a784 <USBD_StdEPReq+0x158>
              break;
 800a782:	bf00      	nop
          }
          break;
 800a784:	e0aa      	b.n	800a8dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d002      	beq.n	800a796 <USBD_StdEPReq+0x16a>
 800a790:	2b03      	cmp	r3, #3
 800a792:	d032      	beq.n	800a7fa <USBD_StdEPReq+0x1ce>
 800a794:	e097      	b.n	800a8c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d007      	beq.n	800a7ac <USBD_StdEPReq+0x180>
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b80      	cmp	r3, #128	; 0x80
 800a7a0:	d004      	beq.n	800a7ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fbb8 	bl	800af1a <USBD_CtlError>
                break;
 800a7aa:	e091      	b.n	800a8d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	da0b      	bge.n	800a7cc <USBD_StdEPReq+0x1a0>
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	3310      	adds	r3, #16
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	e00b      	b.n	800a7e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fbfb 	bl	800afee <USBD_CtlSendData>
              break;
 800a7f8:	e06a      	b.n	800a8d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da11      	bge.n	800a826 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	3318      	adds	r3, #24
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d117      	bne.n	800a84c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fb7b 	bl	800af1a <USBD_CtlError>
                  break;
 800a824:	e054      	b.n	800a8d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	f003 020f 	and.w	r2, r3, #15
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	440b      	add	r3, r1
 800a838:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d104      	bne.n	800a84c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb68 	bl	800af1a <USBD_CtlError>
                  break;
 800a84a:	e041      	b.n	800a8d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a84c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a850:	2b00      	cmp	r3, #0
 800a852:	da0b      	bge.n	800a86c <USBD_StdEPReq+0x240>
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	3310      	adds	r3, #16
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	4413      	add	r3, r2
 800a868:	3304      	adds	r3, #4
 800a86a:	e00b      	b.n	800a884 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4413      	add	r3, r2
 800a882:	3304      	adds	r3, #4
 800a884:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <USBD_StdEPReq+0x266>
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b80      	cmp	r3, #128	; 0x80
 800a890:	d103      	bne.n	800a89a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e00e      	b.n	800a8b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fff0 	bl	800b884 <USBD_LL_IsStallEP>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e002      	b.n	800a8b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fb95 	bl	800afee <USBD_CtlSendData>
              break;
 800a8c4:	e004      	b.n	800a8d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fb26 	bl	800af1a <USBD_CtlError>
              break;
 800a8ce:	bf00      	nop
          }
          break;
 800a8d0:	e004      	b.n	800a8dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fb20 	bl	800af1a <USBD_CtlError>
          break;
 800a8da:	bf00      	nop
      }
      break;
 800a8dc:	e004      	b.n	800a8e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fb1a 	bl	800af1a <USBD_CtlError>
      break;
 800a8e6:	bf00      	nop
  }

  return ret;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8fe:	2300      	movs	r3, #0
 800a900:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	885b      	ldrh	r3, [r3, #2]
 800a90e:	0a1b      	lsrs	r3, r3, #8
 800a910:	b29b      	uxth	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	2b06      	cmp	r3, #6
 800a916:	f200 8128 	bhi.w	800ab6a <USBD_GetDescriptor+0x276>
 800a91a:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <USBD_GetDescriptor+0x2c>)
 800a91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a920:	0800a93d 	.word	0x0800a93d
 800a924:	0800a955 	.word	0x0800a955
 800a928:	0800a995 	.word	0x0800a995
 800a92c:	0800ab6b 	.word	0x0800ab6b
 800a930:	0800ab6b 	.word	0x0800ab6b
 800a934:	0800ab0b 	.word	0x0800ab0b
 800a938:	0800ab37 	.word	0x0800ab37
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	7c12      	ldrb	r2, [r2, #16]
 800a948:	f107 0108 	add.w	r1, r7, #8
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
 800a950:	60f8      	str	r0, [r7, #12]
      break;
 800a952:	e112      	b.n	800ab7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	7c1b      	ldrb	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10d      	bne.n	800a978 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	f107 0208 	add.w	r2, r7, #8
 800a968:	4610      	mov	r0, r2
 800a96a:	4798      	blx	r3
 800a96c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	2202      	movs	r2, #2
 800a974:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a976:	e100      	b.n	800ab7a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a980:	f107 0208 	add.w	r2, r7, #8
 800a984:	4610      	mov	r0, r2
 800a986:	4798      	blx	r3
 800a988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3301      	adds	r3, #1
 800a98e:	2202      	movs	r2, #2
 800a990:	701a      	strb	r2, [r3, #0]
      break;
 800a992:	e0f2      	b.n	800ab7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	885b      	ldrh	r3, [r3, #2]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b05      	cmp	r3, #5
 800a99c:	f200 80ac 	bhi.w	800aaf8 <USBD_GetDescriptor+0x204>
 800a9a0:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <USBD_GetDescriptor+0xb4>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9c1 	.word	0x0800a9c1
 800a9ac:	0800a9f5 	.word	0x0800a9f5
 800a9b0:	0800aa29 	.word	0x0800aa29
 800a9b4:	0800aa5d 	.word	0x0800aa5d
 800a9b8:	0800aa91 	.word	0x0800aa91
 800a9bc:	0800aac5 	.word	0x0800aac5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00b      	beq.n	800a9e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	7c12      	ldrb	r2, [r2, #16]
 800a9d8:	f107 0108 	add.w	r1, r7, #8
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9e2:	e091      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fa97 	bl	800af1a <USBD_CtlError>
            err++;
 800a9ec:	7afb      	ldrb	r3, [r7, #11]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9f2:	e089      	b.n	800ab08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	7c12      	ldrb	r2, [r2, #16]
 800aa0c:	f107 0108 	add.w	r1, r7, #8
 800aa10:	4610      	mov	r0, r2
 800aa12:	4798      	blx	r3
 800aa14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa16:	e077      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa7d 	bl	800af1a <USBD_CtlError>
            err++;
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	3301      	adds	r3, #1
 800aa24:	72fb      	strb	r3, [r7, #11]
          break;
 800aa26:	e06f      	b.n	800ab08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	7c12      	ldrb	r2, [r2, #16]
 800aa40:	f107 0108 	add.w	r1, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa4a:	e05d      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fa63 	bl	800af1a <USBD_CtlError>
            err++;
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	3301      	adds	r3, #1
 800aa58:	72fb      	strb	r3, [r7, #11]
          break;
 800aa5a:	e055      	b.n	800ab08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7c12      	ldrb	r2, [r2, #16]
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4798      	blx	r3
 800aa7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa7e:	e043      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa49 	bl	800af1a <USBD_CtlError>
            err++;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa8e:	e03b      	b.n	800ab08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00b      	beq.n	800aab4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	7c12      	ldrb	r2, [r2, #16]
 800aaa8:	f107 0108 	add.w	r1, r7, #8
 800aaac:	4610      	mov	r0, r2
 800aaae:	4798      	blx	r3
 800aab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aab2:	e029      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa2f 	bl	800af1a <USBD_CtlError>
            err++;
 800aabc:	7afb      	ldrb	r3, [r7, #11]
 800aabe:	3301      	adds	r3, #1
 800aac0:	72fb      	strb	r3, [r7, #11]
          break;
 800aac2:	e021      	b.n	800ab08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00b      	beq.n	800aae8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	7c12      	ldrb	r2, [r2, #16]
 800aadc:	f107 0108 	add.w	r1, r7, #8
 800aae0:	4610      	mov	r0, r2
 800aae2:	4798      	blx	r3
 800aae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aae6:	e00f      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa15 	bl	800af1a <USBD_CtlError>
            err++;
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800aaf6:	e007      	b.n	800ab08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fa0d 	bl	800af1a <USBD_CtlError>
          err++;
 800ab00:	7afb      	ldrb	r3, [r7, #11]
 800ab02:	3301      	adds	r3, #1
 800ab04:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ab06:	e038      	b.n	800ab7a <USBD_GetDescriptor+0x286>
 800ab08:	e037      	b.n	800ab7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7c1b      	ldrb	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1a:	f107 0208 	add.w	r2, r7, #8
 800ab1e:	4610      	mov	r0, r2
 800ab20:	4798      	blx	r3
 800ab22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab24:	e029      	b.n	800ab7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f9f6 	bl	800af1a <USBD_CtlError>
        err++;
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	3301      	adds	r3, #1
 800ab32:	72fb      	strb	r3, [r7, #11]
      break;
 800ab34:	e021      	b.n	800ab7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	7c1b      	ldrb	r3, [r3, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10d      	bne.n	800ab5a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	f107 0208 	add.w	r2, r7, #8
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4798      	blx	r3
 800ab4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3301      	adds	r3, #1
 800ab54:	2207      	movs	r2, #7
 800ab56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab58:	e00f      	b.n	800ab7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f9dc 	bl	800af1a <USBD_CtlError>
        err++;
 800ab62:	7afb      	ldrb	r3, [r7, #11]
 800ab64:	3301      	adds	r3, #1
 800ab66:	72fb      	strb	r3, [r7, #11]
      break;
 800ab68:	e007      	b.n	800ab7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f9d4 	bl	800af1a <USBD_CtlError>
      err++;
 800ab72:	7afb      	ldrb	r3, [r7, #11]
 800ab74:	3301      	adds	r3, #1
 800ab76:	72fb      	strb	r3, [r7, #11]
      break;
 800ab78:	bf00      	nop
  }

  if (err != 0U)
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d11c      	bne.n	800abba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab80:	893b      	ldrh	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d011      	beq.n	800abaa <USBD_GetDescriptor+0x2b6>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	88db      	ldrh	r3, [r3, #6]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00d      	beq.n	800abaa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	88da      	ldrh	r2, [r3, #6]
 800ab92:	893b      	ldrh	r3, [r7, #8]
 800ab94:	4293      	cmp	r3, r2
 800ab96:	bf28      	it	cs
 800ab98:	4613      	movcs	r3, r2
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab9e:	893b      	ldrh	r3, [r7, #8]
 800aba0:	461a      	mov	r2, r3
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fa22 	bl	800afee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	88db      	ldrh	r3, [r3, #6]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d104      	bne.n	800abbc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fa79 	bl	800b0aa <USBD_CtlSendStatus>
 800abb8:	e000      	b.n	800abbc <USBD_GetDescriptor+0x2c8>
    return;
 800abba:	bf00      	nop
    }
  }
}
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop

0800abc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	889b      	ldrh	r3, [r3, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d130      	bne.n	800ac38 <USBD_SetAddress+0x74>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	88db      	ldrh	r3, [r3, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d12c      	bne.n	800ac38 <USBD_SetAddress+0x74>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	885b      	ldrh	r3, [r3, #2]
 800abe2:	2b7f      	cmp	r3, #127	; 0x7f
 800abe4:	d828      	bhi.n	800ac38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	885b      	ldrh	r3, [r3, #2]
 800abea:	b2db      	uxtb	r3, r3
 800abec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d104      	bne.n	800ac06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f98b 	bl	800af1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac04:	e01d      	b.n	800ac42 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7bfa      	ldrb	r2, [r7, #15]
 800ac0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fe62 	bl	800b8dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fa46 	bl	800b0aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	e009      	b.n	800ac42 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac36:	e004      	b.n	800ac42 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f96d 	bl	800af1a <USBD_CtlError>
  }
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	885b      	ldrh	r3, [r3, #2]
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	4b41      	ldr	r3, [pc, #260]	; (800ad64 <USBD_SetConfig+0x118>)
 800ac5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac60:	4b40      	ldr	r3, [pc, #256]	; (800ad64 <USBD_SetConfig+0x118>)
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d904      	bls.n	800ac72 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f955 	bl	800af1a <USBD_CtlError>
 800ac70:	e075      	b.n	800ad5e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d002      	beq.n	800ac82 <USBD_SetConfig+0x36>
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d023      	beq.n	800acc8 <USBD_SetConfig+0x7c>
 800ac80:	e062      	b.n	800ad48 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ac82:	4b38      	ldr	r3, [pc, #224]	; (800ad64 <USBD_SetConfig+0x118>)
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01a      	beq.n	800acc0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac8a:	4b36      	ldr	r3, [pc, #216]	; (800ad64 <USBD_SetConfig+0x118>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2203      	movs	r2, #3
 800ac98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac9c:	4b31      	ldr	r3, [pc, #196]	; (800ad64 <USBD_SetConfig+0x118>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff f9e7 	bl	800a076 <USBD_SetClassConfig>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d104      	bne.n	800acb8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f932 	bl	800af1a <USBD_CtlError>
            return;
 800acb6:	e052      	b.n	800ad5e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f9f6 	bl	800b0aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acbe:	e04e      	b.n	800ad5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 f9f2 	bl	800b0aa <USBD_CtlSendStatus>
        break;
 800acc6:	e04a      	b.n	800ad5e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800acc8:	4b26      	ldr	r3, [pc, #152]	; (800ad64 <USBD_SetConfig+0x118>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d112      	bne.n	800acf6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800acd8:	4b22      	ldr	r3, [pc, #136]	; (800ad64 <USBD_SetConfig+0x118>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ace2:	4b20      	ldr	r3, [pc, #128]	; (800ad64 <USBD_SetConfig+0x118>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff f9e3 	bl	800a0b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9db 	bl	800b0aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acf4:	e033      	b.n	800ad5e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800acf6:	4b1b      	ldr	r3, [pc, #108]	; (800ad64 <USBD_SetConfig+0x118>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d01d      	beq.n	800ad40 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff f9d1 	bl	800a0b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ad12:	4b14      	ldr	r3, [pc, #80]	; (800ad64 <USBD_SetConfig+0x118>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad1c:	4b11      	ldr	r3, [pc, #68]	; (800ad64 <USBD_SetConfig+0x118>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff f9a7 	bl	800a076 <USBD_SetClassConfig>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d104      	bne.n	800ad38 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f8f2 	bl	800af1a <USBD_CtlError>
            return;
 800ad36:	e012      	b.n	800ad5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f9b6 	bl	800b0aa <USBD_CtlSendStatus>
        break;
 800ad3e:	e00e      	b.n	800ad5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f9b2 	bl	800b0aa <USBD_CtlSendStatus>
        break;
 800ad46:	e00a      	b.n	800ad5e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f8e5 	bl	800af1a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <USBD_SetConfig+0x118>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff f9ac 	bl	800a0b4 <USBD_ClrClassConfig>
        break;
 800ad5c:	bf00      	nop
    }
  }
}
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20000199 	.word	0x20000199

0800ad68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	88db      	ldrh	r3, [r3, #6]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d004      	beq.n	800ad84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8cc 	bl	800af1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad82:	e022      	b.n	800adca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	dc02      	bgt.n	800ad94 <USBD_GetConfig+0x2c>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dc03      	bgt.n	800ad9a <USBD_GetConfig+0x32>
 800ad92:	e015      	b.n	800adc0 <USBD_GetConfig+0x58>
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d00b      	beq.n	800adb0 <USBD_GetConfig+0x48>
 800ad98:	e012      	b.n	800adc0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3308      	adds	r3, #8
 800ada4:	2201      	movs	r2, #1
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f920 	bl	800afee <USBD_CtlSendData>
        break;
 800adae:	e00c      	b.n	800adca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3304      	adds	r3, #4
 800adb4:	2201      	movs	r2, #1
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f918 	bl	800afee <USBD_CtlSendData>
        break;
 800adbe:	e004      	b.n	800adca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f8a9 	bl	800af1a <USBD_CtlError>
        break;
 800adc8:	bf00      	nop
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade2:	3b01      	subs	r3, #1
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d81e      	bhi.n	800ae26 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	88db      	ldrh	r3, [r3, #6]
 800adec:	2b02      	cmp	r3, #2
 800adee:	d004      	beq.n	800adfa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f891 	bl	800af1a <USBD_CtlError>
        break;
 800adf8:	e01a      	b.n	800ae30 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f043 0202 	orr.w	r2, r3, #2
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	330c      	adds	r3, #12
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 f8e5 	bl	800afee <USBD_CtlSendData>
      break;
 800ae24:	e004      	b.n	800ae30 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f876 	bl	800af1a <USBD_CtlError>
      break;
 800ae2e:	bf00      	nop
  }
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	885b      	ldrh	r3, [r3, #2]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d106      	bne.n	800ae58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f929 	bl	800b0aa <USBD_CtlSendStatus>
  }
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae70:	3b01      	subs	r3, #1
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d80b      	bhi.n	800ae8e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	885b      	ldrh	r3, [r3, #2]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d10c      	bne.n	800ae98 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f90f 	bl	800b0aa <USBD_CtlSendStatus>
      }
      break;
 800ae8c:	e004      	b.n	800ae98 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f842 	bl	800af1a <USBD_CtlError>
      break;
 800ae96:	e000      	b.n	800ae9a <USBD_ClrFeature+0x3a>
      break;
 800ae98:	bf00      	nop
  }
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	781a      	ldrb	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	785a      	ldrb	r2, [r3, #1]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	3302      	adds	r3, #2
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	3303      	adds	r3, #3
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	b29b      	uxth	r3, r3
 800aed0:	4413      	add	r3, r2
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	3304      	adds	r3, #4
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	b29a      	uxth	r2, r3
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	3305      	adds	r3, #5
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	3306      	adds	r3, #6
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	3307      	adds	r3, #7
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	b29b      	uxth	r3, r3
 800af04:	021b      	lsls	r3, r3, #8
 800af06:	b29b      	uxth	r3, r3
 800af08:	4413      	add	r3, r2
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	80da      	strh	r2, [r3, #6]

}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	bc80      	pop	{r7}
 800af18:	4770      	bx	lr

0800af1a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800af24:	2180      	movs	r1, #128	; 0x80
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fc6e 	bl	800b808 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800af2c:	2100      	movs	r1, #0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fc6a 	bl	800b808 <USBD_LL_StallEP>
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d032      	beq.n	800afb8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 f834 	bl	800afc0 <USBD_GetLen>
 800af58:	4603      	mov	r3, r0
 800af5a:	3301      	adds	r3, #1
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	b29a      	uxth	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	75fa      	strb	r2, [r7, #23]
 800af6c:	461a      	mov	r2, r3
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	4413      	add	r3, r2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	7812      	ldrb	r2, [r2, #0]
 800af76:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	75fa      	strb	r2, [r7, #23]
 800af7e:	461a      	mov	r2, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	4413      	add	r3, r2
 800af84:	2203      	movs	r2, #3
 800af86:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af88:	e012      	b.n	800afb0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	60fa      	str	r2, [r7, #12]
 800af90:	7dfa      	ldrb	r2, [r7, #23]
 800af92:	1c51      	adds	r1, r2, #1
 800af94:	75f9      	strb	r1, [r7, #23]
 800af96:	4611      	mov	r1, r2
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	440a      	add	r2, r1
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	75fa      	strb	r2, [r7, #23]
 800afa6:	461a      	mov	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4413      	add	r3, r2
 800afac:	2200      	movs	r2, #0
 800afae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e8      	bne.n	800af8a <USBD_GetString+0x4e>
    }
  }
}
 800afb8:	bf00      	nop
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800afcc:	e005      	b.n	800afda <USBD_GetLen+0x1a>
  {
    len++;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	3301      	adds	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3301      	adds	r3, #1
 800afd8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f5      	bne.n	800afce <USBD_GetLen+0xe>
  }

  return len;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr

0800afee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	4613      	mov	r3, r2
 800affa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2202      	movs	r2, #2
 800b000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b004:	88fa      	ldrh	r2, [r7, #6]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b00a:	88fa      	ldrh	r2, [r7, #6]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b010:	88fb      	ldrh	r3, [r7, #6]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	2100      	movs	r1, #0
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 fc7f 	bl	800b91a <USBD_LL_Transmit>

  return USBD_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	4613      	mov	r3, r2
 800b032:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b034:	88fb      	ldrh	r3, [r7, #6]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	2100      	movs	r1, #0
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f000 fc6d 	bl	800b91a <USBD_LL_Transmit>

  return USBD_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	60f8      	str	r0, [r7, #12]
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	4613      	mov	r3, r2
 800b056:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2203      	movs	r2, #3
 800b05c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b060:	88fa      	ldrh	r2, [r7, #6]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b068:	88fa      	ldrh	r2, [r7, #6]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b070:	88fb      	ldrh	r3, [r7, #6]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	2100      	movs	r1, #0
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 fc72 	bl	800b960 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	4613      	mov	r3, r2
 800b092:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b094:	88fb      	ldrh	r3, [r7, #6]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	2100      	movs	r1, #0
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 fc60 	bl	800b960 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2204      	movs	r2, #4
 800b0b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fc2a 	bl	800b91a <USBD_LL_Transmit>

  return USBD_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2205      	movs	r2, #5
 800b0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fc3a 	bl	800b960 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	4912      	ldr	r1, [pc, #72]	; (800b148 <MX_USB_DEVICE_Init+0x50>)
 800b100:	4812      	ldr	r0, [pc, #72]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b102:	f7fe ff5e 	bl	8009fc2 <USBD_Init>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b10c:	f7f6 fefe 	bl	8001f0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b110:	490f      	ldr	r1, [pc, #60]	; (800b150 <MX_USB_DEVICE_Init+0x58>)
 800b112:	480e      	ldr	r0, [pc, #56]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b114:	f7fe ff80 	bl	800a018 <USBD_RegisterClass>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b11e:	f7f6 fef5 	bl	8001f0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b122:	490c      	ldr	r1, [pc, #48]	; (800b154 <MX_USB_DEVICE_Init+0x5c>)
 800b124:	4809      	ldr	r0, [pc, #36]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b126:	f7fe feb1 	bl	8009e8c <USBD_CDC_RegisterInterface>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b130:	f7f6 feec 	bl	8001f0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b134:	4805      	ldr	r0, [pc, #20]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b136:	f7fe ff88 	bl	800a04a <USBD_Start>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b140:	f7f6 fee4 	bl	8001f0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b144:	bf00      	nop
 800b146:	bd80      	pop	{r7, pc}
 800b148:	2000012c 	.word	0x2000012c
 800b14c:	20000c38 	.word	0x20000c38
 800b150:	20000018 	.word	0x20000018
 800b154:	2000011c 	.word	0x2000011c

0800b158 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b15c:	2200      	movs	r2, #0
 800b15e:	4905      	ldr	r1, [pc, #20]	; (800b174 <CDC_Init_FS+0x1c>)
 800b160:	4805      	ldr	r0, [pc, #20]	; (800b178 <CDC_Init_FS+0x20>)
 800b162:	f7fe fea9 	bl	8009eb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b166:	4905      	ldr	r1, [pc, #20]	; (800b17c <CDC_Init_FS+0x24>)
 800b168:	4803      	ldr	r0, [pc, #12]	; (800b178 <CDC_Init_FS+0x20>)
 800b16a:	f7fe febe 	bl	8009eea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b16e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b170:	4618      	mov	r0, r3
 800b172:	bd80      	pop	{r7, pc}
 800b174:	200010fc 	.word	0x200010fc
 800b178:	20000c38 	.word	0x20000c38
 800b17c:	20000efc 	.word	0x20000efc

0800b180 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b184:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b186:	4618      	mov	r0, r3
 800b188:	46bd      	mov	sp, r7
 800b18a:	bc80      	pop	{r7}
 800b18c:	4770      	bx	lr
	...

0800b190 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	6039      	str	r1, [r7, #0]
 800b19a:	71fb      	strb	r3, [r7, #7]
 800b19c:	4613      	mov	r3, r2
 800b19e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1a0:	79fb      	ldrb	r3, [r7, #7]
 800b1a2:	2b23      	cmp	r3, #35	; 0x23
 800b1a4:	d84a      	bhi.n	800b23c <CDC_Control_FS+0xac>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <CDC_Control_FS+0x1c>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b23d 	.word	0x0800b23d
 800b1b0:	0800b23d 	.word	0x0800b23d
 800b1b4:	0800b23d 	.word	0x0800b23d
 800b1b8:	0800b23d 	.word	0x0800b23d
 800b1bc:	0800b23d 	.word	0x0800b23d
 800b1c0:	0800b23d 	.word	0x0800b23d
 800b1c4:	0800b23d 	.word	0x0800b23d
 800b1c8:	0800b23d 	.word	0x0800b23d
 800b1cc:	0800b23d 	.word	0x0800b23d
 800b1d0:	0800b23d 	.word	0x0800b23d
 800b1d4:	0800b23d 	.word	0x0800b23d
 800b1d8:	0800b23d 	.word	0x0800b23d
 800b1dc:	0800b23d 	.word	0x0800b23d
 800b1e0:	0800b23d 	.word	0x0800b23d
 800b1e4:	0800b23d 	.word	0x0800b23d
 800b1e8:	0800b23d 	.word	0x0800b23d
 800b1ec:	0800b23d 	.word	0x0800b23d
 800b1f0:	0800b23d 	.word	0x0800b23d
 800b1f4:	0800b23d 	.word	0x0800b23d
 800b1f8:	0800b23d 	.word	0x0800b23d
 800b1fc:	0800b23d 	.word	0x0800b23d
 800b200:	0800b23d 	.word	0x0800b23d
 800b204:	0800b23d 	.word	0x0800b23d
 800b208:	0800b23d 	.word	0x0800b23d
 800b20c:	0800b23d 	.word	0x0800b23d
 800b210:	0800b23d 	.word	0x0800b23d
 800b214:	0800b23d 	.word	0x0800b23d
 800b218:	0800b23d 	.word	0x0800b23d
 800b21c:	0800b23d 	.word	0x0800b23d
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b23d 	.word	0x0800b23d
 800b228:	0800b23d 	.word	0x0800b23d
 800b22c:	0800b23d 	.word	0x0800b23d
 800b230:	0800b23d 	.word	0x0800b23d
 800b234:	0800b23d 	.word	0x0800b23d
 800b238:	0800b23d 	.word	0x0800b23d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b23c:	bf00      	nop
  }

  return (USBD_OK);
 800b23e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	bc80      	pop	{r7}
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop

0800b24c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
	if(myOnUSBData != NULL){
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <CDC_Receive_FS+0x38>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d006      	beq.n	800b26c <CDC_Receive_FS+0x20>
	  		myOnUSBData(Buf, *Len);
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <CDC_Receive_FS+0x38>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	6812      	ldr	r2, [r2, #0]
 800b266:	4611      	mov	r1, r2
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4806      	ldr	r0, [pc, #24]	; (800b288 <CDC_Receive_FS+0x3c>)
 800b270:	f7fe fe3b 	bl	8009eea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b274:	4804      	ldr	r0, [pc, #16]	; (800b288 <CDC_Receive_FS+0x3c>)
 800b276:	f7fe fe7a 	bl	8009f6e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b27a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	2000019c 	.word	0x2000019c
 800b288:	20000c38 	.word	0x20000c38

0800b28c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b29c:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <CDC_Transmit_FS+0x48>)
 800b29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e00b      	b.n	800b2ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2b2:	887b      	ldrh	r3, [r7, #2]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	4806      	ldr	r0, [pc, #24]	; (800b2d4 <CDC_Transmit_FS+0x48>)
 800b2ba:	f7fe fdfd 	bl	8009eb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2be:	4805      	ldr	r0, [pc, #20]	; (800b2d4 <CDC_Transmit_FS+0x48>)
 800b2c0:	f7fe fe26 	bl	8009f10 <USBD_CDC_TransmitPacket>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	20000c38 	.word	0x20000c38

0800b2d8 <CDC_AttachOnUSBData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachOnUSBData(OnUSBData aOnUSBData){
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
	myOnUSBData = aOnUSBData;
 800b2e0:	4a03      	ldr	r2, [pc, #12]	; (800b2f0 <CDC_AttachOnUSBData+0x18>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6013      	str	r3, [r2, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr
 800b2f0:	2000019c 	.word	0x2000019c

0800b2f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	6039      	str	r1, [r7, #0]
 800b2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	2212      	movs	r2, #18
 800b304:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b306:	4b03      	ldr	r3, [pc, #12]	; (800b314 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	20000148 	.word	0x20000148

0800b318 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	6039      	str	r1, [r7, #0]
 800b322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2204      	movs	r2, #4
 800b328:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b32a:	4b03      	ldr	r3, [pc, #12]	; (800b338 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	bc80      	pop	{r7}
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	2000015c 	.word	0x2000015c

0800b33c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	6039      	str	r1, [r7, #0]
 800b346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d105      	bne.n	800b35a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	4907      	ldr	r1, [pc, #28]	; (800b370 <USBD_FS_ProductStrDescriptor+0x34>)
 800b352:	4808      	ldr	r0, [pc, #32]	; (800b374 <USBD_FS_ProductStrDescriptor+0x38>)
 800b354:	f7ff fdf2 	bl	800af3c <USBD_GetString>
 800b358:	e004      	b.n	800b364 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	4904      	ldr	r1, [pc, #16]	; (800b370 <USBD_FS_ProductStrDescriptor+0x34>)
 800b35e:	4805      	ldr	r0, [pc, #20]	; (800b374 <USBD_FS_ProductStrDescriptor+0x38>)
 800b360:	f7ff fdec 	bl	800af3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b364:	4b02      	ldr	r3, [pc, #8]	; (800b370 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	200012fc 	.word	0x200012fc
 800b374:	0800bae4 	.word	0x0800bae4

0800b378 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4603      	mov	r3, r0
 800b380:	6039      	str	r1, [r7, #0]
 800b382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	4904      	ldr	r1, [pc, #16]	; (800b398 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b388:	4804      	ldr	r0, [pc, #16]	; (800b39c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b38a:	f7ff fdd7 	bl	800af3c <USBD_GetString>
  return USBD_StrDesc;
 800b38e:	4b02      	ldr	r3, [pc, #8]	; (800b398 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	200012fc 	.word	0x200012fc
 800b39c:	0800bafc 	.word	0x0800bafc

0800b3a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	221a      	movs	r2, #26
 800b3b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3b2:	f000 f843 	bl	800b43c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3b6:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20000160 	.word	0x20000160

0800b3c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	6039      	str	r1, [r7, #0]
 800b3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d105      	bne.n	800b3e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4907      	ldr	r1, [pc, #28]	; (800b3f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3da:	4808      	ldr	r0, [pc, #32]	; (800b3fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3dc:	f7ff fdae 	bl	800af3c <USBD_GetString>
 800b3e0:	e004      	b.n	800b3ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4904      	ldr	r1, [pc, #16]	; (800b3f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3e6:	4805      	ldr	r0, [pc, #20]	; (800b3fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3e8:	f7ff fda8 	bl	800af3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3ec:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	200012fc 	.word	0x200012fc
 800b3fc:	0800bb10 	.word	0x0800bb10

0800b400 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d105      	bne.n	800b41e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	4907      	ldr	r1, [pc, #28]	; (800b434 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b416:	4808      	ldr	r0, [pc, #32]	; (800b438 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b418:	f7ff fd90 	bl	800af3c <USBD_GetString>
 800b41c:	e004      	b.n	800b428 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	4904      	ldr	r1, [pc, #16]	; (800b434 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b422:	4805      	ldr	r0, [pc, #20]	; (800b438 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b424:	f7ff fd8a 	bl	800af3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b428:	4b02      	ldr	r3, [pc, #8]	; (800b434 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	200012fc 	.word	0x200012fc
 800b438:	0800bb1c 	.word	0x0800bb1c

0800b43c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <Get_SerialNum+0x44>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b448:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <Get_SerialNum+0x48>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b44e:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <Get_SerialNum+0x4c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4413      	add	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b462:	2208      	movs	r2, #8
 800b464:	4909      	ldr	r1, [pc, #36]	; (800b48c <Get_SerialNum+0x50>)
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f814 	bl	800b494 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b46c:	2204      	movs	r2, #4
 800b46e:	4908      	ldr	r1, [pc, #32]	; (800b490 <Get_SerialNum+0x54>)
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f000 f80f 	bl	800b494 <IntToUnicode>
  }
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	1ffff7e8 	.word	0x1ffff7e8
 800b484:	1ffff7ec 	.word	0x1ffff7ec
 800b488:	1ffff7f0 	.word	0x1ffff7f0
 800b48c:	20000162 	.word	0x20000162
 800b490:	20000172 	.word	0x20000172

0800b494 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	75fb      	strb	r3, [r7, #23]
 800b4aa:	e027      	b.n	800b4fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	0f1b      	lsrs	r3, r3, #28
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d80b      	bhi.n	800b4cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	0f1b      	lsrs	r3, r3, #28
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4619      	mov	r1, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	440b      	add	r3, r1
 800b4c4:	3230      	adds	r2, #48	; 0x30
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	e00a      	b.n	800b4e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	0f1b      	lsrs	r3, r3, #28
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	440b      	add	r3, r1
 800b4dc:	3237      	adds	r2, #55	; 0x37
 800b4de:	b2d2      	uxtb	r2, r2
 800b4e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	75fb      	strb	r3, [r7, #23]
 800b4fc:	7dfa      	ldrb	r2, [r7, #23]
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
 800b500:	429a      	cmp	r2, r3
 800b502:	d3d3      	bcc.n	800b4ac <IntToUnicode+0x18>
  }
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	371c      	adds	r7, #28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a0d      	ldr	r2, [pc, #52]	; (800b554 <HAL_PCD_MspInit+0x44>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d113      	bne.n	800b54a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b522:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <HAL_PCD_MspInit+0x48>)
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	4a0c      	ldr	r2, [pc, #48]	; (800b558 <HAL_PCD_MspInit+0x48>)
 800b528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b52c:	61d3      	str	r3, [r2, #28]
 800b52e:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <HAL_PCD_MspInit+0x48>)
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b536:	60fb      	str	r3, [r7, #12]
 800b538:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b53a:	2200      	movs	r2, #0
 800b53c:	2100      	movs	r1, #0
 800b53e:	2014      	movs	r0, #20
 800b540:	f7f7 fc33 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b544:	2014      	movs	r0, #20
 800b546:	f7f7 fc4c 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b54a:	bf00      	nop
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	40005c00 	.word	0x40005c00
 800b558:	40021000 	.word	0x40021000

0800b55c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b570:	4619      	mov	r1, r3
 800b572:	4610      	mov	r0, r2
 800b574:	f7fe fdb1 	bl	800a0da <USBD_LL_SetupStage>
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b592:	78fa      	ldrb	r2, [r7, #3]
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	440b      	add	r3, r1
 800b5a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f7fe fde3 	bl	800a174 <USBD_LL_DataOutStage>
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b5c8:	78fa      	ldrb	r2, [r7, #3]
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	440b      	add	r3, r1
 800b5d6:	333c      	adds	r3, #60	; 0x3c
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f7fe fe3a 	bl	800a256 <USBD_LL_DataInStage>
}
 800b5e2:	bf00      	nop
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe ff4a 	bl	800a492 <USBD_LL_SOF>
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b60e:	2301      	movs	r3, #1
 800b610:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d001      	beq.n	800b61e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b61a:	f7f6 fc77 	bl	8001f0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b624:	7bfa      	ldrb	r2, [r7, #15]
 800b626:	4611      	mov	r1, r2
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe fefa 	bl	800a422 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b634:	4618      	mov	r0, r3
 800b636:	f7fe feb3 	bl	800a3a0 <USBD_LL_Reset>
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fef4 	bl	800a440 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d005      	beq.n	800b66c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b660:	4b04      	ldr	r3, [pc, #16]	; (800b674 <HAL_PCD_SuspendCallback+0x30>)
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	4a03      	ldr	r2, [pc, #12]	; (800b674 <HAL_PCD_SuspendCallback+0x30>)
 800b666:	f043 0306 	orr.w	r3, r3, #6
 800b66a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	e000ed00 	.word	0xe000ed00

0800b678 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b686:	4618      	mov	r0, r3
 800b688:	f7fe feee 	bl	800a468 <USBD_LL_Resume>
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b69c:	4a28      	ldr	r2, [pc, #160]	; (800b740 <USBD_LL_Init+0xac>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a26      	ldr	r2, [pc, #152]	; (800b740 <USBD_LL_Init+0xac>)
 800b6a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b6ac:	4b24      	ldr	r3, [pc, #144]	; (800b740 <USBD_LL_Init+0xac>)
 800b6ae:	4a25      	ldr	r2, [pc, #148]	; (800b744 <USBD_LL_Init+0xb0>)
 800b6b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b6b2:	4b23      	ldr	r3, [pc, #140]	; (800b740 <USBD_LL_Init+0xac>)
 800b6b4:	2208      	movs	r2, #8
 800b6b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b6b8:	4b21      	ldr	r3, [pc, #132]	; (800b740 <USBD_LL_Init+0xac>)
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b6be:	4b20      	ldr	r3, [pc, #128]	; (800b740 <USBD_LL_Init+0xac>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b6c4:	4b1e      	ldr	r3, [pc, #120]	; (800b740 <USBD_LL_Init+0xac>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b6ca:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <USBD_LL_Init+0xac>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b6d0:	481b      	ldr	r0, [pc, #108]	; (800b740 <USBD_LL_Init+0xac>)
 800b6d2:	f7f8 f939 	bl	8003948 <HAL_PCD_Init>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b6dc:	f7f6 fc16 	bl	8001f0c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6e6:	2318      	movs	r3, #24
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	f7f9 fdaf 	bl	800524e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6f6:	2358      	movs	r3, #88	; 0x58
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2180      	movs	r1, #128	; 0x80
 800b6fc:	f7f9 fda7 	bl	800524e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b706:	23c0      	movs	r3, #192	; 0xc0
 800b708:	2200      	movs	r2, #0
 800b70a:	2181      	movs	r1, #129	; 0x81
 800b70c:	f7f9 fd9f 	bl	800524e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b716:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b71a:	2200      	movs	r2, #0
 800b71c:	2101      	movs	r1, #1
 800b71e:	f7f9 fd96 	bl	800524e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b72c:	2200      	movs	r2, #0
 800b72e:	2182      	movs	r1, #130	; 0x82
 800b730:	f7f9 fd8d 	bl	800524e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	200014fc 	.word	0x200014fc
 800b744:	40005c00 	.word	0x40005c00

0800b748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f8 f9fd 	bl	8003b5e <HAL_PCD_Start>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f94e 	bl	800ba0c <USBD_Get_USB_Status>
 800b770:	4603      	mov	r3, r0
 800b772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b774:	7bbb      	ldrb	r3, [r7, #14]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	4608      	mov	r0, r1
 800b788:	4611      	mov	r1, r2
 800b78a:	461a      	mov	r2, r3
 800b78c:	4603      	mov	r3, r0
 800b78e:	70fb      	strb	r3, [r7, #3]
 800b790:	460b      	mov	r3, r1
 800b792:	70bb      	strb	r3, [r7, #2]
 800b794:	4613      	mov	r3, r2
 800b796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7a6:	78bb      	ldrb	r3, [r7, #2]
 800b7a8:	883a      	ldrh	r2, [r7, #0]
 800b7aa:	78f9      	ldrb	r1, [r7, #3]
 800b7ac:	f7f8 fb77 	bl	8003e9e <HAL_PCD_EP_Open>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 f928 	bl	800ba0c <USBD_Get_USB_Status>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b084      	sub	sp, #16
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7e4:	78fa      	ldrb	r2, [r7, #3]
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f8 fbbe 	bl	8003f6a <HAL_PCD_EP_Close>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 f909 	bl	800ba0c <USBD_Get_USB_Status>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b822:	78fa      	ldrb	r2, [r7, #3]
 800b824:	4611      	mov	r1, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7f8 fc7e 	bl	8004128 <HAL_PCD_EP_SetStall>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f8ea 	bl	800ba0c <USBD_Get_USB_Status>
 800b838:	4603      	mov	r3, r0
 800b83a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b83c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	460b      	mov	r3, r1
 800b850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b860:	78fa      	ldrb	r2, [r7, #3]
 800b862:	4611      	mov	r1, r2
 800b864:	4618      	mov	r0, r3
 800b866:	f7f8 fcbf 	bl	80041e8 <HAL_PCD_EP_ClrStall>
 800b86a:	4603      	mov	r3, r0
 800b86c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
 800b870:	4618      	mov	r0, r3
 800b872:	f000 f8cb 	bl	800ba0c <USBD_Get_USB_Status>
 800b876:	4603      	mov	r3, r0
 800b878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	da0c      	bge.n	800b8ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a6:	68f9      	ldr	r1, [r7, #12]
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	440b      	add	r3, r1
 800b8b4:	3302      	adds	r3, #2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	e00b      	b.n	800b8d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8c0:	68f9      	ldr	r1, [r7, #12]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	440b      	add	r3, r1
 800b8cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b8d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bc80      	pop	{r7}
 800b8da:	4770      	bx	lr

0800b8dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8f6:	78fa      	ldrb	r2, [r7, #3]
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f8 faaa 	bl	8003e54 <HAL_PCD_SetAddress>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f880 	bl	800ba0c <USBD_Get_USB_Status>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b910:	7bbb      	ldrb	r3, [r7, #14]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b086      	sub	sp, #24
 800b91e:	af00      	add	r7, sp, #0
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	461a      	mov	r2, r3
 800b926:	460b      	mov	r3, r1
 800b928:	72fb      	strb	r3, [r7, #11]
 800b92a:	4613      	mov	r3, r2
 800b92c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b93c:	893b      	ldrh	r3, [r7, #8]
 800b93e:	7af9      	ldrb	r1, [r7, #11]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	f7f8 fbae 	bl	80040a2 <HAL_PCD_EP_Transmit>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 f85d 	bl	800ba0c <USBD_Get_USB_Status>
 800b952:	4603      	mov	r3, r0
 800b954:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b956:	7dbb      	ldrb	r3, [r7, #22]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	461a      	mov	r2, r3
 800b96c:	460b      	mov	r3, r1
 800b96e:	72fb      	strb	r3, [r7, #11]
 800b970:	4613      	mov	r3, r2
 800b972:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b982:	893b      	ldrh	r3, [r7, #8]
 800b984:	7af9      	ldrb	r1, [r7, #11]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	f7f8 fb37 	bl	8003ffa <HAL_PCD_EP_Receive>
 800b98c:	4603      	mov	r3, r0
 800b98e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b990:	7dfb      	ldrb	r3, [r7, #23]
 800b992:	4618      	mov	r0, r3
 800b994:	f000 f83a 	bl	800ba0c <USBD_Get_USB_Status>
 800b998:	4603      	mov	r3, r0
 800b99a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b99c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9b8:	78fa      	ldrb	r2, [r7, #3]
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7f8 fb59 	bl	8004074 <HAL_PCD_EP_GetRxCount>
 800b9c2:	4603      	mov	r3, r0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9d4:	4b02      	ldr	r3, [pc, #8]	; (800b9e0 <USBD_static_malloc+0x14>)
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bc80      	pop	{r7}
 800b9de:	4770      	bx	lr
 800b9e0:	200001a0 	.word	0x200001a0

0800b9e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]

}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr

0800b9f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b083      	sub	sp, #12
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ba02:	bf00      	nop
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bc80      	pop	{r7}
 800ba0a:	4770      	bx	lr

0800ba0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d817      	bhi.n	800ba50 <USBD_Get_USB_Status+0x44>
 800ba20:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <USBD_Get_USB_Status+0x1c>)
 800ba22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba26:	bf00      	nop
 800ba28:	0800ba39 	.word	0x0800ba39
 800ba2c:	0800ba3f 	.word	0x0800ba3f
 800ba30:	0800ba45 	.word	0x0800ba45
 800ba34:	0800ba4b 	.word	0x0800ba4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3c:	e00b      	b.n	800ba56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	73fb      	strb	r3, [r7, #15]
    break;
 800ba42:	e008      	b.n	800ba56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba44:	2301      	movs	r3, #1
 800ba46:	73fb      	strb	r3, [r7, #15]
    break;
 800ba48:	e005      	b.n	800ba56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4e:	e002      	b.n	800ba56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba50:	2302      	movs	r3, #2
 800ba52:	73fb      	strb	r3, [r7, #15]
    break;
 800ba54:	bf00      	nop
  }
  return usb_status;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc80      	pop	{r7}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <__libc_init_array>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	2600      	movs	r6, #0
 800ba68:	4d0c      	ldr	r5, [pc, #48]	; (800ba9c <__libc_init_array+0x38>)
 800ba6a:	4c0d      	ldr	r4, [pc, #52]	; (800baa0 <__libc_init_array+0x3c>)
 800ba6c:	1b64      	subs	r4, r4, r5
 800ba6e:	10a4      	asrs	r4, r4, #2
 800ba70:	42a6      	cmp	r6, r4
 800ba72:	d109      	bne.n	800ba88 <__libc_init_array+0x24>
 800ba74:	f000 f822 	bl	800babc <_init>
 800ba78:	2600      	movs	r6, #0
 800ba7a:	4d0a      	ldr	r5, [pc, #40]	; (800baa4 <__libc_init_array+0x40>)
 800ba7c:	4c0a      	ldr	r4, [pc, #40]	; (800baa8 <__libc_init_array+0x44>)
 800ba7e:	1b64      	subs	r4, r4, r5
 800ba80:	10a4      	asrs	r4, r4, #2
 800ba82:	42a6      	cmp	r6, r4
 800ba84:	d105      	bne.n	800ba92 <__libc_init_array+0x2e>
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8c:	4798      	blx	r3
 800ba8e:	3601      	adds	r6, #1
 800ba90:	e7ee      	b.n	800ba70 <__libc_init_array+0xc>
 800ba92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba96:	4798      	blx	r3
 800ba98:	3601      	adds	r6, #1
 800ba9a:	e7f2      	b.n	800ba82 <__libc_init_array+0x1e>
 800ba9c:	0800bd28 	.word	0x0800bd28
 800baa0:	0800bd28 	.word	0x0800bd28
 800baa4:	0800bd28 	.word	0x0800bd28
 800baa8:	0800bd2c 	.word	0x0800bd2c

0800baac <memset>:
 800baac:	4603      	mov	r3, r0
 800baae:	4402      	add	r2, r0
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d100      	bne.n	800bab6 <memset+0xa>
 800bab4:	4770      	bx	lr
 800bab6:	f803 1b01 	strb.w	r1, [r3], #1
 800baba:	e7f9      	b.n	800bab0 <memset+0x4>

0800babc <_init>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	bf00      	nop
 800bac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac2:	bc08      	pop	{r3}
 800bac4:	469e      	mov	lr, r3
 800bac6:	4770      	bx	lr

0800bac8 <_fini>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	bf00      	nop
 800bacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bace:	bc08      	pop	{r3}
 800bad0:	469e      	mov	lr, r3
 800bad2:	4770      	bx	lr
